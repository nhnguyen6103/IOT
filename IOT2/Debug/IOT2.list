
IOT2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c64  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d0  08008df8  08008df8  00009df8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091c8  080091c8  0000b1d8  2**0
                  CONTENTS
  4 .ARM          00000008  080091c8  080091c8  0000a1c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080091d0  080091d0  0000b1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080091d0  080091d0  0000a1d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080091d4  080091d4  0000a1d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  080091d8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b1d8  2**0
                  CONTENTS
 10 .bss          000043c4  200001d8  200001d8  0000b1d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000459c  2000459c  0000b1d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b1d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016664  00000000  00000000  0000b208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003466  00000000  00000000  0002186c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001588  00000000  00000000  00024cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010bc  00000000  00000000  00026260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002261e  00000000  00000000  0002731c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001942c  00000000  00000000  0004993a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d98a3  00000000  00000000  00062d66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013c609  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006ac4  00000000  00000000  0013c64c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000040  00000000  00000000  00143110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008ddc 	.word	0x08008ddc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	08008ddc 	.word	0x08008ddc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	4a07      	ldr	r2, [pc, #28]	@ (8000f64 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f48:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	4a06      	ldr	r2, [pc, #24]	@ (8000f68 <vApplicationGetIdleTaskMemory+0x30>)
 8000f4e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2280      	movs	r2, #128	@ 0x80
 8000f54:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f56:	bf00      	nop
 8000f58:	3714      	adds	r7, #20
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	200001f4 	.word	0x200001f4
 8000f68:	20000294 	.word	0x20000294
 8000f6c:	00000000 	.word	0x00000000

08000f70 <GetTemperature>:
void StartTask01(void const * argument);
void StartTask02(void const * argument);
void StartTask03(void const * argument);

/* USER CODE BEGIN PFP */
float GetTemperature(void) {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
    uint16_t value;
    float temperature;

    HAL_ADC_Start(&hadc1);
 8000f76:	4824      	ldr	r0, [pc, #144]	@ (8001008 <GetTemperature+0x98>)
 8000f78:	f000 fea0 	bl	8001cbc <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 8000f7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f80:	4821      	ldr	r0, [pc, #132]	@ (8001008 <GetTemperature+0x98>)
 8000f82:	f000 ffa0 	bl	8001ec6 <HAL_ADC_PollForConversion>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d12c      	bne.n	8000fe6 <GetTemperature+0x76>
        value = HAL_ADC_GetValue(&hadc1);
 8000f8c:	481e      	ldr	r0, [pc, #120]	@ (8001008 <GetTemperature+0x98>)
 8000f8e:	f001 f825 	bl	8001fdc <HAL_ADC_GetValue>
 8000f92:	4603      	mov	r3, r0
 8000f94:	807b      	strh	r3, [r7, #2]
        temperature = ((float)value / 4096.0) * 3.3 * 100.0;
 8000f96:	887b      	ldrh	r3, [r7, #2]
 8000f98:	ee07 3a90 	vmov	s15, r3
 8000f9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fa0:	ee17 0a90 	vmov	r0, s15
 8000fa4:	f7ff fad0 	bl	8000548 <__aeabi_f2d>
 8000fa8:	f04f 0200 	mov.w	r2, #0
 8000fac:	4b17      	ldr	r3, [pc, #92]	@ (800100c <GetTemperature+0x9c>)
 8000fae:	f7ff fc4d 	bl	800084c <__aeabi_ddiv>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	4610      	mov	r0, r2
 8000fb8:	4619      	mov	r1, r3
 8000fba:	a311      	add	r3, pc, #68	@ (adr r3, 8001000 <GetTemperature+0x90>)
 8000fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc0:	f7ff fb1a 	bl	80005f8 <__aeabi_dmul>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	4610      	mov	r0, r2
 8000fca:	4619      	mov	r1, r3
 8000fcc:	f04f 0200 	mov.w	r2, #0
 8000fd0:	4b0f      	ldr	r3, [pc, #60]	@ (8001010 <GetTemperature+0xa0>)
 8000fd2:	f7ff fb11 	bl	80005f8 <__aeabi_dmul>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	460b      	mov	r3, r1
 8000fda:	4610      	mov	r0, r2
 8000fdc:	4619      	mov	r1, r3
 8000fde:	f7ff fde3 	bl	8000ba8 <__aeabi_d2f>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	607b      	str	r3, [r7, #4]
    }
    HAL_ADC_Stop(&hadc1);
 8000fe6:	4808      	ldr	r0, [pc, #32]	@ (8001008 <GetTemperature+0x98>)
 8000fe8:	f000 ff3a 	bl	8001e60 <HAL_ADC_Stop>

    return temperature;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	ee07 3a90 	vmov	s15, r3
}
 8000ff2:	eeb0 0a67 	vmov.f32	s0, s15
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	f3af 8000 	nop.w
 8001000:	66666666 	.word	0x66666666
 8001004:	400a6666 	.word	0x400a6666
 8001008:	20000494 	.word	0x20000494
 800100c:	40b00000 	.word	0x40b00000
 8001010:	40590000 	.word	0x40590000

08001014 <WriteTemperatureToEEPROM>:

void WriteTemperatureToEEPROM(float temperature) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b08a      	sub	sp, #40	@ 0x28
 8001018:	af04      	add	r7, sp, #16
 800101a:	ed87 0a01 	vstr	s0, [r7, #4]
    uint8_t data[4];
    uint32_t eepromAddress = 0xA0;
 800101e:	23a0      	movs	r3, #160	@ 0xa0
 8001020:	617b      	str	r3, [r7, #20]
    uint16_t memAddress = 0x0000;
 8001022:	2300      	movs	r3, #0
 8001024:	827b      	strh	r3, [r7, #18]

    memcpy(data, &temperature, sizeof(float));
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	60fb      	str	r3, [r7, #12]

    HAL_I2C_Mem_Write(&hi2c1, eepromAddress, memAddress, I2C_MEMADD_SIZE_16BIT, data, sizeof(data), HAL_MAX_DELAY);
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	b299      	uxth	r1, r3
 800102e:	8a7a      	ldrh	r2, [r7, #18]
 8001030:	f04f 33ff 	mov.w	r3, #4294967295
 8001034:	9302      	str	r3, [sp, #8]
 8001036:	2304      	movs	r3, #4
 8001038:	9301      	str	r3, [sp, #4]
 800103a:	f107 030c 	add.w	r3, r7, #12
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	2310      	movs	r3, #16
 8001042:	4803      	ldr	r0, [pc, #12]	@ (8001050 <WriteTemperatureToEEPROM+0x3c>)
 8001044:	f002 f8d6 	bl	80031f4 <HAL_I2C_Mem_Write>
}
 8001048:	bf00      	nop
 800104a:	3718      	adds	r7, #24
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	2000053c 	.word	0x2000053c

08001054 <ReadTemperatureFromEEPROM>:

float ReadTemperatureFromEEPROM(void) {
 8001054:	b580      	push	{r7, lr}
 8001056:	b088      	sub	sp, #32
 8001058:	af04      	add	r7, sp, #16
    uint8_t data[4];
    float temperature;
    uint32_t eepromAddress = 0xA0;
 800105a:	23a0      	movs	r3, #160	@ 0xa0
 800105c:	60fb      	str	r3, [r7, #12]
    uint16_t memAddress = 0x0000;
 800105e:	2300      	movs	r3, #0
 8001060:	817b      	strh	r3, [r7, #10]

    if (HAL_I2C_Mem_Read(&hi2c1, eepromAddress, memAddress, I2C_MEMADD_SIZE_16BIT, data, sizeof(data), HAL_MAX_DELAY) == HAL_OK) {
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	b299      	uxth	r1, r3
 8001066:	897a      	ldrh	r2, [r7, #10]
 8001068:	f04f 33ff 	mov.w	r3, #4294967295
 800106c:	9302      	str	r3, [sp, #8]
 800106e:	2304      	movs	r3, #4
 8001070:	9301      	str	r3, [sp, #4]
 8001072:	1d3b      	adds	r3, r7, #4
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	2310      	movs	r3, #16
 8001078:	4809      	ldr	r0, [pc, #36]	@ (80010a0 <ReadTemperatureFromEEPROM+0x4c>)
 800107a:	f002 f9b5 	bl	80033e8 <HAL_I2C_Mem_Read>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d102      	bne.n	800108a <ReadTemperatureFromEEPROM+0x36>
        memcpy(&temperature, data, sizeof(float));
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	603b      	str	r3, [r7, #0]
 8001088:	e001      	b.n	800108e <ReadTemperatureFromEEPROM+0x3a>
    } else {
        temperature = -1;
 800108a:	4b06      	ldr	r3, [pc, #24]	@ (80010a4 <ReadTemperatureFromEEPROM+0x50>)
 800108c:	603b      	str	r3, [r7, #0]

    }

    return temperature;
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	ee07 3a90 	vmov	s15, r3
}
 8001094:	eeb0 0a67 	vmov.f32	s0, s15
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	2000053c 	.word	0x2000053c
 80010a4:	bf800000 	.word	0xbf800000

080010a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a8:	b5b0      	push	{r4, r5, r7, lr}
 80010aa:	b088      	sub	sp, #32
 80010ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ae:	f000 fd7f 	bl	8001bb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010b2:	f000 f823 	bl	80010fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010b6:	f000 f973 	bl	80013a0 <MX_GPIO_Init>
  MX_DMA_Init();
 80010ba:	f000 f933 	bl	8001324 <MX_DMA_Init>
  MX_ADC1_Init();
 80010be:	f000 f87b 	bl	80011b8 <MX_ADC1_Init>
  MX_SPI1_Init();
 80010c2:	f000 f8f9 	bl	80012b8 <MX_SPI1_Init>
  MX_I2C1_Init();
 80010c6:	f000 f8c9 	bl	800125c <MX_I2C1_Init>
//  /* definition and creation of Task01 */
//  osThreadDef(Task01, StartTask01, osPriorityNormal, 0, 128);
//  Task01Handle = osThreadCreate(osThread(Task01), NULL);
//
  /* definition and creation of Task02 */
  osThreadDef(Task02, StartTask02, osPriorityNormal, 0, 128);
 80010ca:	4b0a      	ldr	r3, [pc, #40]	@ (80010f4 <main+0x4c>)
 80010cc:	1d3c      	adds	r4, r7, #4
 80010ce:	461d      	mov	r5, r3
 80010d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task02Handle = osThreadCreate(osThread(Task02), NULL);
 80010dc:	1d3b      	adds	r3, r7, #4
 80010de:	2100      	movs	r1, #0
 80010e0:	4618      	mov	r0, r3
 80010e2:	f003 ff3a 	bl	8004f5a <osThreadCreate>
 80010e6:	4603      	mov	r3, r0
 80010e8:	4a03      	ldr	r2, [pc, #12]	@ (80010f8 <main+0x50>)
 80010ea:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80010ec:	f003 ff2e 	bl	8004f4c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80010f0:	bf00      	nop
 80010f2:	e7fd      	b.n	80010f0 <main+0x48>
 80010f4:	08008e10 	.word	0x08008e10
 80010f8:	200006a8 	.word	0x200006a8

080010fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b094      	sub	sp, #80	@ 0x50
 8001100:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001102:	f107 0320 	add.w	r3, r7, #32
 8001106:	2230      	movs	r2, #48	@ 0x30
 8001108:	2100      	movs	r1, #0
 800110a:	4618      	mov	r0, r3
 800110c:	f005 feef 	bl	8006eee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001110:	f107 030c 	add.w	r3, r7, #12
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001120:	2300      	movs	r3, #0
 8001122:	60bb      	str	r3, [r7, #8]
 8001124:	4b22      	ldr	r3, [pc, #136]	@ (80011b0 <SystemClock_Config+0xb4>)
 8001126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001128:	4a21      	ldr	r2, [pc, #132]	@ (80011b0 <SystemClock_Config+0xb4>)
 800112a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800112e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001130:	4b1f      	ldr	r3, [pc, #124]	@ (80011b0 <SystemClock_Config+0xb4>)
 8001132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001134:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001138:	60bb      	str	r3, [r7, #8]
 800113a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800113c:	2300      	movs	r3, #0
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	4b1c      	ldr	r3, [pc, #112]	@ (80011b4 <SystemClock_Config+0xb8>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a1b      	ldr	r2, [pc, #108]	@ (80011b4 <SystemClock_Config+0xb8>)
 8001146:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800114a:	6013      	str	r3, [r2, #0]
 800114c:	4b19      	ldr	r3, [pc, #100]	@ (80011b4 <SystemClock_Config+0xb8>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001154:	607b      	str	r3, [r7, #4]
 8001156:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001158:	2302      	movs	r3, #2
 800115a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800115c:	2301      	movs	r3, #1
 800115e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001160:	2310      	movs	r3, #16
 8001162:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001164:	2300      	movs	r3, #0
 8001166:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001168:	f107 0320 	add.w	r3, r7, #32
 800116c:	4618      	mov	r0, r3
 800116e:	f002 ff21 	bl	8003fb4 <HAL_RCC_OscConfig>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001178:	f000 f9bc 	bl	80014f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800117c:	230f      	movs	r3, #15
 800117e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001180:	2300      	movs	r3, #0
 8001182:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001184:	2300      	movs	r3, #0
 8001186:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001188:	2300      	movs	r3, #0
 800118a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800118c:	2300      	movs	r3, #0
 800118e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001190:	f107 030c 	add.w	r3, r7, #12
 8001194:	2100      	movs	r1, #0
 8001196:	4618      	mov	r0, r3
 8001198:	f003 f984 	bl	80044a4 <HAL_RCC_ClockConfig>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80011a2:	f000 f9a7 	bl	80014f4 <Error_Handler>
  }
}
 80011a6:	bf00      	nop
 80011a8:	3750      	adds	r7, #80	@ 0x50
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40023800 	.word	0x40023800
 80011b4:	40007000 	.word	0x40007000

080011b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011be:	463b      	mov	r3, r7
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80011ca:	4b21      	ldr	r3, [pc, #132]	@ (8001250 <MX_ADC1_Init+0x98>)
 80011cc:	4a21      	ldr	r2, [pc, #132]	@ (8001254 <MX_ADC1_Init+0x9c>)
 80011ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80011d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001250 <MX_ADC1_Init+0x98>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001250 <MX_ADC1_Init+0x98>)
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80011dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001250 <MX_ADC1_Init+0x98>)
 80011de:	2200      	movs	r2, #0
 80011e0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011e2:	4b1b      	ldr	r3, [pc, #108]	@ (8001250 <MX_ADC1_Init+0x98>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011e8:	4b19      	ldr	r3, [pc, #100]	@ (8001250 <MX_ADC1_Init+0x98>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011f0:	4b17      	ldr	r3, [pc, #92]	@ (8001250 <MX_ADC1_Init+0x98>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011f6:	4b16      	ldr	r3, [pc, #88]	@ (8001250 <MX_ADC1_Init+0x98>)
 80011f8:	4a17      	ldr	r2, [pc, #92]	@ (8001258 <MX_ADC1_Init+0xa0>)
 80011fa:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011fc:	4b14      	ldr	r3, [pc, #80]	@ (8001250 <MX_ADC1_Init+0x98>)
 80011fe:	2200      	movs	r2, #0
 8001200:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001202:	4b13      	ldr	r3, [pc, #76]	@ (8001250 <MX_ADC1_Init+0x98>)
 8001204:	2201      	movs	r2, #1
 8001206:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001208:	4b11      	ldr	r3, [pc, #68]	@ (8001250 <MX_ADC1_Init+0x98>)
 800120a:	2200      	movs	r2, #0
 800120c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001210:	4b0f      	ldr	r3, [pc, #60]	@ (8001250 <MX_ADC1_Init+0x98>)
 8001212:	2201      	movs	r2, #1
 8001214:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001216:	480e      	ldr	r0, [pc, #56]	@ (8001250 <MX_ADC1_Init+0x98>)
 8001218:	f000 fd0c 	bl	8001c34 <HAL_ADC_Init>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001222:	f000 f967 	bl	80014f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001226:	2310      	movs	r3, #16
 8001228:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800122a:	2301      	movs	r3, #1
 800122c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800122e:	2300      	movs	r3, #0
 8001230:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001232:	463b      	mov	r3, r7
 8001234:	4619      	mov	r1, r3
 8001236:	4806      	ldr	r0, [pc, #24]	@ (8001250 <MX_ADC1_Init+0x98>)
 8001238:	f000 fede 	bl	8001ff8 <HAL_ADC_ConfigChannel>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001242:	f000 f957 	bl	80014f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001246:	bf00      	nop
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000494 	.word	0x20000494
 8001254:	40012000 	.word	0x40012000
 8001258:	0f000001 	.word	0x0f000001

0800125c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001260:	4b12      	ldr	r3, [pc, #72]	@ (80012ac <MX_I2C1_Init+0x50>)
 8001262:	4a13      	ldr	r2, [pc, #76]	@ (80012b0 <MX_I2C1_Init+0x54>)
 8001264:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001266:	4b11      	ldr	r3, [pc, #68]	@ (80012ac <MX_I2C1_Init+0x50>)
 8001268:	4a12      	ldr	r2, [pc, #72]	@ (80012b4 <MX_I2C1_Init+0x58>)
 800126a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800126c:	4b0f      	ldr	r3, [pc, #60]	@ (80012ac <MX_I2C1_Init+0x50>)
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001272:	4b0e      	ldr	r3, [pc, #56]	@ (80012ac <MX_I2C1_Init+0x50>)
 8001274:	2200      	movs	r2, #0
 8001276:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001278:	4b0c      	ldr	r3, [pc, #48]	@ (80012ac <MX_I2C1_Init+0x50>)
 800127a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800127e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001280:	4b0a      	ldr	r3, [pc, #40]	@ (80012ac <MX_I2C1_Init+0x50>)
 8001282:	2200      	movs	r2, #0
 8001284:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001286:	4b09      	ldr	r3, [pc, #36]	@ (80012ac <MX_I2C1_Init+0x50>)
 8001288:	2200      	movs	r2, #0
 800128a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800128c:	4b07      	ldr	r3, [pc, #28]	@ (80012ac <MX_I2C1_Init+0x50>)
 800128e:	2200      	movs	r2, #0
 8001290:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001292:	4b06      	ldr	r3, [pc, #24]	@ (80012ac <MX_I2C1_Init+0x50>)
 8001294:	2200      	movs	r2, #0
 8001296:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001298:	4804      	ldr	r0, [pc, #16]	@ (80012ac <MX_I2C1_Init+0x50>)
 800129a:	f001 fe67 	bl	8002f6c <HAL_I2C_Init>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012a4:	f000 f926 	bl	80014f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012a8:	bf00      	nop
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	2000053c 	.word	0x2000053c
 80012b0:	40005400 	.word	0x40005400
 80012b4:	000186a0 	.word	0x000186a0

080012b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012bc:	4b17      	ldr	r3, [pc, #92]	@ (800131c <MX_SPI1_Init+0x64>)
 80012be:	4a18      	ldr	r2, [pc, #96]	@ (8001320 <MX_SPI1_Init+0x68>)
 80012c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012c2:	4b16      	ldr	r3, [pc, #88]	@ (800131c <MX_SPI1_Init+0x64>)
 80012c4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80012c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012ca:	4b14      	ldr	r3, [pc, #80]	@ (800131c <MX_SPI1_Init+0x64>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012d0:	4b12      	ldr	r3, [pc, #72]	@ (800131c <MX_SPI1_Init+0x64>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012d6:	4b11      	ldr	r3, [pc, #68]	@ (800131c <MX_SPI1_Init+0x64>)
 80012d8:	2200      	movs	r2, #0
 80012da:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012dc:	4b0f      	ldr	r3, [pc, #60]	@ (800131c <MX_SPI1_Init+0x64>)
 80012de:	2200      	movs	r2, #0
 80012e0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012e2:	4b0e      	ldr	r3, [pc, #56]	@ (800131c <MX_SPI1_Init+0x64>)
 80012e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012ea:	4b0c      	ldr	r3, [pc, #48]	@ (800131c <MX_SPI1_Init+0x64>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012f0:	4b0a      	ldr	r3, [pc, #40]	@ (800131c <MX_SPI1_Init+0x64>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012f6:	4b09      	ldr	r3, [pc, #36]	@ (800131c <MX_SPI1_Init+0x64>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012fc:	4b07      	ldr	r3, [pc, #28]	@ (800131c <MX_SPI1_Init+0x64>)
 80012fe:	2200      	movs	r2, #0
 8001300:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001302:	4b06      	ldr	r3, [pc, #24]	@ (800131c <MX_SPI1_Init+0x64>)
 8001304:	220a      	movs	r2, #10
 8001306:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001308:	4804      	ldr	r0, [pc, #16]	@ (800131c <MX_SPI1_Init+0x64>)
 800130a:	f003 fadd 	bl	80048c8 <HAL_SPI_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001314:	f000 f8ee 	bl	80014f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001318:	bf00      	nop
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20000650 	.word	0x20000650
 8001320:	40013000 	.word	0x40013000

08001324 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	607b      	str	r3, [r7, #4]
 800132e:	4b1b      	ldr	r3, [pc, #108]	@ (800139c <MX_DMA_Init+0x78>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001332:	4a1a      	ldr	r2, [pc, #104]	@ (800139c <MX_DMA_Init+0x78>)
 8001334:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001338:	6313      	str	r3, [r2, #48]	@ 0x30
 800133a:	4b18      	ldr	r3, [pc, #96]	@ (800139c <MX_DMA_Init+0x78>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001342:	607b      	str	r3, [r7, #4]
 8001344:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	603b      	str	r3, [r7, #0]
 800134a:	4b14      	ldr	r3, [pc, #80]	@ (800139c <MX_DMA_Init+0x78>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134e:	4a13      	ldr	r2, [pc, #76]	@ (800139c <MX_DMA_Init+0x78>)
 8001350:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001354:	6313      	str	r3, [r2, #48]	@ 0x30
 8001356:	4b11      	ldr	r3, [pc, #68]	@ (800139c <MX_DMA_Init+0x78>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800135e:	603b      	str	r3, [r7, #0]
 8001360:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001362:	2200      	movs	r2, #0
 8001364:	2105      	movs	r1, #5
 8001366:	200b      	movs	r0, #11
 8001368:	f001 f91c 	bl	80025a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800136c:	200b      	movs	r0, #11
 800136e:	f001 f935 	bl	80025dc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001372:	2200      	movs	r2, #0
 8001374:	2105      	movs	r1, #5
 8001376:	2011      	movs	r0, #17
 8001378:	f001 f914 	bl	80025a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800137c:	2011      	movs	r0, #17
 800137e:	f001 f92d 	bl	80025dc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001382:	2200      	movs	r2, #0
 8001384:	2105      	movs	r1, #5
 8001386:	2038      	movs	r0, #56	@ 0x38
 8001388:	f001 f90c 	bl	80025a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800138c:	2038      	movs	r0, #56	@ 0x38
 800138e:	f001 f925 	bl	80025dc <HAL_NVIC_EnableIRQ>

}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40023800 	.word	0x40023800

080013a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b088      	sub	sp, #32
 80013a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a6:	f107 030c 	add.w	r3, r7, #12
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	605a      	str	r2, [r3, #4]
 80013b0:	609a      	str	r2, [r3, #8]
 80013b2:	60da      	str	r2, [r3, #12]
 80013b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	60bb      	str	r3, [r7, #8]
 80013ba:	4b2a      	ldr	r3, [pc, #168]	@ (8001464 <MX_GPIO_Init+0xc4>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013be:	4a29      	ldr	r2, [pc, #164]	@ (8001464 <MX_GPIO_Init+0xc4>)
 80013c0:	f043 0301 	orr.w	r3, r3, #1
 80013c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013c6:	4b27      	ldr	r3, [pc, #156]	@ (8001464 <MX_GPIO_Init+0xc4>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	60bb      	str	r3, [r7, #8]
 80013d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	607b      	str	r3, [r7, #4]
 80013d6:	4b23      	ldr	r3, [pc, #140]	@ (8001464 <MX_GPIO_Init+0xc4>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013da:	4a22      	ldr	r2, [pc, #136]	@ (8001464 <MX_GPIO_Init+0xc4>)
 80013dc:	f043 0302 	orr.w	r3, r3, #2
 80013e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013e2:	4b20      	ldr	r3, [pc, #128]	@ (8001464 <MX_GPIO_Init+0xc4>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 80013ee:	2200      	movs	r2, #0
 80013f0:	f241 1187 	movw	r1, #4487	@ 0x1187
 80013f4:	481c      	ldr	r0, [pc, #112]	@ (8001468 <MX_GPIO_Init+0xc8>)
 80013f6:	f001 fd85 	bl	8002f04 <HAL_GPIO_WritePin>
                          |LCD_CS_Pin|LCD_RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 80013fa:	2200      	movs	r2, #0
 80013fc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001400:	481a      	ldr	r0, [pc, #104]	@ (800146c <MX_GPIO_Init+0xcc>)
 8001402:	f001 fd7f 	bl	8002f04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001406:	2302      	movs	r3, #2
 8001408:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800140a:	2300      	movs	r3, #0
 800140c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800140e:	2301      	movs	r3, #1
 8001410:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001412:	f107 030c 	add.w	r3, r7, #12
 8001416:	4619      	mov	r1, r3
 8001418:	4814      	ldr	r0, [pc, #80]	@ (800146c <MX_GPIO_Init+0xcc>)
 800141a:	f001 fbd7 	bl	8002bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12
                           LCD_CS_Pin LCD_RS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 800141e:	f241 1387 	movw	r3, #4487	@ 0x1187
 8001422:	60fb      	str	r3, [r7, #12]
                          |LCD_CS_Pin|LCD_RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001424:	2301      	movs	r3, #1
 8001426:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142c:	2300      	movs	r3, #0
 800142e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001430:	f107 030c 	add.w	r3, r7, #12
 8001434:	4619      	mov	r1, r3
 8001436:	480c      	ldr	r0, [pc, #48]	@ (8001468 <MX_GPIO_Init+0xc8>)
 8001438:	f001 fbc8 	bl	8002bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 800143c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001440:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001442:	2301      	movs	r3, #1
 8001444:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144a:	2300      	movs	r3, #0
 800144c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 800144e:	f107 030c 	add.w	r3, r7, #12
 8001452:	4619      	mov	r1, r3
 8001454:	4805      	ldr	r0, [pc, #20]	@ (800146c <MX_GPIO_Init+0xcc>)
 8001456:	f001 fbb9 	bl	8002bcc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800145a:	bf00      	nop
 800145c:	3720      	adds	r7, #32
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40023800 	.word	0x40023800
 8001468:	40020400 	.word	0x40020400
 800146c:	40020000 	.word	0x40020000

08001470 <StartTask02>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	/* Infinite loop */

    while (1) {
        float temperature = GetTemperature();
 8001478:	f7ff fd7a 	bl	8000f70 <GetTemperature>
 800147c:	ed87 0a03 	vstr	s0, [r7, #12]
        WriteTemperatureToEEPROM(temperature);
 8001480:	ed97 0a03 	vldr	s0, [r7, #12]
 8001484:	f7ff fdc6 	bl	8001014 <WriteTemperatureToEEPROM>

        float readTemperature = ReadTemperatureFromEEPROM();
 8001488:	f7ff fde4 	bl	8001054 <ReadTemperatureFromEEPROM>
 800148c:	ed87 0a02 	vstr	s0, [r7, #8]
        if (readTemperature == temperature) {
 8001490:	ed97 7a02 	vldr	s14, [r7, #8]
 8001494:	edd7 7a03 	vldr	s15, [r7, #12]
 8001498:	eeb4 7a67 	vcmp.f32	s14, s15
 800149c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a0:	d109      	bne.n	80014b6 <StartTask02+0x46>
            HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 80014a2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014a6:	4809      	ldr	r0, [pc, #36]	@ (80014cc <StartTask02+0x5c>)
 80014a8:	f001 fd45 	bl	8002f36 <HAL_GPIO_TogglePin>
            osDelay(500);
 80014ac:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80014b0:	f003 fd9f 	bl	8004ff2 <osDelay>
 80014b4:	e005      	b.n	80014c2 <StartTask02+0x52>
        } else {
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80014b6:	2201      	movs	r2, #1
 80014b8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014bc:	4803      	ldr	r0, [pc, #12]	@ (80014cc <StartTask02+0x5c>)
 80014be:	f001 fd21 	bl	8002f04 <HAL_GPIO_WritePin>
        }
        osDelay(5000);
 80014c2:	f241 3088 	movw	r0, #5000	@ 0x1388
 80014c6:	f003 fd94 	bl	8004ff2 <osDelay>
    while (1) {
 80014ca:	e7d5      	b.n	8001478 <StartTask02+0x8>
 80014cc:	40020400 	.word	0x40020400

080014d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a04      	ldr	r2, [pc, #16]	@ (80014f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d101      	bne.n	80014e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80014e2:	f000 fb87 	bl	8001bf4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80014e6:	bf00      	nop
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40010000 	.word	0x40010000

080014f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014f8:	b672      	cpsid	i
}
 80014fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80014fc:	bf00      	nop
 80014fe:	e7fd      	b.n	80014fc <Error_Handler+0x8>

08001500 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	607b      	str	r3, [r7, #4]
 800150a:	4b12      	ldr	r3, [pc, #72]	@ (8001554 <HAL_MspInit+0x54>)
 800150c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800150e:	4a11      	ldr	r2, [pc, #68]	@ (8001554 <HAL_MspInit+0x54>)
 8001510:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001514:	6453      	str	r3, [r2, #68]	@ 0x44
 8001516:	4b0f      	ldr	r3, [pc, #60]	@ (8001554 <HAL_MspInit+0x54>)
 8001518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800151a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800151e:	607b      	str	r3, [r7, #4]
 8001520:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	603b      	str	r3, [r7, #0]
 8001526:	4b0b      	ldr	r3, [pc, #44]	@ (8001554 <HAL_MspInit+0x54>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152a:	4a0a      	ldr	r2, [pc, #40]	@ (8001554 <HAL_MspInit+0x54>)
 800152c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001530:	6413      	str	r3, [r2, #64]	@ 0x40
 8001532:	4b08      	ldr	r3, [pc, #32]	@ (8001554 <HAL_MspInit+0x54>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001536:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800153a:	603b      	str	r3, [r7, #0]
 800153c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800153e:	2200      	movs	r2, #0
 8001540:	210f      	movs	r1, #15
 8001542:	f06f 0001 	mvn.w	r0, #1
 8001546:	f001 f82d 	bl	80025a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40023800 	.word	0x40023800

08001558 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a26      	ldr	r2, [pc, #152]	@ (8001600 <HAL_ADC_MspInit+0xa8>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d145      	bne.n	80015f6 <HAL_ADC_MspInit+0x9e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	4b25      	ldr	r3, [pc, #148]	@ (8001604 <HAL_ADC_MspInit+0xac>)
 8001570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001572:	4a24      	ldr	r2, [pc, #144]	@ (8001604 <HAL_ADC_MspInit+0xac>)
 8001574:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001578:	6453      	str	r3, [r2, #68]	@ 0x44
 800157a:	4b22      	ldr	r3, [pc, #136]	@ (8001604 <HAL_ADC_MspInit+0xac>)
 800157c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800157e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001586:	4b20      	ldr	r3, [pc, #128]	@ (8001608 <HAL_ADC_MspInit+0xb0>)
 8001588:	4a20      	ldr	r2, [pc, #128]	@ (800160c <HAL_ADC_MspInit+0xb4>)
 800158a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800158c:	4b1e      	ldr	r3, [pc, #120]	@ (8001608 <HAL_ADC_MspInit+0xb0>)
 800158e:	2200      	movs	r2, #0
 8001590:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001592:	4b1d      	ldr	r3, [pc, #116]	@ (8001608 <HAL_ADC_MspInit+0xb0>)
 8001594:	2200      	movs	r2, #0
 8001596:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001598:	4b1b      	ldr	r3, [pc, #108]	@ (8001608 <HAL_ADC_MspInit+0xb0>)
 800159a:	2200      	movs	r2, #0
 800159c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800159e:	4b1a      	ldr	r3, [pc, #104]	@ (8001608 <HAL_ADC_MspInit+0xb0>)
 80015a0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015a4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015a6:	4b18      	ldr	r3, [pc, #96]	@ (8001608 <HAL_ADC_MspInit+0xb0>)
 80015a8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80015ac:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015ae:	4b16      	ldr	r3, [pc, #88]	@ (8001608 <HAL_ADC_MspInit+0xb0>)
 80015b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015b4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80015b6:	4b14      	ldr	r3, [pc, #80]	@ (8001608 <HAL_ADC_MspInit+0xb0>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80015bc:	4b12      	ldr	r3, [pc, #72]	@ (8001608 <HAL_ADC_MspInit+0xb0>)
 80015be:	2200      	movs	r2, #0
 80015c0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80015c2:	4b11      	ldr	r3, [pc, #68]	@ (8001608 <HAL_ADC_MspInit+0xb0>)
 80015c4:	2204      	movs	r2, #4
 80015c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80015c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001608 <HAL_ADC_MspInit+0xb0>)
 80015ca:	2203      	movs	r2, #3
 80015cc:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 80015ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001608 <HAL_ADC_MspInit+0xb0>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80015d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001608 <HAL_ADC_MspInit+0xb0>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80015da:	480b      	ldr	r0, [pc, #44]	@ (8001608 <HAL_ADC_MspInit+0xb0>)
 80015dc:	f001 f80c 	bl	80025f8 <HAL_DMA_Init>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <HAL_ADC_MspInit+0x92>
    {
      Error_Handler();
 80015e6:	f7ff ff85 	bl	80014f4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a06      	ldr	r2, [pc, #24]	@ (8001608 <HAL_ADC_MspInit+0xb0>)
 80015ee:	639a      	str	r2, [r3, #56]	@ 0x38
 80015f0:	4a05      	ldr	r2, [pc, #20]	@ (8001608 <HAL_ADC_MspInit+0xb0>)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80015f6:	bf00      	nop
 80015f8:	3710      	adds	r7, #16
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40012000 	.word	0x40012000
 8001604:	40023800 	.word	0x40023800
 8001608:	200004dc 	.word	0x200004dc
 800160c:	40026410 	.word	0x40026410

08001610 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b08a      	sub	sp, #40	@ 0x28
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a49      	ldr	r2, [pc, #292]	@ (8001754 <HAL_I2C_MspInit+0x144>)
 800162e:	4293      	cmp	r3, r2
 8001630:	f040 808b 	bne.w	800174a <HAL_I2C_MspInit+0x13a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001634:	2300      	movs	r3, #0
 8001636:	613b      	str	r3, [r7, #16]
 8001638:	4b47      	ldr	r3, [pc, #284]	@ (8001758 <HAL_I2C_MspInit+0x148>)
 800163a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163c:	4a46      	ldr	r2, [pc, #280]	@ (8001758 <HAL_I2C_MspInit+0x148>)
 800163e:	f043 0302 	orr.w	r3, r3, #2
 8001642:	6313      	str	r3, [r2, #48]	@ 0x30
 8001644:	4b44      	ldr	r3, [pc, #272]	@ (8001758 <HAL_I2C_MspInit+0x148>)
 8001646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001648:	f003 0302 	and.w	r3, r3, #2
 800164c:	613b      	str	r3, [r7, #16]
 800164e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001650:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001654:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001656:	2312      	movs	r3, #18
 8001658:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800165e:	2303      	movs	r3, #3
 8001660:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001662:	2304      	movs	r3, #4
 8001664:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001666:	f107 0314 	add.w	r3, r7, #20
 800166a:	4619      	mov	r1, r3
 800166c:	483b      	ldr	r0, [pc, #236]	@ (800175c <HAL_I2C_MspInit+0x14c>)
 800166e:	f001 faad 	bl	8002bcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	4b38      	ldr	r3, [pc, #224]	@ (8001758 <HAL_I2C_MspInit+0x148>)
 8001678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800167a:	4a37      	ldr	r2, [pc, #220]	@ (8001758 <HAL_I2C_MspInit+0x148>)
 800167c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001680:	6413      	str	r3, [r2, #64]	@ 0x40
 8001682:	4b35      	ldr	r3, [pc, #212]	@ (8001758 <HAL_I2C_MspInit+0x148>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001686:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 800168e:	4b34      	ldr	r3, [pc, #208]	@ (8001760 <HAL_I2C_MspInit+0x150>)
 8001690:	4a34      	ldr	r2, [pc, #208]	@ (8001764 <HAL_I2C_MspInit+0x154>)
 8001692:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8001694:	4b32      	ldr	r3, [pc, #200]	@ (8001760 <HAL_I2C_MspInit+0x150>)
 8001696:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800169a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800169c:	4b30      	ldr	r3, [pc, #192]	@ (8001760 <HAL_I2C_MspInit+0x150>)
 800169e:	2240      	movs	r2, #64	@ 0x40
 80016a0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016a2:	4b2f      	ldr	r3, [pc, #188]	@ (8001760 <HAL_I2C_MspInit+0x150>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016a8:	4b2d      	ldr	r3, [pc, #180]	@ (8001760 <HAL_I2C_MspInit+0x150>)
 80016aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016ae:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016b0:	4b2b      	ldr	r3, [pc, #172]	@ (8001760 <HAL_I2C_MspInit+0x150>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016b6:	4b2a      	ldr	r3, [pc, #168]	@ (8001760 <HAL_I2C_MspInit+0x150>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80016bc:	4b28      	ldr	r3, [pc, #160]	@ (8001760 <HAL_I2C_MspInit+0x150>)
 80016be:	2200      	movs	r2, #0
 80016c0:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80016c2:	4b27      	ldr	r3, [pc, #156]	@ (8001760 <HAL_I2C_MspInit+0x150>)
 80016c4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80016c8:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016ca:	4b25      	ldr	r3, [pc, #148]	@ (8001760 <HAL_I2C_MspInit+0x150>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80016d0:	4823      	ldr	r0, [pc, #140]	@ (8001760 <HAL_I2C_MspInit+0x150>)
 80016d2:	f000 ff91 	bl	80025f8 <HAL_DMA_Init>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <HAL_I2C_MspInit+0xd0>
    {
      Error_Handler();
 80016dc:	f7ff ff0a 	bl	80014f4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	4a1f      	ldr	r2, [pc, #124]	@ (8001760 <HAL_I2C_MspInit+0x150>)
 80016e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80016e6:	4a1e      	ldr	r2, [pc, #120]	@ (8001760 <HAL_I2C_MspInit+0x150>)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80016ec:	4b1e      	ldr	r3, [pc, #120]	@ (8001768 <HAL_I2C_MspInit+0x158>)
 80016ee:	4a1f      	ldr	r2, [pc, #124]	@ (800176c <HAL_I2C_MspInit+0x15c>)
 80016f0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80016f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001768 <HAL_I2C_MspInit+0x158>)
 80016f4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80016f8:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001768 <HAL_I2C_MspInit+0x158>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001700:	4b19      	ldr	r3, [pc, #100]	@ (8001768 <HAL_I2C_MspInit+0x158>)
 8001702:	2200      	movs	r2, #0
 8001704:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001706:	4b18      	ldr	r3, [pc, #96]	@ (8001768 <HAL_I2C_MspInit+0x158>)
 8001708:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800170c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800170e:	4b16      	ldr	r3, [pc, #88]	@ (8001768 <HAL_I2C_MspInit+0x158>)
 8001710:	2200      	movs	r2, #0
 8001712:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001714:	4b14      	ldr	r3, [pc, #80]	@ (8001768 <HAL_I2C_MspInit+0x158>)
 8001716:	2200      	movs	r2, #0
 8001718:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800171a:	4b13      	ldr	r3, [pc, #76]	@ (8001768 <HAL_I2C_MspInit+0x158>)
 800171c:	2200      	movs	r2, #0
 800171e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001720:	4b11      	ldr	r3, [pc, #68]	@ (8001768 <HAL_I2C_MspInit+0x158>)
 8001722:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001726:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001728:	4b0f      	ldr	r3, [pc, #60]	@ (8001768 <HAL_I2C_MspInit+0x158>)
 800172a:	2200      	movs	r2, #0
 800172c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800172e:	480e      	ldr	r0, [pc, #56]	@ (8001768 <HAL_I2C_MspInit+0x158>)
 8001730:	f000 ff62 	bl	80025f8 <HAL_DMA_Init>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <HAL_I2C_MspInit+0x12e>
    {
      Error_Handler();
 800173a:	f7ff fedb 	bl	80014f4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a09      	ldr	r2, [pc, #36]	@ (8001768 <HAL_I2C_MspInit+0x158>)
 8001742:	639a      	str	r2, [r3, #56]	@ 0x38
 8001744:	4a08      	ldr	r2, [pc, #32]	@ (8001768 <HAL_I2C_MspInit+0x158>)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800174a:	bf00      	nop
 800174c:	3728      	adds	r7, #40	@ 0x28
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40005400 	.word	0x40005400
 8001758:	40023800 	.word	0x40023800
 800175c:	40020400 	.word	0x40020400
 8001760:	20000590 	.word	0x20000590
 8001764:	400260a0 	.word	0x400260a0
 8001768:	200005f0 	.word	0x200005f0
 800176c:	40026010 	.word	0x40026010

08001770 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b08a      	sub	sp, #40	@ 0x28
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001778:	f107 0314 	add.w	r3, r7, #20
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	60da      	str	r2, [r3, #12]
 8001786:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a28      	ldr	r2, [pc, #160]	@ (8001830 <HAL_SPI_MspInit+0xc0>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d149      	bne.n	8001826 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	613b      	str	r3, [r7, #16]
 8001796:	4b27      	ldr	r3, [pc, #156]	@ (8001834 <HAL_SPI_MspInit+0xc4>)
 8001798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800179a:	4a26      	ldr	r2, [pc, #152]	@ (8001834 <HAL_SPI_MspInit+0xc4>)
 800179c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80017a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80017a2:	4b24      	ldr	r3, [pc, #144]	@ (8001834 <HAL_SPI_MspInit+0xc4>)
 80017a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017aa:	613b      	str	r3, [r7, #16]
 80017ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	60fb      	str	r3, [r7, #12]
 80017b2:	4b20      	ldr	r3, [pc, #128]	@ (8001834 <HAL_SPI_MspInit+0xc4>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b6:	4a1f      	ldr	r2, [pc, #124]	@ (8001834 <HAL_SPI_MspInit+0xc4>)
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017be:	4b1d      	ldr	r3, [pc, #116]	@ (8001834 <HAL_SPI_MspInit+0xc4>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	60bb      	str	r3, [r7, #8]
 80017ce:	4b19      	ldr	r3, [pc, #100]	@ (8001834 <HAL_SPI_MspInit+0xc4>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d2:	4a18      	ldr	r2, [pc, #96]	@ (8001834 <HAL_SPI_MspInit+0xc4>)
 80017d4:	f043 0302 	orr.w	r3, r3, #2
 80017d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017da:	4b16      	ldr	r3, [pc, #88]	@ (8001834 <HAL_SPI_MspInit+0xc4>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	60bb      	str	r3, [r7, #8]
 80017e4:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017e6:	23c0      	movs	r3, #192	@ 0xc0
 80017e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ea:	2302      	movs	r3, #2
 80017ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f2:	2303      	movs	r3, #3
 80017f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017f6:	2305      	movs	r3, #5
 80017f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fa:	f107 0314 	add.w	r3, r7, #20
 80017fe:	4619      	mov	r1, r3
 8001800:	480d      	ldr	r0, [pc, #52]	@ (8001838 <HAL_SPI_MspInit+0xc8>)
 8001802:	f001 f9e3 	bl	8002bcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001806:	2308      	movs	r3, #8
 8001808:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180a:	2302      	movs	r3, #2
 800180c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180e:	2300      	movs	r3, #0
 8001810:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001812:	2303      	movs	r3, #3
 8001814:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001816:	2305      	movs	r3, #5
 8001818:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800181a:	f107 0314 	add.w	r3, r7, #20
 800181e:	4619      	mov	r1, r3
 8001820:	4806      	ldr	r0, [pc, #24]	@ (800183c <HAL_SPI_MspInit+0xcc>)
 8001822:	f001 f9d3 	bl	8002bcc <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001826:	bf00      	nop
 8001828:	3728      	adds	r7, #40	@ 0x28
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40013000 	.word	0x40013000
 8001834:	40023800 	.word	0x40023800
 8001838:	40020000 	.word	0x40020000
 800183c:	40020400 	.word	0x40020400

08001840 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08c      	sub	sp, #48	@ 0x30
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001848:	2300      	movs	r3, #0
 800184a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800184c:	2300      	movs	r3, #0
 800184e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001850:	2300      	movs	r3, #0
 8001852:	60bb      	str	r3, [r7, #8]
 8001854:	4b2e      	ldr	r3, [pc, #184]	@ (8001910 <HAL_InitTick+0xd0>)
 8001856:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001858:	4a2d      	ldr	r2, [pc, #180]	@ (8001910 <HAL_InitTick+0xd0>)
 800185a:	f043 0301 	orr.w	r3, r3, #1
 800185e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001860:	4b2b      	ldr	r3, [pc, #172]	@ (8001910 <HAL_InitTick+0xd0>)
 8001862:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800186c:	f107 020c 	add.w	r2, r7, #12
 8001870:	f107 0310 	add.w	r3, r7, #16
 8001874:	4611      	mov	r1, r2
 8001876:	4618      	mov	r0, r3
 8001878:	f002 fff4 	bl	8004864 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800187c:	f002 ffde 	bl	800483c <HAL_RCC_GetPCLK2Freq>
 8001880:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001884:	4a23      	ldr	r2, [pc, #140]	@ (8001914 <HAL_InitTick+0xd4>)
 8001886:	fba2 2303 	umull	r2, r3, r2, r3
 800188a:	0c9b      	lsrs	r3, r3, #18
 800188c:	3b01      	subs	r3, #1
 800188e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001890:	4b21      	ldr	r3, [pc, #132]	@ (8001918 <HAL_InitTick+0xd8>)
 8001892:	4a22      	ldr	r2, [pc, #136]	@ (800191c <HAL_InitTick+0xdc>)
 8001894:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001896:	4b20      	ldr	r3, [pc, #128]	@ (8001918 <HAL_InitTick+0xd8>)
 8001898:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800189c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800189e:	4a1e      	ldr	r2, [pc, #120]	@ (8001918 <HAL_InitTick+0xd8>)
 80018a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80018a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001918 <HAL_InitTick+0xd8>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001918 <HAL_InitTick+0xd8>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018b0:	4b19      	ldr	r3, [pc, #100]	@ (8001918 <HAL_InitTick+0xd8>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80018b6:	4818      	ldr	r0, [pc, #96]	@ (8001918 <HAL_InitTick+0xd8>)
 80018b8:	f003 f88f 	bl	80049da <HAL_TIM_Base_Init>
 80018bc:	4603      	mov	r3, r0
 80018be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80018c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d11b      	bne.n	8001902 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80018ca:	4813      	ldr	r0, [pc, #76]	@ (8001918 <HAL_InitTick+0xd8>)
 80018cc:	f003 f8de 	bl	8004a8c <HAL_TIM_Base_Start_IT>
 80018d0:	4603      	mov	r3, r0
 80018d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80018d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d111      	bne.n	8001902 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80018de:	2019      	movs	r0, #25
 80018e0:	f000 fe7c 	bl	80025dc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2b0f      	cmp	r3, #15
 80018e8:	d808      	bhi.n	80018fc <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80018ea:	2200      	movs	r2, #0
 80018ec:	6879      	ldr	r1, [r7, #4]
 80018ee:	2019      	movs	r0, #25
 80018f0:	f000 fe58 	bl	80025a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018f4:	4a0a      	ldr	r2, [pc, #40]	@ (8001920 <HAL_InitTick+0xe0>)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6013      	str	r3, [r2, #0]
 80018fa:	e002      	b.n	8001902 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001902:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001906:	4618      	mov	r0, r3
 8001908:	3730      	adds	r7, #48	@ 0x30
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40023800 	.word	0x40023800
 8001914:	431bde83 	.word	0x431bde83
 8001918:	200006ac 	.word	0x200006ac
 800191c:	40010000 	.word	0x40010000
 8001920:	20000004 	.word	0x20000004

08001924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001928:	bf00      	nop
 800192a:	e7fd      	b.n	8001928 <NMI_Handler+0x4>

0800192c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001930:	bf00      	nop
 8001932:	e7fd      	b.n	8001930 <HardFault_Handler+0x4>

08001934 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001938:	bf00      	nop
 800193a:	e7fd      	b.n	8001938 <MemManage_Handler+0x4>

0800193c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001940:	bf00      	nop
 8001942:	e7fd      	b.n	8001940 <BusFault_Handler+0x4>

08001944 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001948:	bf00      	nop
 800194a:	e7fd      	b.n	8001948 <UsageFault_Handler+0x4>

0800194c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
	...

0800195c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001960:	4802      	ldr	r0, [pc, #8]	@ (800196c <DMA1_Stream0_IRQHandler+0x10>)
 8001962:	f000 fef7 	bl	8002754 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	200005f0 	.word	0x200005f0

08001970 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001974:	4802      	ldr	r0, [pc, #8]	@ (8001980 <DMA1_Stream6_IRQHandler+0x10>)
 8001976:	f000 feed 	bl	8002754 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	20000590 	.word	0x20000590

08001984 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001988:	4802      	ldr	r0, [pc, #8]	@ (8001994 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800198a:	f003 f8ef 	bl	8004b6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	200006ac 	.word	0x200006ac

08001998 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800199c:	4802      	ldr	r0, [pc, #8]	@ (80019a8 <DMA2_Stream0_IRQHandler+0x10>)
 800199e:	f000 fed9 	bl	8002754 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	200004dc 	.word	0x200004dc

080019ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  return 1;
 80019b0:	2301      	movs	r3, #1
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <_kill>:

int _kill(int pid, int sig)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019c6:	f005 fb3b 	bl	8007040 <__errno>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2216      	movs	r2, #22
 80019ce:	601a      	str	r2, [r3, #0]
  return -1;
 80019d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <_exit>:

void _exit (int status)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019e4:	f04f 31ff 	mov.w	r1, #4294967295
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f7ff ffe7 	bl	80019bc <_kill>
  while (1) {}    /* Make sure we hang here */
 80019ee:	bf00      	nop
 80019f0:	e7fd      	b.n	80019ee <_exit+0x12>

080019f2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b086      	sub	sp, #24
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	60f8      	str	r0, [r7, #12]
 80019fa:	60b9      	str	r1, [r7, #8]
 80019fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019fe:	2300      	movs	r3, #0
 8001a00:	617b      	str	r3, [r7, #20]
 8001a02:	e00a      	b.n	8001a1a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a04:	f3af 8000 	nop.w
 8001a08:	4601      	mov	r1, r0
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	1c5a      	adds	r2, r3, #1
 8001a0e:	60ba      	str	r2, [r7, #8]
 8001a10:	b2ca      	uxtb	r2, r1
 8001a12:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	3301      	adds	r3, #1
 8001a18:	617b      	str	r3, [r7, #20]
 8001a1a:	697a      	ldr	r2, [r7, #20]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	dbf0      	blt.n	8001a04 <_read+0x12>
  }

  return len;
 8001a22:	687b      	ldr	r3, [r7, #4]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3718      	adds	r7, #24
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]
 8001a3c:	e009      	b.n	8001a52 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	1c5a      	adds	r2, r3, #1
 8001a42:	60ba      	str	r2, [r7, #8]
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	617b      	str	r3, [r7, #20]
 8001a52:	697a      	ldr	r2, [r7, #20]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	dbf1      	blt.n	8001a3e <_write+0x12>
  }
  return len;
 8001a5a:	687b      	ldr	r3, [r7, #4]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3718      	adds	r7, #24
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <_close>:

int _close(int file)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a8c:	605a      	str	r2, [r3, #4]
  return 0;
 8001a8e:	2300      	movs	r3, #0
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <_isatty>:

int _isatty(int file)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001aa4:	2301      	movs	r3, #1
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	b085      	sub	sp, #20
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	60f8      	str	r0, [r7, #12]
 8001aba:	60b9      	str	r1, [r7, #8]
 8001abc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3714      	adds	r7, #20
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ad4:	4a14      	ldr	r2, [pc, #80]	@ (8001b28 <_sbrk+0x5c>)
 8001ad6:	4b15      	ldr	r3, [pc, #84]	@ (8001b2c <_sbrk+0x60>)
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ae0:	4b13      	ldr	r3, [pc, #76]	@ (8001b30 <_sbrk+0x64>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d102      	bne.n	8001aee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ae8:	4b11      	ldr	r3, [pc, #68]	@ (8001b30 <_sbrk+0x64>)
 8001aea:	4a12      	ldr	r2, [pc, #72]	@ (8001b34 <_sbrk+0x68>)
 8001aec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aee:	4b10      	ldr	r3, [pc, #64]	@ (8001b30 <_sbrk+0x64>)
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4413      	add	r3, r2
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d207      	bcs.n	8001b0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001afc:	f005 faa0 	bl	8007040 <__errno>
 8001b00:	4603      	mov	r3, r0
 8001b02:	220c      	movs	r2, #12
 8001b04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b06:	f04f 33ff 	mov.w	r3, #4294967295
 8001b0a:	e009      	b.n	8001b20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b0c:	4b08      	ldr	r3, [pc, #32]	@ (8001b30 <_sbrk+0x64>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b12:	4b07      	ldr	r3, [pc, #28]	@ (8001b30 <_sbrk+0x64>)
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4413      	add	r3, r2
 8001b1a:	4a05      	ldr	r2, [pc, #20]	@ (8001b30 <_sbrk+0x64>)
 8001b1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3718      	adds	r7, #24
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	20020000 	.word	0x20020000
 8001b2c:	00000400 	.word	0x00000400
 8001b30:	200006f4 	.word	0x200006f4
 8001b34:	200045a0 	.word	0x200045a0

08001b38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b3c:	4b06      	ldr	r3, [pc, #24]	@ (8001b58 <SystemInit+0x20>)
 8001b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b42:	4a05      	ldr	r2, [pc, #20]	@ (8001b58 <SystemInit+0x20>)
 8001b44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b4c:	bf00      	nop
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	e000ed00 	.word	0xe000ed00

08001b5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b5c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b94 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001b60:	f7ff ffea 	bl	8001b38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b64:	480c      	ldr	r0, [pc, #48]	@ (8001b98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b66:	490d      	ldr	r1, [pc, #52]	@ (8001b9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b68:	4a0d      	ldr	r2, [pc, #52]	@ (8001ba0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b6c:	e002      	b.n	8001b74 <LoopCopyDataInit>

08001b6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b72:	3304      	adds	r3, #4

08001b74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b78:	d3f9      	bcc.n	8001b6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b7a:	4a0a      	ldr	r2, [pc, #40]	@ (8001ba4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b7c:	4c0a      	ldr	r4, [pc, #40]	@ (8001ba8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b80:	e001      	b.n	8001b86 <LoopFillZerobss>

08001b82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b84:	3204      	adds	r2, #4

08001b86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b88:	d3fb      	bcc.n	8001b82 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001b8a:	f005 fa5f 	bl	800704c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b8e:	f7ff fa8b 	bl	80010a8 <main>
  bx  lr    
 8001b92:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b9c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001ba0:	080091d8 	.word	0x080091d8
  ldr r2, =_sbss
 8001ba4:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001ba8:	2000459c 	.word	0x2000459c

08001bac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bac:	e7fe      	b.n	8001bac <ADC_IRQHandler>
	...

08001bb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bb4:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf0 <HAL_Init+0x40>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a0d      	ldr	r2, [pc, #52]	@ (8001bf0 <HAL_Init+0x40>)
 8001bba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf0 <HAL_Init+0x40>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a0a      	ldr	r2, [pc, #40]	@ (8001bf0 <HAL_Init+0x40>)
 8001bc6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bcc:	4b08      	ldr	r3, [pc, #32]	@ (8001bf0 <HAL_Init+0x40>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a07      	ldr	r2, [pc, #28]	@ (8001bf0 <HAL_Init+0x40>)
 8001bd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bd8:	2003      	movs	r0, #3
 8001bda:	f000 fcd8 	bl	800258e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bde:	200f      	movs	r0, #15
 8001be0:	f7ff fe2e 	bl	8001840 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001be4:	f7ff fc8c 	bl	8001500 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40023c00 	.word	0x40023c00

08001bf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bf8:	4b06      	ldr	r3, [pc, #24]	@ (8001c14 <HAL_IncTick+0x20>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	4b06      	ldr	r3, [pc, #24]	@ (8001c18 <HAL_IncTick+0x24>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4413      	add	r3, r2
 8001c04:	4a04      	ldr	r2, [pc, #16]	@ (8001c18 <HAL_IncTick+0x24>)
 8001c06:	6013      	str	r3, [r2, #0]
}
 8001c08:	bf00      	nop
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	20000008 	.word	0x20000008
 8001c18:	200006f8 	.word	0x200006f8

08001c1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c20:	4b03      	ldr	r3, [pc, #12]	@ (8001c30 <HAL_GetTick+0x14>)
 8001c22:	681b      	ldr	r3, [r3, #0]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	200006f8 	.word	0x200006f8

08001c34 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d101      	bne.n	8001c4a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e033      	b.n	8001cb2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d109      	bne.n	8001c66 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f7ff fc80 	bl	8001558 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6a:	f003 0310 	and.w	r3, r3, #16
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d118      	bne.n	8001ca4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c76:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001c7a:	f023 0302 	bic.w	r3, r3, #2
 8001c7e:	f043 0202 	orr.w	r2, r3, #2
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 fad8 	bl	800223c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c96:	f023 0303 	bic.w	r3, r3, #3
 8001c9a:	f043 0201 	orr.w	r2, r3, #1
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	641a      	str	r2, [r3, #64]	@ 0x40
 8001ca2:	e001      	b.n	8001ca8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
	...

08001cbc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d101      	bne.n	8001cd6 <HAL_ADC_Start+0x1a>
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	e0b2      	b.n	8001e3c <HAL_ADC_Start+0x180>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f003 0301 	and.w	r3, r3, #1
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d018      	beq.n	8001d1e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	689a      	ldr	r2, [r3, #8]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f042 0201 	orr.w	r2, r2, #1
 8001cfa:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001cfc:	4b52      	ldr	r3, [pc, #328]	@ (8001e48 <HAL_ADC_Start+0x18c>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a52      	ldr	r2, [pc, #328]	@ (8001e4c <HAL_ADC_Start+0x190>)
 8001d02:	fba2 2303 	umull	r2, r3, r2, r3
 8001d06:	0c9a      	lsrs	r2, r3, #18
 8001d08:	4613      	mov	r3, r2
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	4413      	add	r3, r2
 8001d0e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001d10:	e002      	b.n	8001d18 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	3b01      	subs	r3, #1
 8001d16:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d1f9      	bne.n	8001d12 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d17a      	bne.n	8001e22 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d30:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001d34:	f023 0301 	bic.w	r3, r3, #1
 8001d38:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d007      	beq.n	8001d5e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d52:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001d56:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d62:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d6a:	d106      	bne.n	8001d7a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d70:	f023 0206 	bic.w	r2, r3, #6
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	645a      	str	r2, [r3, #68]	@ 0x44
 8001d78:	e002      	b.n	8001d80 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d88:	4b31      	ldr	r3, [pc, #196]	@ (8001e50 <HAL_ADC_Start+0x194>)
 8001d8a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001d94:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f003 031f 	and.w	r3, r3, #31
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d12a      	bne.n	8001df8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a2b      	ldr	r2, [pc, #172]	@ (8001e54 <HAL_ADC_Start+0x198>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d015      	beq.n	8001dd8 <HAL_ADC_Start+0x11c>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a29      	ldr	r2, [pc, #164]	@ (8001e58 <HAL_ADC_Start+0x19c>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d105      	bne.n	8001dc2 <HAL_ADC_Start+0x106>
 8001db6:	4b26      	ldr	r3, [pc, #152]	@ (8001e50 <HAL_ADC_Start+0x194>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f003 031f 	and.w	r3, r3, #31
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d00a      	beq.n	8001dd8 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a25      	ldr	r2, [pc, #148]	@ (8001e5c <HAL_ADC_Start+0x1a0>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d136      	bne.n	8001e3a <HAL_ADC_Start+0x17e>
 8001dcc:	4b20      	ldr	r3, [pc, #128]	@ (8001e50 <HAL_ADC_Start+0x194>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f003 0310 	and.w	r3, r3, #16
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d130      	bne.n	8001e3a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d129      	bne.n	8001e3a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	689a      	ldr	r2, [r3, #8]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001df4:	609a      	str	r2, [r3, #8]
 8001df6:	e020      	b.n	8001e3a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a15      	ldr	r2, [pc, #84]	@ (8001e54 <HAL_ADC_Start+0x198>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d11b      	bne.n	8001e3a <HAL_ADC_Start+0x17e>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d114      	bne.n	8001e3a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	689a      	ldr	r2, [r3, #8]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001e1e:	609a      	str	r2, [r3, #8]
 8001e20:	e00b      	b.n	8001e3a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e26:	f043 0210 	orr.w	r2, r3, #16
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e32:	f043 0201 	orr.w	r2, r3, #1
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001e3a:	2300      	movs	r3, #0
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	20000000 	.word	0x20000000
 8001e4c:	431bde83 	.word	0x431bde83
 8001e50:	40012300 	.word	0x40012300
 8001e54:	40012000 	.word	0x40012000
 8001e58:	40012100 	.word	0x40012100
 8001e5c:	40012200 	.word	0x40012200

08001e60 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d101      	bne.n	8001e76 <HAL_ADC_Stop+0x16>
 8001e72:	2302      	movs	r3, #2
 8001e74:	e021      	b.n	8001eba <HAL_ADC_Stop+0x5a>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	689a      	ldr	r2, [r3, #8]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f022 0201 	bic.w	r2, r2, #1
 8001e8c:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f003 0301 	and.w	r3, r3, #1
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d109      	bne.n	8001eb0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001ea4:	f023 0301 	bic.w	r3, r3, #1
 8001ea8:	f043 0201 	orr.w	r2, r3, #1
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b084      	sub	sp, #16
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
 8001ece:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ede:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ee2:	d113      	bne.n	8001f0c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001eee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ef2:	d10b      	bne.n	8001f0c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef8:	f043 0220 	orr.w	r2, r3, #32
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e063      	b.n	8001fd4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f0c:	f7ff fe86 	bl	8001c1c <HAL_GetTick>
 8001f10:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f12:	e021      	b.n	8001f58 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f1a:	d01d      	beq.n	8001f58 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d007      	beq.n	8001f32 <HAL_ADC_PollForConversion+0x6c>
 8001f22:	f7ff fe7b 	bl	8001c1c <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	683a      	ldr	r2, [r7, #0]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d212      	bcs.n	8001f58 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d00b      	beq.n	8001f58 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f44:	f043 0204 	orr.w	r2, r3, #4
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e03d      	b.n	8001fd4 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d1d6      	bne.n	8001f14 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f06f 0212 	mvn.w	r2, #18
 8001f6e:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f74:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d123      	bne.n	8001fd2 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d11f      	bne.n	8001fd2 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f98:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d006      	beq.n	8001fae <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d111      	bne.n	8001fd2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fbe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d105      	bne.n	8001fd2 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fca:	f043 0201 	orr.w	r2, r3, #1
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3710      	adds	r7, #16
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
	...

08001ff8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002002:	2300      	movs	r3, #0
 8002004:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800200c:	2b01      	cmp	r3, #1
 800200e:	d101      	bne.n	8002014 <HAL_ADC_ConfigChannel+0x1c>
 8002010:	2302      	movs	r3, #2
 8002012:	e105      	b.n	8002220 <HAL_ADC_ConfigChannel+0x228>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2b09      	cmp	r3, #9
 8002022:	d925      	bls.n	8002070 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	68d9      	ldr	r1, [r3, #12]
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	b29b      	uxth	r3, r3
 8002030:	461a      	mov	r2, r3
 8002032:	4613      	mov	r3, r2
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	4413      	add	r3, r2
 8002038:	3b1e      	subs	r3, #30
 800203a:	2207      	movs	r2, #7
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	43da      	mvns	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	400a      	ands	r2, r1
 8002048:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68d9      	ldr	r1, [r3, #12]
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	689a      	ldr	r2, [r3, #8]
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	b29b      	uxth	r3, r3
 800205a:	4618      	mov	r0, r3
 800205c:	4603      	mov	r3, r0
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	4403      	add	r3, r0
 8002062:	3b1e      	subs	r3, #30
 8002064:	409a      	lsls	r2, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	430a      	orrs	r2, r1
 800206c:	60da      	str	r2, [r3, #12]
 800206e:	e022      	b.n	80020b6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6919      	ldr	r1, [r3, #16]
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	b29b      	uxth	r3, r3
 800207c:	461a      	mov	r2, r3
 800207e:	4613      	mov	r3, r2
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	4413      	add	r3, r2
 8002084:	2207      	movs	r2, #7
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	43da      	mvns	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	400a      	ands	r2, r1
 8002092:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6919      	ldr	r1, [r3, #16]
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	689a      	ldr	r2, [r3, #8]
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	4618      	mov	r0, r3
 80020a6:	4603      	mov	r3, r0
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	4403      	add	r3, r0
 80020ac:	409a      	lsls	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	430a      	orrs	r2, r1
 80020b4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	2b06      	cmp	r3, #6
 80020bc:	d824      	bhi.n	8002108 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685a      	ldr	r2, [r3, #4]
 80020c8:	4613      	mov	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	4413      	add	r3, r2
 80020ce:	3b05      	subs	r3, #5
 80020d0:	221f      	movs	r2, #31
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	43da      	mvns	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	400a      	ands	r2, r1
 80020de:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	4618      	mov	r0, r3
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685a      	ldr	r2, [r3, #4]
 80020f2:	4613      	mov	r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	4413      	add	r3, r2
 80020f8:	3b05      	subs	r3, #5
 80020fa:	fa00 f203 	lsl.w	r2, r0, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	430a      	orrs	r2, r1
 8002104:	635a      	str	r2, [r3, #52]	@ 0x34
 8002106:	e04c      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	2b0c      	cmp	r3, #12
 800210e:	d824      	bhi.n	800215a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685a      	ldr	r2, [r3, #4]
 800211a:	4613      	mov	r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	4413      	add	r3, r2
 8002120:	3b23      	subs	r3, #35	@ 0x23
 8002122:	221f      	movs	r2, #31
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	43da      	mvns	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	400a      	ands	r2, r1
 8002130:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	b29b      	uxth	r3, r3
 800213e:	4618      	mov	r0, r3
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685a      	ldr	r2, [r3, #4]
 8002144:	4613      	mov	r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	4413      	add	r3, r2
 800214a:	3b23      	subs	r3, #35	@ 0x23
 800214c:	fa00 f203 	lsl.w	r2, r0, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	430a      	orrs	r2, r1
 8002156:	631a      	str	r2, [r3, #48]	@ 0x30
 8002158:	e023      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685a      	ldr	r2, [r3, #4]
 8002164:	4613      	mov	r3, r2
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	4413      	add	r3, r2
 800216a:	3b41      	subs	r3, #65	@ 0x41
 800216c:	221f      	movs	r2, #31
 800216e:	fa02 f303 	lsl.w	r3, r2, r3
 8002172:	43da      	mvns	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	400a      	ands	r2, r1
 800217a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	b29b      	uxth	r3, r3
 8002188:	4618      	mov	r0, r3
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685a      	ldr	r2, [r3, #4]
 800218e:	4613      	mov	r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	4413      	add	r3, r2
 8002194:	3b41      	subs	r3, #65	@ 0x41
 8002196:	fa00 f203 	lsl.w	r2, r0, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	430a      	orrs	r2, r1
 80021a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021a2:	4b22      	ldr	r3, [pc, #136]	@ (800222c <HAL_ADC_ConfigChannel+0x234>)
 80021a4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a21      	ldr	r2, [pc, #132]	@ (8002230 <HAL_ADC_ConfigChannel+0x238>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d109      	bne.n	80021c4 <HAL_ADC_ConfigChannel+0x1cc>
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2b12      	cmp	r3, #18
 80021b6:	d105      	bne.n	80021c4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a19      	ldr	r2, [pc, #100]	@ (8002230 <HAL_ADC_ConfigChannel+0x238>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d123      	bne.n	8002216 <HAL_ADC_ConfigChannel+0x21e>
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2b10      	cmp	r3, #16
 80021d4:	d003      	beq.n	80021de <HAL_ADC_ConfigChannel+0x1e6>
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2b11      	cmp	r3, #17
 80021dc:	d11b      	bne.n	8002216 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2b10      	cmp	r3, #16
 80021f0:	d111      	bne.n	8002216 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021f2:	4b10      	ldr	r3, [pc, #64]	@ (8002234 <HAL_ADC_ConfigChannel+0x23c>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a10      	ldr	r2, [pc, #64]	@ (8002238 <HAL_ADC_ConfigChannel+0x240>)
 80021f8:	fba2 2303 	umull	r2, r3, r2, r3
 80021fc:	0c9a      	lsrs	r2, r3, #18
 80021fe:	4613      	mov	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4413      	add	r3, r2
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002208:	e002      	b.n	8002210 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	3b01      	subs	r3, #1
 800220e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d1f9      	bne.n	800220a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800221e:	2300      	movs	r3, #0
}
 8002220:	4618      	mov	r0, r3
 8002222:	3714      	adds	r7, #20
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr
 800222c:	40012300 	.word	0x40012300
 8002230:	40012000 	.word	0x40012000
 8002234:	20000000 	.word	0x20000000
 8002238:	431bde83 	.word	0x431bde83

0800223c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002244:	4b79      	ldr	r3, [pc, #484]	@ (800242c <ADC_Init+0x1f0>)
 8002246:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	685a      	ldr	r2, [r3, #4]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	431a      	orrs	r2, r3
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	685a      	ldr	r2, [r3, #4]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002270:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6859      	ldr	r1, [r3, #4]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	021a      	lsls	r2, r3, #8
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	430a      	orrs	r2, r1
 8002284:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	685a      	ldr	r2, [r3, #4]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002294:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	6859      	ldr	r1, [r3, #4]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689a      	ldr	r2, [r3, #8]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	430a      	orrs	r2, r1
 80022a6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	689a      	ldr	r2, [r3, #8]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6899      	ldr	r1, [r3, #8]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	68da      	ldr	r2, [r3, #12]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	430a      	orrs	r2, r1
 80022c8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ce:	4a58      	ldr	r2, [pc, #352]	@ (8002430 <ADC_Init+0x1f4>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d022      	beq.n	800231a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	689a      	ldr	r2, [r3, #8]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80022e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	6899      	ldr	r1, [r3, #8]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	430a      	orrs	r2, r1
 80022f4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002304:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	6899      	ldr	r1, [r3, #8]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	430a      	orrs	r2, r1
 8002316:	609a      	str	r2, [r3, #8]
 8002318:	e00f      	b.n	800233a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	689a      	ldr	r2, [r3, #8]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002328:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	689a      	ldr	r2, [r3, #8]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002338:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	689a      	ldr	r2, [r3, #8]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f022 0202 	bic.w	r2, r2, #2
 8002348:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	6899      	ldr	r1, [r3, #8]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	7e1b      	ldrb	r3, [r3, #24]
 8002354:	005a      	lsls	r2, r3, #1
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	430a      	orrs	r2, r1
 800235c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d01b      	beq.n	80023a0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	685a      	ldr	r2, [r3, #4]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002376:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	685a      	ldr	r2, [r3, #4]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002386:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6859      	ldr	r1, [r3, #4]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002392:	3b01      	subs	r3, #1
 8002394:	035a      	lsls	r2, r3, #13
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	430a      	orrs	r2, r1
 800239c:	605a      	str	r2, [r3, #4]
 800239e:	e007      	b.n	80023b0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	685a      	ldr	r2, [r3, #4]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023ae:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80023be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	69db      	ldr	r3, [r3, #28]
 80023ca:	3b01      	subs	r3, #1
 80023cc:	051a      	lsls	r2, r3, #20
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	430a      	orrs	r2, r1
 80023d4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	689a      	ldr	r2, [r3, #8]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80023e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6899      	ldr	r1, [r3, #8]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80023f2:	025a      	lsls	r2, r3, #9
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	430a      	orrs	r2, r1
 80023fa:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	689a      	ldr	r2, [r3, #8]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800240a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	6899      	ldr	r1, [r3, #8]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	029a      	lsls	r2, r3, #10
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	430a      	orrs	r2, r1
 800241e:	609a      	str	r2, [r3, #8]
}
 8002420:	bf00      	nop
 8002422:	3714      	adds	r7, #20
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr
 800242c:	40012300 	.word	0x40012300
 8002430:	0f000001 	.word	0x0f000001

08002434 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f003 0307 	and.w	r3, r3, #7
 8002442:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002444:	4b0c      	ldr	r3, [pc, #48]	@ (8002478 <__NVIC_SetPriorityGrouping+0x44>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800244a:	68ba      	ldr	r2, [r7, #8]
 800244c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002450:	4013      	ands	r3, r2
 8002452:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800245c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002460:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002464:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002466:	4a04      	ldr	r2, [pc, #16]	@ (8002478 <__NVIC_SetPriorityGrouping+0x44>)
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	60d3      	str	r3, [r2, #12]
}
 800246c:	bf00      	nop
 800246e:	3714      	adds	r7, #20
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	e000ed00 	.word	0xe000ed00

0800247c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002480:	4b04      	ldr	r3, [pc, #16]	@ (8002494 <__NVIC_GetPriorityGrouping+0x18>)
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	0a1b      	lsrs	r3, r3, #8
 8002486:	f003 0307 	and.w	r3, r3, #7
}
 800248a:	4618      	mov	r0, r3
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	e000ed00 	.word	0xe000ed00

08002498 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	4603      	mov	r3, r0
 80024a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	db0b      	blt.n	80024c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024aa:	79fb      	ldrb	r3, [r7, #7]
 80024ac:	f003 021f 	and.w	r2, r3, #31
 80024b0:	4907      	ldr	r1, [pc, #28]	@ (80024d0 <__NVIC_EnableIRQ+0x38>)
 80024b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b6:	095b      	lsrs	r3, r3, #5
 80024b8:	2001      	movs	r0, #1
 80024ba:	fa00 f202 	lsl.w	r2, r0, r2
 80024be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80024c2:	bf00      	nop
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	e000e100 	.word	0xe000e100

080024d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	4603      	mov	r3, r0
 80024dc:	6039      	str	r1, [r7, #0]
 80024de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	db0a      	blt.n	80024fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	b2da      	uxtb	r2, r3
 80024ec:	490c      	ldr	r1, [pc, #48]	@ (8002520 <__NVIC_SetPriority+0x4c>)
 80024ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f2:	0112      	lsls	r2, r2, #4
 80024f4:	b2d2      	uxtb	r2, r2
 80024f6:	440b      	add	r3, r1
 80024f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024fc:	e00a      	b.n	8002514 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	b2da      	uxtb	r2, r3
 8002502:	4908      	ldr	r1, [pc, #32]	@ (8002524 <__NVIC_SetPriority+0x50>)
 8002504:	79fb      	ldrb	r3, [r7, #7]
 8002506:	f003 030f 	and.w	r3, r3, #15
 800250a:	3b04      	subs	r3, #4
 800250c:	0112      	lsls	r2, r2, #4
 800250e:	b2d2      	uxtb	r2, r2
 8002510:	440b      	add	r3, r1
 8002512:	761a      	strb	r2, [r3, #24]
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	e000e100 	.word	0xe000e100
 8002524:	e000ed00 	.word	0xe000ed00

08002528 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002528:	b480      	push	{r7}
 800252a:	b089      	sub	sp, #36	@ 0x24
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f003 0307 	and.w	r3, r3, #7
 800253a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	f1c3 0307 	rsb	r3, r3, #7
 8002542:	2b04      	cmp	r3, #4
 8002544:	bf28      	it	cs
 8002546:	2304      	movcs	r3, #4
 8002548:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	3304      	adds	r3, #4
 800254e:	2b06      	cmp	r3, #6
 8002550:	d902      	bls.n	8002558 <NVIC_EncodePriority+0x30>
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	3b03      	subs	r3, #3
 8002556:	e000      	b.n	800255a <NVIC_EncodePriority+0x32>
 8002558:	2300      	movs	r3, #0
 800255a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800255c:	f04f 32ff 	mov.w	r2, #4294967295
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	fa02 f303 	lsl.w	r3, r2, r3
 8002566:	43da      	mvns	r2, r3
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	401a      	ands	r2, r3
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002570:	f04f 31ff 	mov.w	r1, #4294967295
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	fa01 f303 	lsl.w	r3, r1, r3
 800257a:	43d9      	mvns	r1, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002580:	4313      	orrs	r3, r2
         );
}
 8002582:	4618      	mov	r0, r3
 8002584:	3724      	adds	r7, #36	@ 0x24
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr

0800258e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800258e:	b580      	push	{r7, lr}
 8002590:	b082      	sub	sp, #8
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f7ff ff4c 	bl	8002434 <__NVIC_SetPriorityGrouping>
}
 800259c:	bf00      	nop
 800259e:	3708      	adds	r7, #8
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4603      	mov	r3, r0
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
 80025b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025b2:	2300      	movs	r3, #0
 80025b4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025b6:	f7ff ff61 	bl	800247c <__NVIC_GetPriorityGrouping>
 80025ba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	68b9      	ldr	r1, [r7, #8]
 80025c0:	6978      	ldr	r0, [r7, #20]
 80025c2:	f7ff ffb1 	bl	8002528 <NVIC_EncodePriority>
 80025c6:	4602      	mov	r2, r0
 80025c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025cc:	4611      	mov	r1, r2
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff ff80 	bl	80024d4 <__NVIC_SetPriority>
}
 80025d4:	bf00      	nop
 80025d6:	3718      	adds	r7, #24
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	4603      	mov	r3, r0
 80025e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7ff ff54 	bl	8002498 <__NVIC_EnableIRQ>
}
 80025f0:	bf00      	nop
 80025f2:	3708      	adds	r7, #8
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002600:	2300      	movs	r3, #0
 8002602:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002604:	f7ff fb0a 	bl	8001c1c <HAL_GetTick>
 8002608:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d101      	bne.n	8002614 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e099      	b.n	8002748 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2202      	movs	r2, #2
 8002618:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f022 0201 	bic.w	r2, r2, #1
 8002632:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002634:	e00f      	b.n	8002656 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002636:	f7ff faf1 	bl	8001c1c <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b05      	cmp	r3, #5
 8002642:	d908      	bls.n	8002656 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2220      	movs	r2, #32
 8002648:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2203      	movs	r2, #3
 800264e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e078      	b.n	8002748 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0301 	and.w	r3, r3, #1
 8002660:	2b00      	cmp	r3, #0
 8002662:	d1e8      	bne.n	8002636 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800266c:	697a      	ldr	r2, [r7, #20]
 800266e:	4b38      	ldr	r3, [pc, #224]	@ (8002750 <HAL_DMA_Init+0x158>)
 8002670:	4013      	ands	r3, r2
 8002672:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002682:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800268e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800269a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a1b      	ldr	r3, [r3, #32]
 80026a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026a2:	697a      	ldr	r2, [r7, #20]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ac:	2b04      	cmp	r3, #4
 80026ae:	d107      	bne.n	80026c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b8:	4313      	orrs	r3, r2
 80026ba:	697a      	ldr	r2, [r7, #20]
 80026bc:	4313      	orrs	r3, r2
 80026be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	697a      	ldr	r2, [r7, #20]
 80026c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	f023 0307 	bic.w	r3, r3, #7
 80026d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026dc:	697a      	ldr	r2, [r7, #20]
 80026de:	4313      	orrs	r3, r2
 80026e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e6:	2b04      	cmp	r3, #4
 80026e8:	d117      	bne.n	800271a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ee:	697a      	ldr	r2, [r7, #20]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00e      	beq.n	800271a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f000 f9e9 	bl	8002ad4 <DMA_CheckFifoParam>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d008      	beq.n	800271a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2240      	movs	r2, #64	@ 0x40
 800270c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2201      	movs	r2, #1
 8002712:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002716:	2301      	movs	r3, #1
 8002718:	e016      	b.n	8002748 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	697a      	ldr	r2, [r7, #20]
 8002720:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f000 f9a0 	bl	8002a68 <DMA_CalcBaseAndBitshift>
 8002728:	4603      	mov	r3, r0
 800272a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002730:	223f      	movs	r2, #63	@ 0x3f
 8002732:	409a      	lsls	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2201      	movs	r2, #1
 8002742:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002746:	2300      	movs	r3, #0
}
 8002748:	4618      	mov	r0, r3
 800274a:	3718      	adds	r7, #24
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	f010803f 	.word	0xf010803f

08002754 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800275c:	2300      	movs	r3, #0
 800275e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002760:	4b8e      	ldr	r3, [pc, #568]	@ (800299c <HAL_DMA_IRQHandler+0x248>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a8e      	ldr	r2, [pc, #568]	@ (80029a0 <HAL_DMA_IRQHandler+0x24c>)
 8002766:	fba2 2303 	umull	r2, r3, r2, r3
 800276a:	0a9b      	lsrs	r3, r3, #10
 800276c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002772:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800277e:	2208      	movs	r2, #8
 8002780:	409a      	lsls	r2, r3
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	4013      	ands	r3, r2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d01a      	beq.n	80027c0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0304 	and.w	r3, r3, #4
 8002794:	2b00      	cmp	r3, #0
 8002796:	d013      	beq.n	80027c0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 0204 	bic.w	r2, r2, #4
 80027a6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ac:	2208      	movs	r2, #8
 80027ae:	409a      	lsls	r2, r3
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027b8:	f043 0201 	orr.w	r2, r3, #1
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027c4:	2201      	movs	r2, #1
 80027c6:	409a      	lsls	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	4013      	ands	r3, r2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d012      	beq.n	80027f6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d00b      	beq.n	80027f6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027e2:	2201      	movs	r2, #1
 80027e4:	409a      	lsls	r2, r3
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ee:	f043 0202 	orr.w	r2, r3, #2
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027fa:	2204      	movs	r2, #4
 80027fc:	409a      	lsls	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	4013      	ands	r3, r2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d012      	beq.n	800282c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0302 	and.w	r3, r3, #2
 8002810:	2b00      	cmp	r3, #0
 8002812:	d00b      	beq.n	800282c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002818:	2204      	movs	r2, #4
 800281a:	409a      	lsls	r2, r3
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002824:	f043 0204 	orr.w	r2, r3, #4
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002830:	2210      	movs	r2, #16
 8002832:	409a      	lsls	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	4013      	ands	r3, r2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d043      	beq.n	80028c4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0308 	and.w	r3, r3, #8
 8002846:	2b00      	cmp	r3, #0
 8002848:	d03c      	beq.n	80028c4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800284e:	2210      	movs	r2, #16
 8002850:	409a      	lsls	r2, r3
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d018      	beq.n	8002896 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d108      	bne.n	8002884 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002876:	2b00      	cmp	r3, #0
 8002878:	d024      	beq.n	80028c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	4798      	blx	r3
 8002882:	e01f      	b.n	80028c4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002888:	2b00      	cmp	r3, #0
 800288a:	d01b      	beq.n	80028c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	4798      	blx	r3
 8002894:	e016      	b.n	80028c4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d107      	bne.n	80028b4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f022 0208 	bic.w	r2, r2, #8
 80028b2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d003      	beq.n	80028c4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028c8:	2220      	movs	r2, #32
 80028ca:	409a      	lsls	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	4013      	ands	r3, r2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	f000 808f 	beq.w	80029f4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0310 	and.w	r3, r3, #16
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f000 8087 	beq.w	80029f4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ea:	2220      	movs	r2, #32
 80028ec:	409a      	lsls	r2, r3
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b05      	cmp	r3, #5
 80028fc:	d136      	bne.n	800296c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f022 0216 	bic.w	r2, r2, #22
 800290c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	695a      	ldr	r2, [r3, #20]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800291c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002922:	2b00      	cmp	r3, #0
 8002924:	d103      	bne.n	800292e <HAL_DMA_IRQHandler+0x1da>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800292a:	2b00      	cmp	r3, #0
 800292c:	d007      	beq.n	800293e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f022 0208 	bic.w	r2, r2, #8
 800293c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002942:	223f      	movs	r2, #63	@ 0x3f
 8002944:	409a      	lsls	r2, r3
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2201      	movs	r2, #1
 800294e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800295e:	2b00      	cmp	r3, #0
 8002960:	d07e      	beq.n	8002a60 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	4798      	blx	r3
        }
        return;
 800296a:	e079      	b.n	8002a60 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d01d      	beq.n	80029b6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d10d      	bne.n	80029a4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800298c:	2b00      	cmp	r3, #0
 800298e:	d031      	beq.n	80029f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	4798      	blx	r3
 8002998:	e02c      	b.n	80029f4 <HAL_DMA_IRQHandler+0x2a0>
 800299a:	bf00      	nop
 800299c:	20000000 	.word	0x20000000
 80029a0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d023      	beq.n	80029f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	4798      	blx	r3
 80029b4:	e01e      	b.n	80029f4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d10f      	bne.n	80029e4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f022 0210 	bic.w	r2, r2, #16
 80029d2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d003      	beq.n	80029f4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d032      	beq.n	8002a62 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d022      	beq.n	8002a4e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2205      	movs	r2, #5
 8002a0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f022 0201 	bic.w	r2, r2, #1
 8002a1e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	3301      	adds	r3, #1
 8002a24:	60bb      	str	r3, [r7, #8]
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d307      	bcc.n	8002a3c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1f2      	bne.n	8002a20 <HAL_DMA_IRQHandler+0x2cc>
 8002a3a:	e000      	b.n	8002a3e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002a3c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2201      	movs	r2, #1
 8002a42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d005      	beq.n	8002a62 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	4798      	blx	r3
 8002a5e:	e000      	b.n	8002a62 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002a60:	bf00      	nop
    }
  }
}
 8002a62:	3718      	adds	r7, #24
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	3b10      	subs	r3, #16
 8002a78:	4a14      	ldr	r2, [pc, #80]	@ (8002acc <DMA_CalcBaseAndBitshift+0x64>)
 8002a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a7e:	091b      	lsrs	r3, r3, #4
 8002a80:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a82:	4a13      	ldr	r2, [pc, #76]	@ (8002ad0 <DMA_CalcBaseAndBitshift+0x68>)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	4413      	add	r3, r2
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2b03      	cmp	r3, #3
 8002a94:	d909      	bls.n	8002aaa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002a9e:	f023 0303 	bic.w	r3, r3, #3
 8002aa2:	1d1a      	adds	r2, r3, #4
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	659a      	str	r2, [r3, #88]	@ 0x58
 8002aa8:	e007      	b.n	8002aba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002ab2:	f023 0303 	bic.w	r3, r3, #3
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3714      	adds	r7, #20
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	aaaaaaab 	.word	0xaaaaaaab
 8002ad0:	08008e4c 	.word	0x08008e4c

08002ad4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002adc:	2300      	movs	r3, #0
 8002ade:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ae4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d11f      	bne.n	8002b2e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	2b03      	cmp	r3, #3
 8002af2:	d856      	bhi.n	8002ba2 <DMA_CheckFifoParam+0xce>
 8002af4:	a201      	add	r2, pc, #4	@ (adr r2, 8002afc <DMA_CheckFifoParam+0x28>)
 8002af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002afa:	bf00      	nop
 8002afc:	08002b0d 	.word	0x08002b0d
 8002b00:	08002b1f 	.word	0x08002b1f
 8002b04:	08002b0d 	.word	0x08002b0d
 8002b08:	08002ba3 	.word	0x08002ba3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b10:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d046      	beq.n	8002ba6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b1c:	e043      	b.n	8002ba6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b22:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002b26:	d140      	bne.n	8002baa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b2c:	e03d      	b.n	8002baa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b36:	d121      	bne.n	8002b7c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	2b03      	cmp	r3, #3
 8002b3c:	d837      	bhi.n	8002bae <DMA_CheckFifoParam+0xda>
 8002b3e:	a201      	add	r2, pc, #4	@ (adr r2, 8002b44 <DMA_CheckFifoParam+0x70>)
 8002b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b44:	08002b55 	.word	0x08002b55
 8002b48:	08002b5b 	.word	0x08002b5b
 8002b4c:	08002b55 	.word	0x08002b55
 8002b50:	08002b6d 	.word	0x08002b6d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	73fb      	strb	r3, [r7, #15]
      break;
 8002b58:	e030      	b.n	8002bbc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b5e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d025      	beq.n	8002bb2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b6a:	e022      	b.n	8002bb2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b70:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002b74:	d11f      	bne.n	8002bb6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b7a:	e01c      	b.n	8002bb6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d903      	bls.n	8002b8a <DMA_CheckFifoParam+0xb6>
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	2b03      	cmp	r3, #3
 8002b86:	d003      	beq.n	8002b90 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b88:	e018      	b.n	8002bbc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	73fb      	strb	r3, [r7, #15]
      break;
 8002b8e:	e015      	b.n	8002bbc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b94:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d00e      	beq.n	8002bba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	73fb      	strb	r3, [r7, #15]
      break;
 8002ba0:	e00b      	b.n	8002bba <DMA_CheckFifoParam+0xe6>
      break;
 8002ba2:	bf00      	nop
 8002ba4:	e00a      	b.n	8002bbc <DMA_CheckFifoParam+0xe8>
      break;
 8002ba6:	bf00      	nop
 8002ba8:	e008      	b.n	8002bbc <DMA_CheckFifoParam+0xe8>
      break;
 8002baa:	bf00      	nop
 8002bac:	e006      	b.n	8002bbc <DMA_CheckFifoParam+0xe8>
      break;
 8002bae:	bf00      	nop
 8002bb0:	e004      	b.n	8002bbc <DMA_CheckFifoParam+0xe8>
      break;
 8002bb2:	bf00      	nop
 8002bb4:	e002      	b.n	8002bbc <DMA_CheckFifoParam+0xe8>
      break;   
 8002bb6:	bf00      	nop
 8002bb8:	e000      	b.n	8002bbc <DMA_CheckFifoParam+0xe8>
      break;
 8002bba:	bf00      	nop
    }
  } 
  
  return status; 
 8002bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3714      	adds	r7, #20
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop

08002bcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b089      	sub	sp, #36	@ 0x24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bde:	2300      	movs	r3, #0
 8002be0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002be2:	2300      	movs	r3, #0
 8002be4:	61fb      	str	r3, [r7, #28]
 8002be6:	e16b      	b.n	8002ec0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002be8:	2201      	movs	r2, #1
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	697a      	ldr	r2, [r7, #20]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bfc:	693a      	ldr	r2, [r7, #16]
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	f040 815a 	bne.w	8002eba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f003 0303 	and.w	r3, r3, #3
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d005      	beq.n	8002c1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d130      	bne.n	8002c80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	2203      	movs	r2, #3
 8002c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2e:	43db      	mvns	r3, r3
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	4013      	ands	r3, r2
 8002c34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	68da      	ldr	r2, [r3, #12]
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c54:	2201      	movs	r2, #1
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5c:	43db      	mvns	r3, r3
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	4013      	ands	r3, r2
 8002c62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	091b      	lsrs	r3, r3, #4
 8002c6a:	f003 0201 	and.w	r2, r3, #1
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f003 0303 	and.w	r3, r3, #3
 8002c88:	2b03      	cmp	r3, #3
 8002c8a:	d017      	beq.n	8002cbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	2203      	movs	r2, #3
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	43db      	mvns	r3, r3
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	689a      	ldr	r2, [r3, #8]
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f003 0303 	and.w	r3, r3, #3
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d123      	bne.n	8002d10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	08da      	lsrs	r2, r3, #3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	3208      	adds	r2, #8
 8002cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	f003 0307 	and.w	r3, r3, #7
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	220f      	movs	r2, #15
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	43db      	mvns	r3, r3
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	691a      	ldr	r2, [r3, #16]
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	f003 0307 	and.w	r3, r3, #7
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	08da      	lsrs	r2, r3, #3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	3208      	adds	r2, #8
 8002d0a:	69b9      	ldr	r1, [r7, #24]
 8002d0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	2203      	movs	r2, #3
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	43db      	mvns	r3, r3
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	4013      	ands	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f003 0203 	and.w	r2, r3, #3
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	f000 80b4 	beq.w	8002eba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d52:	2300      	movs	r3, #0
 8002d54:	60fb      	str	r3, [r7, #12]
 8002d56:	4b60      	ldr	r3, [pc, #384]	@ (8002ed8 <HAL_GPIO_Init+0x30c>)
 8002d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d5a:	4a5f      	ldr	r2, [pc, #380]	@ (8002ed8 <HAL_GPIO_Init+0x30c>)
 8002d5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d60:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d62:	4b5d      	ldr	r3, [pc, #372]	@ (8002ed8 <HAL_GPIO_Init+0x30c>)
 8002d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d6a:	60fb      	str	r3, [r7, #12]
 8002d6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d6e:	4a5b      	ldr	r2, [pc, #364]	@ (8002edc <HAL_GPIO_Init+0x310>)
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	089b      	lsrs	r3, r3, #2
 8002d74:	3302      	adds	r3, #2
 8002d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	f003 0303 	and.w	r3, r3, #3
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	220f      	movs	r2, #15
 8002d86:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8a:	43db      	mvns	r3, r3
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	4013      	ands	r3, r2
 8002d90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a52      	ldr	r2, [pc, #328]	@ (8002ee0 <HAL_GPIO_Init+0x314>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d02b      	beq.n	8002df2 <HAL_GPIO_Init+0x226>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a51      	ldr	r2, [pc, #324]	@ (8002ee4 <HAL_GPIO_Init+0x318>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d025      	beq.n	8002dee <HAL_GPIO_Init+0x222>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a50      	ldr	r2, [pc, #320]	@ (8002ee8 <HAL_GPIO_Init+0x31c>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d01f      	beq.n	8002dea <HAL_GPIO_Init+0x21e>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a4f      	ldr	r2, [pc, #316]	@ (8002eec <HAL_GPIO_Init+0x320>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d019      	beq.n	8002de6 <HAL_GPIO_Init+0x21a>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a4e      	ldr	r2, [pc, #312]	@ (8002ef0 <HAL_GPIO_Init+0x324>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d013      	beq.n	8002de2 <HAL_GPIO_Init+0x216>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a4d      	ldr	r2, [pc, #308]	@ (8002ef4 <HAL_GPIO_Init+0x328>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d00d      	beq.n	8002dde <HAL_GPIO_Init+0x212>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a4c      	ldr	r2, [pc, #304]	@ (8002ef8 <HAL_GPIO_Init+0x32c>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d007      	beq.n	8002dda <HAL_GPIO_Init+0x20e>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a4b      	ldr	r2, [pc, #300]	@ (8002efc <HAL_GPIO_Init+0x330>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d101      	bne.n	8002dd6 <HAL_GPIO_Init+0x20a>
 8002dd2:	2307      	movs	r3, #7
 8002dd4:	e00e      	b.n	8002df4 <HAL_GPIO_Init+0x228>
 8002dd6:	2308      	movs	r3, #8
 8002dd8:	e00c      	b.n	8002df4 <HAL_GPIO_Init+0x228>
 8002dda:	2306      	movs	r3, #6
 8002ddc:	e00a      	b.n	8002df4 <HAL_GPIO_Init+0x228>
 8002dde:	2305      	movs	r3, #5
 8002de0:	e008      	b.n	8002df4 <HAL_GPIO_Init+0x228>
 8002de2:	2304      	movs	r3, #4
 8002de4:	e006      	b.n	8002df4 <HAL_GPIO_Init+0x228>
 8002de6:	2303      	movs	r3, #3
 8002de8:	e004      	b.n	8002df4 <HAL_GPIO_Init+0x228>
 8002dea:	2302      	movs	r3, #2
 8002dec:	e002      	b.n	8002df4 <HAL_GPIO_Init+0x228>
 8002dee:	2301      	movs	r3, #1
 8002df0:	e000      	b.n	8002df4 <HAL_GPIO_Init+0x228>
 8002df2:	2300      	movs	r3, #0
 8002df4:	69fa      	ldr	r2, [r7, #28]
 8002df6:	f002 0203 	and.w	r2, r2, #3
 8002dfa:	0092      	lsls	r2, r2, #2
 8002dfc:	4093      	lsls	r3, r2
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e04:	4935      	ldr	r1, [pc, #212]	@ (8002edc <HAL_GPIO_Init+0x310>)
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	089b      	lsrs	r3, r3, #2
 8002e0a:	3302      	adds	r3, #2
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e12:	4b3b      	ldr	r3, [pc, #236]	@ (8002f00 <HAL_GPIO_Init+0x334>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	43db      	mvns	r3, r3
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	4013      	ands	r3, r2
 8002e20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d003      	beq.n	8002e36 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002e2e:	69ba      	ldr	r2, [r7, #24]
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e36:	4a32      	ldr	r2, [pc, #200]	@ (8002f00 <HAL_GPIO_Init+0x334>)
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e3c:	4b30      	ldr	r3, [pc, #192]	@ (8002f00 <HAL_GPIO_Init+0x334>)
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	43db      	mvns	r3, r3
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d003      	beq.n	8002e60 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e60:	4a27      	ldr	r2, [pc, #156]	@ (8002f00 <HAL_GPIO_Init+0x334>)
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e66:	4b26      	ldr	r3, [pc, #152]	@ (8002f00 <HAL_GPIO_Init+0x334>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	43db      	mvns	r3, r3
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	4013      	ands	r3, r2
 8002e74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d003      	beq.n	8002e8a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e8a:	4a1d      	ldr	r2, [pc, #116]	@ (8002f00 <HAL_GPIO_Init+0x334>)
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e90:	4b1b      	ldr	r3, [pc, #108]	@ (8002f00 <HAL_GPIO_Init+0x334>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	43db      	mvns	r3, r3
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d003      	beq.n	8002eb4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002eb4:	4a12      	ldr	r2, [pc, #72]	@ (8002f00 <HAL_GPIO_Init+0x334>)
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	61fb      	str	r3, [r7, #28]
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	2b0f      	cmp	r3, #15
 8002ec4:	f67f ae90 	bls.w	8002be8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ec8:	bf00      	nop
 8002eca:	bf00      	nop
 8002ecc:	3724      	adds	r7, #36	@ 0x24
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	40023800 	.word	0x40023800
 8002edc:	40013800 	.word	0x40013800
 8002ee0:	40020000 	.word	0x40020000
 8002ee4:	40020400 	.word	0x40020400
 8002ee8:	40020800 	.word	0x40020800
 8002eec:	40020c00 	.word	0x40020c00
 8002ef0:	40021000 	.word	0x40021000
 8002ef4:	40021400 	.word	0x40021400
 8002ef8:	40021800 	.word	0x40021800
 8002efc:	40021c00 	.word	0x40021c00
 8002f00:	40013c00 	.word	0x40013c00

08002f04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	807b      	strh	r3, [r7, #2]
 8002f10:	4613      	mov	r3, r2
 8002f12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f14:	787b      	ldrb	r3, [r7, #1]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d003      	beq.n	8002f22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f1a:	887a      	ldrh	r2, [r7, #2]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f20:	e003      	b.n	8002f2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f22:	887b      	ldrh	r3, [r7, #2]
 8002f24:	041a      	lsls	r2, r3, #16
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	619a      	str	r2, [r3, #24]
}
 8002f2a:	bf00      	nop
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr

08002f36 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f36:	b480      	push	{r7}
 8002f38:	b085      	sub	sp, #20
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
 8002f3e:	460b      	mov	r3, r1
 8002f40:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f48:	887a      	ldrh	r2, [r7, #2]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	041a      	lsls	r2, r3, #16
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	43d9      	mvns	r1, r3
 8002f54:	887b      	ldrh	r3, [r7, #2]
 8002f56:	400b      	ands	r3, r1
 8002f58:	431a      	orrs	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	619a      	str	r2, [r3, #24]
}
 8002f5e:	bf00      	nop
 8002f60:	3714      	adds	r7, #20
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
	...

08002f6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d101      	bne.n	8002f7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e12b      	b.n	80031d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d106      	bne.n	8002f98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f7fe fb3c 	bl	8001610 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2224      	movs	r2, #36	@ 0x24
 8002f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f022 0201 	bic.w	r2, r2, #1
 8002fae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002fbe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002fce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002fd0:	f001 fc20 	bl	8004814 <HAL_RCC_GetPCLK1Freq>
 8002fd4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	4a81      	ldr	r2, [pc, #516]	@ (80031e0 <HAL_I2C_Init+0x274>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d807      	bhi.n	8002ff0 <HAL_I2C_Init+0x84>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	4a80      	ldr	r2, [pc, #512]	@ (80031e4 <HAL_I2C_Init+0x278>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	bf94      	ite	ls
 8002fe8:	2301      	movls	r3, #1
 8002fea:	2300      	movhi	r3, #0
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	e006      	b.n	8002ffe <HAL_I2C_Init+0x92>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	4a7d      	ldr	r2, [pc, #500]	@ (80031e8 <HAL_I2C_Init+0x27c>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	bf94      	ite	ls
 8002ff8:	2301      	movls	r3, #1
 8002ffa:	2300      	movhi	r3, #0
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e0e7      	b.n	80031d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	4a78      	ldr	r2, [pc, #480]	@ (80031ec <HAL_I2C_Init+0x280>)
 800300a:	fba2 2303 	umull	r2, r3, r2, r3
 800300e:	0c9b      	lsrs	r3, r3, #18
 8003010:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68ba      	ldr	r2, [r7, #8]
 8003022:	430a      	orrs	r2, r1
 8003024:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	6a1b      	ldr	r3, [r3, #32]
 800302c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	4a6a      	ldr	r2, [pc, #424]	@ (80031e0 <HAL_I2C_Init+0x274>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d802      	bhi.n	8003040 <HAL_I2C_Init+0xd4>
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	3301      	adds	r3, #1
 800303e:	e009      	b.n	8003054 <HAL_I2C_Init+0xe8>
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003046:	fb02 f303 	mul.w	r3, r2, r3
 800304a:	4a69      	ldr	r2, [pc, #420]	@ (80031f0 <HAL_I2C_Init+0x284>)
 800304c:	fba2 2303 	umull	r2, r3, r2, r3
 8003050:	099b      	lsrs	r3, r3, #6
 8003052:	3301      	adds	r3, #1
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	6812      	ldr	r2, [r2, #0]
 8003058:	430b      	orrs	r3, r1
 800305a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003066:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	495c      	ldr	r1, [pc, #368]	@ (80031e0 <HAL_I2C_Init+0x274>)
 8003070:	428b      	cmp	r3, r1
 8003072:	d819      	bhi.n	80030a8 <HAL_I2C_Init+0x13c>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	1e59      	subs	r1, r3, #1
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003082:	1c59      	adds	r1, r3, #1
 8003084:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003088:	400b      	ands	r3, r1
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00a      	beq.n	80030a4 <HAL_I2C_Init+0x138>
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	1e59      	subs	r1, r3, #1
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	fbb1 f3f3 	udiv	r3, r1, r3
 800309c:	3301      	adds	r3, #1
 800309e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030a2:	e051      	b.n	8003148 <HAL_I2C_Init+0x1dc>
 80030a4:	2304      	movs	r3, #4
 80030a6:	e04f      	b.n	8003148 <HAL_I2C_Init+0x1dc>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d111      	bne.n	80030d4 <HAL_I2C_Init+0x168>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	1e58      	subs	r0, r3, #1
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6859      	ldr	r1, [r3, #4]
 80030b8:	460b      	mov	r3, r1
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	440b      	add	r3, r1
 80030be:	fbb0 f3f3 	udiv	r3, r0, r3
 80030c2:	3301      	adds	r3, #1
 80030c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	bf0c      	ite	eq
 80030cc:	2301      	moveq	r3, #1
 80030ce:	2300      	movne	r3, #0
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	e012      	b.n	80030fa <HAL_I2C_Init+0x18e>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	1e58      	subs	r0, r3, #1
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6859      	ldr	r1, [r3, #4]
 80030dc:	460b      	mov	r3, r1
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	440b      	add	r3, r1
 80030e2:	0099      	lsls	r1, r3, #2
 80030e4:	440b      	add	r3, r1
 80030e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80030ea:	3301      	adds	r3, #1
 80030ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	bf0c      	ite	eq
 80030f4:	2301      	moveq	r3, #1
 80030f6:	2300      	movne	r3, #0
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <HAL_I2C_Init+0x196>
 80030fe:	2301      	movs	r3, #1
 8003100:	e022      	b.n	8003148 <HAL_I2C_Init+0x1dc>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d10e      	bne.n	8003128 <HAL_I2C_Init+0x1bc>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	1e58      	subs	r0, r3, #1
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6859      	ldr	r1, [r3, #4]
 8003112:	460b      	mov	r3, r1
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	440b      	add	r3, r1
 8003118:	fbb0 f3f3 	udiv	r3, r0, r3
 800311c:	3301      	adds	r3, #1
 800311e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003122:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003126:	e00f      	b.n	8003148 <HAL_I2C_Init+0x1dc>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	1e58      	subs	r0, r3, #1
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6859      	ldr	r1, [r3, #4]
 8003130:	460b      	mov	r3, r1
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	440b      	add	r3, r1
 8003136:	0099      	lsls	r1, r3, #2
 8003138:	440b      	add	r3, r1
 800313a:	fbb0 f3f3 	udiv	r3, r0, r3
 800313e:	3301      	adds	r3, #1
 8003140:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003144:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003148:	6879      	ldr	r1, [r7, #4]
 800314a:	6809      	ldr	r1, [r1, #0]
 800314c:	4313      	orrs	r3, r2
 800314e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	69da      	ldr	r2, [r3, #28]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	431a      	orrs	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	430a      	orrs	r2, r1
 800316a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003176:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	6911      	ldr	r1, [r2, #16]
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	68d2      	ldr	r2, [r2, #12]
 8003182:	4311      	orrs	r1, r2
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	6812      	ldr	r2, [r2, #0]
 8003188:	430b      	orrs	r3, r1
 800318a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	695a      	ldr	r2, [r3, #20]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	431a      	orrs	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	430a      	orrs	r2, r1
 80031a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f042 0201 	orr.w	r2, r2, #1
 80031b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2220      	movs	r2, #32
 80031c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3710      	adds	r7, #16
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	000186a0 	.word	0x000186a0
 80031e4:	001e847f 	.word	0x001e847f
 80031e8:	003d08ff 	.word	0x003d08ff
 80031ec:	431bde83 	.word	0x431bde83
 80031f0:	10624dd3 	.word	0x10624dd3

080031f4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b088      	sub	sp, #32
 80031f8:	af02      	add	r7, sp, #8
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	4608      	mov	r0, r1
 80031fe:	4611      	mov	r1, r2
 8003200:	461a      	mov	r2, r3
 8003202:	4603      	mov	r3, r0
 8003204:	817b      	strh	r3, [r7, #10]
 8003206:	460b      	mov	r3, r1
 8003208:	813b      	strh	r3, [r7, #8]
 800320a:	4613      	mov	r3, r2
 800320c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800320e:	f7fe fd05 	bl	8001c1c <HAL_GetTick>
 8003212:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800321a:	b2db      	uxtb	r3, r3
 800321c:	2b20      	cmp	r3, #32
 800321e:	f040 80d9 	bne.w	80033d4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	9300      	str	r3, [sp, #0]
 8003226:	2319      	movs	r3, #25
 8003228:	2201      	movs	r2, #1
 800322a:	496d      	ldr	r1, [pc, #436]	@ (80033e0 <HAL_I2C_Mem_Write+0x1ec>)
 800322c:	68f8      	ldr	r0, [r7, #12]
 800322e:	f000 fc8b 	bl	8003b48 <I2C_WaitOnFlagUntilTimeout>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d001      	beq.n	800323c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003238:	2302      	movs	r3, #2
 800323a:	e0cc      	b.n	80033d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003242:	2b01      	cmp	r3, #1
 8003244:	d101      	bne.n	800324a <HAL_I2C_Mem_Write+0x56>
 8003246:	2302      	movs	r3, #2
 8003248:	e0c5      	b.n	80033d6 <HAL_I2C_Mem_Write+0x1e2>
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2201      	movs	r2, #1
 800324e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0301 	and.w	r3, r3, #1
 800325c:	2b01      	cmp	r3, #1
 800325e:	d007      	beq.n	8003270 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f042 0201 	orr.w	r2, r2, #1
 800326e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800327e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2221      	movs	r2, #33	@ 0x21
 8003284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2240      	movs	r2, #64	@ 0x40
 800328c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6a3a      	ldr	r2, [r7, #32]
 800329a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80032a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	4a4d      	ldr	r2, [pc, #308]	@ (80033e4 <HAL_I2C_Mem_Write+0x1f0>)
 80032b0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032b2:	88f8      	ldrh	r0, [r7, #6]
 80032b4:	893a      	ldrh	r2, [r7, #8]
 80032b6:	8979      	ldrh	r1, [r7, #10]
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	9301      	str	r3, [sp, #4]
 80032bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032be:	9300      	str	r3, [sp, #0]
 80032c0:	4603      	mov	r3, r0
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f000 fac2 	bl	800384c <I2C_RequestMemoryWrite>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d052      	beq.n	8003374 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e081      	b.n	80033d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032d2:	697a      	ldr	r2, [r7, #20]
 80032d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f000 fd50 	bl	8003d7c <I2C_WaitOnTXEFlagUntilTimeout>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00d      	beq.n	80032fe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e6:	2b04      	cmp	r3, #4
 80032e8:	d107      	bne.n	80032fa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e06b      	b.n	80033d6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003302:	781a      	ldrb	r2, [r3, #0]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800330e:	1c5a      	adds	r2, r3, #1
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003318:	3b01      	subs	r3, #1
 800331a:	b29a      	uxth	r2, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003324:	b29b      	uxth	r3, r3
 8003326:	3b01      	subs	r3, #1
 8003328:	b29a      	uxth	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	695b      	ldr	r3, [r3, #20]
 8003334:	f003 0304 	and.w	r3, r3, #4
 8003338:	2b04      	cmp	r3, #4
 800333a:	d11b      	bne.n	8003374 <HAL_I2C_Mem_Write+0x180>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003340:	2b00      	cmp	r3, #0
 8003342:	d017      	beq.n	8003374 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003348:	781a      	ldrb	r2, [r3, #0]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003354:	1c5a      	adds	r2, r3, #1
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800335e:	3b01      	subs	r3, #1
 8003360:	b29a      	uxth	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800336a:	b29b      	uxth	r3, r3
 800336c:	3b01      	subs	r3, #1
 800336e:	b29a      	uxth	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003378:	2b00      	cmp	r3, #0
 800337a:	d1aa      	bne.n	80032d2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800337c:	697a      	ldr	r2, [r7, #20]
 800337e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003380:	68f8      	ldr	r0, [r7, #12]
 8003382:	f000 fd43 	bl	8003e0c <I2C_WaitOnBTFFlagUntilTimeout>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00d      	beq.n	80033a8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003390:	2b04      	cmp	r3, #4
 8003392:	d107      	bne.n	80033a4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033a2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e016      	b.n	80033d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2220      	movs	r2, #32
 80033bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80033d0:	2300      	movs	r3, #0
 80033d2:	e000      	b.n	80033d6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80033d4:	2302      	movs	r3, #2
  }
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3718      	adds	r7, #24
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	00100002 	.word	0x00100002
 80033e4:	ffff0000 	.word	0xffff0000

080033e8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b08c      	sub	sp, #48	@ 0x30
 80033ec:	af02      	add	r7, sp, #8
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	4608      	mov	r0, r1
 80033f2:	4611      	mov	r1, r2
 80033f4:	461a      	mov	r2, r3
 80033f6:	4603      	mov	r3, r0
 80033f8:	817b      	strh	r3, [r7, #10]
 80033fa:	460b      	mov	r3, r1
 80033fc:	813b      	strh	r3, [r7, #8]
 80033fe:	4613      	mov	r3, r2
 8003400:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003402:	f7fe fc0b 	bl	8001c1c <HAL_GetTick>
 8003406:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800340e:	b2db      	uxtb	r3, r3
 8003410:	2b20      	cmp	r3, #32
 8003412:	f040 8214 	bne.w	800383e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003418:	9300      	str	r3, [sp, #0]
 800341a:	2319      	movs	r3, #25
 800341c:	2201      	movs	r2, #1
 800341e:	497b      	ldr	r1, [pc, #492]	@ (800360c <HAL_I2C_Mem_Read+0x224>)
 8003420:	68f8      	ldr	r0, [r7, #12]
 8003422:	f000 fb91 	bl	8003b48 <I2C_WaitOnFlagUntilTimeout>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d001      	beq.n	8003430 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800342c:	2302      	movs	r3, #2
 800342e:	e207      	b.n	8003840 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003436:	2b01      	cmp	r3, #1
 8003438:	d101      	bne.n	800343e <HAL_I2C_Mem_Read+0x56>
 800343a:	2302      	movs	r3, #2
 800343c:	e200      	b.n	8003840 <HAL_I2C_Mem_Read+0x458>
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2201      	movs	r2, #1
 8003442:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0301 	and.w	r3, r3, #1
 8003450:	2b01      	cmp	r3, #1
 8003452:	d007      	beq.n	8003464 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f042 0201 	orr.w	r2, r2, #1
 8003462:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003472:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2222      	movs	r2, #34	@ 0x22
 8003478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2240      	movs	r2, #64	@ 0x40
 8003480:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800348e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003494:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800349a:	b29a      	uxth	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	4a5b      	ldr	r2, [pc, #364]	@ (8003610 <HAL_I2C_Mem_Read+0x228>)
 80034a4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80034a6:	88f8      	ldrh	r0, [r7, #6]
 80034a8:	893a      	ldrh	r2, [r7, #8]
 80034aa:	8979      	ldrh	r1, [r7, #10]
 80034ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ae:	9301      	str	r3, [sp, #4]
 80034b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034b2:	9300      	str	r3, [sp, #0]
 80034b4:	4603      	mov	r3, r0
 80034b6:	68f8      	ldr	r0, [r7, #12]
 80034b8:	f000 fa5e 	bl	8003978 <I2C_RequestMemoryRead>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d001      	beq.n	80034c6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e1bc      	b.n	8003840 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d113      	bne.n	80034f6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034ce:	2300      	movs	r3, #0
 80034d0:	623b      	str	r3, [r7, #32]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	695b      	ldr	r3, [r3, #20]
 80034d8:	623b      	str	r3, [r7, #32]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	699b      	ldr	r3, [r3, #24]
 80034e0:	623b      	str	r3, [r7, #32]
 80034e2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034f2:	601a      	str	r2, [r3, #0]
 80034f4:	e190      	b.n	8003818 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d11b      	bne.n	8003536 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800350c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800350e:	2300      	movs	r3, #0
 8003510:	61fb      	str	r3, [r7, #28]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	695b      	ldr	r3, [r3, #20]
 8003518:	61fb      	str	r3, [r7, #28]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	61fb      	str	r3, [r7, #28]
 8003522:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003532:	601a      	str	r2, [r3, #0]
 8003534:	e170      	b.n	8003818 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800353a:	2b02      	cmp	r3, #2
 800353c:	d11b      	bne.n	8003576 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800354c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800355c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800355e:	2300      	movs	r3, #0
 8003560:	61bb      	str	r3, [r7, #24]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	695b      	ldr	r3, [r3, #20]
 8003568:	61bb      	str	r3, [r7, #24]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	61bb      	str	r3, [r7, #24]
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	e150      	b.n	8003818 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003576:	2300      	movs	r3, #0
 8003578:	617b      	str	r3, [r7, #20]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	695b      	ldr	r3, [r3, #20]
 8003580:	617b      	str	r3, [r7, #20]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	699b      	ldr	r3, [r3, #24]
 8003588:	617b      	str	r3, [r7, #20]
 800358a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800358c:	e144      	b.n	8003818 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003592:	2b03      	cmp	r3, #3
 8003594:	f200 80f1 	bhi.w	800377a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800359c:	2b01      	cmp	r3, #1
 800359e:	d123      	bne.n	80035e8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035a2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80035a4:	68f8      	ldr	r0, [r7, #12]
 80035a6:	f000 fc79 	bl	8003e9c <I2C_WaitOnRXNEFlagUntilTimeout>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d001      	beq.n	80035b4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e145      	b.n	8003840 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	691a      	ldr	r2, [r3, #16]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035be:	b2d2      	uxtb	r2, r2
 80035c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c6:	1c5a      	adds	r2, r3, #1
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035d0:	3b01      	subs	r3, #1
 80035d2:	b29a      	uxth	r2, r3
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035dc:	b29b      	uxth	r3, r3
 80035de:	3b01      	subs	r3, #1
 80035e0:	b29a      	uxth	r2, r3
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80035e6:	e117      	b.n	8003818 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d14e      	bne.n	800368e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f2:	9300      	str	r3, [sp, #0]
 80035f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035f6:	2200      	movs	r2, #0
 80035f8:	4906      	ldr	r1, [pc, #24]	@ (8003614 <HAL_I2C_Mem_Read+0x22c>)
 80035fa:	68f8      	ldr	r0, [r7, #12]
 80035fc:	f000 faa4 	bl	8003b48 <I2C_WaitOnFlagUntilTimeout>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d008      	beq.n	8003618 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e11a      	b.n	8003840 <HAL_I2C_Mem_Read+0x458>
 800360a:	bf00      	nop
 800360c:	00100002 	.word	0x00100002
 8003610:	ffff0000 	.word	0xffff0000
 8003614:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003626:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	691a      	ldr	r2, [r3, #16]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003632:	b2d2      	uxtb	r2, r2
 8003634:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800363a:	1c5a      	adds	r2, r3, #1
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003644:	3b01      	subs	r3, #1
 8003646:	b29a      	uxth	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003650:	b29b      	uxth	r3, r3
 8003652:	3b01      	subs	r3, #1
 8003654:	b29a      	uxth	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	691a      	ldr	r2, [r3, #16]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003664:	b2d2      	uxtb	r2, r2
 8003666:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800366c:	1c5a      	adds	r2, r3, #1
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003676:	3b01      	subs	r3, #1
 8003678:	b29a      	uxth	r2, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003682:	b29b      	uxth	r3, r3
 8003684:	3b01      	subs	r3, #1
 8003686:	b29a      	uxth	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800368c:	e0c4      	b.n	8003818 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800368e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003690:	9300      	str	r3, [sp, #0]
 8003692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003694:	2200      	movs	r2, #0
 8003696:	496c      	ldr	r1, [pc, #432]	@ (8003848 <HAL_I2C_Mem_Read+0x460>)
 8003698:	68f8      	ldr	r0, [r7, #12]
 800369a:	f000 fa55 	bl	8003b48 <I2C_WaitOnFlagUntilTimeout>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d001      	beq.n	80036a8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e0cb      	b.n	8003840 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	691a      	ldr	r2, [r3, #16]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c2:	b2d2      	uxtb	r2, r2
 80036c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ca:	1c5a      	adds	r2, r3, #1
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036d4:	3b01      	subs	r3, #1
 80036d6:	b29a      	uxth	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	3b01      	subs	r3, #1
 80036e4:	b29a      	uxth	r2, r3
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ec:	9300      	str	r3, [sp, #0]
 80036ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036f0:	2200      	movs	r2, #0
 80036f2:	4955      	ldr	r1, [pc, #340]	@ (8003848 <HAL_I2C_Mem_Read+0x460>)
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	f000 fa27 	bl	8003b48 <I2C_WaitOnFlagUntilTimeout>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d001      	beq.n	8003704 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e09d      	b.n	8003840 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003712:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	691a      	ldr	r2, [r3, #16]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800371e:	b2d2      	uxtb	r2, r2
 8003720:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003726:	1c5a      	adds	r2, r3, #1
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003730:	3b01      	subs	r3, #1
 8003732:	b29a      	uxth	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800373c:	b29b      	uxth	r3, r3
 800373e:	3b01      	subs	r3, #1
 8003740:	b29a      	uxth	r2, r3
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	691a      	ldr	r2, [r3, #16]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003750:	b2d2      	uxtb	r2, r2
 8003752:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003758:	1c5a      	adds	r2, r3, #1
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003762:	3b01      	subs	r3, #1
 8003764:	b29a      	uxth	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800376e:	b29b      	uxth	r3, r3
 8003770:	3b01      	subs	r3, #1
 8003772:	b29a      	uxth	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003778:	e04e      	b.n	8003818 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800377a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800377c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f000 fb8c 	bl	8003e9c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e058      	b.n	8003840 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	691a      	ldr	r2, [r3, #16]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003798:	b2d2      	uxtb	r2, r2
 800379a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a0:	1c5a      	adds	r2, r3, #1
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037aa:	3b01      	subs	r3, #1
 80037ac:	b29a      	uxth	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	3b01      	subs	r3, #1
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	f003 0304 	and.w	r3, r3, #4
 80037ca:	2b04      	cmp	r3, #4
 80037cc:	d124      	bne.n	8003818 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037d2:	2b03      	cmp	r3, #3
 80037d4:	d107      	bne.n	80037e6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037e4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	691a      	ldr	r2, [r3, #16]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f0:	b2d2      	uxtb	r2, r2
 80037f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f8:	1c5a      	adds	r2, r3, #1
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003802:	3b01      	subs	r3, #1
 8003804:	b29a      	uxth	r2, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800380e:	b29b      	uxth	r3, r3
 8003810:	3b01      	subs	r3, #1
 8003812:	b29a      	uxth	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800381c:	2b00      	cmp	r3, #0
 800381e:	f47f aeb6 	bne.w	800358e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2220      	movs	r2, #32
 8003826:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800383a:	2300      	movs	r3, #0
 800383c:	e000      	b.n	8003840 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800383e:	2302      	movs	r3, #2
  }
}
 8003840:	4618      	mov	r0, r3
 8003842:	3728      	adds	r7, #40	@ 0x28
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	00010004 	.word	0x00010004

0800384c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b088      	sub	sp, #32
 8003850:	af02      	add	r7, sp, #8
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	4608      	mov	r0, r1
 8003856:	4611      	mov	r1, r2
 8003858:	461a      	mov	r2, r3
 800385a:	4603      	mov	r3, r0
 800385c:	817b      	strh	r3, [r7, #10]
 800385e:	460b      	mov	r3, r1
 8003860:	813b      	strh	r3, [r7, #8]
 8003862:	4613      	mov	r3, r2
 8003864:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003874:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003878:	9300      	str	r3, [sp, #0]
 800387a:	6a3b      	ldr	r3, [r7, #32]
 800387c:	2200      	movs	r2, #0
 800387e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f000 f960 	bl	8003b48 <I2C_WaitOnFlagUntilTimeout>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00d      	beq.n	80038aa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003898:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800389c:	d103      	bne.n	80038a6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038a4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e05f      	b.n	800396a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80038aa:	897b      	ldrh	r3, [r7, #10]
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	461a      	mov	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80038b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038bc:	6a3a      	ldr	r2, [r7, #32]
 80038be:	492d      	ldr	r1, [pc, #180]	@ (8003974 <I2C_RequestMemoryWrite+0x128>)
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f000 f9bb 	bl	8003c3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d001      	beq.n	80038d0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e04c      	b.n	800396a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038d0:	2300      	movs	r3, #0
 80038d2:	617b      	str	r3, [r7, #20]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	617b      	str	r3, [r7, #20]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	617b      	str	r3, [r7, #20]
 80038e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038e8:	6a39      	ldr	r1, [r7, #32]
 80038ea:	68f8      	ldr	r0, [r7, #12]
 80038ec:	f000 fa46 	bl	8003d7c <I2C_WaitOnTXEFlagUntilTimeout>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00d      	beq.n	8003912 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038fa:	2b04      	cmp	r3, #4
 80038fc:	d107      	bne.n	800390e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800390c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e02b      	b.n	800396a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003912:	88fb      	ldrh	r3, [r7, #6]
 8003914:	2b01      	cmp	r3, #1
 8003916:	d105      	bne.n	8003924 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003918:	893b      	ldrh	r3, [r7, #8]
 800391a:	b2da      	uxtb	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	611a      	str	r2, [r3, #16]
 8003922:	e021      	b.n	8003968 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003924:	893b      	ldrh	r3, [r7, #8]
 8003926:	0a1b      	lsrs	r3, r3, #8
 8003928:	b29b      	uxth	r3, r3
 800392a:	b2da      	uxtb	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003932:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003934:	6a39      	ldr	r1, [r7, #32]
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f000 fa20 	bl	8003d7c <I2C_WaitOnTXEFlagUntilTimeout>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00d      	beq.n	800395e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003946:	2b04      	cmp	r3, #4
 8003948:	d107      	bne.n	800395a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003958:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e005      	b.n	800396a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800395e:	893b      	ldrh	r3, [r7, #8]
 8003960:	b2da      	uxtb	r2, r3
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3718      	adds	r7, #24
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	00010002 	.word	0x00010002

08003978 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b088      	sub	sp, #32
 800397c:	af02      	add	r7, sp, #8
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	4608      	mov	r0, r1
 8003982:	4611      	mov	r1, r2
 8003984:	461a      	mov	r2, r3
 8003986:	4603      	mov	r3, r0
 8003988:	817b      	strh	r3, [r7, #10]
 800398a:	460b      	mov	r3, r1
 800398c:	813b      	strh	r3, [r7, #8]
 800398e:	4613      	mov	r3, r2
 8003990:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80039a0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b4:	9300      	str	r3, [sp, #0]
 80039b6:	6a3b      	ldr	r3, [r7, #32]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80039be:	68f8      	ldr	r0, [r7, #12]
 80039c0:	f000 f8c2 	bl	8003b48 <I2C_WaitOnFlagUntilTimeout>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00d      	beq.n	80039e6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039d8:	d103      	bne.n	80039e2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039e0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e0aa      	b.n	8003b3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039e6:	897b      	ldrh	r3, [r7, #10]
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	461a      	mov	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80039f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f8:	6a3a      	ldr	r2, [r7, #32]
 80039fa:	4952      	ldr	r1, [pc, #328]	@ (8003b44 <I2C_RequestMemoryRead+0x1cc>)
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f000 f91d 	bl	8003c3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d001      	beq.n	8003a0c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e097      	b.n	8003b3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	617b      	str	r3, [r7, #20]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	617b      	str	r3, [r7, #20]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	617b      	str	r3, [r7, #20]
 8003a20:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a24:	6a39      	ldr	r1, [r7, #32]
 8003a26:	68f8      	ldr	r0, [r7, #12]
 8003a28:	f000 f9a8 	bl	8003d7c <I2C_WaitOnTXEFlagUntilTimeout>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00d      	beq.n	8003a4e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a36:	2b04      	cmp	r3, #4
 8003a38:	d107      	bne.n	8003a4a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a48:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e076      	b.n	8003b3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a4e:	88fb      	ldrh	r3, [r7, #6]
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d105      	bne.n	8003a60 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a54:	893b      	ldrh	r3, [r7, #8]
 8003a56:	b2da      	uxtb	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	611a      	str	r2, [r3, #16]
 8003a5e:	e021      	b.n	8003aa4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003a60:	893b      	ldrh	r3, [r7, #8]
 8003a62:	0a1b      	lsrs	r3, r3, #8
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	b2da      	uxtb	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a70:	6a39      	ldr	r1, [r7, #32]
 8003a72:	68f8      	ldr	r0, [r7, #12]
 8003a74:	f000 f982 	bl	8003d7c <I2C_WaitOnTXEFlagUntilTimeout>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00d      	beq.n	8003a9a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a82:	2b04      	cmp	r3, #4
 8003a84:	d107      	bne.n	8003a96 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a94:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e050      	b.n	8003b3c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a9a:	893b      	ldrh	r3, [r7, #8]
 8003a9c:	b2da      	uxtb	r2, r3
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aa4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003aa6:	6a39      	ldr	r1, [r7, #32]
 8003aa8:	68f8      	ldr	r0, [r7, #12]
 8003aaa:	f000 f967 	bl	8003d7c <I2C_WaitOnTXEFlagUntilTimeout>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00d      	beq.n	8003ad0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab8:	2b04      	cmp	r3, #4
 8003aba:	d107      	bne.n	8003acc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003aca:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e035      	b.n	8003b3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ade:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae2:	9300      	str	r3, [sp, #0]
 8003ae4:	6a3b      	ldr	r3, [r7, #32]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003aec:	68f8      	ldr	r0, [r7, #12]
 8003aee:	f000 f82b 	bl	8003b48 <I2C_WaitOnFlagUntilTimeout>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00d      	beq.n	8003b14 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b06:	d103      	bne.n	8003b10 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b0e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e013      	b.n	8003b3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003b14:	897b      	ldrh	r3, [r7, #10]
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	f043 0301 	orr.w	r3, r3, #1
 8003b1c:	b2da      	uxtb	r2, r3
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b26:	6a3a      	ldr	r2, [r7, #32]
 8003b28:	4906      	ldr	r1, [pc, #24]	@ (8003b44 <I2C_RequestMemoryRead+0x1cc>)
 8003b2a:	68f8      	ldr	r0, [r7, #12]
 8003b2c:	f000 f886 	bl	8003c3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d001      	beq.n	8003b3a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e000      	b.n	8003b3c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3718      	adds	r7, #24
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	00010002 	.word	0x00010002

08003b48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	603b      	str	r3, [r7, #0]
 8003b54:	4613      	mov	r3, r2
 8003b56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b58:	e048      	b.n	8003bec <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b60:	d044      	beq.n	8003bec <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b62:	f7fe f85b 	bl	8001c1c <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	683a      	ldr	r2, [r7, #0]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d302      	bcc.n	8003b78 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d139      	bne.n	8003bec <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	0c1b      	lsrs	r3, r3, #16
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d10d      	bne.n	8003b9e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	695b      	ldr	r3, [r3, #20]
 8003b88:	43da      	mvns	r2, r3
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	bf0c      	ite	eq
 8003b94:	2301      	moveq	r3, #1
 8003b96:	2300      	movne	r3, #0
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	e00c      	b.n	8003bb8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	43da      	mvns	r2, r3
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	4013      	ands	r3, r2
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	bf0c      	ite	eq
 8003bb0:	2301      	moveq	r3, #1
 8003bb2:	2300      	movne	r3, #0
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	79fb      	ldrb	r3, [r7, #7]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d116      	bne.n	8003bec <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2220      	movs	r2, #32
 8003bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd8:	f043 0220 	orr.w	r2, r3, #32
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e023      	b.n	8003c34 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	0c1b      	lsrs	r3, r3, #16
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d10d      	bne.n	8003c12 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	695b      	ldr	r3, [r3, #20]
 8003bfc:	43da      	mvns	r2, r3
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	4013      	ands	r3, r2
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	bf0c      	ite	eq
 8003c08:	2301      	moveq	r3, #1
 8003c0a:	2300      	movne	r3, #0
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	461a      	mov	r2, r3
 8003c10:	e00c      	b.n	8003c2c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	43da      	mvns	r2, r3
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	bf0c      	ite	eq
 8003c24:	2301      	moveq	r3, #1
 8003c26:	2300      	movne	r3, #0
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	79fb      	ldrb	r3, [r7, #7]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d093      	beq.n	8003b5a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3710      	adds	r7, #16
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
 8003c48:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c4a:	e071      	b.n	8003d30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c5a:	d123      	bne.n	8003ca4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c6a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003c74:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2220      	movs	r2, #32
 8003c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c90:	f043 0204 	orr.w	r2, r3, #4
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e067      	b.n	8003d74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003caa:	d041      	beq.n	8003d30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cac:	f7fd ffb6 	bl	8001c1c <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d302      	bcc.n	8003cc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d136      	bne.n	8003d30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	0c1b      	lsrs	r3, r3, #16
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d10c      	bne.n	8003ce6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	695b      	ldr	r3, [r3, #20]
 8003cd2:	43da      	mvns	r2, r3
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	bf14      	ite	ne
 8003cde:	2301      	movne	r3, #1
 8003ce0:	2300      	moveq	r3, #0
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	e00b      	b.n	8003cfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	699b      	ldr	r3, [r3, #24]
 8003cec:	43da      	mvns	r2, r3
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	bf14      	ite	ne
 8003cf8:	2301      	movne	r3, #1
 8003cfa:	2300      	moveq	r3, #0
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d016      	beq.n	8003d30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2220      	movs	r2, #32
 8003d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d1c:	f043 0220 	orr.w	r2, r3, #32
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e021      	b.n	8003d74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	0c1b      	lsrs	r3, r3, #16
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d10c      	bne.n	8003d54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	695b      	ldr	r3, [r3, #20]
 8003d40:	43da      	mvns	r2, r3
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	4013      	ands	r3, r2
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	bf14      	ite	ne
 8003d4c:	2301      	movne	r3, #1
 8003d4e:	2300      	moveq	r3, #0
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	e00b      	b.n	8003d6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	43da      	mvns	r2, r3
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	4013      	ands	r3, r2
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	bf14      	ite	ne
 8003d66:	2301      	movne	r3, #1
 8003d68:	2300      	moveq	r3, #0
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f47f af6d 	bne.w	8003c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3710      	adds	r7, #16
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d88:	e034      	b.n	8003df4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d8a:	68f8      	ldr	r0, [r7, #12]
 8003d8c:	f000 f8e3 	bl	8003f56 <I2C_IsAcknowledgeFailed>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d001      	beq.n	8003d9a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e034      	b.n	8003e04 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da0:	d028      	beq.n	8003df4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003da2:	f7fd ff3b 	bl	8001c1c <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	68ba      	ldr	r2, [r7, #8]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d302      	bcc.n	8003db8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d11d      	bne.n	8003df4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dc2:	2b80      	cmp	r3, #128	@ 0x80
 8003dc4:	d016      	beq.n	8003df4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2220      	movs	r2, #32
 8003dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de0:	f043 0220 	orr.w	r2, r3, #32
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e007      	b.n	8003e04 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	695b      	ldr	r3, [r3, #20]
 8003dfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dfe:	2b80      	cmp	r3, #128	@ 0x80
 8003e00:	d1c3      	bne.n	8003d8a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3710      	adds	r7, #16
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e18:	e034      	b.n	8003e84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f000 f89b 	bl	8003f56 <I2C_IsAcknowledgeFailed>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e034      	b.n	8003e94 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e30:	d028      	beq.n	8003e84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e32:	f7fd fef3 	bl	8001c1c <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	68ba      	ldr	r2, [r7, #8]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d302      	bcc.n	8003e48 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d11d      	bne.n	8003e84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	f003 0304 	and.w	r3, r3, #4
 8003e52:	2b04      	cmp	r3, #4
 8003e54:	d016      	beq.n	8003e84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2220      	movs	r2, #32
 8003e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e70:	f043 0220 	orr.w	r2, r3, #32
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e007      	b.n	8003e94 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	f003 0304 	and.w	r3, r3, #4
 8003e8e:	2b04      	cmp	r3, #4
 8003e90:	d1c3      	bne.n	8003e1a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3710      	adds	r7, #16
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ea8:	e049      	b.n	8003f3e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	695b      	ldr	r3, [r3, #20]
 8003eb0:	f003 0310 	and.w	r3, r3, #16
 8003eb4:	2b10      	cmp	r3, #16
 8003eb6:	d119      	bne.n	8003eec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f06f 0210 	mvn.w	r2, #16
 8003ec0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2220      	movs	r2, #32
 8003ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e030      	b.n	8003f4e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eec:	f7fd fe96 	bl	8001c1c <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	68ba      	ldr	r2, [r7, #8]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d302      	bcc.n	8003f02 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d11d      	bne.n	8003f3e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	695b      	ldr	r3, [r3, #20]
 8003f08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f0c:	2b40      	cmp	r3, #64	@ 0x40
 8003f0e:	d016      	beq.n	8003f3e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2200      	movs	r2, #0
 8003f14:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2220      	movs	r2, #32
 8003f1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f2a:	f043 0220 	orr.w	r2, r3, #32
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e007      	b.n	8003f4e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	695b      	ldr	r3, [r3, #20]
 8003f44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f48:	2b40      	cmp	r3, #64	@ 0x40
 8003f4a:	d1ae      	bne.n	8003eaa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3710      	adds	r7, #16
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003f56:	b480      	push	{r7}
 8003f58:	b083      	sub	sp, #12
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	695b      	ldr	r3, [r3, #20]
 8003f64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f6c:	d11b      	bne.n	8003fa6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f76:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2220      	movs	r2, #32
 8003f82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f92:	f043 0204 	orr.w	r2, r3, #4
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e000      	b.n	8003fa8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b086      	sub	sp, #24
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d101      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e267      	b.n	8004496 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d075      	beq.n	80040be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003fd2:	4b88      	ldr	r3, [pc, #544]	@ (80041f4 <HAL_RCC_OscConfig+0x240>)
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f003 030c 	and.w	r3, r3, #12
 8003fda:	2b04      	cmp	r3, #4
 8003fdc:	d00c      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fde:	4b85      	ldr	r3, [pc, #532]	@ (80041f4 <HAL_RCC_OscConfig+0x240>)
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003fe6:	2b08      	cmp	r3, #8
 8003fe8:	d112      	bne.n	8004010 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fea:	4b82      	ldr	r3, [pc, #520]	@ (80041f4 <HAL_RCC_OscConfig+0x240>)
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ff2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ff6:	d10b      	bne.n	8004010 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ff8:	4b7e      	ldr	r3, [pc, #504]	@ (80041f4 <HAL_RCC_OscConfig+0x240>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d05b      	beq.n	80040bc <HAL_RCC_OscConfig+0x108>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d157      	bne.n	80040bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e242      	b.n	8004496 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004018:	d106      	bne.n	8004028 <HAL_RCC_OscConfig+0x74>
 800401a:	4b76      	ldr	r3, [pc, #472]	@ (80041f4 <HAL_RCC_OscConfig+0x240>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a75      	ldr	r2, [pc, #468]	@ (80041f4 <HAL_RCC_OscConfig+0x240>)
 8004020:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004024:	6013      	str	r3, [r2, #0]
 8004026:	e01d      	b.n	8004064 <HAL_RCC_OscConfig+0xb0>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004030:	d10c      	bne.n	800404c <HAL_RCC_OscConfig+0x98>
 8004032:	4b70      	ldr	r3, [pc, #448]	@ (80041f4 <HAL_RCC_OscConfig+0x240>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a6f      	ldr	r2, [pc, #444]	@ (80041f4 <HAL_RCC_OscConfig+0x240>)
 8004038:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800403c:	6013      	str	r3, [r2, #0]
 800403e:	4b6d      	ldr	r3, [pc, #436]	@ (80041f4 <HAL_RCC_OscConfig+0x240>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a6c      	ldr	r2, [pc, #432]	@ (80041f4 <HAL_RCC_OscConfig+0x240>)
 8004044:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004048:	6013      	str	r3, [r2, #0]
 800404a:	e00b      	b.n	8004064 <HAL_RCC_OscConfig+0xb0>
 800404c:	4b69      	ldr	r3, [pc, #420]	@ (80041f4 <HAL_RCC_OscConfig+0x240>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a68      	ldr	r2, [pc, #416]	@ (80041f4 <HAL_RCC_OscConfig+0x240>)
 8004052:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004056:	6013      	str	r3, [r2, #0]
 8004058:	4b66      	ldr	r3, [pc, #408]	@ (80041f4 <HAL_RCC_OscConfig+0x240>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a65      	ldr	r2, [pc, #404]	@ (80041f4 <HAL_RCC_OscConfig+0x240>)
 800405e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004062:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d013      	beq.n	8004094 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800406c:	f7fd fdd6 	bl	8001c1c <HAL_GetTick>
 8004070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004072:	e008      	b.n	8004086 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004074:	f7fd fdd2 	bl	8001c1c <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b64      	cmp	r3, #100	@ 0x64
 8004080:	d901      	bls.n	8004086 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e207      	b.n	8004496 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004086:	4b5b      	ldr	r3, [pc, #364]	@ (80041f4 <HAL_RCC_OscConfig+0x240>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d0f0      	beq.n	8004074 <HAL_RCC_OscConfig+0xc0>
 8004092:	e014      	b.n	80040be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004094:	f7fd fdc2 	bl	8001c1c <HAL_GetTick>
 8004098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800409a:	e008      	b.n	80040ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800409c:	f7fd fdbe 	bl	8001c1c <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	2b64      	cmp	r3, #100	@ 0x64
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e1f3      	b.n	8004496 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040ae:	4b51      	ldr	r3, [pc, #324]	@ (80041f4 <HAL_RCC_OscConfig+0x240>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1f0      	bne.n	800409c <HAL_RCC_OscConfig+0xe8>
 80040ba:	e000      	b.n	80040be <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d063      	beq.n	8004192 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80040ca:	4b4a      	ldr	r3, [pc, #296]	@ (80041f4 <HAL_RCC_OscConfig+0x240>)
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f003 030c 	and.w	r3, r3, #12
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00b      	beq.n	80040ee <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040d6:	4b47      	ldr	r3, [pc, #284]	@ (80041f4 <HAL_RCC_OscConfig+0x240>)
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80040de:	2b08      	cmp	r3, #8
 80040e0:	d11c      	bne.n	800411c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040e2:	4b44      	ldr	r3, [pc, #272]	@ (80041f4 <HAL_RCC_OscConfig+0x240>)
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d116      	bne.n	800411c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040ee:	4b41      	ldr	r3, [pc, #260]	@ (80041f4 <HAL_RCC_OscConfig+0x240>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0302 	and.w	r3, r3, #2
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d005      	beq.n	8004106 <HAL_RCC_OscConfig+0x152>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d001      	beq.n	8004106 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e1c7      	b.n	8004496 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004106:	4b3b      	ldr	r3, [pc, #236]	@ (80041f4 <HAL_RCC_OscConfig+0x240>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	00db      	lsls	r3, r3, #3
 8004114:	4937      	ldr	r1, [pc, #220]	@ (80041f4 <HAL_RCC_OscConfig+0x240>)
 8004116:	4313      	orrs	r3, r2
 8004118:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800411a:	e03a      	b.n	8004192 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d020      	beq.n	8004166 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004124:	4b34      	ldr	r3, [pc, #208]	@ (80041f8 <HAL_RCC_OscConfig+0x244>)
 8004126:	2201      	movs	r2, #1
 8004128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800412a:	f7fd fd77 	bl	8001c1c <HAL_GetTick>
 800412e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004130:	e008      	b.n	8004144 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004132:	f7fd fd73 	bl	8001c1c <HAL_GetTick>
 8004136:	4602      	mov	r2, r0
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	2b02      	cmp	r3, #2
 800413e:	d901      	bls.n	8004144 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e1a8      	b.n	8004496 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004144:	4b2b      	ldr	r3, [pc, #172]	@ (80041f4 <HAL_RCC_OscConfig+0x240>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0302 	and.w	r3, r3, #2
 800414c:	2b00      	cmp	r3, #0
 800414e:	d0f0      	beq.n	8004132 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004150:	4b28      	ldr	r3, [pc, #160]	@ (80041f4 <HAL_RCC_OscConfig+0x240>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	00db      	lsls	r3, r3, #3
 800415e:	4925      	ldr	r1, [pc, #148]	@ (80041f4 <HAL_RCC_OscConfig+0x240>)
 8004160:	4313      	orrs	r3, r2
 8004162:	600b      	str	r3, [r1, #0]
 8004164:	e015      	b.n	8004192 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004166:	4b24      	ldr	r3, [pc, #144]	@ (80041f8 <HAL_RCC_OscConfig+0x244>)
 8004168:	2200      	movs	r2, #0
 800416a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800416c:	f7fd fd56 	bl	8001c1c <HAL_GetTick>
 8004170:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004172:	e008      	b.n	8004186 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004174:	f7fd fd52 	bl	8001c1c <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	2b02      	cmp	r3, #2
 8004180:	d901      	bls.n	8004186 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e187      	b.n	8004496 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004186:	4b1b      	ldr	r3, [pc, #108]	@ (80041f4 <HAL_RCC_OscConfig+0x240>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1f0      	bne.n	8004174 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0308 	and.w	r3, r3, #8
 800419a:	2b00      	cmp	r3, #0
 800419c:	d036      	beq.n	800420c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d016      	beq.n	80041d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041a6:	4b15      	ldr	r3, [pc, #84]	@ (80041fc <HAL_RCC_OscConfig+0x248>)
 80041a8:	2201      	movs	r2, #1
 80041aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ac:	f7fd fd36 	bl	8001c1c <HAL_GetTick>
 80041b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041b2:	e008      	b.n	80041c6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041b4:	f7fd fd32 	bl	8001c1c <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d901      	bls.n	80041c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e167      	b.n	8004496 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041c6:	4b0b      	ldr	r3, [pc, #44]	@ (80041f4 <HAL_RCC_OscConfig+0x240>)
 80041c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041ca:	f003 0302 	and.w	r3, r3, #2
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d0f0      	beq.n	80041b4 <HAL_RCC_OscConfig+0x200>
 80041d2:	e01b      	b.n	800420c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041d4:	4b09      	ldr	r3, [pc, #36]	@ (80041fc <HAL_RCC_OscConfig+0x248>)
 80041d6:	2200      	movs	r2, #0
 80041d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041da:	f7fd fd1f 	bl	8001c1c <HAL_GetTick>
 80041de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041e0:	e00e      	b.n	8004200 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041e2:	f7fd fd1b 	bl	8001c1c <HAL_GetTick>
 80041e6:	4602      	mov	r2, r0
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	d907      	bls.n	8004200 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e150      	b.n	8004496 <HAL_RCC_OscConfig+0x4e2>
 80041f4:	40023800 	.word	0x40023800
 80041f8:	42470000 	.word	0x42470000
 80041fc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004200:	4b88      	ldr	r3, [pc, #544]	@ (8004424 <HAL_RCC_OscConfig+0x470>)
 8004202:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004204:	f003 0302 	and.w	r3, r3, #2
 8004208:	2b00      	cmp	r3, #0
 800420a:	d1ea      	bne.n	80041e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0304 	and.w	r3, r3, #4
 8004214:	2b00      	cmp	r3, #0
 8004216:	f000 8097 	beq.w	8004348 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800421a:	2300      	movs	r3, #0
 800421c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800421e:	4b81      	ldr	r3, [pc, #516]	@ (8004424 <HAL_RCC_OscConfig+0x470>)
 8004220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004222:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d10f      	bne.n	800424a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800422a:	2300      	movs	r3, #0
 800422c:	60bb      	str	r3, [r7, #8]
 800422e:	4b7d      	ldr	r3, [pc, #500]	@ (8004424 <HAL_RCC_OscConfig+0x470>)
 8004230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004232:	4a7c      	ldr	r2, [pc, #496]	@ (8004424 <HAL_RCC_OscConfig+0x470>)
 8004234:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004238:	6413      	str	r3, [r2, #64]	@ 0x40
 800423a:	4b7a      	ldr	r3, [pc, #488]	@ (8004424 <HAL_RCC_OscConfig+0x470>)
 800423c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800423e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004242:	60bb      	str	r3, [r7, #8]
 8004244:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004246:	2301      	movs	r3, #1
 8004248:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800424a:	4b77      	ldr	r3, [pc, #476]	@ (8004428 <HAL_RCC_OscConfig+0x474>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004252:	2b00      	cmp	r3, #0
 8004254:	d118      	bne.n	8004288 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004256:	4b74      	ldr	r3, [pc, #464]	@ (8004428 <HAL_RCC_OscConfig+0x474>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a73      	ldr	r2, [pc, #460]	@ (8004428 <HAL_RCC_OscConfig+0x474>)
 800425c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004260:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004262:	f7fd fcdb 	bl	8001c1c <HAL_GetTick>
 8004266:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004268:	e008      	b.n	800427c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800426a:	f7fd fcd7 	bl	8001c1c <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	2b02      	cmp	r3, #2
 8004276:	d901      	bls.n	800427c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e10c      	b.n	8004496 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800427c:	4b6a      	ldr	r3, [pc, #424]	@ (8004428 <HAL_RCC_OscConfig+0x474>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004284:	2b00      	cmp	r3, #0
 8004286:	d0f0      	beq.n	800426a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d106      	bne.n	800429e <HAL_RCC_OscConfig+0x2ea>
 8004290:	4b64      	ldr	r3, [pc, #400]	@ (8004424 <HAL_RCC_OscConfig+0x470>)
 8004292:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004294:	4a63      	ldr	r2, [pc, #396]	@ (8004424 <HAL_RCC_OscConfig+0x470>)
 8004296:	f043 0301 	orr.w	r3, r3, #1
 800429a:	6713      	str	r3, [r2, #112]	@ 0x70
 800429c:	e01c      	b.n	80042d8 <HAL_RCC_OscConfig+0x324>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	2b05      	cmp	r3, #5
 80042a4:	d10c      	bne.n	80042c0 <HAL_RCC_OscConfig+0x30c>
 80042a6:	4b5f      	ldr	r3, [pc, #380]	@ (8004424 <HAL_RCC_OscConfig+0x470>)
 80042a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042aa:	4a5e      	ldr	r2, [pc, #376]	@ (8004424 <HAL_RCC_OscConfig+0x470>)
 80042ac:	f043 0304 	orr.w	r3, r3, #4
 80042b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80042b2:	4b5c      	ldr	r3, [pc, #368]	@ (8004424 <HAL_RCC_OscConfig+0x470>)
 80042b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042b6:	4a5b      	ldr	r2, [pc, #364]	@ (8004424 <HAL_RCC_OscConfig+0x470>)
 80042b8:	f043 0301 	orr.w	r3, r3, #1
 80042bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80042be:	e00b      	b.n	80042d8 <HAL_RCC_OscConfig+0x324>
 80042c0:	4b58      	ldr	r3, [pc, #352]	@ (8004424 <HAL_RCC_OscConfig+0x470>)
 80042c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042c4:	4a57      	ldr	r2, [pc, #348]	@ (8004424 <HAL_RCC_OscConfig+0x470>)
 80042c6:	f023 0301 	bic.w	r3, r3, #1
 80042ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80042cc:	4b55      	ldr	r3, [pc, #340]	@ (8004424 <HAL_RCC_OscConfig+0x470>)
 80042ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042d0:	4a54      	ldr	r2, [pc, #336]	@ (8004424 <HAL_RCC_OscConfig+0x470>)
 80042d2:	f023 0304 	bic.w	r3, r3, #4
 80042d6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d015      	beq.n	800430c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e0:	f7fd fc9c 	bl	8001c1c <HAL_GetTick>
 80042e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042e6:	e00a      	b.n	80042fe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042e8:	f7fd fc98 	bl	8001c1c <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d901      	bls.n	80042fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e0cb      	b.n	8004496 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042fe:	4b49      	ldr	r3, [pc, #292]	@ (8004424 <HAL_RCC_OscConfig+0x470>)
 8004300:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004302:	f003 0302 	and.w	r3, r3, #2
 8004306:	2b00      	cmp	r3, #0
 8004308:	d0ee      	beq.n	80042e8 <HAL_RCC_OscConfig+0x334>
 800430a:	e014      	b.n	8004336 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800430c:	f7fd fc86 	bl	8001c1c <HAL_GetTick>
 8004310:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004312:	e00a      	b.n	800432a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004314:	f7fd fc82 	bl	8001c1c <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004322:	4293      	cmp	r3, r2
 8004324:	d901      	bls.n	800432a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e0b5      	b.n	8004496 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800432a:	4b3e      	ldr	r3, [pc, #248]	@ (8004424 <HAL_RCC_OscConfig+0x470>)
 800432c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800432e:	f003 0302 	and.w	r3, r3, #2
 8004332:	2b00      	cmp	r3, #0
 8004334:	d1ee      	bne.n	8004314 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004336:	7dfb      	ldrb	r3, [r7, #23]
 8004338:	2b01      	cmp	r3, #1
 800433a:	d105      	bne.n	8004348 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800433c:	4b39      	ldr	r3, [pc, #228]	@ (8004424 <HAL_RCC_OscConfig+0x470>)
 800433e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004340:	4a38      	ldr	r2, [pc, #224]	@ (8004424 <HAL_RCC_OscConfig+0x470>)
 8004342:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004346:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	699b      	ldr	r3, [r3, #24]
 800434c:	2b00      	cmp	r3, #0
 800434e:	f000 80a1 	beq.w	8004494 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004352:	4b34      	ldr	r3, [pc, #208]	@ (8004424 <HAL_RCC_OscConfig+0x470>)
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f003 030c 	and.w	r3, r3, #12
 800435a:	2b08      	cmp	r3, #8
 800435c:	d05c      	beq.n	8004418 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	2b02      	cmp	r3, #2
 8004364:	d141      	bne.n	80043ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004366:	4b31      	ldr	r3, [pc, #196]	@ (800442c <HAL_RCC_OscConfig+0x478>)
 8004368:	2200      	movs	r2, #0
 800436a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800436c:	f7fd fc56 	bl	8001c1c <HAL_GetTick>
 8004370:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004372:	e008      	b.n	8004386 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004374:	f7fd fc52 	bl	8001c1c <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	2b02      	cmp	r3, #2
 8004380:	d901      	bls.n	8004386 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e087      	b.n	8004496 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004386:	4b27      	ldr	r3, [pc, #156]	@ (8004424 <HAL_RCC_OscConfig+0x470>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d1f0      	bne.n	8004374 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	69da      	ldr	r2, [r3, #28]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a1b      	ldr	r3, [r3, #32]
 800439a:	431a      	orrs	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a0:	019b      	lsls	r3, r3, #6
 80043a2:	431a      	orrs	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043a8:	085b      	lsrs	r3, r3, #1
 80043aa:	3b01      	subs	r3, #1
 80043ac:	041b      	lsls	r3, r3, #16
 80043ae:	431a      	orrs	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043b4:	061b      	lsls	r3, r3, #24
 80043b6:	491b      	ldr	r1, [pc, #108]	@ (8004424 <HAL_RCC_OscConfig+0x470>)
 80043b8:	4313      	orrs	r3, r2
 80043ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043bc:	4b1b      	ldr	r3, [pc, #108]	@ (800442c <HAL_RCC_OscConfig+0x478>)
 80043be:	2201      	movs	r2, #1
 80043c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c2:	f7fd fc2b 	bl	8001c1c <HAL_GetTick>
 80043c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043c8:	e008      	b.n	80043dc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043ca:	f7fd fc27 	bl	8001c1c <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d901      	bls.n	80043dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	e05c      	b.n	8004496 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043dc:	4b11      	ldr	r3, [pc, #68]	@ (8004424 <HAL_RCC_OscConfig+0x470>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d0f0      	beq.n	80043ca <HAL_RCC_OscConfig+0x416>
 80043e8:	e054      	b.n	8004494 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043ea:	4b10      	ldr	r3, [pc, #64]	@ (800442c <HAL_RCC_OscConfig+0x478>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f0:	f7fd fc14 	bl	8001c1c <HAL_GetTick>
 80043f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043f6:	e008      	b.n	800440a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043f8:	f7fd fc10 	bl	8001c1c <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	2b02      	cmp	r3, #2
 8004404:	d901      	bls.n	800440a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e045      	b.n	8004496 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800440a:	4b06      	ldr	r3, [pc, #24]	@ (8004424 <HAL_RCC_OscConfig+0x470>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1f0      	bne.n	80043f8 <HAL_RCC_OscConfig+0x444>
 8004416:	e03d      	b.n	8004494 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	2b01      	cmp	r3, #1
 800441e:	d107      	bne.n	8004430 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e038      	b.n	8004496 <HAL_RCC_OscConfig+0x4e2>
 8004424:	40023800 	.word	0x40023800
 8004428:	40007000 	.word	0x40007000
 800442c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004430:	4b1b      	ldr	r3, [pc, #108]	@ (80044a0 <HAL_RCC_OscConfig+0x4ec>)
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	2b01      	cmp	r3, #1
 800443c:	d028      	beq.n	8004490 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004448:	429a      	cmp	r2, r3
 800444a:	d121      	bne.n	8004490 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004456:	429a      	cmp	r2, r3
 8004458:	d11a      	bne.n	8004490 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004460:	4013      	ands	r3, r2
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004466:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004468:	4293      	cmp	r3, r2
 800446a:	d111      	bne.n	8004490 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004476:	085b      	lsrs	r3, r3, #1
 8004478:	3b01      	subs	r3, #1
 800447a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800447c:	429a      	cmp	r2, r3
 800447e:	d107      	bne.n	8004490 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800448a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800448c:	429a      	cmp	r2, r3
 800448e:	d001      	beq.n	8004494 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e000      	b.n	8004496 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3718      	adds	r7, #24
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	40023800 	.word	0x40023800

080044a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d101      	bne.n	80044b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e0cc      	b.n	8004652 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044b8:	4b68      	ldr	r3, [pc, #416]	@ (800465c <HAL_RCC_ClockConfig+0x1b8>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0307 	and.w	r3, r3, #7
 80044c0:	683a      	ldr	r2, [r7, #0]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d90c      	bls.n	80044e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044c6:	4b65      	ldr	r3, [pc, #404]	@ (800465c <HAL_RCC_ClockConfig+0x1b8>)
 80044c8:	683a      	ldr	r2, [r7, #0]
 80044ca:	b2d2      	uxtb	r2, r2
 80044cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ce:	4b63      	ldr	r3, [pc, #396]	@ (800465c <HAL_RCC_ClockConfig+0x1b8>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0307 	and.w	r3, r3, #7
 80044d6:	683a      	ldr	r2, [r7, #0]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d001      	beq.n	80044e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e0b8      	b.n	8004652 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0302 	and.w	r3, r3, #2
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d020      	beq.n	800452e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0304 	and.w	r3, r3, #4
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d005      	beq.n	8004504 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044f8:	4b59      	ldr	r3, [pc, #356]	@ (8004660 <HAL_RCC_ClockConfig+0x1bc>)
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	4a58      	ldr	r2, [pc, #352]	@ (8004660 <HAL_RCC_ClockConfig+0x1bc>)
 80044fe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004502:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0308 	and.w	r3, r3, #8
 800450c:	2b00      	cmp	r3, #0
 800450e:	d005      	beq.n	800451c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004510:	4b53      	ldr	r3, [pc, #332]	@ (8004660 <HAL_RCC_ClockConfig+0x1bc>)
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	4a52      	ldr	r2, [pc, #328]	@ (8004660 <HAL_RCC_ClockConfig+0x1bc>)
 8004516:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800451a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800451c:	4b50      	ldr	r3, [pc, #320]	@ (8004660 <HAL_RCC_ClockConfig+0x1bc>)
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	494d      	ldr	r1, [pc, #308]	@ (8004660 <HAL_RCC_ClockConfig+0x1bc>)
 800452a:	4313      	orrs	r3, r2
 800452c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0301 	and.w	r3, r3, #1
 8004536:	2b00      	cmp	r3, #0
 8004538:	d044      	beq.n	80045c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	2b01      	cmp	r3, #1
 8004540:	d107      	bne.n	8004552 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004542:	4b47      	ldr	r3, [pc, #284]	@ (8004660 <HAL_RCC_ClockConfig+0x1bc>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d119      	bne.n	8004582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e07f      	b.n	8004652 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	2b02      	cmp	r3, #2
 8004558:	d003      	beq.n	8004562 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800455e:	2b03      	cmp	r3, #3
 8004560:	d107      	bne.n	8004572 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004562:	4b3f      	ldr	r3, [pc, #252]	@ (8004660 <HAL_RCC_ClockConfig+0x1bc>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d109      	bne.n	8004582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e06f      	b.n	8004652 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004572:	4b3b      	ldr	r3, [pc, #236]	@ (8004660 <HAL_RCC_ClockConfig+0x1bc>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	2b00      	cmp	r3, #0
 800457c:	d101      	bne.n	8004582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e067      	b.n	8004652 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004582:	4b37      	ldr	r3, [pc, #220]	@ (8004660 <HAL_RCC_ClockConfig+0x1bc>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f023 0203 	bic.w	r2, r3, #3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	4934      	ldr	r1, [pc, #208]	@ (8004660 <HAL_RCC_ClockConfig+0x1bc>)
 8004590:	4313      	orrs	r3, r2
 8004592:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004594:	f7fd fb42 	bl	8001c1c <HAL_GetTick>
 8004598:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800459a:	e00a      	b.n	80045b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800459c:	f7fd fb3e 	bl	8001c1c <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d901      	bls.n	80045b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e04f      	b.n	8004652 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045b2:	4b2b      	ldr	r3, [pc, #172]	@ (8004660 <HAL_RCC_ClockConfig+0x1bc>)
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f003 020c 	and.w	r2, r3, #12
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d1eb      	bne.n	800459c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045c4:	4b25      	ldr	r3, [pc, #148]	@ (800465c <HAL_RCC_ClockConfig+0x1b8>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0307 	and.w	r3, r3, #7
 80045cc:	683a      	ldr	r2, [r7, #0]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d20c      	bcs.n	80045ec <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045d2:	4b22      	ldr	r3, [pc, #136]	@ (800465c <HAL_RCC_ClockConfig+0x1b8>)
 80045d4:	683a      	ldr	r2, [r7, #0]
 80045d6:	b2d2      	uxtb	r2, r2
 80045d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045da:	4b20      	ldr	r3, [pc, #128]	@ (800465c <HAL_RCC_ClockConfig+0x1b8>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0307 	and.w	r3, r3, #7
 80045e2:	683a      	ldr	r2, [r7, #0]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d001      	beq.n	80045ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e032      	b.n	8004652 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0304 	and.w	r3, r3, #4
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d008      	beq.n	800460a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045f8:	4b19      	ldr	r3, [pc, #100]	@ (8004660 <HAL_RCC_ClockConfig+0x1bc>)
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	4916      	ldr	r1, [pc, #88]	@ (8004660 <HAL_RCC_ClockConfig+0x1bc>)
 8004606:	4313      	orrs	r3, r2
 8004608:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0308 	and.w	r3, r3, #8
 8004612:	2b00      	cmp	r3, #0
 8004614:	d009      	beq.n	800462a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004616:	4b12      	ldr	r3, [pc, #72]	@ (8004660 <HAL_RCC_ClockConfig+0x1bc>)
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	00db      	lsls	r3, r3, #3
 8004624:	490e      	ldr	r1, [pc, #56]	@ (8004660 <HAL_RCC_ClockConfig+0x1bc>)
 8004626:	4313      	orrs	r3, r2
 8004628:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800462a:	f000 f821 	bl	8004670 <HAL_RCC_GetSysClockFreq>
 800462e:	4602      	mov	r2, r0
 8004630:	4b0b      	ldr	r3, [pc, #44]	@ (8004660 <HAL_RCC_ClockConfig+0x1bc>)
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	091b      	lsrs	r3, r3, #4
 8004636:	f003 030f 	and.w	r3, r3, #15
 800463a:	490a      	ldr	r1, [pc, #40]	@ (8004664 <HAL_RCC_ClockConfig+0x1c0>)
 800463c:	5ccb      	ldrb	r3, [r1, r3]
 800463e:	fa22 f303 	lsr.w	r3, r2, r3
 8004642:	4a09      	ldr	r2, [pc, #36]	@ (8004668 <HAL_RCC_ClockConfig+0x1c4>)
 8004644:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004646:	4b09      	ldr	r3, [pc, #36]	@ (800466c <HAL_RCC_ClockConfig+0x1c8>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4618      	mov	r0, r3
 800464c:	f7fd f8f8 	bl	8001840 <HAL_InitTick>

  return HAL_OK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	3710      	adds	r7, #16
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	40023c00 	.word	0x40023c00
 8004660:	40023800 	.word	0x40023800
 8004664:	08008e34 	.word	0x08008e34
 8004668:	20000000 	.word	0x20000000
 800466c:	20000004 	.word	0x20000004

08004670 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004670:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004674:	b090      	sub	sp, #64	@ 0x40
 8004676:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004678:	2300      	movs	r3, #0
 800467a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800467c:	2300      	movs	r3, #0
 800467e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004680:	2300      	movs	r3, #0
 8004682:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004684:	2300      	movs	r3, #0
 8004686:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004688:	4b59      	ldr	r3, [pc, #356]	@ (80047f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f003 030c 	and.w	r3, r3, #12
 8004690:	2b08      	cmp	r3, #8
 8004692:	d00d      	beq.n	80046b0 <HAL_RCC_GetSysClockFreq+0x40>
 8004694:	2b08      	cmp	r3, #8
 8004696:	f200 80a1 	bhi.w	80047dc <HAL_RCC_GetSysClockFreq+0x16c>
 800469a:	2b00      	cmp	r3, #0
 800469c:	d002      	beq.n	80046a4 <HAL_RCC_GetSysClockFreq+0x34>
 800469e:	2b04      	cmp	r3, #4
 80046a0:	d003      	beq.n	80046aa <HAL_RCC_GetSysClockFreq+0x3a>
 80046a2:	e09b      	b.n	80047dc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046a4:	4b53      	ldr	r3, [pc, #332]	@ (80047f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80046a6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80046a8:	e09b      	b.n	80047e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046aa:	4b53      	ldr	r3, [pc, #332]	@ (80047f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80046ac:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80046ae:	e098      	b.n	80047e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046b0:	4b4f      	ldr	r3, [pc, #316]	@ (80047f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80046b8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046ba:	4b4d      	ldr	r3, [pc, #308]	@ (80047f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d028      	beq.n	8004718 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046c6:	4b4a      	ldr	r3, [pc, #296]	@ (80047f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	099b      	lsrs	r3, r3, #6
 80046cc:	2200      	movs	r2, #0
 80046ce:	623b      	str	r3, [r7, #32]
 80046d0:	627a      	str	r2, [r7, #36]	@ 0x24
 80046d2:	6a3b      	ldr	r3, [r7, #32]
 80046d4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80046d8:	2100      	movs	r1, #0
 80046da:	4b47      	ldr	r3, [pc, #284]	@ (80047f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80046dc:	fb03 f201 	mul.w	r2, r3, r1
 80046e0:	2300      	movs	r3, #0
 80046e2:	fb00 f303 	mul.w	r3, r0, r3
 80046e6:	4413      	add	r3, r2
 80046e8:	4a43      	ldr	r2, [pc, #268]	@ (80047f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80046ea:	fba0 1202 	umull	r1, r2, r0, r2
 80046ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80046f0:	460a      	mov	r2, r1
 80046f2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80046f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046f6:	4413      	add	r3, r2
 80046f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046fc:	2200      	movs	r2, #0
 80046fe:	61bb      	str	r3, [r7, #24]
 8004700:	61fa      	str	r2, [r7, #28]
 8004702:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004706:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800470a:	f7fc fa9d 	bl	8000c48 <__aeabi_uldivmod>
 800470e:	4602      	mov	r2, r0
 8004710:	460b      	mov	r3, r1
 8004712:	4613      	mov	r3, r2
 8004714:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004716:	e053      	b.n	80047c0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004718:	4b35      	ldr	r3, [pc, #212]	@ (80047f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	099b      	lsrs	r3, r3, #6
 800471e:	2200      	movs	r2, #0
 8004720:	613b      	str	r3, [r7, #16]
 8004722:	617a      	str	r2, [r7, #20]
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800472a:	f04f 0b00 	mov.w	fp, #0
 800472e:	4652      	mov	r2, sl
 8004730:	465b      	mov	r3, fp
 8004732:	f04f 0000 	mov.w	r0, #0
 8004736:	f04f 0100 	mov.w	r1, #0
 800473a:	0159      	lsls	r1, r3, #5
 800473c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004740:	0150      	lsls	r0, r2, #5
 8004742:	4602      	mov	r2, r0
 8004744:	460b      	mov	r3, r1
 8004746:	ebb2 080a 	subs.w	r8, r2, sl
 800474a:	eb63 090b 	sbc.w	r9, r3, fp
 800474e:	f04f 0200 	mov.w	r2, #0
 8004752:	f04f 0300 	mov.w	r3, #0
 8004756:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800475a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800475e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004762:	ebb2 0408 	subs.w	r4, r2, r8
 8004766:	eb63 0509 	sbc.w	r5, r3, r9
 800476a:	f04f 0200 	mov.w	r2, #0
 800476e:	f04f 0300 	mov.w	r3, #0
 8004772:	00eb      	lsls	r3, r5, #3
 8004774:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004778:	00e2      	lsls	r2, r4, #3
 800477a:	4614      	mov	r4, r2
 800477c:	461d      	mov	r5, r3
 800477e:	eb14 030a 	adds.w	r3, r4, sl
 8004782:	603b      	str	r3, [r7, #0]
 8004784:	eb45 030b 	adc.w	r3, r5, fp
 8004788:	607b      	str	r3, [r7, #4]
 800478a:	f04f 0200 	mov.w	r2, #0
 800478e:	f04f 0300 	mov.w	r3, #0
 8004792:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004796:	4629      	mov	r1, r5
 8004798:	028b      	lsls	r3, r1, #10
 800479a:	4621      	mov	r1, r4
 800479c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80047a0:	4621      	mov	r1, r4
 80047a2:	028a      	lsls	r2, r1, #10
 80047a4:	4610      	mov	r0, r2
 80047a6:	4619      	mov	r1, r3
 80047a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047aa:	2200      	movs	r2, #0
 80047ac:	60bb      	str	r3, [r7, #8]
 80047ae:	60fa      	str	r2, [r7, #12]
 80047b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047b4:	f7fc fa48 	bl	8000c48 <__aeabi_uldivmod>
 80047b8:	4602      	mov	r2, r0
 80047ba:	460b      	mov	r3, r1
 80047bc:	4613      	mov	r3, r2
 80047be:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80047c0:	4b0b      	ldr	r3, [pc, #44]	@ (80047f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	0c1b      	lsrs	r3, r3, #16
 80047c6:	f003 0303 	and.w	r3, r3, #3
 80047ca:	3301      	adds	r3, #1
 80047cc:	005b      	lsls	r3, r3, #1
 80047ce:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80047d0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80047d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80047da:	e002      	b.n	80047e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047dc:	4b05      	ldr	r3, [pc, #20]	@ (80047f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80047de:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80047e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3740      	adds	r7, #64	@ 0x40
 80047e8:	46bd      	mov	sp, r7
 80047ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047ee:	bf00      	nop
 80047f0:	40023800 	.word	0x40023800
 80047f4:	00f42400 	.word	0x00f42400
 80047f8:	017d7840 	.word	0x017d7840

080047fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047fc:	b480      	push	{r7}
 80047fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004800:	4b03      	ldr	r3, [pc, #12]	@ (8004810 <HAL_RCC_GetHCLKFreq+0x14>)
 8004802:	681b      	ldr	r3, [r3, #0]
}
 8004804:	4618      	mov	r0, r3
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop
 8004810:	20000000 	.word	0x20000000

08004814 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004818:	f7ff fff0 	bl	80047fc <HAL_RCC_GetHCLKFreq>
 800481c:	4602      	mov	r2, r0
 800481e:	4b05      	ldr	r3, [pc, #20]	@ (8004834 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	0a9b      	lsrs	r3, r3, #10
 8004824:	f003 0307 	and.w	r3, r3, #7
 8004828:	4903      	ldr	r1, [pc, #12]	@ (8004838 <HAL_RCC_GetPCLK1Freq+0x24>)
 800482a:	5ccb      	ldrb	r3, [r1, r3]
 800482c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004830:	4618      	mov	r0, r3
 8004832:	bd80      	pop	{r7, pc}
 8004834:	40023800 	.word	0x40023800
 8004838:	08008e44 	.word	0x08008e44

0800483c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004840:	f7ff ffdc 	bl	80047fc <HAL_RCC_GetHCLKFreq>
 8004844:	4602      	mov	r2, r0
 8004846:	4b05      	ldr	r3, [pc, #20]	@ (800485c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	0b5b      	lsrs	r3, r3, #13
 800484c:	f003 0307 	and.w	r3, r3, #7
 8004850:	4903      	ldr	r1, [pc, #12]	@ (8004860 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004852:	5ccb      	ldrb	r3, [r1, r3]
 8004854:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004858:	4618      	mov	r0, r3
 800485a:	bd80      	pop	{r7, pc}
 800485c:	40023800 	.word	0x40023800
 8004860:	08008e44 	.word	0x08008e44

08004864 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	220f      	movs	r2, #15
 8004872:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004874:	4b12      	ldr	r3, [pc, #72]	@ (80048c0 <HAL_RCC_GetClockConfig+0x5c>)
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f003 0203 	and.w	r2, r3, #3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004880:	4b0f      	ldr	r3, [pc, #60]	@ (80048c0 <HAL_RCC_GetClockConfig+0x5c>)
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800488c:	4b0c      	ldr	r3, [pc, #48]	@ (80048c0 <HAL_RCC_GetClockConfig+0x5c>)
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004898:	4b09      	ldr	r3, [pc, #36]	@ (80048c0 <HAL_RCC_GetClockConfig+0x5c>)
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	08db      	lsrs	r3, r3, #3
 800489e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80048a6:	4b07      	ldr	r3, [pc, #28]	@ (80048c4 <HAL_RCC_GetClockConfig+0x60>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0207 	and.w	r2, r3, #7
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	601a      	str	r2, [r3, #0]
}
 80048b2:	bf00      	nop
 80048b4:	370c      	adds	r7, #12
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	40023800 	.word	0x40023800
 80048c4:	40023c00 	.word	0x40023c00

080048c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d101      	bne.n	80048da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e07b      	b.n	80049d2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d108      	bne.n	80048f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80048ea:	d009      	beq.n	8004900 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	61da      	str	r2, [r3, #28]
 80048f2:	e005      	b.n	8004900 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800490c:	b2db      	uxtb	r3, r3
 800490e:	2b00      	cmp	r3, #0
 8004910:	d106      	bne.n	8004920 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f7fc ff28 	bl	8001770 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2202      	movs	r2, #2
 8004924:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004936:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004948:	431a      	orrs	r2, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004952:	431a      	orrs	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	f003 0302 	and.w	r3, r3, #2
 800495c:	431a      	orrs	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	f003 0301 	and.w	r3, r3, #1
 8004966:	431a      	orrs	r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	699b      	ldr	r3, [r3, #24]
 800496c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004970:	431a      	orrs	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	69db      	ldr	r3, [r3, #28]
 8004976:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800497a:	431a      	orrs	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a1b      	ldr	r3, [r3, #32]
 8004980:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004984:	ea42 0103 	orr.w	r1, r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800498c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	430a      	orrs	r2, r1
 8004996:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	699b      	ldr	r3, [r3, #24]
 800499c:	0c1b      	lsrs	r3, r3, #16
 800499e:	f003 0104 	and.w	r1, r3, #4
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a6:	f003 0210 	and.w	r2, r3, #16
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	430a      	orrs	r2, r1
 80049b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	69da      	ldr	r2, [r3, #28]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80049c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3708      	adds	r7, #8
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}

080049da <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049da:	b580      	push	{r7, lr}
 80049dc:	b082      	sub	sp, #8
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d101      	bne.n	80049ec <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e041      	b.n	8004a70 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d106      	bne.n	8004a06 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f000 f839 	bl	8004a78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2202      	movs	r2, #2
 8004a0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	3304      	adds	r3, #4
 8004a16:	4619      	mov	r1, r3
 8004a18:	4610      	mov	r0, r2
 8004a1a:	f000 f9bf 	bl	8004d9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2201      	movs	r2, #1
 8004a22:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2201      	movs	r2, #1
 8004a2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2201      	movs	r2, #1
 8004a32:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2201      	movs	r2, #1
 8004a42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2201      	movs	r2, #1
 8004a52:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2201      	movs	r2, #1
 8004a5a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2201      	movs	r2, #1
 8004a62:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a6e:	2300      	movs	r3, #0
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3708      	adds	r7, #8
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d001      	beq.n	8004aa4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e04e      	b.n	8004b42 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2202      	movs	r2, #2
 8004aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68da      	ldr	r2, [r3, #12]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f042 0201 	orr.w	r2, r2, #1
 8004aba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a23      	ldr	r2, [pc, #140]	@ (8004b50 <HAL_TIM_Base_Start_IT+0xc4>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d022      	beq.n	8004b0c <HAL_TIM_Base_Start_IT+0x80>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ace:	d01d      	beq.n	8004b0c <HAL_TIM_Base_Start_IT+0x80>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a1f      	ldr	r2, [pc, #124]	@ (8004b54 <HAL_TIM_Base_Start_IT+0xc8>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d018      	beq.n	8004b0c <HAL_TIM_Base_Start_IT+0x80>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a1e      	ldr	r2, [pc, #120]	@ (8004b58 <HAL_TIM_Base_Start_IT+0xcc>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d013      	beq.n	8004b0c <HAL_TIM_Base_Start_IT+0x80>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a1c      	ldr	r2, [pc, #112]	@ (8004b5c <HAL_TIM_Base_Start_IT+0xd0>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d00e      	beq.n	8004b0c <HAL_TIM_Base_Start_IT+0x80>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a1b      	ldr	r2, [pc, #108]	@ (8004b60 <HAL_TIM_Base_Start_IT+0xd4>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d009      	beq.n	8004b0c <HAL_TIM_Base_Start_IT+0x80>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a19      	ldr	r2, [pc, #100]	@ (8004b64 <HAL_TIM_Base_Start_IT+0xd8>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d004      	beq.n	8004b0c <HAL_TIM_Base_Start_IT+0x80>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a18      	ldr	r2, [pc, #96]	@ (8004b68 <HAL_TIM_Base_Start_IT+0xdc>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d111      	bne.n	8004b30 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f003 0307 	and.w	r3, r3, #7
 8004b16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2b06      	cmp	r3, #6
 8004b1c:	d010      	beq.n	8004b40 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f042 0201 	orr.w	r2, r2, #1
 8004b2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b2e:	e007      	b.n	8004b40 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f042 0201 	orr.w	r2, r2, #1
 8004b3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3714      	adds	r7, #20
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	40010000 	.word	0x40010000
 8004b54:	40000400 	.word	0x40000400
 8004b58:	40000800 	.word	0x40000800
 8004b5c:	40000c00 	.word	0x40000c00
 8004b60:	40010400 	.word	0x40010400
 8004b64:	40014000 	.word	0x40014000
 8004b68:	40001800 	.word	0x40001800

08004b6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	f003 0302 	and.w	r3, r3, #2
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d020      	beq.n	8004bd0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f003 0302 	and.w	r3, r3, #2
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d01b      	beq.n	8004bd0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f06f 0202 	mvn.w	r2, #2
 8004ba0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	f003 0303 	and.w	r3, r3, #3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d003      	beq.n	8004bbe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 f8d2 	bl	8004d60 <HAL_TIM_IC_CaptureCallback>
 8004bbc:	e005      	b.n	8004bca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 f8c4 	bl	8004d4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 f8d5 	bl	8004d74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	f003 0304 	and.w	r3, r3, #4
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d020      	beq.n	8004c1c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f003 0304 	and.w	r3, r3, #4
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d01b      	beq.n	8004c1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f06f 0204 	mvn.w	r2, #4
 8004bec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2202      	movs	r2, #2
 8004bf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	699b      	ldr	r3, [r3, #24]
 8004bfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d003      	beq.n	8004c0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 f8ac 	bl	8004d60 <HAL_TIM_IC_CaptureCallback>
 8004c08:	e005      	b.n	8004c16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 f89e 	bl	8004d4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f000 f8af 	bl	8004d74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	f003 0308 	and.w	r3, r3, #8
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d020      	beq.n	8004c68 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f003 0308 	and.w	r3, r3, #8
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d01b      	beq.n	8004c68 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f06f 0208 	mvn.w	r2, #8
 8004c38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2204      	movs	r2, #4
 8004c3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	69db      	ldr	r3, [r3, #28]
 8004c46:	f003 0303 	and.w	r3, r3, #3
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d003      	beq.n	8004c56 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 f886 	bl	8004d60 <HAL_TIM_IC_CaptureCallback>
 8004c54:	e005      	b.n	8004c62 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 f878 	bl	8004d4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f000 f889 	bl	8004d74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	f003 0310 	and.w	r3, r3, #16
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d020      	beq.n	8004cb4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f003 0310 	and.w	r3, r3, #16
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d01b      	beq.n	8004cb4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f06f 0210 	mvn.w	r2, #16
 8004c84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2208      	movs	r2, #8
 8004c8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	69db      	ldr	r3, [r3, #28]
 8004c92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d003      	beq.n	8004ca2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 f860 	bl	8004d60 <HAL_TIM_IC_CaptureCallback>
 8004ca0:	e005      	b.n	8004cae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 f852 	bl	8004d4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f000 f863 	bl	8004d74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	f003 0301 	and.w	r3, r3, #1
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00c      	beq.n	8004cd8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f003 0301 	and.w	r3, r3, #1
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d007      	beq.n	8004cd8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f06f 0201 	mvn.w	r2, #1
 8004cd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f7fc fbfc 	bl	80014d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00c      	beq.n	8004cfc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d007      	beq.n	8004cfc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004cf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 f906 	bl	8004f08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00c      	beq.n	8004d20 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d007      	beq.n	8004d20 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 f834 	bl	8004d88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	f003 0320 	and.w	r3, r3, #32
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00c      	beq.n	8004d44 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f003 0320 	and.w	r3, r3, #32
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d007      	beq.n	8004d44 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f06f 0220 	mvn.w	r2, #32
 8004d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 f8d8 	bl	8004ef4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d44:	bf00      	nop
 8004d46:	3710      	adds	r7, #16
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d54:	bf00      	nop
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d68:	bf00      	nop
 8004d6a:	370c      	adds	r7, #12
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d7c:	bf00      	nop
 8004d7e:	370c      	adds	r7, #12
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b085      	sub	sp, #20
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a46      	ldr	r2, [pc, #280]	@ (8004ec8 <TIM_Base_SetConfig+0x12c>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d013      	beq.n	8004ddc <TIM_Base_SetConfig+0x40>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dba:	d00f      	beq.n	8004ddc <TIM_Base_SetConfig+0x40>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a43      	ldr	r2, [pc, #268]	@ (8004ecc <TIM_Base_SetConfig+0x130>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d00b      	beq.n	8004ddc <TIM_Base_SetConfig+0x40>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a42      	ldr	r2, [pc, #264]	@ (8004ed0 <TIM_Base_SetConfig+0x134>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d007      	beq.n	8004ddc <TIM_Base_SetConfig+0x40>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4a41      	ldr	r2, [pc, #260]	@ (8004ed4 <TIM_Base_SetConfig+0x138>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d003      	beq.n	8004ddc <TIM_Base_SetConfig+0x40>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4a40      	ldr	r2, [pc, #256]	@ (8004ed8 <TIM_Base_SetConfig+0x13c>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d108      	bne.n	8004dee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004de2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a35      	ldr	r2, [pc, #212]	@ (8004ec8 <TIM_Base_SetConfig+0x12c>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d02b      	beq.n	8004e4e <TIM_Base_SetConfig+0xb2>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dfc:	d027      	beq.n	8004e4e <TIM_Base_SetConfig+0xb2>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a32      	ldr	r2, [pc, #200]	@ (8004ecc <TIM_Base_SetConfig+0x130>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d023      	beq.n	8004e4e <TIM_Base_SetConfig+0xb2>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a31      	ldr	r2, [pc, #196]	@ (8004ed0 <TIM_Base_SetConfig+0x134>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d01f      	beq.n	8004e4e <TIM_Base_SetConfig+0xb2>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a30      	ldr	r2, [pc, #192]	@ (8004ed4 <TIM_Base_SetConfig+0x138>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d01b      	beq.n	8004e4e <TIM_Base_SetConfig+0xb2>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a2f      	ldr	r2, [pc, #188]	@ (8004ed8 <TIM_Base_SetConfig+0x13c>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d017      	beq.n	8004e4e <TIM_Base_SetConfig+0xb2>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a2e      	ldr	r2, [pc, #184]	@ (8004edc <TIM_Base_SetConfig+0x140>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d013      	beq.n	8004e4e <TIM_Base_SetConfig+0xb2>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a2d      	ldr	r2, [pc, #180]	@ (8004ee0 <TIM_Base_SetConfig+0x144>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d00f      	beq.n	8004e4e <TIM_Base_SetConfig+0xb2>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a2c      	ldr	r2, [pc, #176]	@ (8004ee4 <TIM_Base_SetConfig+0x148>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d00b      	beq.n	8004e4e <TIM_Base_SetConfig+0xb2>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a2b      	ldr	r2, [pc, #172]	@ (8004ee8 <TIM_Base_SetConfig+0x14c>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d007      	beq.n	8004e4e <TIM_Base_SetConfig+0xb2>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a2a      	ldr	r2, [pc, #168]	@ (8004eec <TIM_Base_SetConfig+0x150>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d003      	beq.n	8004e4e <TIM_Base_SetConfig+0xb2>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a29      	ldr	r2, [pc, #164]	@ (8004ef0 <TIM_Base_SetConfig+0x154>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d108      	bne.n	8004e60 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	695b      	ldr	r3, [r3, #20]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	68fa      	ldr	r2, [r7, #12]
 8004e72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	689a      	ldr	r2, [r3, #8]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a10      	ldr	r2, [pc, #64]	@ (8004ec8 <TIM_Base_SetConfig+0x12c>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d003      	beq.n	8004e94 <TIM_Base_SetConfig+0xf8>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a12      	ldr	r2, [pc, #72]	@ (8004ed8 <TIM_Base_SetConfig+0x13c>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d103      	bne.n	8004e9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	691a      	ldr	r2, [r3, #16]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	f003 0301 	and.w	r3, r3, #1
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d105      	bne.n	8004eba <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	f023 0201 	bic.w	r2, r3, #1
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	611a      	str	r2, [r3, #16]
  }
}
 8004eba:	bf00      	nop
 8004ebc:	3714      	adds	r7, #20
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	40010000 	.word	0x40010000
 8004ecc:	40000400 	.word	0x40000400
 8004ed0:	40000800 	.word	0x40000800
 8004ed4:	40000c00 	.word	0x40000c00
 8004ed8:	40010400 	.word	0x40010400
 8004edc:	40014000 	.word	0x40014000
 8004ee0:	40014400 	.word	0x40014400
 8004ee4:	40014800 	.word	0x40014800
 8004ee8:	40001800 	.word	0x40001800
 8004eec:	40001c00 	.word	0x40001c00
 8004ef0:	40002000 	.word	0x40002000

08004ef4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004efc:	bf00      	nop
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f10:	bf00      	nop
 8004f12:	370c      	adds	r7, #12
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b085      	sub	sp, #20
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	4603      	mov	r3, r0
 8004f24:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004f26:	2300      	movs	r3, #0
 8004f28:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004f2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f2e:	2b84      	cmp	r3, #132	@ 0x84
 8004f30:	d005      	beq.n	8004f3e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004f32:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	4413      	add	r3, r2
 8004f3a:	3303      	adds	r3, #3
 8004f3c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3714      	adds	r7, #20
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004f50:	f000 fafc 	bl	800554c <vTaskStartScheduler>
  
  return osOK;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	bd80      	pop	{r7, pc}

08004f5a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004f5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f5c:	b089      	sub	sp, #36	@ 0x24
 8004f5e:	af04      	add	r7, sp, #16
 8004f60:	6078      	str	r0, [r7, #4]
 8004f62:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	695b      	ldr	r3, [r3, #20]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d020      	beq.n	8004fae <osThreadCreate+0x54>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	699b      	ldr	r3, [r3, #24]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d01c      	beq.n	8004fae <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	685c      	ldr	r4, [r3, #4]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	691e      	ldr	r6, [r3, #16]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f86:	4618      	mov	r0, r3
 8004f88:	f7ff ffc8 	bl	8004f1c <makeFreeRtosPriority>
 8004f8c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	695b      	ldr	r3, [r3, #20]
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f96:	9202      	str	r2, [sp, #8]
 8004f98:	9301      	str	r3, [sp, #4]
 8004f9a:	9100      	str	r1, [sp, #0]
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	4632      	mov	r2, r6
 8004fa0:	4629      	mov	r1, r5
 8004fa2:	4620      	mov	r0, r4
 8004fa4:	f000 f8ed 	bl	8005182 <xTaskCreateStatic>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	60fb      	str	r3, [r7, #12]
 8004fac:	e01c      	b.n	8004fe8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685c      	ldr	r4, [r3, #4]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fba:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f7ff ffaa 	bl	8004f1c <makeFreeRtosPriority>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	f107 030c 	add.w	r3, r7, #12
 8004fce:	9301      	str	r3, [sp, #4]
 8004fd0:	9200      	str	r2, [sp, #0]
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	4632      	mov	r2, r6
 8004fd6:	4629      	mov	r1, r5
 8004fd8:	4620      	mov	r0, r4
 8004fda:	f000 f932 	bl	8005242 <xTaskCreate>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d001      	beq.n	8004fe8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	e000      	b.n	8004fea <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3714      	adds	r7, #20
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004ff2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	b084      	sub	sp, #16
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d001      	beq.n	8005008 <osDelay+0x16>
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	e000      	b.n	800500a <osDelay+0x18>
 8005008:	2301      	movs	r3, #1
 800500a:	4618      	mov	r0, r3
 800500c:	f000 fa68 	bl	80054e0 <vTaskDelay>
  
  return osOK;
 8005010:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005012:	4618      	mov	r0, r3
 8005014:	3710      	adds	r7, #16
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}

0800501a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800501a:	b480      	push	{r7}
 800501c:	b083      	sub	sp, #12
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f103 0208 	add.w	r2, r3, #8
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f04f 32ff 	mov.w	r2, #4294967295
 8005032:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f103 0208 	add.w	r2, r3, #8
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f103 0208 	add.w	r2, r3, #8
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800504e:	bf00      	nop
 8005050:	370c      	adds	r7, #12
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr

0800505a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800505a:	b480      	push	{r7}
 800505c:	b083      	sub	sp, #12
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005068:	bf00      	nop
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005074:	b480      	push	{r7}
 8005076:	b085      	sub	sp, #20
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	68fa      	ldr	r2, [r7, #12]
 8005088:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	689a      	ldr	r2, [r3, #8]
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	683a      	ldr	r2, [r7, #0]
 8005098:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	683a      	ldr	r2, [r7, #0]
 800509e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	1c5a      	adds	r2, r3, #1
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	601a      	str	r2, [r3, #0]
}
 80050b0:	bf00      	nop
 80050b2:	3714      	adds	r7, #20
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80050bc:	b480      	push	{r7}
 80050be:	b085      	sub	sp, #20
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d2:	d103      	bne.n	80050dc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	60fb      	str	r3, [r7, #12]
 80050da:	e00c      	b.n	80050f6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	3308      	adds	r3, #8
 80050e0:	60fb      	str	r3, [r7, #12]
 80050e2:	e002      	b.n	80050ea <vListInsert+0x2e>
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	60fb      	str	r3, [r7, #12]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68ba      	ldr	r2, [r7, #8]
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d2f6      	bcs.n	80050e4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	685a      	ldr	r2, [r3, #4]
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	683a      	ldr	r2, [r7, #0]
 8005104:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	683a      	ldr	r2, [r7, #0]
 8005110:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	1c5a      	adds	r2, r3, #1
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	601a      	str	r2, [r3, #0]
}
 8005122:	bf00      	nop
 8005124:	3714      	adds	r7, #20
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr

0800512e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800512e:	b480      	push	{r7}
 8005130:	b085      	sub	sp, #20
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	6892      	ldr	r2, [r2, #8]
 8005144:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	6852      	ldr	r2, [r2, #4]
 800514e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	429a      	cmp	r2, r3
 8005158:	d103      	bne.n	8005162 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	689a      	ldr	r2, [r3, #8]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	1e5a      	subs	r2, r3, #1
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
}
 8005176:	4618      	mov	r0, r3
 8005178:	3714      	adds	r7, #20
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr

08005182 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005182:	b580      	push	{r7, lr}
 8005184:	b08e      	sub	sp, #56	@ 0x38
 8005186:	af04      	add	r7, sp, #16
 8005188:	60f8      	str	r0, [r7, #12]
 800518a:	60b9      	str	r1, [r7, #8]
 800518c:	607a      	str	r2, [r7, #4]
 800518e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005190:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005192:	2b00      	cmp	r3, #0
 8005194:	d10b      	bne.n	80051ae <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800519a:	f383 8811 	msr	BASEPRI, r3
 800519e:	f3bf 8f6f 	isb	sy
 80051a2:	f3bf 8f4f 	dsb	sy
 80051a6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80051a8:	bf00      	nop
 80051aa:	bf00      	nop
 80051ac:	e7fd      	b.n	80051aa <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80051ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d10b      	bne.n	80051cc <xTaskCreateStatic+0x4a>
	__asm volatile
 80051b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051b8:	f383 8811 	msr	BASEPRI, r3
 80051bc:	f3bf 8f6f 	isb	sy
 80051c0:	f3bf 8f4f 	dsb	sy
 80051c4:	61fb      	str	r3, [r7, #28]
}
 80051c6:	bf00      	nop
 80051c8:	bf00      	nop
 80051ca:	e7fd      	b.n	80051c8 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80051cc:	23a0      	movs	r3, #160	@ 0xa0
 80051ce:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	2ba0      	cmp	r3, #160	@ 0xa0
 80051d4:	d00b      	beq.n	80051ee <xTaskCreateStatic+0x6c>
	__asm volatile
 80051d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051da:	f383 8811 	msr	BASEPRI, r3
 80051de:	f3bf 8f6f 	isb	sy
 80051e2:	f3bf 8f4f 	dsb	sy
 80051e6:	61bb      	str	r3, [r7, #24]
}
 80051e8:	bf00      	nop
 80051ea:	bf00      	nop
 80051ec:	e7fd      	b.n	80051ea <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80051ee:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80051f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d01e      	beq.n	8005234 <xTaskCreateStatic+0xb2>
 80051f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d01b      	beq.n	8005234 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80051fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051fe:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005202:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005204:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005208:	2202      	movs	r2, #2
 800520a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800520e:	2300      	movs	r3, #0
 8005210:	9303      	str	r3, [sp, #12]
 8005212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005214:	9302      	str	r3, [sp, #8]
 8005216:	f107 0314 	add.w	r3, r7, #20
 800521a:	9301      	str	r3, [sp, #4]
 800521c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800521e:	9300      	str	r3, [sp, #0]
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	68b9      	ldr	r1, [r7, #8]
 8005226:	68f8      	ldr	r0, [r7, #12]
 8005228:	f000 f850 	bl	80052cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800522c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800522e:	f000 f8ed 	bl	800540c <prvAddNewTaskToReadyList>
 8005232:	e001      	b.n	8005238 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005234:	2300      	movs	r3, #0
 8005236:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005238:	697b      	ldr	r3, [r7, #20]
	}
 800523a:	4618      	mov	r0, r3
 800523c:	3728      	adds	r7, #40	@ 0x28
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}

08005242 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005242:	b580      	push	{r7, lr}
 8005244:	b08c      	sub	sp, #48	@ 0x30
 8005246:	af04      	add	r7, sp, #16
 8005248:	60f8      	str	r0, [r7, #12]
 800524a:	60b9      	str	r1, [r7, #8]
 800524c:	603b      	str	r3, [r7, #0]
 800524e:	4613      	mov	r3, r2
 8005250:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005252:	88fb      	ldrh	r3, [r7, #6]
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	4618      	mov	r0, r3
 8005258:	f000 fefe 	bl	8006058 <pvPortMalloc>
 800525c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00e      	beq.n	8005282 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005264:	20a0      	movs	r0, #160	@ 0xa0
 8005266:	f000 fef7 	bl	8006058 <pvPortMalloc>
 800526a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d003      	beq.n	800527a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	697a      	ldr	r2, [r7, #20]
 8005276:	631a      	str	r2, [r3, #48]	@ 0x30
 8005278:	e005      	b.n	8005286 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800527a:	6978      	ldr	r0, [r7, #20]
 800527c:	f000 ffba 	bl	80061f4 <vPortFree>
 8005280:	e001      	b.n	8005286 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005282:	2300      	movs	r3, #0
 8005284:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d017      	beq.n	80052bc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	2200      	movs	r2, #0
 8005290:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005294:	88fa      	ldrh	r2, [r7, #6]
 8005296:	2300      	movs	r3, #0
 8005298:	9303      	str	r3, [sp, #12]
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	9302      	str	r3, [sp, #8]
 800529e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052a0:	9301      	str	r3, [sp, #4]
 80052a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052a4:	9300      	str	r3, [sp, #0]
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	68b9      	ldr	r1, [r7, #8]
 80052aa:	68f8      	ldr	r0, [r7, #12]
 80052ac:	f000 f80e 	bl	80052cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80052b0:	69f8      	ldr	r0, [r7, #28]
 80052b2:	f000 f8ab 	bl	800540c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80052b6:	2301      	movs	r3, #1
 80052b8:	61bb      	str	r3, [r7, #24]
 80052ba:	e002      	b.n	80052c2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80052bc:	f04f 33ff 	mov.w	r3, #4294967295
 80052c0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80052c2:	69bb      	ldr	r3, [r7, #24]
	}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3720      	adds	r7, #32
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b088      	sub	sp, #32
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	607a      	str	r2, [r7, #4]
 80052d8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80052da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80052e4:	3b01      	subs	r3, #1
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	4413      	add	r3, r2
 80052ea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	f023 0307 	bic.w	r3, r3, #7
 80052f2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	f003 0307 	and.w	r3, r3, #7
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00b      	beq.n	8005316 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80052fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005302:	f383 8811 	msr	BASEPRI, r3
 8005306:	f3bf 8f6f 	isb	sy
 800530a:	f3bf 8f4f 	dsb	sy
 800530e:	617b      	str	r3, [r7, #20]
}
 8005310:	bf00      	nop
 8005312:	bf00      	nop
 8005314:	e7fd      	b.n	8005312 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d01f      	beq.n	800535c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800531c:	2300      	movs	r3, #0
 800531e:	61fb      	str	r3, [r7, #28]
 8005320:	e012      	b.n	8005348 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005322:	68ba      	ldr	r2, [r7, #8]
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	4413      	add	r3, r2
 8005328:	7819      	ldrb	r1, [r3, #0]
 800532a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	4413      	add	r3, r2
 8005330:	3334      	adds	r3, #52	@ 0x34
 8005332:	460a      	mov	r2, r1
 8005334:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005336:	68ba      	ldr	r2, [r7, #8]
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	4413      	add	r3, r2
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d006      	beq.n	8005350 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	3301      	adds	r3, #1
 8005346:	61fb      	str	r3, [r7, #28]
 8005348:	69fb      	ldr	r3, [r7, #28]
 800534a:	2b0f      	cmp	r3, #15
 800534c:	d9e9      	bls.n	8005322 <prvInitialiseNewTask+0x56>
 800534e:	e000      	b.n	8005352 <prvInitialiseNewTask+0x86>
			{
				break;
 8005350:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005354:	2200      	movs	r2, #0
 8005356:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800535a:	e003      	b.n	8005364 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800535c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800535e:	2200      	movs	r2, #0
 8005360:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005366:	2b06      	cmp	r3, #6
 8005368:	d901      	bls.n	800536e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800536a:	2306      	movs	r3, #6
 800536c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800536e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005370:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005372:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005376:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005378:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800537a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800537c:	2200      	movs	r2, #0
 800537e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005382:	3304      	adds	r3, #4
 8005384:	4618      	mov	r0, r3
 8005386:	f7ff fe68 	bl	800505a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800538a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800538c:	3318      	adds	r3, #24
 800538e:	4618      	mov	r0, r3
 8005390:	f7ff fe63 	bl	800505a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005396:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005398:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800539a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800539c:	f1c3 0207 	rsb	r2, r3, #7
 80053a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053a2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80053a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053a8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80053aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ac:	2200      	movs	r2, #0
 80053ae:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80053b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80053ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053bc:	334c      	adds	r3, #76	@ 0x4c
 80053be:	224c      	movs	r2, #76	@ 0x4c
 80053c0:	2100      	movs	r1, #0
 80053c2:	4618      	mov	r0, r3
 80053c4:	f001 fd93 	bl	8006eee <memset>
 80053c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ca:	4a0d      	ldr	r2, [pc, #52]	@ (8005400 <prvInitialiseNewTask+0x134>)
 80053cc:	651a      	str	r2, [r3, #80]	@ 0x50
 80053ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053d0:	4a0c      	ldr	r2, [pc, #48]	@ (8005404 <prvInitialiseNewTask+0x138>)
 80053d2:	655a      	str	r2, [r3, #84]	@ 0x54
 80053d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053d6:	4a0c      	ldr	r2, [pc, #48]	@ (8005408 <prvInitialiseNewTask+0x13c>)
 80053d8:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80053da:	683a      	ldr	r2, [r7, #0]
 80053dc:	68f9      	ldr	r1, [r7, #12]
 80053de:	69b8      	ldr	r0, [r7, #24]
 80053e0:	f000 fc2a 	bl	8005c38 <pxPortInitialiseStack>
 80053e4:	4602      	mov	r2, r0
 80053e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053e8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80053ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d002      	beq.n	80053f6 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80053f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053f6:	bf00      	nop
 80053f8:	3720      	adds	r7, #32
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	20004450 	.word	0x20004450
 8005404:	200044b8 	.word	0x200044b8
 8005408:	20004520 	.word	0x20004520

0800540c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b082      	sub	sp, #8
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005414:	f000 fd40 	bl	8005e98 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005418:	4b2a      	ldr	r3, [pc, #168]	@ (80054c4 <prvAddNewTaskToReadyList+0xb8>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	3301      	adds	r3, #1
 800541e:	4a29      	ldr	r2, [pc, #164]	@ (80054c4 <prvAddNewTaskToReadyList+0xb8>)
 8005420:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005422:	4b29      	ldr	r3, [pc, #164]	@ (80054c8 <prvAddNewTaskToReadyList+0xbc>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d109      	bne.n	800543e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800542a:	4a27      	ldr	r2, [pc, #156]	@ (80054c8 <prvAddNewTaskToReadyList+0xbc>)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005430:	4b24      	ldr	r3, [pc, #144]	@ (80054c4 <prvAddNewTaskToReadyList+0xb8>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2b01      	cmp	r3, #1
 8005436:	d110      	bne.n	800545a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005438:	f000 fad4 	bl	80059e4 <prvInitialiseTaskLists>
 800543c:	e00d      	b.n	800545a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800543e:	4b23      	ldr	r3, [pc, #140]	@ (80054cc <prvAddNewTaskToReadyList+0xc0>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d109      	bne.n	800545a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005446:	4b20      	ldr	r3, [pc, #128]	@ (80054c8 <prvAddNewTaskToReadyList+0xbc>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005450:	429a      	cmp	r2, r3
 8005452:	d802      	bhi.n	800545a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005454:	4a1c      	ldr	r2, [pc, #112]	@ (80054c8 <prvAddNewTaskToReadyList+0xbc>)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800545a:	4b1d      	ldr	r3, [pc, #116]	@ (80054d0 <prvAddNewTaskToReadyList+0xc4>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	3301      	adds	r3, #1
 8005460:	4a1b      	ldr	r2, [pc, #108]	@ (80054d0 <prvAddNewTaskToReadyList+0xc4>)
 8005462:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005468:	2201      	movs	r2, #1
 800546a:	409a      	lsls	r2, r3
 800546c:	4b19      	ldr	r3, [pc, #100]	@ (80054d4 <prvAddNewTaskToReadyList+0xc8>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4313      	orrs	r3, r2
 8005472:	4a18      	ldr	r2, [pc, #96]	@ (80054d4 <prvAddNewTaskToReadyList+0xc8>)
 8005474:	6013      	str	r3, [r2, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800547a:	4613      	mov	r3, r2
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	4413      	add	r3, r2
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	4a15      	ldr	r2, [pc, #84]	@ (80054d8 <prvAddNewTaskToReadyList+0xcc>)
 8005484:	441a      	add	r2, r3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	3304      	adds	r3, #4
 800548a:	4619      	mov	r1, r3
 800548c:	4610      	mov	r0, r2
 800548e:	f7ff fdf1 	bl	8005074 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005492:	f000 fd33 	bl	8005efc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005496:	4b0d      	ldr	r3, [pc, #52]	@ (80054cc <prvAddNewTaskToReadyList+0xc0>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00e      	beq.n	80054bc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800549e:	4b0a      	ldr	r3, [pc, #40]	@ (80054c8 <prvAddNewTaskToReadyList+0xbc>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d207      	bcs.n	80054bc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80054ac:	4b0b      	ldr	r3, [pc, #44]	@ (80054dc <prvAddNewTaskToReadyList+0xd0>)
 80054ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054b2:	601a      	str	r2, [r3, #0]
 80054b4:	f3bf 8f4f 	dsb	sy
 80054b8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054bc:	bf00      	nop
 80054be:	3708      	adds	r7, #8
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	200007fc 	.word	0x200007fc
 80054c8:	200006fc 	.word	0x200006fc
 80054cc:	20000808 	.word	0x20000808
 80054d0:	20000818 	.word	0x20000818
 80054d4:	20000804 	.word	0x20000804
 80054d8:	20000700 	.word	0x20000700
 80054dc:	e000ed04 	.word	0xe000ed04

080054e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80054e8:	2300      	movs	r3, #0
 80054ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d018      	beq.n	8005524 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80054f2:	4b14      	ldr	r3, [pc, #80]	@ (8005544 <vTaskDelay+0x64>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00b      	beq.n	8005512 <vTaskDelay+0x32>
	__asm volatile
 80054fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054fe:	f383 8811 	msr	BASEPRI, r3
 8005502:	f3bf 8f6f 	isb	sy
 8005506:	f3bf 8f4f 	dsb	sy
 800550a:	60bb      	str	r3, [r7, #8]
}
 800550c:	bf00      	nop
 800550e:	bf00      	nop
 8005510:	e7fd      	b.n	800550e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005512:	f000 f885 	bl	8005620 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005516:	2100      	movs	r1, #0
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f000 fb27 	bl	8005b6c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800551e:	f000 f88d 	bl	800563c <xTaskResumeAll>
 8005522:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d107      	bne.n	800553a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800552a:	4b07      	ldr	r3, [pc, #28]	@ (8005548 <vTaskDelay+0x68>)
 800552c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005530:	601a      	str	r2, [r3, #0]
 8005532:	f3bf 8f4f 	dsb	sy
 8005536:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800553a:	bf00      	nop
 800553c:	3710      	adds	r7, #16
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	20000824 	.word	0x20000824
 8005548:	e000ed04 	.word	0xe000ed04

0800554c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b08a      	sub	sp, #40	@ 0x28
 8005550:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005552:	2300      	movs	r3, #0
 8005554:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005556:	2300      	movs	r3, #0
 8005558:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800555a:	463a      	mov	r2, r7
 800555c:	1d39      	adds	r1, r7, #4
 800555e:	f107 0308 	add.w	r3, r7, #8
 8005562:	4618      	mov	r0, r3
 8005564:	f7fb fce8 	bl	8000f38 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005568:	6839      	ldr	r1, [r7, #0]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	68ba      	ldr	r2, [r7, #8]
 800556e:	9202      	str	r2, [sp, #8]
 8005570:	9301      	str	r3, [sp, #4]
 8005572:	2300      	movs	r3, #0
 8005574:	9300      	str	r3, [sp, #0]
 8005576:	2300      	movs	r3, #0
 8005578:	460a      	mov	r2, r1
 800557a:	4921      	ldr	r1, [pc, #132]	@ (8005600 <vTaskStartScheduler+0xb4>)
 800557c:	4821      	ldr	r0, [pc, #132]	@ (8005604 <vTaskStartScheduler+0xb8>)
 800557e:	f7ff fe00 	bl	8005182 <xTaskCreateStatic>
 8005582:	4603      	mov	r3, r0
 8005584:	4a20      	ldr	r2, [pc, #128]	@ (8005608 <vTaskStartScheduler+0xbc>)
 8005586:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005588:	4b1f      	ldr	r3, [pc, #124]	@ (8005608 <vTaskStartScheduler+0xbc>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d002      	beq.n	8005596 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005590:	2301      	movs	r3, #1
 8005592:	617b      	str	r3, [r7, #20]
 8005594:	e001      	b.n	800559a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005596:	2300      	movs	r3, #0
 8005598:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	2b01      	cmp	r3, #1
 800559e:	d11b      	bne.n	80055d8 <vTaskStartScheduler+0x8c>
	__asm volatile
 80055a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055a4:	f383 8811 	msr	BASEPRI, r3
 80055a8:	f3bf 8f6f 	isb	sy
 80055ac:	f3bf 8f4f 	dsb	sy
 80055b0:	613b      	str	r3, [r7, #16]
}
 80055b2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80055b4:	4b15      	ldr	r3, [pc, #84]	@ (800560c <vTaskStartScheduler+0xc0>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	334c      	adds	r3, #76	@ 0x4c
 80055ba:	4a15      	ldr	r2, [pc, #84]	@ (8005610 <vTaskStartScheduler+0xc4>)
 80055bc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80055be:	4b15      	ldr	r3, [pc, #84]	@ (8005614 <vTaskStartScheduler+0xc8>)
 80055c0:	f04f 32ff 	mov.w	r2, #4294967295
 80055c4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80055c6:	4b14      	ldr	r3, [pc, #80]	@ (8005618 <vTaskStartScheduler+0xcc>)
 80055c8:	2201      	movs	r2, #1
 80055ca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80055cc:	4b13      	ldr	r3, [pc, #76]	@ (800561c <vTaskStartScheduler+0xd0>)
 80055ce:	2200      	movs	r2, #0
 80055d0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80055d2:	f000 fbbd 	bl	8005d50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80055d6:	e00f      	b.n	80055f8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055de:	d10b      	bne.n	80055f8 <vTaskStartScheduler+0xac>
	__asm volatile
 80055e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055e4:	f383 8811 	msr	BASEPRI, r3
 80055e8:	f3bf 8f6f 	isb	sy
 80055ec:	f3bf 8f4f 	dsb	sy
 80055f0:	60fb      	str	r3, [r7, #12]
}
 80055f2:	bf00      	nop
 80055f4:	bf00      	nop
 80055f6:	e7fd      	b.n	80055f4 <vTaskStartScheduler+0xa8>
}
 80055f8:	bf00      	nop
 80055fa:	3718      	adds	r7, #24
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	08008e2c 	.word	0x08008e2c
 8005604:	080059b5 	.word	0x080059b5
 8005608:	20000820 	.word	0x20000820
 800560c:	200006fc 	.word	0x200006fc
 8005610:	2000001c 	.word	0x2000001c
 8005614:	2000081c 	.word	0x2000081c
 8005618:	20000808 	.word	0x20000808
 800561c:	20000800 	.word	0x20000800

08005620 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005620:	b480      	push	{r7}
 8005622:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005624:	4b04      	ldr	r3, [pc, #16]	@ (8005638 <vTaskSuspendAll+0x18>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	3301      	adds	r3, #1
 800562a:	4a03      	ldr	r2, [pc, #12]	@ (8005638 <vTaskSuspendAll+0x18>)
 800562c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800562e:	bf00      	nop
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr
 8005638:	20000824 	.word	0x20000824

0800563c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005642:	2300      	movs	r3, #0
 8005644:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005646:	2300      	movs	r3, #0
 8005648:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800564a:	4b42      	ldr	r3, [pc, #264]	@ (8005754 <xTaskResumeAll+0x118>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d10b      	bne.n	800566a <xTaskResumeAll+0x2e>
	__asm volatile
 8005652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005656:	f383 8811 	msr	BASEPRI, r3
 800565a:	f3bf 8f6f 	isb	sy
 800565e:	f3bf 8f4f 	dsb	sy
 8005662:	603b      	str	r3, [r7, #0]
}
 8005664:	bf00      	nop
 8005666:	bf00      	nop
 8005668:	e7fd      	b.n	8005666 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800566a:	f000 fc15 	bl	8005e98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800566e:	4b39      	ldr	r3, [pc, #228]	@ (8005754 <xTaskResumeAll+0x118>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	3b01      	subs	r3, #1
 8005674:	4a37      	ldr	r2, [pc, #220]	@ (8005754 <xTaskResumeAll+0x118>)
 8005676:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005678:	4b36      	ldr	r3, [pc, #216]	@ (8005754 <xTaskResumeAll+0x118>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d161      	bne.n	8005744 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005680:	4b35      	ldr	r3, [pc, #212]	@ (8005758 <xTaskResumeAll+0x11c>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d05d      	beq.n	8005744 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005688:	e02e      	b.n	80056e8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800568a:	4b34      	ldr	r3, [pc, #208]	@ (800575c <xTaskResumeAll+0x120>)
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	3318      	adds	r3, #24
 8005696:	4618      	mov	r0, r3
 8005698:	f7ff fd49 	bl	800512e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	3304      	adds	r3, #4
 80056a0:	4618      	mov	r0, r3
 80056a2:	f7ff fd44 	bl	800512e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056aa:	2201      	movs	r2, #1
 80056ac:	409a      	lsls	r2, r3
 80056ae:	4b2c      	ldr	r3, [pc, #176]	@ (8005760 <xTaskResumeAll+0x124>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	4a2a      	ldr	r2, [pc, #168]	@ (8005760 <xTaskResumeAll+0x124>)
 80056b6:	6013      	str	r3, [r2, #0]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056bc:	4613      	mov	r3, r2
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	4413      	add	r3, r2
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	4a27      	ldr	r2, [pc, #156]	@ (8005764 <xTaskResumeAll+0x128>)
 80056c6:	441a      	add	r2, r3
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	3304      	adds	r3, #4
 80056cc:	4619      	mov	r1, r3
 80056ce:	4610      	mov	r0, r2
 80056d0:	f7ff fcd0 	bl	8005074 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056d8:	4b23      	ldr	r3, [pc, #140]	@ (8005768 <xTaskResumeAll+0x12c>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056de:	429a      	cmp	r2, r3
 80056e0:	d302      	bcc.n	80056e8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80056e2:	4b22      	ldr	r3, [pc, #136]	@ (800576c <xTaskResumeAll+0x130>)
 80056e4:	2201      	movs	r2, #1
 80056e6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056e8:	4b1c      	ldr	r3, [pc, #112]	@ (800575c <xTaskResumeAll+0x120>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d1cc      	bne.n	800568a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d001      	beq.n	80056fa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80056f6:	f000 fa19 	bl	8005b2c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80056fa:	4b1d      	ldr	r3, [pc, #116]	@ (8005770 <xTaskResumeAll+0x134>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d010      	beq.n	8005728 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005706:	f000 f837 	bl	8005778 <xTaskIncrementTick>
 800570a:	4603      	mov	r3, r0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d002      	beq.n	8005716 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005710:	4b16      	ldr	r3, [pc, #88]	@ (800576c <xTaskResumeAll+0x130>)
 8005712:	2201      	movs	r2, #1
 8005714:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	3b01      	subs	r3, #1
 800571a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d1f1      	bne.n	8005706 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005722:	4b13      	ldr	r3, [pc, #76]	@ (8005770 <xTaskResumeAll+0x134>)
 8005724:	2200      	movs	r2, #0
 8005726:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005728:	4b10      	ldr	r3, [pc, #64]	@ (800576c <xTaskResumeAll+0x130>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d009      	beq.n	8005744 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005730:	2301      	movs	r3, #1
 8005732:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005734:	4b0f      	ldr	r3, [pc, #60]	@ (8005774 <xTaskResumeAll+0x138>)
 8005736:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800573a:	601a      	str	r2, [r3, #0]
 800573c:	f3bf 8f4f 	dsb	sy
 8005740:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005744:	f000 fbda 	bl	8005efc <vPortExitCritical>

	return xAlreadyYielded;
 8005748:	68bb      	ldr	r3, [r7, #8]
}
 800574a:	4618      	mov	r0, r3
 800574c:	3710      	adds	r7, #16
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	20000824 	.word	0x20000824
 8005758:	200007fc 	.word	0x200007fc
 800575c:	200007bc 	.word	0x200007bc
 8005760:	20000804 	.word	0x20000804
 8005764:	20000700 	.word	0x20000700
 8005768:	200006fc 	.word	0x200006fc
 800576c:	20000810 	.word	0x20000810
 8005770:	2000080c 	.word	0x2000080c
 8005774:	e000ed04 	.word	0xe000ed04

08005778 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b086      	sub	sp, #24
 800577c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800577e:	2300      	movs	r3, #0
 8005780:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005782:	4b4f      	ldr	r3, [pc, #316]	@ (80058c0 <xTaskIncrementTick+0x148>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	2b00      	cmp	r3, #0
 8005788:	f040 808f 	bne.w	80058aa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800578c:	4b4d      	ldr	r3, [pc, #308]	@ (80058c4 <xTaskIncrementTick+0x14c>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	3301      	adds	r3, #1
 8005792:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005794:	4a4b      	ldr	r2, [pc, #300]	@ (80058c4 <xTaskIncrementTick+0x14c>)
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d121      	bne.n	80057e4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80057a0:	4b49      	ldr	r3, [pc, #292]	@ (80058c8 <xTaskIncrementTick+0x150>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d00b      	beq.n	80057c2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80057aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ae:	f383 8811 	msr	BASEPRI, r3
 80057b2:	f3bf 8f6f 	isb	sy
 80057b6:	f3bf 8f4f 	dsb	sy
 80057ba:	603b      	str	r3, [r7, #0]
}
 80057bc:	bf00      	nop
 80057be:	bf00      	nop
 80057c0:	e7fd      	b.n	80057be <xTaskIncrementTick+0x46>
 80057c2:	4b41      	ldr	r3, [pc, #260]	@ (80058c8 <xTaskIncrementTick+0x150>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	60fb      	str	r3, [r7, #12]
 80057c8:	4b40      	ldr	r3, [pc, #256]	@ (80058cc <xTaskIncrementTick+0x154>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a3e      	ldr	r2, [pc, #248]	@ (80058c8 <xTaskIncrementTick+0x150>)
 80057ce:	6013      	str	r3, [r2, #0]
 80057d0:	4a3e      	ldr	r2, [pc, #248]	@ (80058cc <xTaskIncrementTick+0x154>)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6013      	str	r3, [r2, #0]
 80057d6:	4b3e      	ldr	r3, [pc, #248]	@ (80058d0 <xTaskIncrementTick+0x158>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	3301      	adds	r3, #1
 80057dc:	4a3c      	ldr	r2, [pc, #240]	@ (80058d0 <xTaskIncrementTick+0x158>)
 80057de:	6013      	str	r3, [r2, #0]
 80057e0:	f000 f9a4 	bl	8005b2c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80057e4:	4b3b      	ldr	r3, [pc, #236]	@ (80058d4 <xTaskIncrementTick+0x15c>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	693a      	ldr	r2, [r7, #16]
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d348      	bcc.n	8005880 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057ee:	4b36      	ldr	r3, [pc, #216]	@ (80058c8 <xTaskIncrementTick+0x150>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d104      	bne.n	8005802 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057f8:	4b36      	ldr	r3, [pc, #216]	@ (80058d4 <xTaskIncrementTick+0x15c>)
 80057fa:	f04f 32ff 	mov.w	r2, #4294967295
 80057fe:	601a      	str	r2, [r3, #0]
					break;
 8005800:	e03e      	b.n	8005880 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005802:	4b31      	ldr	r3, [pc, #196]	@ (80058c8 <xTaskIncrementTick+0x150>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005812:	693a      	ldr	r2, [r7, #16]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	429a      	cmp	r2, r3
 8005818:	d203      	bcs.n	8005822 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800581a:	4a2e      	ldr	r2, [pc, #184]	@ (80058d4 <xTaskIncrementTick+0x15c>)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005820:	e02e      	b.n	8005880 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	3304      	adds	r3, #4
 8005826:	4618      	mov	r0, r3
 8005828:	f7ff fc81 	bl	800512e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005830:	2b00      	cmp	r3, #0
 8005832:	d004      	beq.n	800583e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	3318      	adds	r3, #24
 8005838:	4618      	mov	r0, r3
 800583a:	f7ff fc78 	bl	800512e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005842:	2201      	movs	r2, #1
 8005844:	409a      	lsls	r2, r3
 8005846:	4b24      	ldr	r3, [pc, #144]	@ (80058d8 <xTaskIncrementTick+0x160>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4313      	orrs	r3, r2
 800584c:	4a22      	ldr	r2, [pc, #136]	@ (80058d8 <xTaskIncrementTick+0x160>)
 800584e:	6013      	str	r3, [r2, #0]
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005854:	4613      	mov	r3, r2
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	4413      	add	r3, r2
 800585a:	009b      	lsls	r3, r3, #2
 800585c:	4a1f      	ldr	r2, [pc, #124]	@ (80058dc <xTaskIncrementTick+0x164>)
 800585e:	441a      	add	r2, r3
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	3304      	adds	r3, #4
 8005864:	4619      	mov	r1, r3
 8005866:	4610      	mov	r0, r2
 8005868:	f7ff fc04 	bl	8005074 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005870:	4b1b      	ldr	r3, [pc, #108]	@ (80058e0 <xTaskIncrementTick+0x168>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005876:	429a      	cmp	r2, r3
 8005878:	d3b9      	bcc.n	80057ee <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800587a:	2301      	movs	r3, #1
 800587c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800587e:	e7b6      	b.n	80057ee <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005880:	4b17      	ldr	r3, [pc, #92]	@ (80058e0 <xTaskIncrementTick+0x168>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005886:	4915      	ldr	r1, [pc, #84]	@ (80058dc <xTaskIncrementTick+0x164>)
 8005888:	4613      	mov	r3, r2
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	4413      	add	r3, r2
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	440b      	add	r3, r1
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2b01      	cmp	r3, #1
 8005896:	d901      	bls.n	800589c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005898:	2301      	movs	r3, #1
 800589a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800589c:	4b11      	ldr	r3, [pc, #68]	@ (80058e4 <xTaskIncrementTick+0x16c>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d007      	beq.n	80058b4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80058a4:	2301      	movs	r3, #1
 80058a6:	617b      	str	r3, [r7, #20]
 80058a8:	e004      	b.n	80058b4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80058aa:	4b0f      	ldr	r3, [pc, #60]	@ (80058e8 <xTaskIncrementTick+0x170>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	3301      	adds	r3, #1
 80058b0:	4a0d      	ldr	r2, [pc, #52]	@ (80058e8 <xTaskIncrementTick+0x170>)
 80058b2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80058b4:	697b      	ldr	r3, [r7, #20]
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3718      	adds	r7, #24
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	20000824 	.word	0x20000824
 80058c4:	20000800 	.word	0x20000800
 80058c8:	200007b4 	.word	0x200007b4
 80058cc:	200007b8 	.word	0x200007b8
 80058d0:	20000814 	.word	0x20000814
 80058d4:	2000081c 	.word	0x2000081c
 80058d8:	20000804 	.word	0x20000804
 80058dc:	20000700 	.word	0x20000700
 80058e0:	200006fc 	.word	0x200006fc
 80058e4:	20000810 	.word	0x20000810
 80058e8:	2000080c 	.word	0x2000080c

080058ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80058ec:	b480      	push	{r7}
 80058ee:	b087      	sub	sp, #28
 80058f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80058f2:	4b2a      	ldr	r3, [pc, #168]	@ (800599c <vTaskSwitchContext+0xb0>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d003      	beq.n	8005902 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80058fa:	4b29      	ldr	r3, [pc, #164]	@ (80059a0 <vTaskSwitchContext+0xb4>)
 80058fc:	2201      	movs	r2, #1
 80058fe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005900:	e045      	b.n	800598e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8005902:	4b27      	ldr	r3, [pc, #156]	@ (80059a0 <vTaskSwitchContext+0xb4>)
 8005904:	2200      	movs	r2, #0
 8005906:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005908:	4b26      	ldr	r3, [pc, #152]	@ (80059a4 <vTaskSwitchContext+0xb8>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	fab3 f383 	clz	r3, r3
 8005914:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005916:	7afb      	ldrb	r3, [r7, #11]
 8005918:	f1c3 031f 	rsb	r3, r3, #31
 800591c:	617b      	str	r3, [r7, #20]
 800591e:	4922      	ldr	r1, [pc, #136]	@ (80059a8 <vTaskSwitchContext+0xbc>)
 8005920:	697a      	ldr	r2, [r7, #20]
 8005922:	4613      	mov	r3, r2
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	4413      	add	r3, r2
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	440b      	add	r3, r1
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d10b      	bne.n	800594a <vTaskSwitchContext+0x5e>
	__asm volatile
 8005932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005936:	f383 8811 	msr	BASEPRI, r3
 800593a:	f3bf 8f6f 	isb	sy
 800593e:	f3bf 8f4f 	dsb	sy
 8005942:	607b      	str	r3, [r7, #4]
}
 8005944:	bf00      	nop
 8005946:	bf00      	nop
 8005948:	e7fd      	b.n	8005946 <vTaskSwitchContext+0x5a>
 800594a:	697a      	ldr	r2, [r7, #20]
 800594c:	4613      	mov	r3, r2
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	4413      	add	r3, r2
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	4a14      	ldr	r2, [pc, #80]	@ (80059a8 <vTaskSwitchContext+0xbc>)
 8005956:	4413      	add	r3, r2
 8005958:	613b      	str	r3, [r7, #16]
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	685a      	ldr	r2, [r3, #4]
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	605a      	str	r2, [r3, #4]
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	685a      	ldr	r2, [r3, #4]
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	3308      	adds	r3, #8
 800596c:	429a      	cmp	r2, r3
 800596e:	d104      	bne.n	800597a <vTaskSwitchContext+0x8e>
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	685a      	ldr	r2, [r3, #4]
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	605a      	str	r2, [r3, #4]
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	4a0a      	ldr	r2, [pc, #40]	@ (80059ac <vTaskSwitchContext+0xc0>)
 8005982:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005984:	4b09      	ldr	r3, [pc, #36]	@ (80059ac <vTaskSwitchContext+0xc0>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	334c      	adds	r3, #76	@ 0x4c
 800598a:	4a09      	ldr	r2, [pc, #36]	@ (80059b0 <vTaskSwitchContext+0xc4>)
 800598c:	6013      	str	r3, [r2, #0]
}
 800598e:	bf00      	nop
 8005990:	371c      	adds	r7, #28
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop
 800599c:	20000824 	.word	0x20000824
 80059a0:	20000810 	.word	0x20000810
 80059a4:	20000804 	.word	0x20000804
 80059a8:	20000700 	.word	0x20000700
 80059ac:	200006fc 	.word	0x200006fc
 80059b0:	2000001c 	.word	0x2000001c

080059b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80059bc:	f000 f852 	bl	8005a64 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80059c0:	4b06      	ldr	r3, [pc, #24]	@ (80059dc <prvIdleTask+0x28>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d9f9      	bls.n	80059bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80059c8:	4b05      	ldr	r3, [pc, #20]	@ (80059e0 <prvIdleTask+0x2c>)
 80059ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059ce:	601a      	str	r2, [r3, #0]
 80059d0:	f3bf 8f4f 	dsb	sy
 80059d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80059d8:	e7f0      	b.n	80059bc <prvIdleTask+0x8>
 80059da:	bf00      	nop
 80059dc:	20000700 	.word	0x20000700
 80059e0:	e000ed04 	.word	0xe000ed04

080059e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059ea:	2300      	movs	r3, #0
 80059ec:	607b      	str	r3, [r7, #4]
 80059ee:	e00c      	b.n	8005a0a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	4613      	mov	r3, r2
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	4413      	add	r3, r2
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	4a12      	ldr	r2, [pc, #72]	@ (8005a44 <prvInitialiseTaskLists+0x60>)
 80059fc:	4413      	add	r3, r2
 80059fe:	4618      	mov	r0, r3
 8005a00:	f7ff fb0b 	bl	800501a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	3301      	adds	r3, #1
 8005a08:	607b      	str	r3, [r7, #4]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2b06      	cmp	r3, #6
 8005a0e:	d9ef      	bls.n	80059f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005a10:	480d      	ldr	r0, [pc, #52]	@ (8005a48 <prvInitialiseTaskLists+0x64>)
 8005a12:	f7ff fb02 	bl	800501a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005a16:	480d      	ldr	r0, [pc, #52]	@ (8005a4c <prvInitialiseTaskLists+0x68>)
 8005a18:	f7ff faff 	bl	800501a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005a1c:	480c      	ldr	r0, [pc, #48]	@ (8005a50 <prvInitialiseTaskLists+0x6c>)
 8005a1e:	f7ff fafc 	bl	800501a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005a22:	480c      	ldr	r0, [pc, #48]	@ (8005a54 <prvInitialiseTaskLists+0x70>)
 8005a24:	f7ff faf9 	bl	800501a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005a28:	480b      	ldr	r0, [pc, #44]	@ (8005a58 <prvInitialiseTaskLists+0x74>)
 8005a2a:	f7ff faf6 	bl	800501a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005a2e:	4b0b      	ldr	r3, [pc, #44]	@ (8005a5c <prvInitialiseTaskLists+0x78>)
 8005a30:	4a05      	ldr	r2, [pc, #20]	@ (8005a48 <prvInitialiseTaskLists+0x64>)
 8005a32:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005a34:	4b0a      	ldr	r3, [pc, #40]	@ (8005a60 <prvInitialiseTaskLists+0x7c>)
 8005a36:	4a05      	ldr	r2, [pc, #20]	@ (8005a4c <prvInitialiseTaskLists+0x68>)
 8005a38:	601a      	str	r2, [r3, #0]
}
 8005a3a:	bf00      	nop
 8005a3c:	3708      	adds	r7, #8
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	20000700 	.word	0x20000700
 8005a48:	2000078c 	.word	0x2000078c
 8005a4c:	200007a0 	.word	0x200007a0
 8005a50:	200007bc 	.word	0x200007bc
 8005a54:	200007d0 	.word	0x200007d0
 8005a58:	200007e8 	.word	0x200007e8
 8005a5c:	200007b4 	.word	0x200007b4
 8005a60:	200007b8 	.word	0x200007b8

08005a64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b082      	sub	sp, #8
 8005a68:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a6a:	e019      	b.n	8005aa0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005a6c:	f000 fa14 	bl	8005e98 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a70:	4b10      	ldr	r3, [pc, #64]	@ (8005ab4 <prvCheckTasksWaitingTermination+0x50>)
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	3304      	adds	r3, #4
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f7ff fb56 	bl	800512e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005a82:	4b0d      	ldr	r3, [pc, #52]	@ (8005ab8 <prvCheckTasksWaitingTermination+0x54>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	3b01      	subs	r3, #1
 8005a88:	4a0b      	ldr	r2, [pc, #44]	@ (8005ab8 <prvCheckTasksWaitingTermination+0x54>)
 8005a8a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8005abc <prvCheckTasksWaitingTermination+0x58>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	3b01      	subs	r3, #1
 8005a92:	4a0a      	ldr	r2, [pc, #40]	@ (8005abc <prvCheckTasksWaitingTermination+0x58>)
 8005a94:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005a96:	f000 fa31 	bl	8005efc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 f810 	bl	8005ac0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005aa0:	4b06      	ldr	r3, [pc, #24]	@ (8005abc <prvCheckTasksWaitingTermination+0x58>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d1e1      	bne.n	8005a6c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005aa8:	bf00      	nop
 8005aaa:	bf00      	nop
 8005aac:	3708      	adds	r7, #8
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	200007d0 	.word	0x200007d0
 8005ab8:	200007fc 	.word	0x200007fc
 8005abc:	200007e4 	.word	0x200007e4

08005ac0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	334c      	adds	r3, #76	@ 0x4c
 8005acc:	4618      	mov	r0, r3
 8005ace:	f001 fa2b 	bl	8006f28 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d108      	bne.n	8005aee <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f000 fb87 	bl	80061f4 <vPortFree>
				vPortFree( pxTCB );
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 fb84 	bl	80061f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005aec:	e019      	b.n	8005b22 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d103      	bne.n	8005b00 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f000 fb7b 	bl	80061f4 <vPortFree>
	}
 8005afe:	e010      	b.n	8005b22 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005b06:	2b02      	cmp	r3, #2
 8005b08:	d00b      	beq.n	8005b22 <prvDeleteTCB+0x62>
	__asm volatile
 8005b0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b0e:	f383 8811 	msr	BASEPRI, r3
 8005b12:	f3bf 8f6f 	isb	sy
 8005b16:	f3bf 8f4f 	dsb	sy
 8005b1a:	60fb      	str	r3, [r7, #12]
}
 8005b1c:	bf00      	nop
 8005b1e:	bf00      	nop
 8005b20:	e7fd      	b.n	8005b1e <prvDeleteTCB+0x5e>
	}
 8005b22:	bf00      	nop
 8005b24:	3710      	adds	r7, #16
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
	...

08005b2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b32:	4b0c      	ldr	r3, [pc, #48]	@ (8005b64 <prvResetNextTaskUnblockTime+0x38>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d104      	bne.n	8005b46 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005b3c:	4b0a      	ldr	r3, [pc, #40]	@ (8005b68 <prvResetNextTaskUnblockTime+0x3c>)
 8005b3e:	f04f 32ff 	mov.w	r2, #4294967295
 8005b42:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005b44:	e008      	b.n	8005b58 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b46:	4b07      	ldr	r3, [pc, #28]	@ (8005b64 <prvResetNextTaskUnblockTime+0x38>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	4a04      	ldr	r2, [pc, #16]	@ (8005b68 <prvResetNextTaskUnblockTime+0x3c>)
 8005b56:	6013      	str	r3, [r2, #0]
}
 8005b58:	bf00      	nop
 8005b5a:	370c      	adds	r7, #12
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr
 8005b64:	200007b4 	.word	0x200007b4
 8005b68:	2000081c 	.word	0x2000081c

08005b6c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b084      	sub	sp, #16
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005b76:	4b29      	ldr	r3, [pc, #164]	@ (8005c1c <prvAddCurrentTaskToDelayedList+0xb0>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b7c:	4b28      	ldr	r3, [pc, #160]	@ (8005c20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	3304      	adds	r3, #4
 8005b82:	4618      	mov	r0, r3
 8005b84:	f7ff fad3 	bl	800512e <uxListRemove>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d10b      	bne.n	8005ba6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005b8e:	4b24      	ldr	r3, [pc, #144]	@ (8005c20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b94:	2201      	movs	r2, #1
 8005b96:	fa02 f303 	lsl.w	r3, r2, r3
 8005b9a:	43da      	mvns	r2, r3
 8005b9c:	4b21      	ldr	r3, [pc, #132]	@ (8005c24 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	4a20      	ldr	r2, [pc, #128]	@ (8005c24 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005ba4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bac:	d10a      	bne.n	8005bc4 <prvAddCurrentTaskToDelayedList+0x58>
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d007      	beq.n	8005bc4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005bb4:	4b1a      	ldr	r3, [pc, #104]	@ (8005c20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	3304      	adds	r3, #4
 8005bba:	4619      	mov	r1, r3
 8005bbc:	481a      	ldr	r0, [pc, #104]	@ (8005c28 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005bbe:	f7ff fa59 	bl	8005074 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005bc2:	e026      	b.n	8005c12 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005bc4:	68fa      	ldr	r2, [r7, #12]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4413      	add	r3, r2
 8005bca:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005bcc:	4b14      	ldr	r3, [pc, #80]	@ (8005c20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68ba      	ldr	r2, [r7, #8]
 8005bd2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005bd4:	68ba      	ldr	r2, [r7, #8]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d209      	bcs.n	8005bf0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005bdc:	4b13      	ldr	r3, [pc, #76]	@ (8005c2c <prvAddCurrentTaskToDelayedList+0xc0>)
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	4b0f      	ldr	r3, [pc, #60]	@ (8005c20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	3304      	adds	r3, #4
 8005be6:	4619      	mov	r1, r3
 8005be8:	4610      	mov	r0, r2
 8005bea:	f7ff fa67 	bl	80050bc <vListInsert>
}
 8005bee:	e010      	b.n	8005c12 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005bf0:	4b0f      	ldr	r3, [pc, #60]	@ (8005c30 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	4b0a      	ldr	r3, [pc, #40]	@ (8005c20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	3304      	adds	r3, #4
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	4610      	mov	r0, r2
 8005bfe:	f7ff fa5d 	bl	80050bc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005c02:	4b0c      	ldr	r3, [pc, #48]	@ (8005c34 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	68ba      	ldr	r2, [r7, #8]
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d202      	bcs.n	8005c12 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005c0c:	4a09      	ldr	r2, [pc, #36]	@ (8005c34 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	6013      	str	r3, [r2, #0]
}
 8005c12:	bf00      	nop
 8005c14:	3710      	adds	r7, #16
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	20000800 	.word	0x20000800
 8005c20:	200006fc 	.word	0x200006fc
 8005c24:	20000804 	.word	0x20000804
 8005c28:	200007e8 	.word	0x200007e8
 8005c2c:	200007b8 	.word	0x200007b8
 8005c30:	200007b4 	.word	0x200007b4
 8005c34:	2000081c 	.word	0x2000081c

08005c38 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b085      	sub	sp, #20
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	60b9      	str	r1, [r7, #8]
 8005c42:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	3b04      	subs	r3, #4
 8005c48:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005c50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	3b04      	subs	r3, #4
 8005c56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	f023 0201 	bic.w	r2, r3, #1
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	3b04      	subs	r3, #4
 8005c66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005c68:	4a0c      	ldr	r2, [pc, #48]	@ (8005c9c <pxPortInitialiseStack+0x64>)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	3b14      	subs	r3, #20
 8005c72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	3b04      	subs	r3, #4
 8005c7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f06f 0202 	mvn.w	r2, #2
 8005c86:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	3b20      	subs	r3, #32
 8005c8c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3714      	adds	r7, #20
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr
 8005c9c:	08005ca1 	.word	0x08005ca1

08005ca0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b085      	sub	sp, #20
 8005ca4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005caa:	4b13      	ldr	r3, [pc, #76]	@ (8005cf8 <prvTaskExitError+0x58>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cb2:	d00b      	beq.n	8005ccc <prvTaskExitError+0x2c>
	__asm volatile
 8005cb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cb8:	f383 8811 	msr	BASEPRI, r3
 8005cbc:	f3bf 8f6f 	isb	sy
 8005cc0:	f3bf 8f4f 	dsb	sy
 8005cc4:	60fb      	str	r3, [r7, #12]
}
 8005cc6:	bf00      	nop
 8005cc8:	bf00      	nop
 8005cca:	e7fd      	b.n	8005cc8 <prvTaskExitError+0x28>
	__asm volatile
 8005ccc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cd0:	f383 8811 	msr	BASEPRI, r3
 8005cd4:	f3bf 8f6f 	isb	sy
 8005cd8:	f3bf 8f4f 	dsb	sy
 8005cdc:	60bb      	str	r3, [r7, #8]
}
 8005cde:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005ce0:	bf00      	nop
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d0fc      	beq.n	8005ce2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005ce8:	bf00      	nop
 8005cea:	bf00      	nop
 8005cec:	3714      	adds	r7, #20
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr
 8005cf6:	bf00      	nop
 8005cf8:	2000000c 	.word	0x2000000c
 8005cfc:	00000000 	.word	0x00000000

08005d00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005d00:	4b07      	ldr	r3, [pc, #28]	@ (8005d20 <pxCurrentTCBConst2>)
 8005d02:	6819      	ldr	r1, [r3, #0]
 8005d04:	6808      	ldr	r0, [r1, #0]
 8005d06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d0a:	f380 8809 	msr	PSP, r0
 8005d0e:	f3bf 8f6f 	isb	sy
 8005d12:	f04f 0000 	mov.w	r0, #0
 8005d16:	f380 8811 	msr	BASEPRI, r0
 8005d1a:	4770      	bx	lr
 8005d1c:	f3af 8000 	nop.w

08005d20 <pxCurrentTCBConst2>:
 8005d20:	200006fc 	.word	0x200006fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005d24:	bf00      	nop
 8005d26:	bf00      	nop

08005d28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005d28:	4808      	ldr	r0, [pc, #32]	@ (8005d4c <prvPortStartFirstTask+0x24>)
 8005d2a:	6800      	ldr	r0, [r0, #0]
 8005d2c:	6800      	ldr	r0, [r0, #0]
 8005d2e:	f380 8808 	msr	MSP, r0
 8005d32:	f04f 0000 	mov.w	r0, #0
 8005d36:	f380 8814 	msr	CONTROL, r0
 8005d3a:	b662      	cpsie	i
 8005d3c:	b661      	cpsie	f
 8005d3e:	f3bf 8f4f 	dsb	sy
 8005d42:	f3bf 8f6f 	isb	sy
 8005d46:	df00      	svc	0
 8005d48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005d4a:	bf00      	nop
 8005d4c:	e000ed08 	.word	0xe000ed08

08005d50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b086      	sub	sp, #24
 8005d54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005d56:	4b47      	ldr	r3, [pc, #284]	@ (8005e74 <xPortStartScheduler+0x124>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a47      	ldr	r2, [pc, #284]	@ (8005e78 <xPortStartScheduler+0x128>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d10b      	bne.n	8005d78 <xPortStartScheduler+0x28>
	__asm volatile
 8005d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d64:	f383 8811 	msr	BASEPRI, r3
 8005d68:	f3bf 8f6f 	isb	sy
 8005d6c:	f3bf 8f4f 	dsb	sy
 8005d70:	613b      	str	r3, [r7, #16]
}
 8005d72:	bf00      	nop
 8005d74:	bf00      	nop
 8005d76:	e7fd      	b.n	8005d74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005d78:	4b3e      	ldr	r3, [pc, #248]	@ (8005e74 <xPortStartScheduler+0x124>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a3f      	ldr	r2, [pc, #252]	@ (8005e7c <xPortStartScheduler+0x12c>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d10b      	bne.n	8005d9a <xPortStartScheduler+0x4a>
	__asm volatile
 8005d82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d86:	f383 8811 	msr	BASEPRI, r3
 8005d8a:	f3bf 8f6f 	isb	sy
 8005d8e:	f3bf 8f4f 	dsb	sy
 8005d92:	60fb      	str	r3, [r7, #12]
}
 8005d94:	bf00      	nop
 8005d96:	bf00      	nop
 8005d98:	e7fd      	b.n	8005d96 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005d9a:	4b39      	ldr	r3, [pc, #228]	@ (8005e80 <xPortStartScheduler+0x130>)
 8005d9c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	b2db      	uxtb	r3, r3
 8005da4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	22ff      	movs	r2, #255	@ 0xff
 8005daa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005db4:	78fb      	ldrb	r3, [r7, #3]
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005dbc:	b2da      	uxtb	r2, r3
 8005dbe:	4b31      	ldr	r3, [pc, #196]	@ (8005e84 <xPortStartScheduler+0x134>)
 8005dc0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005dc2:	4b31      	ldr	r3, [pc, #196]	@ (8005e88 <xPortStartScheduler+0x138>)
 8005dc4:	2207      	movs	r2, #7
 8005dc6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005dc8:	e009      	b.n	8005dde <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005dca:	4b2f      	ldr	r3, [pc, #188]	@ (8005e88 <xPortStartScheduler+0x138>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	3b01      	subs	r3, #1
 8005dd0:	4a2d      	ldr	r2, [pc, #180]	@ (8005e88 <xPortStartScheduler+0x138>)
 8005dd2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005dd4:	78fb      	ldrb	r3, [r7, #3]
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	005b      	lsls	r3, r3, #1
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005dde:	78fb      	ldrb	r3, [r7, #3]
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005de6:	2b80      	cmp	r3, #128	@ 0x80
 8005de8:	d0ef      	beq.n	8005dca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005dea:	4b27      	ldr	r3, [pc, #156]	@ (8005e88 <xPortStartScheduler+0x138>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f1c3 0307 	rsb	r3, r3, #7
 8005df2:	2b04      	cmp	r3, #4
 8005df4:	d00b      	beq.n	8005e0e <xPortStartScheduler+0xbe>
	__asm volatile
 8005df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dfa:	f383 8811 	msr	BASEPRI, r3
 8005dfe:	f3bf 8f6f 	isb	sy
 8005e02:	f3bf 8f4f 	dsb	sy
 8005e06:	60bb      	str	r3, [r7, #8]
}
 8005e08:	bf00      	nop
 8005e0a:	bf00      	nop
 8005e0c:	e7fd      	b.n	8005e0a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005e0e:	4b1e      	ldr	r3, [pc, #120]	@ (8005e88 <xPortStartScheduler+0x138>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	021b      	lsls	r3, r3, #8
 8005e14:	4a1c      	ldr	r2, [pc, #112]	@ (8005e88 <xPortStartScheduler+0x138>)
 8005e16:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005e18:	4b1b      	ldr	r3, [pc, #108]	@ (8005e88 <xPortStartScheduler+0x138>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005e20:	4a19      	ldr	r2, [pc, #100]	@ (8005e88 <xPortStartScheduler+0x138>)
 8005e22:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	b2da      	uxtb	r2, r3
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005e2c:	4b17      	ldr	r3, [pc, #92]	@ (8005e8c <xPortStartScheduler+0x13c>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a16      	ldr	r2, [pc, #88]	@ (8005e8c <xPortStartScheduler+0x13c>)
 8005e32:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005e36:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005e38:	4b14      	ldr	r3, [pc, #80]	@ (8005e8c <xPortStartScheduler+0x13c>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a13      	ldr	r2, [pc, #76]	@ (8005e8c <xPortStartScheduler+0x13c>)
 8005e3e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005e42:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005e44:	f000 f8da 	bl	8005ffc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005e48:	4b11      	ldr	r3, [pc, #68]	@ (8005e90 <xPortStartScheduler+0x140>)
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005e4e:	f000 f8f9 	bl	8006044 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005e52:	4b10      	ldr	r3, [pc, #64]	@ (8005e94 <xPortStartScheduler+0x144>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a0f      	ldr	r2, [pc, #60]	@ (8005e94 <xPortStartScheduler+0x144>)
 8005e58:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005e5c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005e5e:	f7ff ff63 	bl	8005d28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005e62:	f7ff fd43 	bl	80058ec <vTaskSwitchContext>
	prvTaskExitError();
 8005e66:	f7ff ff1b 	bl	8005ca0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005e6a:	2300      	movs	r3, #0
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3718      	adds	r7, #24
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}
 8005e74:	e000ed00 	.word	0xe000ed00
 8005e78:	410fc271 	.word	0x410fc271
 8005e7c:	410fc270 	.word	0x410fc270
 8005e80:	e000e400 	.word	0xe000e400
 8005e84:	20000828 	.word	0x20000828
 8005e88:	2000082c 	.word	0x2000082c
 8005e8c:	e000ed20 	.word	0xe000ed20
 8005e90:	2000000c 	.word	0x2000000c
 8005e94:	e000ef34 	.word	0xe000ef34

08005e98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
	__asm volatile
 8005e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ea2:	f383 8811 	msr	BASEPRI, r3
 8005ea6:	f3bf 8f6f 	isb	sy
 8005eaa:	f3bf 8f4f 	dsb	sy
 8005eae:	607b      	str	r3, [r7, #4]
}
 8005eb0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005eb2:	4b10      	ldr	r3, [pc, #64]	@ (8005ef4 <vPortEnterCritical+0x5c>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	4a0e      	ldr	r2, [pc, #56]	@ (8005ef4 <vPortEnterCritical+0x5c>)
 8005eba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005ebc:	4b0d      	ldr	r3, [pc, #52]	@ (8005ef4 <vPortEnterCritical+0x5c>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d110      	bne.n	8005ee6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8005ef8 <vPortEnterCritical+0x60>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00b      	beq.n	8005ee6 <vPortEnterCritical+0x4e>
	__asm volatile
 8005ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ed2:	f383 8811 	msr	BASEPRI, r3
 8005ed6:	f3bf 8f6f 	isb	sy
 8005eda:	f3bf 8f4f 	dsb	sy
 8005ede:	603b      	str	r3, [r7, #0]
}
 8005ee0:	bf00      	nop
 8005ee2:	bf00      	nop
 8005ee4:	e7fd      	b.n	8005ee2 <vPortEnterCritical+0x4a>
	}
}
 8005ee6:	bf00      	nop
 8005ee8:	370c      	adds	r7, #12
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr
 8005ef2:	bf00      	nop
 8005ef4:	2000000c 	.word	0x2000000c
 8005ef8:	e000ed04 	.word	0xe000ed04

08005efc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005f02:	4b12      	ldr	r3, [pc, #72]	@ (8005f4c <vPortExitCritical+0x50>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d10b      	bne.n	8005f22 <vPortExitCritical+0x26>
	__asm volatile
 8005f0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f0e:	f383 8811 	msr	BASEPRI, r3
 8005f12:	f3bf 8f6f 	isb	sy
 8005f16:	f3bf 8f4f 	dsb	sy
 8005f1a:	607b      	str	r3, [r7, #4]
}
 8005f1c:	bf00      	nop
 8005f1e:	bf00      	nop
 8005f20:	e7fd      	b.n	8005f1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005f22:	4b0a      	ldr	r3, [pc, #40]	@ (8005f4c <vPortExitCritical+0x50>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	3b01      	subs	r3, #1
 8005f28:	4a08      	ldr	r2, [pc, #32]	@ (8005f4c <vPortExitCritical+0x50>)
 8005f2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005f2c:	4b07      	ldr	r3, [pc, #28]	@ (8005f4c <vPortExitCritical+0x50>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d105      	bne.n	8005f40 <vPortExitCritical+0x44>
 8005f34:	2300      	movs	r3, #0
 8005f36:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005f3e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005f40:	bf00      	nop
 8005f42:	370c      	adds	r7, #12
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr
 8005f4c:	2000000c 	.word	0x2000000c

08005f50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005f50:	f3ef 8009 	mrs	r0, PSP
 8005f54:	f3bf 8f6f 	isb	sy
 8005f58:	4b15      	ldr	r3, [pc, #84]	@ (8005fb0 <pxCurrentTCBConst>)
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	f01e 0f10 	tst.w	lr, #16
 8005f60:	bf08      	it	eq
 8005f62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005f66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f6a:	6010      	str	r0, [r2, #0]
 8005f6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005f70:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005f74:	f380 8811 	msr	BASEPRI, r0
 8005f78:	f3bf 8f4f 	dsb	sy
 8005f7c:	f3bf 8f6f 	isb	sy
 8005f80:	f7ff fcb4 	bl	80058ec <vTaskSwitchContext>
 8005f84:	f04f 0000 	mov.w	r0, #0
 8005f88:	f380 8811 	msr	BASEPRI, r0
 8005f8c:	bc09      	pop	{r0, r3}
 8005f8e:	6819      	ldr	r1, [r3, #0]
 8005f90:	6808      	ldr	r0, [r1, #0]
 8005f92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f96:	f01e 0f10 	tst.w	lr, #16
 8005f9a:	bf08      	it	eq
 8005f9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005fa0:	f380 8809 	msr	PSP, r0
 8005fa4:	f3bf 8f6f 	isb	sy
 8005fa8:	4770      	bx	lr
 8005faa:	bf00      	nop
 8005fac:	f3af 8000 	nop.w

08005fb0 <pxCurrentTCBConst>:
 8005fb0:	200006fc 	.word	0x200006fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005fb4:	bf00      	nop
 8005fb6:	bf00      	nop

08005fb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
	__asm volatile
 8005fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fc2:	f383 8811 	msr	BASEPRI, r3
 8005fc6:	f3bf 8f6f 	isb	sy
 8005fca:	f3bf 8f4f 	dsb	sy
 8005fce:	607b      	str	r3, [r7, #4]
}
 8005fd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005fd2:	f7ff fbd1 	bl	8005778 <xTaskIncrementTick>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d003      	beq.n	8005fe4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005fdc:	4b06      	ldr	r3, [pc, #24]	@ (8005ff8 <SysTick_Handler+0x40>)
 8005fde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fe2:	601a      	str	r2, [r3, #0]
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	f383 8811 	msr	BASEPRI, r3
}
 8005fee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005ff0:	bf00      	nop
 8005ff2:	3708      	adds	r7, #8
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	e000ed04 	.word	0xe000ed04

08005ffc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006000:	4b0b      	ldr	r3, [pc, #44]	@ (8006030 <vPortSetupTimerInterrupt+0x34>)
 8006002:	2200      	movs	r2, #0
 8006004:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006006:	4b0b      	ldr	r3, [pc, #44]	@ (8006034 <vPortSetupTimerInterrupt+0x38>)
 8006008:	2200      	movs	r2, #0
 800600a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800600c:	4b0a      	ldr	r3, [pc, #40]	@ (8006038 <vPortSetupTimerInterrupt+0x3c>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a0a      	ldr	r2, [pc, #40]	@ (800603c <vPortSetupTimerInterrupt+0x40>)
 8006012:	fba2 2303 	umull	r2, r3, r2, r3
 8006016:	099b      	lsrs	r3, r3, #6
 8006018:	4a09      	ldr	r2, [pc, #36]	@ (8006040 <vPortSetupTimerInterrupt+0x44>)
 800601a:	3b01      	subs	r3, #1
 800601c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800601e:	4b04      	ldr	r3, [pc, #16]	@ (8006030 <vPortSetupTimerInterrupt+0x34>)
 8006020:	2207      	movs	r2, #7
 8006022:	601a      	str	r2, [r3, #0]
}
 8006024:	bf00      	nop
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr
 800602e:	bf00      	nop
 8006030:	e000e010 	.word	0xe000e010
 8006034:	e000e018 	.word	0xe000e018
 8006038:	20000000 	.word	0x20000000
 800603c:	10624dd3 	.word	0x10624dd3
 8006040:	e000e014 	.word	0xe000e014

08006044 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006044:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006054 <vPortEnableVFP+0x10>
 8006048:	6801      	ldr	r1, [r0, #0]
 800604a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800604e:	6001      	str	r1, [r0, #0]
 8006050:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006052:	bf00      	nop
 8006054:	e000ed88 	.word	0xe000ed88

08006058 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b08a      	sub	sp, #40	@ 0x28
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006060:	2300      	movs	r3, #0
 8006062:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006064:	f7ff fadc 	bl	8005620 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006068:	4b5c      	ldr	r3, [pc, #368]	@ (80061dc <pvPortMalloc+0x184>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d101      	bne.n	8006074 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006070:	f000 f924 	bl	80062bc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006074:	4b5a      	ldr	r3, [pc, #360]	@ (80061e0 <pvPortMalloc+0x188>)
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4013      	ands	r3, r2
 800607c:	2b00      	cmp	r3, #0
 800607e:	f040 8095 	bne.w	80061ac <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d01e      	beq.n	80060c6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006088:	2208      	movs	r2, #8
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4413      	add	r3, r2
 800608e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f003 0307 	and.w	r3, r3, #7
 8006096:	2b00      	cmp	r3, #0
 8006098:	d015      	beq.n	80060c6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f023 0307 	bic.w	r3, r3, #7
 80060a0:	3308      	adds	r3, #8
 80060a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f003 0307 	and.w	r3, r3, #7
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d00b      	beq.n	80060c6 <pvPortMalloc+0x6e>
	__asm volatile
 80060ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060b2:	f383 8811 	msr	BASEPRI, r3
 80060b6:	f3bf 8f6f 	isb	sy
 80060ba:	f3bf 8f4f 	dsb	sy
 80060be:	617b      	str	r3, [r7, #20]
}
 80060c0:	bf00      	nop
 80060c2:	bf00      	nop
 80060c4:	e7fd      	b.n	80060c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d06f      	beq.n	80061ac <pvPortMalloc+0x154>
 80060cc:	4b45      	ldr	r3, [pc, #276]	@ (80061e4 <pvPortMalloc+0x18c>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	429a      	cmp	r2, r3
 80060d4:	d86a      	bhi.n	80061ac <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80060d6:	4b44      	ldr	r3, [pc, #272]	@ (80061e8 <pvPortMalloc+0x190>)
 80060d8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80060da:	4b43      	ldr	r3, [pc, #268]	@ (80061e8 <pvPortMalloc+0x190>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80060e0:	e004      	b.n	80060ec <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80060e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80060e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80060ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d903      	bls.n	80060fe <pvPortMalloc+0xa6>
 80060f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d1f1      	bne.n	80060e2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80060fe:	4b37      	ldr	r3, [pc, #220]	@ (80061dc <pvPortMalloc+0x184>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006104:	429a      	cmp	r2, r3
 8006106:	d051      	beq.n	80061ac <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006108:	6a3b      	ldr	r3, [r7, #32]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	2208      	movs	r2, #8
 800610e:	4413      	add	r3, r2
 8006110:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	6a3b      	ldr	r3, [r7, #32]
 8006118:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800611a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800611c:	685a      	ldr	r2, [r3, #4]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	1ad2      	subs	r2, r2, r3
 8006122:	2308      	movs	r3, #8
 8006124:	005b      	lsls	r3, r3, #1
 8006126:	429a      	cmp	r2, r3
 8006128:	d920      	bls.n	800616c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800612a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	4413      	add	r3, r2
 8006130:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	f003 0307 	and.w	r3, r3, #7
 8006138:	2b00      	cmp	r3, #0
 800613a:	d00b      	beq.n	8006154 <pvPortMalloc+0xfc>
	__asm volatile
 800613c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006140:	f383 8811 	msr	BASEPRI, r3
 8006144:	f3bf 8f6f 	isb	sy
 8006148:	f3bf 8f4f 	dsb	sy
 800614c:	613b      	str	r3, [r7, #16]
}
 800614e:	bf00      	nop
 8006150:	bf00      	nop
 8006152:	e7fd      	b.n	8006150 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006156:	685a      	ldr	r2, [r3, #4]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	1ad2      	subs	r2, r2, r3
 800615c:	69bb      	ldr	r3, [r7, #24]
 800615e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006166:	69b8      	ldr	r0, [r7, #24]
 8006168:	f000 f90a 	bl	8006380 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800616c:	4b1d      	ldr	r3, [pc, #116]	@ (80061e4 <pvPortMalloc+0x18c>)
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	1ad3      	subs	r3, r2, r3
 8006176:	4a1b      	ldr	r2, [pc, #108]	@ (80061e4 <pvPortMalloc+0x18c>)
 8006178:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800617a:	4b1a      	ldr	r3, [pc, #104]	@ (80061e4 <pvPortMalloc+0x18c>)
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	4b1b      	ldr	r3, [pc, #108]	@ (80061ec <pvPortMalloc+0x194>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	429a      	cmp	r2, r3
 8006184:	d203      	bcs.n	800618e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006186:	4b17      	ldr	r3, [pc, #92]	@ (80061e4 <pvPortMalloc+0x18c>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a18      	ldr	r2, [pc, #96]	@ (80061ec <pvPortMalloc+0x194>)
 800618c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800618e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006190:	685a      	ldr	r2, [r3, #4]
 8006192:	4b13      	ldr	r3, [pc, #76]	@ (80061e0 <pvPortMalloc+0x188>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	431a      	orrs	r2, r3
 8006198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800619a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800619c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800619e:	2200      	movs	r2, #0
 80061a0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80061a2:	4b13      	ldr	r3, [pc, #76]	@ (80061f0 <pvPortMalloc+0x198>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	3301      	adds	r3, #1
 80061a8:	4a11      	ldr	r2, [pc, #68]	@ (80061f0 <pvPortMalloc+0x198>)
 80061aa:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80061ac:	f7ff fa46 	bl	800563c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	f003 0307 	and.w	r3, r3, #7
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d00b      	beq.n	80061d2 <pvPortMalloc+0x17a>
	__asm volatile
 80061ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061be:	f383 8811 	msr	BASEPRI, r3
 80061c2:	f3bf 8f6f 	isb	sy
 80061c6:	f3bf 8f4f 	dsb	sy
 80061ca:	60fb      	str	r3, [r7, #12]
}
 80061cc:	bf00      	nop
 80061ce:	bf00      	nop
 80061d0:	e7fd      	b.n	80061ce <pvPortMalloc+0x176>
	return pvReturn;
 80061d2:	69fb      	ldr	r3, [r7, #28]
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3728      	adds	r7, #40	@ 0x28
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}
 80061dc:	20004438 	.word	0x20004438
 80061e0:	2000444c 	.word	0x2000444c
 80061e4:	2000443c 	.word	0x2000443c
 80061e8:	20004430 	.word	0x20004430
 80061ec:	20004440 	.word	0x20004440
 80061f0:	20004444 	.word	0x20004444

080061f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b086      	sub	sp, #24
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d04f      	beq.n	80062a6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006206:	2308      	movs	r3, #8
 8006208:	425b      	negs	r3, r3
 800620a:	697a      	ldr	r2, [r7, #20]
 800620c:	4413      	add	r3, r2
 800620e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	685a      	ldr	r2, [r3, #4]
 8006218:	4b25      	ldr	r3, [pc, #148]	@ (80062b0 <vPortFree+0xbc>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4013      	ands	r3, r2
 800621e:	2b00      	cmp	r3, #0
 8006220:	d10b      	bne.n	800623a <vPortFree+0x46>
	__asm volatile
 8006222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006226:	f383 8811 	msr	BASEPRI, r3
 800622a:	f3bf 8f6f 	isb	sy
 800622e:	f3bf 8f4f 	dsb	sy
 8006232:	60fb      	str	r3, [r7, #12]
}
 8006234:	bf00      	nop
 8006236:	bf00      	nop
 8006238:	e7fd      	b.n	8006236 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d00b      	beq.n	800625a <vPortFree+0x66>
	__asm volatile
 8006242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006246:	f383 8811 	msr	BASEPRI, r3
 800624a:	f3bf 8f6f 	isb	sy
 800624e:	f3bf 8f4f 	dsb	sy
 8006252:	60bb      	str	r3, [r7, #8]
}
 8006254:	bf00      	nop
 8006256:	bf00      	nop
 8006258:	e7fd      	b.n	8006256 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	685a      	ldr	r2, [r3, #4]
 800625e:	4b14      	ldr	r3, [pc, #80]	@ (80062b0 <vPortFree+0xbc>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4013      	ands	r3, r2
 8006264:	2b00      	cmp	r3, #0
 8006266:	d01e      	beq.n	80062a6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d11a      	bne.n	80062a6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	685a      	ldr	r2, [r3, #4]
 8006274:	4b0e      	ldr	r3, [pc, #56]	@ (80062b0 <vPortFree+0xbc>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	43db      	mvns	r3, r3
 800627a:	401a      	ands	r2, r3
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006280:	f7ff f9ce 	bl	8005620 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	685a      	ldr	r2, [r3, #4]
 8006288:	4b0a      	ldr	r3, [pc, #40]	@ (80062b4 <vPortFree+0xc0>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4413      	add	r3, r2
 800628e:	4a09      	ldr	r2, [pc, #36]	@ (80062b4 <vPortFree+0xc0>)
 8006290:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006292:	6938      	ldr	r0, [r7, #16]
 8006294:	f000 f874 	bl	8006380 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006298:	4b07      	ldr	r3, [pc, #28]	@ (80062b8 <vPortFree+0xc4>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	3301      	adds	r3, #1
 800629e:	4a06      	ldr	r2, [pc, #24]	@ (80062b8 <vPortFree+0xc4>)
 80062a0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80062a2:	f7ff f9cb 	bl	800563c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80062a6:	bf00      	nop
 80062a8:	3718      	adds	r7, #24
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	bf00      	nop
 80062b0:	2000444c 	.word	0x2000444c
 80062b4:	2000443c 	.word	0x2000443c
 80062b8:	20004448 	.word	0x20004448

080062bc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80062bc:	b480      	push	{r7}
 80062be:	b085      	sub	sp, #20
 80062c0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80062c2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80062c6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80062c8:	4b27      	ldr	r3, [pc, #156]	@ (8006368 <prvHeapInit+0xac>)
 80062ca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f003 0307 	and.w	r3, r3, #7
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d00c      	beq.n	80062f0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	3307      	adds	r3, #7
 80062da:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f023 0307 	bic.w	r3, r3, #7
 80062e2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80062e4:	68ba      	ldr	r2, [r7, #8]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	1ad3      	subs	r3, r2, r3
 80062ea:	4a1f      	ldr	r2, [pc, #124]	@ (8006368 <prvHeapInit+0xac>)
 80062ec:	4413      	add	r3, r2
 80062ee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80062f4:	4a1d      	ldr	r2, [pc, #116]	@ (800636c <prvHeapInit+0xb0>)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80062fa:	4b1c      	ldr	r3, [pc, #112]	@ (800636c <prvHeapInit+0xb0>)
 80062fc:	2200      	movs	r2, #0
 80062fe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	68ba      	ldr	r2, [r7, #8]
 8006304:	4413      	add	r3, r2
 8006306:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006308:	2208      	movs	r2, #8
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	1a9b      	subs	r3, r3, r2
 800630e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f023 0307 	bic.w	r3, r3, #7
 8006316:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	4a15      	ldr	r2, [pc, #84]	@ (8006370 <prvHeapInit+0xb4>)
 800631c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800631e:	4b14      	ldr	r3, [pc, #80]	@ (8006370 <prvHeapInit+0xb4>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	2200      	movs	r2, #0
 8006324:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006326:	4b12      	ldr	r3, [pc, #72]	@ (8006370 <prvHeapInit+0xb4>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	2200      	movs	r2, #0
 800632c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	68fa      	ldr	r2, [r7, #12]
 8006336:	1ad2      	subs	r2, r2, r3
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800633c:	4b0c      	ldr	r3, [pc, #48]	@ (8006370 <prvHeapInit+0xb4>)
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	4a0a      	ldr	r2, [pc, #40]	@ (8006374 <prvHeapInit+0xb8>)
 800634a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	4a09      	ldr	r2, [pc, #36]	@ (8006378 <prvHeapInit+0xbc>)
 8006352:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006354:	4b09      	ldr	r3, [pc, #36]	@ (800637c <prvHeapInit+0xc0>)
 8006356:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800635a:	601a      	str	r2, [r3, #0]
}
 800635c:	bf00      	nop
 800635e:	3714      	adds	r7, #20
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr
 8006368:	20000830 	.word	0x20000830
 800636c:	20004430 	.word	0x20004430
 8006370:	20004438 	.word	0x20004438
 8006374:	20004440 	.word	0x20004440
 8006378:	2000443c 	.word	0x2000443c
 800637c:	2000444c 	.word	0x2000444c

08006380 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006380:	b480      	push	{r7}
 8006382:	b085      	sub	sp, #20
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006388:	4b28      	ldr	r3, [pc, #160]	@ (800642c <prvInsertBlockIntoFreeList+0xac>)
 800638a:	60fb      	str	r3, [r7, #12]
 800638c:	e002      	b.n	8006394 <prvInsertBlockIntoFreeList+0x14>
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	60fb      	str	r3, [r7, #12]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	429a      	cmp	r2, r3
 800639c:	d8f7      	bhi.n	800638e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	68ba      	ldr	r2, [r7, #8]
 80063a8:	4413      	add	r3, r2
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d108      	bne.n	80063c2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	685a      	ldr	r2, [r3, #4]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	441a      	add	r2, r3
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	68ba      	ldr	r2, [r7, #8]
 80063cc:	441a      	add	r2, r3
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d118      	bne.n	8006408 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	4b15      	ldr	r3, [pc, #84]	@ (8006430 <prvInsertBlockIntoFreeList+0xb0>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	429a      	cmp	r2, r3
 80063e0:	d00d      	beq.n	80063fe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	685a      	ldr	r2, [r3, #4]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	441a      	add	r2, r3
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	601a      	str	r2, [r3, #0]
 80063fc:	e008      	b.n	8006410 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80063fe:	4b0c      	ldr	r3, [pc, #48]	@ (8006430 <prvInsertBlockIntoFreeList+0xb0>)
 8006400:	681a      	ldr	r2, [r3, #0]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	601a      	str	r2, [r3, #0]
 8006406:	e003      	b.n	8006410 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006410:	68fa      	ldr	r2, [r7, #12]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	429a      	cmp	r2, r3
 8006416:	d002      	beq.n	800641e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800641e:	bf00      	nop
 8006420:	3714      	adds	r7, #20
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr
 800642a:	bf00      	nop
 800642c:	20004430 	.word	0x20004430
 8006430:	20004438 	.word	0x20004438

08006434 <__cvt>:
 8006434:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006438:	ec57 6b10 	vmov	r6, r7, d0
 800643c:	2f00      	cmp	r7, #0
 800643e:	460c      	mov	r4, r1
 8006440:	4619      	mov	r1, r3
 8006442:	463b      	mov	r3, r7
 8006444:	bfbb      	ittet	lt
 8006446:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800644a:	461f      	movlt	r7, r3
 800644c:	2300      	movge	r3, #0
 800644e:	232d      	movlt	r3, #45	@ 0x2d
 8006450:	700b      	strb	r3, [r1, #0]
 8006452:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006454:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006458:	4691      	mov	r9, r2
 800645a:	f023 0820 	bic.w	r8, r3, #32
 800645e:	bfbc      	itt	lt
 8006460:	4632      	movlt	r2, r6
 8006462:	4616      	movlt	r6, r2
 8006464:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006468:	d005      	beq.n	8006476 <__cvt+0x42>
 800646a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800646e:	d100      	bne.n	8006472 <__cvt+0x3e>
 8006470:	3401      	adds	r4, #1
 8006472:	2102      	movs	r1, #2
 8006474:	e000      	b.n	8006478 <__cvt+0x44>
 8006476:	2103      	movs	r1, #3
 8006478:	ab03      	add	r3, sp, #12
 800647a:	9301      	str	r3, [sp, #4]
 800647c:	ab02      	add	r3, sp, #8
 800647e:	9300      	str	r3, [sp, #0]
 8006480:	ec47 6b10 	vmov	d0, r6, r7
 8006484:	4653      	mov	r3, sl
 8006486:	4622      	mov	r2, r4
 8006488:	f000 fe9e 	bl	80071c8 <_dtoa_r>
 800648c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006490:	4605      	mov	r5, r0
 8006492:	d119      	bne.n	80064c8 <__cvt+0x94>
 8006494:	f019 0f01 	tst.w	r9, #1
 8006498:	d00e      	beq.n	80064b8 <__cvt+0x84>
 800649a:	eb00 0904 	add.w	r9, r0, r4
 800649e:	2200      	movs	r2, #0
 80064a0:	2300      	movs	r3, #0
 80064a2:	4630      	mov	r0, r6
 80064a4:	4639      	mov	r1, r7
 80064a6:	f7fa fb0f 	bl	8000ac8 <__aeabi_dcmpeq>
 80064aa:	b108      	cbz	r0, 80064b0 <__cvt+0x7c>
 80064ac:	f8cd 900c 	str.w	r9, [sp, #12]
 80064b0:	2230      	movs	r2, #48	@ 0x30
 80064b2:	9b03      	ldr	r3, [sp, #12]
 80064b4:	454b      	cmp	r3, r9
 80064b6:	d31e      	bcc.n	80064f6 <__cvt+0xc2>
 80064b8:	9b03      	ldr	r3, [sp, #12]
 80064ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80064bc:	1b5b      	subs	r3, r3, r5
 80064be:	4628      	mov	r0, r5
 80064c0:	6013      	str	r3, [r2, #0]
 80064c2:	b004      	add	sp, #16
 80064c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064c8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80064cc:	eb00 0904 	add.w	r9, r0, r4
 80064d0:	d1e5      	bne.n	800649e <__cvt+0x6a>
 80064d2:	7803      	ldrb	r3, [r0, #0]
 80064d4:	2b30      	cmp	r3, #48	@ 0x30
 80064d6:	d10a      	bne.n	80064ee <__cvt+0xba>
 80064d8:	2200      	movs	r2, #0
 80064da:	2300      	movs	r3, #0
 80064dc:	4630      	mov	r0, r6
 80064de:	4639      	mov	r1, r7
 80064e0:	f7fa faf2 	bl	8000ac8 <__aeabi_dcmpeq>
 80064e4:	b918      	cbnz	r0, 80064ee <__cvt+0xba>
 80064e6:	f1c4 0401 	rsb	r4, r4, #1
 80064ea:	f8ca 4000 	str.w	r4, [sl]
 80064ee:	f8da 3000 	ldr.w	r3, [sl]
 80064f2:	4499      	add	r9, r3
 80064f4:	e7d3      	b.n	800649e <__cvt+0x6a>
 80064f6:	1c59      	adds	r1, r3, #1
 80064f8:	9103      	str	r1, [sp, #12]
 80064fa:	701a      	strb	r2, [r3, #0]
 80064fc:	e7d9      	b.n	80064b2 <__cvt+0x7e>

080064fe <__exponent>:
 80064fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006500:	2900      	cmp	r1, #0
 8006502:	bfba      	itte	lt
 8006504:	4249      	neglt	r1, r1
 8006506:	232d      	movlt	r3, #45	@ 0x2d
 8006508:	232b      	movge	r3, #43	@ 0x2b
 800650a:	2909      	cmp	r1, #9
 800650c:	7002      	strb	r2, [r0, #0]
 800650e:	7043      	strb	r3, [r0, #1]
 8006510:	dd29      	ble.n	8006566 <__exponent+0x68>
 8006512:	f10d 0307 	add.w	r3, sp, #7
 8006516:	461d      	mov	r5, r3
 8006518:	270a      	movs	r7, #10
 800651a:	461a      	mov	r2, r3
 800651c:	fbb1 f6f7 	udiv	r6, r1, r7
 8006520:	fb07 1416 	mls	r4, r7, r6, r1
 8006524:	3430      	adds	r4, #48	@ 0x30
 8006526:	f802 4c01 	strb.w	r4, [r2, #-1]
 800652a:	460c      	mov	r4, r1
 800652c:	2c63      	cmp	r4, #99	@ 0x63
 800652e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006532:	4631      	mov	r1, r6
 8006534:	dcf1      	bgt.n	800651a <__exponent+0x1c>
 8006536:	3130      	adds	r1, #48	@ 0x30
 8006538:	1e94      	subs	r4, r2, #2
 800653a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800653e:	1c41      	adds	r1, r0, #1
 8006540:	4623      	mov	r3, r4
 8006542:	42ab      	cmp	r3, r5
 8006544:	d30a      	bcc.n	800655c <__exponent+0x5e>
 8006546:	f10d 0309 	add.w	r3, sp, #9
 800654a:	1a9b      	subs	r3, r3, r2
 800654c:	42ac      	cmp	r4, r5
 800654e:	bf88      	it	hi
 8006550:	2300      	movhi	r3, #0
 8006552:	3302      	adds	r3, #2
 8006554:	4403      	add	r3, r0
 8006556:	1a18      	subs	r0, r3, r0
 8006558:	b003      	add	sp, #12
 800655a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800655c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006560:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006564:	e7ed      	b.n	8006542 <__exponent+0x44>
 8006566:	2330      	movs	r3, #48	@ 0x30
 8006568:	3130      	adds	r1, #48	@ 0x30
 800656a:	7083      	strb	r3, [r0, #2]
 800656c:	70c1      	strb	r1, [r0, #3]
 800656e:	1d03      	adds	r3, r0, #4
 8006570:	e7f1      	b.n	8006556 <__exponent+0x58>
	...

08006574 <_printf_float>:
 8006574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006578:	b08d      	sub	sp, #52	@ 0x34
 800657a:	460c      	mov	r4, r1
 800657c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006580:	4616      	mov	r6, r2
 8006582:	461f      	mov	r7, r3
 8006584:	4605      	mov	r5, r0
 8006586:	f000 fcbb 	bl	8006f00 <_localeconv_r>
 800658a:	6803      	ldr	r3, [r0, #0]
 800658c:	9304      	str	r3, [sp, #16]
 800658e:	4618      	mov	r0, r3
 8006590:	f7f9 fe6e 	bl	8000270 <strlen>
 8006594:	2300      	movs	r3, #0
 8006596:	930a      	str	r3, [sp, #40]	@ 0x28
 8006598:	f8d8 3000 	ldr.w	r3, [r8]
 800659c:	9005      	str	r0, [sp, #20]
 800659e:	3307      	adds	r3, #7
 80065a0:	f023 0307 	bic.w	r3, r3, #7
 80065a4:	f103 0208 	add.w	r2, r3, #8
 80065a8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80065ac:	f8d4 b000 	ldr.w	fp, [r4]
 80065b0:	f8c8 2000 	str.w	r2, [r8]
 80065b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80065b8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80065bc:	9307      	str	r3, [sp, #28]
 80065be:	f8cd 8018 	str.w	r8, [sp, #24]
 80065c2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80065c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065ca:	4b9c      	ldr	r3, [pc, #624]	@ (800683c <_printf_float+0x2c8>)
 80065cc:	f04f 32ff 	mov.w	r2, #4294967295
 80065d0:	f7fa faac 	bl	8000b2c <__aeabi_dcmpun>
 80065d4:	bb70      	cbnz	r0, 8006634 <_printf_float+0xc0>
 80065d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065da:	4b98      	ldr	r3, [pc, #608]	@ (800683c <_printf_float+0x2c8>)
 80065dc:	f04f 32ff 	mov.w	r2, #4294967295
 80065e0:	f7fa fa86 	bl	8000af0 <__aeabi_dcmple>
 80065e4:	bb30      	cbnz	r0, 8006634 <_printf_float+0xc0>
 80065e6:	2200      	movs	r2, #0
 80065e8:	2300      	movs	r3, #0
 80065ea:	4640      	mov	r0, r8
 80065ec:	4649      	mov	r1, r9
 80065ee:	f7fa fa75 	bl	8000adc <__aeabi_dcmplt>
 80065f2:	b110      	cbz	r0, 80065fa <_printf_float+0x86>
 80065f4:	232d      	movs	r3, #45	@ 0x2d
 80065f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80065fa:	4a91      	ldr	r2, [pc, #580]	@ (8006840 <_printf_float+0x2cc>)
 80065fc:	4b91      	ldr	r3, [pc, #580]	@ (8006844 <_printf_float+0x2d0>)
 80065fe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006602:	bf94      	ite	ls
 8006604:	4690      	movls	r8, r2
 8006606:	4698      	movhi	r8, r3
 8006608:	2303      	movs	r3, #3
 800660a:	6123      	str	r3, [r4, #16]
 800660c:	f02b 0304 	bic.w	r3, fp, #4
 8006610:	6023      	str	r3, [r4, #0]
 8006612:	f04f 0900 	mov.w	r9, #0
 8006616:	9700      	str	r7, [sp, #0]
 8006618:	4633      	mov	r3, r6
 800661a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800661c:	4621      	mov	r1, r4
 800661e:	4628      	mov	r0, r5
 8006620:	f000 f9d2 	bl	80069c8 <_printf_common>
 8006624:	3001      	adds	r0, #1
 8006626:	f040 808d 	bne.w	8006744 <_printf_float+0x1d0>
 800662a:	f04f 30ff 	mov.w	r0, #4294967295
 800662e:	b00d      	add	sp, #52	@ 0x34
 8006630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006634:	4642      	mov	r2, r8
 8006636:	464b      	mov	r3, r9
 8006638:	4640      	mov	r0, r8
 800663a:	4649      	mov	r1, r9
 800663c:	f7fa fa76 	bl	8000b2c <__aeabi_dcmpun>
 8006640:	b140      	cbz	r0, 8006654 <_printf_float+0xe0>
 8006642:	464b      	mov	r3, r9
 8006644:	2b00      	cmp	r3, #0
 8006646:	bfbc      	itt	lt
 8006648:	232d      	movlt	r3, #45	@ 0x2d
 800664a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800664e:	4a7e      	ldr	r2, [pc, #504]	@ (8006848 <_printf_float+0x2d4>)
 8006650:	4b7e      	ldr	r3, [pc, #504]	@ (800684c <_printf_float+0x2d8>)
 8006652:	e7d4      	b.n	80065fe <_printf_float+0x8a>
 8006654:	6863      	ldr	r3, [r4, #4]
 8006656:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800665a:	9206      	str	r2, [sp, #24]
 800665c:	1c5a      	adds	r2, r3, #1
 800665e:	d13b      	bne.n	80066d8 <_printf_float+0x164>
 8006660:	2306      	movs	r3, #6
 8006662:	6063      	str	r3, [r4, #4]
 8006664:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006668:	2300      	movs	r3, #0
 800666a:	6022      	str	r2, [r4, #0]
 800666c:	9303      	str	r3, [sp, #12]
 800666e:	ab0a      	add	r3, sp, #40	@ 0x28
 8006670:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006674:	ab09      	add	r3, sp, #36	@ 0x24
 8006676:	9300      	str	r3, [sp, #0]
 8006678:	6861      	ldr	r1, [r4, #4]
 800667a:	ec49 8b10 	vmov	d0, r8, r9
 800667e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006682:	4628      	mov	r0, r5
 8006684:	f7ff fed6 	bl	8006434 <__cvt>
 8006688:	9b06      	ldr	r3, [sp, #24]
 800668a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800668c:	2b47      	cmp	r3, #71	@ 0x47
 800668e:	4680      	mov	r8, r0
 8006690:	d129      	bne.n	80066e6 <_printf_float+0x172>
 8006692:	1cc8      	adds	r0, r1, #3
 8006694:	db02      	blt.n	800669c <_printf_float+0x128>
 8006696:	6863      	ldr	r3, [r4, #4]
 8006698:	4299      	cmp	r1, r3
 800669a:	dd41      	ble.n	8006720 <_printf_float+0x1ac>
 800669c:	f1aa 0a02 	sub.w	sl, sl, #2
 80066a0:	fa5f fa8a 	uxtb.w	sl, sl
 80066a4:	3901      	subs	r1, #1
 80066a6:	4652      	mov	r2, sl
 80066a8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80066ac:	9109      	str	r1, [sp, #36]	@ 0x24
 80066ae:	f7ff ff26 	bl	80064fe <__exponent>
 80066b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80066b4:	1813      	adds	r3, r2, r0
 80066b6:	2a01      	cmp	r2, #1
 80066b8:	4681      	mov	r9, r0
 80066ba:	6123      	str	r3, [r4, #16]
 80066bc:	dc02      	bgt.n	80066c4 <_printf_float+0x150>
 80066be:	6822      	ldr	r2, [r4, #0]
 80066c0:	07d2      	lsls	r2, r2, #31
 80066c2:	d501      	bpl.n	80066c8 <_printf_float+0x154>
 80066c4:	3301      	adds	r3, #1
 80066c6:	6123      	str	r3, [r4, #16]
 80066c8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d0a2      	beq.n	8006616 <_printf_float+0xa2>
 80066d0:	232d      	movs	r3, #45	@ 0x2d
 80066d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066d6:	e79e      	b.n	8006616 <_printf_float+0xa2>
 80066d8:	9a06      	ldr	r2, [sp, #24]
 80066da:	2a47      	cmp	r2, #71	@ 0x47
 80066dc:	d1c2      	bne.n	8006664 <_printf_float+0xf0>
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d1c0      	bne.n	8006664 <_printf_float+0xf0>
 80066e2:	2301      	movs	r3, #1
 80066e4:	e7bd      	b.n	8006662 <_printf_float+0xee>
 80066e6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80066ea:	d9db      	bls.n	80066a4 <_printf_float+0x130>
 80066ec:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80066f0:	d118      	bne.n	8006724 <_printf_float+0x1b0>
 80066f2:	2900      	cmp	r1, #0
 80066f4:	6863      	ldr	r3, [r4, #4]
 80066f6:	dd0b      	ble.n	8006710 <_printf_float+0x19c>
 80066f8:	6121      	str	r1, [r4, #16]
 80066fa:	b913      	cbnz	r3, 8006702 <_printf_float+0x18e>
 80066fc:	6822      	ldr	r2, [r4, #0]
 80066fe:	07d0      	lsls	r0, r2, #31
 8006700:	d502      	bpl.n	8006708 <_printf_float+0x194>
 8006702:	3301      	adds	r3, #1
 8006704:	440b      	add	r3, r1
 8006706:	6123      	str	r3, [r4, #16]
 8006708:	65a1      	str	r1, [r4, #88]	@ 0x58
 800670a:	f04f 0900 	mov.w	r9, #0
 800670e:	e7db      	b.n	80066c8 <_printf_float+0x154>
 8006710:	b913      	cbnz	r3, 8006718 <_printf_float+0x1a4>
 8006712:	6822      	ldr	r2, [r4, #0]
 8006714:	07d2      	lsls	r2, r2, #31
 8006716:	d501      	bpl.n	800671c <_printf_float+0x1a8>
 8006718:	3302      	adds	r3, #2
 800671a:	e7f4      	b.n	8006706 <_printf_float+0x192>
 800671c:	2301      	movs	r3, #1
 800671e:	e7f2      	b.n	8006706 <_printf_float+0x192>
 8006720:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006724:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006726:	4299      	cmp	r1, r3
 8006728:	db05      	blt.n	8006736 <_printf_float+0x1c2>
 800672a:	6823      	ldr	r3, [r4, #0]
 800672c:	6121      	str	r1, [r4, #16]
 800672e:	07d8      	lsls	r0, r3, #31
 8006730:	d5ea      	bpl.n	8006708 <_printf_float+0x194>
 8006732:	1c4b      	adds	r3, r1, #1
 8006734:	e7e7      	b.n	8006706 <_printf_float+0x192>
 8006736:	2900      	cmp	r1, #0
 8006738:	bfd4      	ite	le
 800673a:	f1c1 0202 	rsble	r2, r1, #2
 800673e:	2201      	movgt	r2, #1
 8006740:	4413      	add	r3, r2
 8006742:	e7e0      	b.n	8006706 <_printf_float+0x192>
 8006744:	6823      	ldr	r3, [r4, #0]
 8006746:	055a      	lsls	r2, r3, #21
 8006748:	d407      	bmi.n	800675a <_printf_float+0x1e6>
 800674a:	6923      	ldr	r3, [r4, #16]
 800674c:	4642      	mov	r2, r8
 800674e:	4631      	mov	r1, r6
 8006750:	4628      	mov	r0, r5
 8006752:	47b8      	blx	r7
 8006754:	3001      	adds	r0, #1
 8006756:	d12b      	bne.n	80067b0 <_printf_float+0x23c>
 8006758:	e767      	b.n	800662a <_printf_float+0xb6>
 800675a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800675e:	f240 80dd 	bls.w	800691c <_printf_float+0x3a8>
 8006762:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006766:	2200      	movs	r2, #0
 8006768:	2300      	movs	r3, #0
 800676a:	f7fa f9ad 	bl	8000ac8 <__aeabi_dcmpeq>
 800676e:	2800      	cmp	r0, #0
 8006770:	d033      	beq.n	80067da <_printf_float+0x266>
 8006772:	4a37      	ldr	r2, [pc, #220]	@ (8006850 <_printf_float+0x2dc>)
 8006774:	2301      	movs	r3, #1
 8006776:	4631      	mov	r1, r6
 8006778:	4628      	mov	r0, r5
 800677a:	47b8      	blx	r7
 800677c:	3001      	adds	r0, #1
 800677e:	f43f af54 	beq.w	800662a <_printf_float+0xb6>
 8006782:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006786:	4543      	cmp	r3, r8
 8006788:	db02      	blt.n	8006790 <_printf_float+0x21c>
 800678a:	6823      	ldr	r3, [r4, #0]
 800678c:	07d8      	lsls	r0, r3, #31
 800678e:	d50f      	bpl.n	80067b0 <_printf_float+0x23c>
 8006790:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006794:	4631      	mov	r1, r6
 8006796:	4628      	mov	r0, r5
 8006798:	47b8      	blx	r7
 800679a:	3001      	adds	r0, #1
 800679c:	f43f af45 	beq.w	800662a <_printf_float+0xb6>
 80067a0:	f04f 0900 	mov.w	r9, #0
 80067a4:	f108 38ff 	add.w	r8, r8, #4294967295
 80067a8:	f104 0a1a 	add.w	sl, r4, #26
 80067ac:	45c8      	cmp	r8, r9
 80067ae:	dc09      	bgt.n	80067c4 <_printf_float+0x250>
 80067b0:	6823      	ldr	r3, [r4, #0]
 80067b2:	079b      	lsls	r3, r3, #30
 80067b4:	f100 8103 	bmi.w	80069be <_printf_float+0x44a>
 80067b8:	68e0      	ldr	r0, [r4, #12]
 80067ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80067bc:	4298      	cmp	r0, r3
 80067be:	bfb8      	it	lt
 80067c0:	4618      	movlt	r0, r3
 80067c2:	e734      	b.n	800662e <_printf_float+0xba>
 80067c4:	2301      	movs	r3, #1
 80067c6:	4652      	mov	r2, sl
 80067c8:	4631      	mov	r1, r6
 80067ca:	4628      	mov	r0, r5
 80067cc:	47b8      	blx	r7
 80067ce:	3001      	adds	r0, #1
 80067d0:	f43f af2b 	beq.w	800662a <_printf_float+0xb6>
 80067d4:	f109 0901 	add.w	r9, r9, #1
 80067d8:	e7e8      	b.n	80067ac <_printf_float+0x238>
 80067da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067dc:	2b00      	cmp	r3, #0
 80067de:	dc39      	bgt.n	8006854 <_printf_float+0x2e0>
 80067e0:	4a1b      	ldr	r2, [pc, #108]	@ (8006850 <_printf_float+0x2dc>)
 80067e2:	2301      	movs	r3, #1
 80067e4:	4631      	mov	r1, r6
 80067e6:	4628      	mov	r0, r5
 80067e8:	47b8      	blx	r7
 80067ea:	3001      	adds	r0, #1
 80067ec:	f43f af1d 	beq.w	800662a <_printf_float+0xb6>
 80067f0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80067f4:	ea59 0303 	orrs.w	r3, r9, r3
 80067f8:	d102      	bne.n	8006800 <_printf_float+0x28c>
 80067fa:	6823      	ldr	r3, [r4, #0]
 80067fc:	07d9      	lsls	r1, r3, #31
 80067fe:	d5d7      	bpl.n	80067b0 <_printf_float+0x23c>
 8006800:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006804:	4631      	mov	r1, r6
 8006806:	4628      	mov	r0, r5
 8006808:	47b8      	blx	r7
 800680a:	3001      	adds	r0, #1
 800680c:	f43f af0d 	beq.w	800662a <_printf_float+0xb6>
 8006810:	f04f 0a00 	mov.w	sl, #0
 8006814:	f104 0b1a 	add.w	fp, r4, #26
 8006818:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800681a:	425b      	negs	r3, r3
 800681c:	4553      	cmp	r3, sl
 800681e:	dc01      	bgt.n	8006824 <_printf_float+0x2b0>
 8006820:	464b      	mov	r3, r9
 8006822:	e793      	b.n	800674c <_printf_float+0x1d8>
 8006824:	2301      	movs	r3, #1
 8006826:	465a      	mov	r2, fp
 8006828:	4631      	mov	r1, r6
 800682a:	4628      	mov	r0, r5
 800682c:	47b8      	blx	r7
 800682e:	3001      	adds	r0, #1
 8006830:	f43f aefb 	beq.w	800662a <_printf_float+0xb6>
 8006834:	f10a 0a01 	add.w	sl, sl, #1
 8006838:	e7ee      	b.n	8006818 <_printf_float+0x2a4>
 800683a:	bf00      	nop
 800683c:	7fefffff 	.word	0x7fefffff
 8006840:	08008e54 	.word	0x08008e54
 8006844:	08008e58 	.word	0x08008e58
 8006848:	08008e5c 	.word	0x08008e5c
 800684c:	08008e60 	.word	0x08008e60
 8006850:	08008e64 	.word	0x08008e64
 8006854:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006856:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800685a:	4553      	cmp	r3, sl
 800685c:	bfa8      	it	ge
 800685e:	4653      	movge	r3, sl
 8006860:	2b00      	cmp	r3, #0
 8006862:	4699      	mov	r9, r3
 8006864:	dc36      	bgt.n	80068d4 <_printf_float+0x360>
 8006866:	f04f 0b00 	mov.w	fp, #0
 800686a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800686e:	f104 021a 	add.w	r2, r4, #26
 8006872:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006874:	9306      	str	r3, [sp, #24]
 8006876:	eba3 0309 	sub.w	r3, r3, r9
 800687a:	455b      	cmp	r3, fp
 800687c:	dc31      	bgt.n	80068e2 <_printf_float+0x36e>
 800687e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006880:	459a      	cmp	sl, r3
 8006882:	dc3a      	bgt.n	80068fa <_printf_float+0x386>
 8006884:	6823      	ldr	r3, [r4, #0]
 8006886:	07da      	lsls	r2, r3, #31
 8006888:	d437      	bmi.n	80068fa <_printf_float+0x386>
 800688a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800688c:	ebaa 0903 	sub.w	r9, sl, r3
 8006890:	9b06      	ldr	r3, [sp, #24]
 8006892:	ebaa 0303 	sub.w	r3, sl, r3
 8006896:	4599      	cmp	r9, r3
 8006898:	bfa8      	it	ge
 800689a:	4699      	movge	r9, r3
 800689c:	f1b9 0f00 	cmp.w	r9, #0
 80068a0:	dc33      	bgt.n	800690a <_printf_float+0x396>
 80068a2:	f04f 0800 	mov.w	r8, #0
 80068a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80068aa:	f104 0b1a 	add.w	fp, r4, #26
 80068ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068b0:	ebaa 0303 	sub.w	r3, sl, r3
 80068b4:	eba3 0309 	sub.w	r3, r3, r9
 80068b8:	4543      	cmp	r3, r8
 80068ba:	f77f af79 	ble.w	80067b0 <_printf_float+0x23c>
 80068be:	2301      	movs	r3, #1
 80068c0:	465a      	mov	r2, fp
 80068c2:	4631      	mov	r1, r6
 80068c4:	4628      	mov	r0, r5
 80068c6:	47b8      	blx	r7
 80068c8:	3001      	adds	r0, #1
 80068ca:	f43f aeae 	beq.w	800662a <_printf_float+0xb6>
 80068ce:	f108 0801 	add.w	r8, r8, #1
 80068d2:	e7ec      	b.n	80068ae <_printf_float+0x33a>
 80068d4:	4642      	mov	r2, r8
 80068d6:	4631      	mov	r1, r6
 80068d8:	4628      	mov	r0, r5
 80068da:	47b8      	blx	r7
 80068dc:	3001      	adds	r0, #1
 80068de:	d1c2      	bne.n	8006866 <_printf_float+0x2f2>
 80068e0:	e6a3      	b.n	800662a <_printf_float+0xb6>
 80068e2:	2301      	movs	r3, #1
 80068e4:	4631      	mov	r1, r6
 80068e6:	4628      	mov	r0, r5
 80068e8:	9206      	str	r2, [sp, #24]
 80068ea:	47b8      	blx	r7
 80068ec:	3001      	adds	r0, #1
 80068ee:	f43f ae9c 	beq.w	800662a <_printf_float+0xb6>
 80068f2:	9a06      	ldr	r2, [sp, #24]
 80068f4:	f10b 0b01 	add.w	fp, fp, #1
 80068f8:	e7bb      	b.n	8006872 <_printf_float+0x2fe>
 80068fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068fe:	4631      	mov	r1, r6
 8006900:	4628      	mov	r0, r5
 8006902:	47b8      	blx	r7
 8006904:	3001      	adds	r0, #1
 8006906:	d1c0      	bne.n	800688a <_printf_float+0x316>
 8006908:	e68f      	b.n	800662a <_printf_float+0xb6>
 800690a:	9a06      	ldr	r2, [sp, #24]
 800690c:	464b      	mov	r3, r9
 800690e:	4442      	add	r2, r8
 8006910:	4631      	mov	r1, r6
 8006912:	4628      	mov	r0, r5
 8006914:	47b8      	blx	r7
 8006916:	3001      	adds	r0, #1
 8006918:	d1c3      	bne.n	80068a2 <_printf_float+0x32e>
 800691a:	e686      	b.n	800662a <_printf_float+0xb6>
 800691c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006920:	f1ba 0f01 	cmp.w	sl, #1
 8006924:	dc01      	bgt.n	800692a <_printf_float+0x3b6>
 8006926:	07db      	lsls	r3, r3, #31
 8006928:	d536      	bpl.n	8006998 <_printf_float+0x424>
 800692a:	2301      	movs	r3, #1
 800692c:	4642      	mov	r2, r8
 800692e:	4631      	mov	r1, r6
 8006930:	4628      	mov	r0, r5
 8006932:	47b8      	blx	r7
 8006934:	3001      	adds	r0, #1
 8006936:	f43f ae78 	beq.w	800662a <_printf_float+0xb6>
 800693a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800693e:	4631      	mov	r1, r6
 8006940:	4628      	mov	r0, r5
 8006942:	47b8      	blx	r7
 8006944:	3001      	adds	r0, #1
 8006946:	f43f ae70 	beq.w	800662a <_printf_float+0xb6>
 800694a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800694e:	2200      	movs	r2, #0
 8006950:	2300      	movs	r3, #0
 8006952:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006956:	f7fa f8b7 	bl	8000ac8 <__aeabi_dcmpeq>
 800695a:	b9c0      	cbnz	r0, 800698e <_printf_float+0x41a>
 800695c:	4653      	mov	r3, sl
 800695e:	f108 0201 	add.w	r2, r8, #1
 8006962:	4631      	mov	r1, r6
 8006964:	4628      	mov	r0, r5
 8006966:	47b8      	blx	r7
 8006968:	3001      	adds	r0, #1
 800696a:	d10c      	bne.n	8006986 <_printf_float+0x412>
 800696c:	e65d      	b.n	800662a <_printf_float+0xb6>
 800696e:	2301      	movs	r3, #1
 8006970:	465a      	mov	r2, fp
 8006972:	4631      	mov	r1, r6
 8006974:	4628      	mov	r0, r5
 8006976:	47b8      	blx	r7
 8006978:	3001      	adds	r0, #1
 800697a:	f43f ae56 	beq.w	800662a <_printf_float+0xb6>
 800697e:	f108 0801 	add.w	r8, r8, #1
 8006982:	45d0      	cmp	r8, sl
 8006984:	dbf3      	blt.n	800696e <_printf_float+0x3fa>
 8006986:	464b      	mov	r3, r9
 8006988:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800698c:	e6df      	b.n	800674e <_printf_float+0x1da>
 800698e:	f04f 0800 	mov.w	r8, #0
 8006992:	f104 0b1a 	add.w	fp, r4, #26
 8006996:	e7f4      	b.n	8006982 <_printf_float+0x40e>
 8006998:	2301      	movs	r3, #1
 800699a:	4642      	mov	r2, r8
 800699c:	e7e1      	b.n	8006962 <_printf_float+0x3ee>
 800699e:	2301      	movs	r3, #1
 80069a0:	464a      	mov	r2, r9
 80069a2:	4631      	mov	r1, r6
 80069a4:	4628      	mov	r0, r5
 80069a6:	47b8      	blx	r7
 80069a8:	3001      	adds	r0, #1
 80069aa:	f43f ae3e 	beq.w	800662a <_printf_float+0xb6>
 80069ae:	f108 0801 	add.w	r8, r8, #1
 80069b2:	68e3      	ldr	r3, [r4, #12]
 80069b4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80069b6:	1a5b      	subs	r3, r3, r1
 80069b8:	4543      	cmp	r3, r8
 80069ba:	dcf0      	bgt.n	800699e <_printf_float+0x42a>
 80069bc:	e6fc      	b.n	80067b8 <_printf_float+0x244>
 80069be:	f04f 0800 	mov.w	r8, #0
 80069c2:	f104 0919 	add.w	r9, r4, #25
 80069c6:	e7f4      	b.n	80069b2 <_printf_float+0x43e>

080069c8 <_printf_common>:
 80069c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069cc:	4616      	mov	r6, r2
 80069ce:	4698      	mov	r8, r3
 80069d0:	688a      	ldr	r2, [r1, #8]
 80069d2:	690b      	ldr	r3, [r1, #16]
 80069d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80069d8:	4293      	cmp	r3, r2
 80069da:	bfb8      	it	lt
 80069dc:	4613      	movlt	r3, r2
 80069de:	6033      	str	r3, [r6, #0]
 80069e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80069e4:	4607      	mov	r7, r0
 80069e6:	460c      	mov	r4, r1
 80069e8:	b10a      	cbz	r2, 80069ee <_printf_common+0x26>
 80069ea:	3301      	adds	r3, #1
 80069ec:	6033      	str	r3, [r6, #0]
 80069ee:	6823      	ldr	r3, [r4, #0]
 80069f0:	0699      	lsls	r1, r3, #26
 80069f2:	bf42      	ittt	mi
 80069f4:	6833      	ldrmi	r3, [r6, #0]
 80069f6:	3302      	addmi	r3, #2
 80069f8:	6033      	strmi	r3, [r6, #0]
 80069fa:	6825      	ldr	r5, [r4, #0]
 80069fc:	f015 0506 	ands.w	r5, r5, #6
 8006a00:	d106      	bne.n	8006a10 <_printf_common+0x48>
 8006a02:	f104 0a19 	add.w	sl, r4, #25
 8006a06:	68e3      	ldr	r3, [r4, #12]
 8006a08:	6832      	ldr	r2, [r6, #0]
 8006a0a:	1a9b      	subs	r3, r3, r2
 8006a0c:	42ab      	cmp	r3, r5
 8006a0e:	dc26      	bgt.n	8006a5e <_printf_common+0x96>
 8006a10:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006a14:	6822      	ldr	r2, [r4, #0]
 8006a16:	3b00      	subs	r3, #0
 8006a18:	bf18      	it	ne
 8006a1a:	2301      	movne	r3, #1
 8006a1c:	0692      	lsls	r2, r2, #26
 8006a1e:	d42b      	bmi.n	8006a78 <_printf_common+0xb0>
 8006a20:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006a24:	4641      	mov	r1, r8
 8006a26:	4638      	mov	r0, r7
 8006a28:	47c8      	blx	r9
 8006a2a:	3001      	adds	r0, #1
 8006a2c:	d01e      	beq.n	8006a6c <_printf_common+0xa4>
 8006a2e:	6823      	ldr	r3, [r4, #0]
 8006a30:	6922      	ldr	r2, [r4, #16]
 8006a32:	f003 0306 	and.w	r3, r3, #6
 8006a36:	2b04      	cmp	r3, #4
 8006a38:	bf02      	ittt	eq
 8006a3a:	68e5      	ldreq	r5, [r4, #12]
 8006a3c:	6833      	ldreq	r3, [r6, #0]
 8006a3e:	1aed      	subeq	r5, r5, r3
 8006a40:	68a3      	ldr	r3, [r4, #8]
 8006a42:	bf0c      	ite	eq
 8006a44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a48:	2500      	movne	r5, #0
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	bfc4      	itt	gt
 8006a4e:	1a9b      	subgt	r3, r3, r2
 8006a50:	18ed      	addgt	r5, r5, r3
 8006a52:	2600      	movs	r6, #0
 8006a54:	341a      	adds	r4, #26
 8006a56:	42b5      	cmp	r5, r6
 8006a58:	d11a      	bne.n	8006a90 <_printf_common+0xc8>
 8006a5a:	2000      	movs	r0, #0
 8006a5c:	e008      	b.n	8006a70 <_printf_common+0xa8>
 8006a5e:	2301      	movs	r3, #1
 8006a60:	4652      	mov	r2, sl
 8006a62:	4641      	mov	r1, r8
 8006a64:	4638      	mov	r0, r7
 8006a66:	47c8      	blx	r9
 8006a68:	3001      	adds	r0, #1
 8006a6a:	d103      	bne.n	8006a74 <_printf_common+0xac>
 8006a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a74:	3501      	adds	r5, #1
 8006a76:	e7c6      	b.n	8006a06 <_printf_common+0x3e>
 8006a78:	18e1      	adds	r1, r4, r3
 8006a7a:	1c5a      	adds	r2, r3, #1
 8006a7c:	2030      	movs	r0, #48	@ 0x30
 8006a7e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006a82:	4422      	add	r2, r4
 8006a84:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006a88:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006a8c:	3302      	adds	r3, #2
 8006a8e:	e7c7      	b.n	8006a20 <_printf_common+0x58>
 8006a90:	2301      	movs	r3, #1
 8006a92:	4622      	mov	r2, r4
 8006a94:	4641      	mov	r1, r8
 8006a96:	4638      	mov	r0, r7
 8006a98:	47c8      	blx	r9
 8006a9a:	3001      	adds	r0, #1
 8006a9c:	d0e6      	beq.n	8006a6c <_printf_common+0xa4>
 8006a9e:	3601      	adds	r6, #1
 8006aa0:	e7d9      	b.n	8006a56 <_printf_common+0x8e>
	...

08006aa4 <_printf_i>:
 8006aa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006aa8:	7e0f      	ldrb	r7, [r1, #24]
 8006aaa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006aac:	2f78      	cmp	r7, #120	@ 0x78
 8006aae:	4691      	mov	r9, r2
 8006ab0:	4680      	mov	r8, r0
 8006ab2:	460c      	mov	r4, r1
 8006ab4:	469a      	mov	sl, r3
 8006ab6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006aba:	d807      	bhi.n	8006acc <_printf_i+0x28>
 8006abc:	2f62      	cmp	r7, #98	@ 0x62
 8006abe:	d80a      	bhi.n	8006ad6 <_printf_i+0x32>
 8006ac0:	2f00      	cmp	r7, #0
 8006ac2:	f000 80d2 	beq.w	8006c6a <_printf_i+0x1c6>
 8006ac6:	2f58      	cmp	r7, #88	@ 0x58
 8006ac8:	f000 80b9 	beq.w	8006c3e <_printf_i+0x19a>
 8006acc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ad0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006ad4:	e03a      	b.n	8006b4c <_printf_i+0xa8>
 8006ad6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006ada:	2b15      	cmp	r3, #21
 8006adc:	d8f6      	bhi.n	8006acc <_printf_i+0x28>
 8006ade:	a101      	add	r1, pc, #4	@ (adr r1, 8006ae4 <_printf_i+0x40>)
 8006ae0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ae4:	08006b3d 	.word	0x08006b3d
 8006ae8:	08006b51 	.word	0x08006b51
 8006aec:	08006acd 	.word	0x08006acd
 8006af0:	08006acd 	.word	0x08006acd
 8006af4:	08006acd 	.word	0x08006acd
 8006af8:	08006acd 	.word	0x08006acd
 8006afc:	08006b51 	.word	0x08006b51
 8006b00:	08006acd 	.word	0x08006acd
 8006b04:	08006acd 	.word	0x08006acd
 8006b08:	08006acd 	.word	0x08006acd
 8006b0c:	08006acd 	.word	0x08006acd
 8006b10:	08006c51 	.word	0x08006c51
 8006b14:	08006b7b 	.word	0x08006b7b
 8006b18:	08006c0b 	.word	0x08006c0b
 8006b1c:	08006acd 	.word	0x08006acd
 8006b20:	08006acd 	.word	0x08006acd
 8006b24:	08006c73 	.word	0x08006c73
 8006b28:	08006acd 	.word	0x08006acd
 8006b2c:	08006b7b 	.word	0x08006b7b
 8006b30:	08006acd 	.word	0x08006acd
 8006b34:	08006acd 	.word	0x08006acd
 8006b38:	08006c13 	.word	0x08006c13
 8006b3c:	6833      	ldr	r3, [r6, #0]
 8006b3e:	1d1a      	adds	r2, r3, #4
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	6032      	str	r2, [r6, #0]
 8006b44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b48:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e09d      	b.n	8006c8c <_printf_i+0x1e8>
 8006b50:	6833      	ldr	r3, [r6, #0]
 8006b52:	6820      	ldr	r0, [r4, #0]
 8006b54:	1d19      	adds	r1, r3, #4
 8006b56:	6031      	str	r1, [r6, #0]
 8006b58:	0606      	lsls	r6, r0, #24
 8006b5a:	d501      	bpl.n	8006b60 <_printf_i+0xbc>
 8006b5c:	681d      	ldr	r5, [r3, #0]
 8006b5e:	e003      	b.n	8006b68 <_printf_i+0xc4>
 8006b60:	0645      	lsls	r5, r0, #25
 8006b62:	d5fb      	bpl.n	8006b5c <_printf_i+0xb8>
 8006b64:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006b68:	2d00      	cmp	r5, #0
 8006b6a:	da03      	bge.n	8006b74 <_printf_i+0xd0>
 8006b6c:	232d      	movs	r3, #45	@ 0x2d
 8006b6e:	426d      	negs	r5, r5
 8006b70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b74:	4859      	ldr	r0, [pc, #356]	@ (8006cdc <_printf_i+0x238>)
 8006b76:	230a      	movs	r3, #10
 8006b78:	e011      	b.n	8006b9e <_printf_i+0xfa>
 8006b7a:	6821      	ldr	r1, [r4, #0]
 8006b7c:	6833      	ldr	r3, [r6, #0]
 8006b7e:	0608      	lsls	r0, r1, #24
 8006b80:	f853 5b04 	ldr.w	r5, [r3], #4
 8006b84:	d402      	bmi.n	8006b8c <_printf_i+0xe8>
 8006b86:	0649      	lsls	r1, r1, #25
 8006b88:	bf48      	it	mi
 8006b8a:	b2ad      	uxthmi	r5, r5
 8006b8c:	2f6f      	cmp	r7, #111	@ 0x6f
 8006b8e:	4853      	ldr	r0, [pc, #332]	@ (8006cdc <_printf_i+0x238>)
 8006b90:	6033      	str	r3, [r6, #0]
 8006b92:	bf14      	ite	ne
 8006b94:	230a      	movne	r3, #10
 8006b96:	2308      	moveq	r3, #8
 8006b98:	2100      	movs	r1, #0
 8006b9a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006b9e:	6866      	ldr	r6, [r4, #4]
 8006ba0:	60a6      	str	r6, [r4, #8]
 8006ba2:	2e00      	cmp	r6, #0
 8006ba4:	bfa2      	ittt	ge
 8006ba6:	6821      	ldrge	r1, [r4, #0]
 8006ba8:	f021 0104 	bicge.w	r1, r1, #4
 8006bac:	6021      	strge	r1, [r4, #0]
 8006bae:	b90d      	cbnz	r5, 8006bb4 <_printf_i+0x110>
 8006bb0:	2e00      	cmp	r6, #0
 8006bb2:	d04b      	beq.n	8006c4c <_printf_i+0x1a8>
 8006bb4:	4616      	mov	r6, r2
 8006bb6:	fbb5 f1f3 	udiv	r1, r5, r3
 8006bba:	fb03 5711 	mls	r7, r3, r1, r5
 8006bbe:	5dc7      	ldrb	r7, [r0, r7]
 8006bc0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006bc4:	462f      	mov	r7, r5
 8006bc6:	42bb      	cmp	r3, r7
 8006bc8:	460d      	mov	r5, r1
 8006bca:	d9f4      	bls.n	8006bb6 <_printf_i+0x112>
 8006bcc:	2b08      	cmp	r3, #8
 8006bce:	d10b      	bne.n	8006be8 <_printf_i+0x144>
 8006bd0:	6823      	ldr	r3, [r4, #0]
 8006bd2:	07df      	lsls	r7, r3, #31
 8006bd4:	d508      	bpl.n	8006be8 <_printf_i+0x144>
 8006bd6:	6923      	ldr	r3, [r4, #16]
 8006bd8:	6861      	ldr	r1, [r4, #4]
 8006bda:	4299      	cmp	r1, r3
 8006bdc:	bfde      	ittt	le
 8006bde:	2330      	movle	r3, #48	@ 0x30
 8006be0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006be4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006be8:	1b92      	subs	r2, r2, r6
 8006bea:	6122      	str	r2, [r4, #16]
 8006bec:	f8cd a000 	str.w	sl, [sp]
 8006bf0:	464b      	mov	r3, r9
 8006bf2:	aa03      	add	r2, sp, #12
 8006bf4:	4621      	mov	r1, r4
 8006bf6:	4640      	mov	r0, r8
 8006bf8:	f7ff fee6 	bl	80069c8 <_printf_common>
 8006bfc:	3001      	adds	r0, #1
 8006bfe:	d14a      	bne.n	8006c96 <_printf_i+0x1f2>
 8006c00:	f04f 30ff 	mov.w	r0, #4294967295
 8006c04:	b004      	add	sp, #16
 8006c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c0a:	6823      	ldr	r3, [r4, #0]
 8006c0c:	f043 0320 	orr.w	r3, r3, #32
 8006c10:	6023      	str	r3, [r4, #0]
 8006c12:	4833      	ldr	r0, [pc, #204]	@ (8006ce0 <_printf_i+0x23c>)
 8006c14:	2778      	movs	r7, #120	@ 0x78
 8006c16:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006c1a:	6823      	ldr	r3, [r4, #0]
 8006c1c:	6831      	ldr	r1, [r6, #0]
 8006c1e:	061f      	lsls	r7, r3, #24
 8006c20:	f851 5b04 	ldr.w	r5, [r1], #4
 8006c24:	d402      	bmi.n	8006c2c <_printf_i+0x188>
 8006c26:	065f      	lsls	r7, r3, #25
 8006c28:	bf48      	it	mi
 8006c2a:	b2ad      	uxthmi	r5, r5
 8006c2c:	6031      	str	r1, [r6, #0]
 8006c2e:	07d9      	lsls	r1, r3, #31
 8006c30:	bf44      	itt	mi
 8006c32:	f043 0320 	orrmi.w	r3, r3, #32
 8006c36:	6023      	strmi	r3, [r4, #0]
 8006c38:	b11d      	cbz	r5, 8006c42 <_printf_i+0x19e>
 8006c3a:	2310      	movs	r3, #16
 8006c3c:	e7ac      	b.n	8006b98 <_printf_i+0xf4>
 8006c3e:	4827      	ldr	r0, [pc, #156]	@ (8006cdc <_printf_i+0x238>)
 8006c40:	e7e9      	b.n	8006c16 <_printf_i+0x172>
 8006c42:	6823      	ldr	r3, [r4, #0]
 8006c44:	f023 0320 	bic.w	r3, r3, #32
 8006c48:	6023      	str	r3, [r4, #0]
 8006c4a:	e7f6      	b.n	8006c3a <_printf_i+0x196>
 8006c4c:	4616      	mov	r6, r2
 8006c4e:	e7bd      	b.n	8006bcc <_printf_i+0x128>
 8006c50:	6833      	ldr	r3, [r6, #0]
 8006c52:	6825      	ldr	r5, [r4, #0]
 8006c54:	6961      	ldr	r1, [r4, #20]
 8006c56:	1d18      	adds	r0, r3, #4
 8006c58:	6030      	str	r0, [r6, #0]
 8006c5a:	062e      	lsls	r6, r5, #24
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	d501      	bpl.n	8006c64 <_printf_i+0x1c0>
 8006c60:	6019      	str	r1, [r3, #0]
 8006c62:	e002      	b.n	8006c6a <_printf_i+0x1c6>
 8006c64:	0668      	lsls	r0, r5, #25
 8006c66:	d5fb      	bpl.n	8006c60 <_printf_i+0x1bc>
 8006c68:	8019      	strh	r1, [r3, #0]
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	6123      	str	r3, [r4, #16]
 8006c6e:	4616      	mov	r6, r2
 8006c70:	e7bc      	b.n	8006bec <_printf_i+0x148>
 8006c72:	6833      	ldr	r3, [r6, #0]
 8006c74:	1d1a      	adds	r2, r3, #4
 8006c76:	6032      	str	r2, [r6, #0]
 8006c78:	681e      	ldr	r6, [r3, #0]
 8006c7a:	6862      	ldr	r2, [r4, #4]
 8006c7c:	2100      	movs	r1, #0
 8006c7e:	4630      	mov	r0, r6
 8006c80:	f7f9 faa6 	bl	80001d0 <memchr>
 8006c84:	b108      	cbz	r0, 8006c8a <_printf_i+0x1e6>
 8006c86:	1b80      	subs	r0, r0, r6
 8006c88:	6060      	str	r0, [r4, #4]
 8006c8a:	6863      	ldr	r3, [r4, #4]
 8006c8c:	6123      	str	r3, [r4, #16]
 8006c8e:	2300      	movs	r3, #0
 8006c90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c94:	e7aa      	b.n	8006bec <_printf_i+0x148>
 8006c96:	6923      	ldr	r3, [r4, #16]
 8006c98:	4632      	mov	r2, r6
 8006c9a:	4649      	mov	r1, r9
 8006c9c:	4640      	mov	r0, r8
 8006c9e:	47d0      	blx	sl
 8006ca0:	3001      	adds	r0, #1
 8006ca2:	d0ad      	beq.n	8006c00 <_printf_i+0x15c>
 8006ca4:	6823      	ldr	r3, [r4, #0]
 8006ca6:	079b      	lsls	r3, r3, #30
 8006ca8:	d413      	bmi.n	8006cd2 <_printf_i+0x22e>
 8006caa:	68e0      	ldr	r0, [r4, #12]
 8006cac:	9b03      	ldr	r3, [sp, #12]
 8006cae:	4298      	cmp	r0, r3
 8006cb0:	bfb8      	it	lt
 8006cb2:	4618      	movlt	r0, r3
 8006cb4:	e7a6      	b.n	8006c04 <_printf_i+0x160>
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	4632      	mov	r2, r6
 8006cba:	4649      	mov	r1, r9
 8006cbc:	4640      	mov	r0, r8
 8006cbe:	47d0      	blx	sl
 8006cc0:	3001      	adds	r0, #1
 8006cc2:	d09d      	beq.n	8006c00 <_printf_i+0x15c>
 8006cc4:	3501      	adds	r5, #1
 8006cc6:	68e3      	ldr	r3, [r4, #12]
 8006cc8:	9903      	ldr	r1, [sp, #12]
 8006cca:	1a5b      	subs	r3, r3, r1
 8006ccc:	42ab      	cmp	r3, r5
 8006cce:	dcf2      	bgt.n	8006cb6 <_printf_i+0x212>
 8006cd0:	e7eb      	b.n	8006caa <_printf_i+0x206>
 8006cd2:	2500      	movs	r5, #0
 8006cd4:	f104 0619 	add.w	r6, r4, #25
 8006cd8:	e7f5      	b.n	8006cc6 <_printf_i+0x222>
 8006cda:	bf00      	nop
 8006cdc:	08008e66 	.word	0x08008e66
 8006ce0:	08008e77 	.word	0x08008e77

08006ce4 <std>:
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	b510      	push	{r4, lr}
 8006ce8:	4604      	mov	r4, r0
 8006cea:	e9c0 3300 	strd	r3, r3, [r0]
 8006cee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006cf2:	6083      	str	r3, [r0, #8]
 8006cf4:	8181      	strh	r1, [r0, #12]
 8006cf6:	6643      	str	r3, [r0, #100]	@ 0x64
 8006cf8:	81c2      	strh	r2, [r0, #14]
 8006cfa:	6183      	str	r3, [r0, #24]
 8006cfc:	4619      	mov	r1, r3
 8006cfe:	2208      	movs	r2, #8
 8006d00:	305c      	adds	r0, #92	@ 0x5c
 8006d02:	f000 f8f4 	bl	8006eee <memset>
 8006d06:	4b0d      	ldr	r3, [pc, #52]	@ (8006d3c <std+0x58>)
 8006d08:	6263      	str	r3, [r4, #36]	@ 0x24
 8006d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8006d40 <std+0x5c>)
 8006d0c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8006d44 <std+0x60>)
 8006d10:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006d12:	4b0d      	ldr	r3, [pc, #52]	@ (8006d48 <std+0x64>)
 8006d14:	6323      	str	r3, [r4, #48]	@ 0x30
 8006d16:	4b0d      	ldr	r3, [pc, #52]	@ (8006d4c <std+0x68>)
 8006d18:	6224      	str	r4, [r4, #32]
 8006d1a:	429c      	cmp	r4, r3
 8006d1c:	d006      	beq.n	8006d2c <std+0x48>
 8006d1e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006d22:	4294      	cmp	r4, r2
 8006d24:	d002      	beq.n	8006d2c <std+0x48>
 8006d26:	33d0      	adds	r3, #208	@ 0xd0
 8006d28:	429c      	cmp	r4, r3
 8006d2a:	d105      	bne.n	8006d38 <std+0x54>
 8006d2c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d34:	f000 b9ae 	b.w	8007094 <__retarget_lock_init_recursive>
 8006d38:	bd10      	pop	{r4, pc}
 8006d3a:	bf00      	nop
 8006d3c:	08006e69 	.word	0x08006e69
 8006d40:	08006e8b 	.word	0x08006e8b
 8006d44:	08006ec3 	.word	0x08006ec3
 8006d48:	08006ee7 	.word	0x08006ee7
 8006d4c:	20004450 	.word	0x20004450

08006d50 <stdio_exit_handler>:
 8006d50:	4a02      	ldr	r2, [pc, #8]	@ (8006d5c <stdio_exit_handler+0xc>)
 8006d52:	4903      	ldr	r1, [pc, #12]	@ (8006d60 <stdio_exit_handler+0x10>)
 8006d54:	4803      	ldr	r0, [pc, #12]	@ (8006d64 <stdio_exit_handler+0x14>)
 8006d56:	f000 b869 	b.w	8006e2c <_fwalk_sglue>
 8006d5a:	bf00      	nop
 8006d5c:	20000010 	.word	0x20000010
 8006d60:	0800875d 	.word	0x0800875d
 8006d64:	20000020 	.word	0x20000020

08006d68 <cleanup_stdio>:
 8006d68:	6841      	ldr	r1, [r0, #4]
 8006d6a:	4b0c      	ldr	r3, [pc, #48]	@ (8006d9c <cleanup_stdio+0x34>)
 8006d6c:	4299      	cmp	r1, r3
 8006d6e:	b510      	push	{r4, lr}
 8006d70:	4604      	mov	r4, r0
 8006d72:	d001      	beq.n	8006d78 <cleanup_stdio+0x10>
 8006d74:	f001 fcf2 	bl	800875c <_fflush_r>
 8006d78:	68a1      	ldr	r1, [r4, #8]
 8006d7a:	4b09      	ldr	r3, [pc, #36]	@ (8006da0 <cleanup_stdio+0x38>)
 8006d7c:	4299      	cmp	r1, r3
 8006d7e:	d002      	beq.n	8006d86 <cleanup_stdio+0x1e>
 8006d80:	4620      	mov	r0, r4
 8006d82:	f001 fceb 	bl	800875c <_fflush_r>
 8006d86:	68e1      	ldr	r1, [r4, #12]
 8006d88:	4b06      	ldr	r3, [pc, #24]	@ (8006da4 <cleanup_stdio+0x3c>)
 8006d8a:	4299      	cmp	r1, r3
 8006d8c:	d004      	beq.n	8006d98 <cleanup_stdio+0x30>
 8006d8e:	4620      	mov	r0, r4
 8006d90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d94:	f001 bce2 	b.w	800875c <_fflush_r>
 8006d98:	bd10      	pop	{r4, pc}
 8006d9a:	bf00      	nop
 8006d9c:	20004450 	.word	0x20004450
 8006da0:	200044b8 	.word	0x200044b8
 8006da4:	20004520 	.word	0x20004520

08006da8 <global_stdio_init.part.0>:
 8006da8:	b510      	push	{r4, lr}
 8006daa:	4b0b      	ldr	r3, [pc, #44]	@ (8006dd8 <global_stdio_init.part.0+0x30>)
 8006dac:	4c0b      	ldr	r4, [pc, #44]	@ (8006ddc <global_stdio_init.part.0+0x34>)
 8006dae:	4a0c      	ldr	r2, [pc, #48]	@ (8006de0 <global_stdio_init.part.0+0x38>)
 8006db0:	601a      	str	r2, [r3, #0]
 8006db2:	4620      	mov	r0, r4
 8006db4:	2200      	movs	r2, #0
 8006db6:	2104      	movs	r1, #4
 8006db8:	f7ff ff94 	bl	8006ce4 <std>
 8006dbc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	2109      	movs	r1, #9
 8006dc4:	f7ff ff8e 	bl	8006ce4 <std>
 8006dc8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006dcc:	2202      	movs	r2, #2
 8006dce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dd2:	2112      	movs	r1, #18
 8006dd4:	f7ff bf86 	b.w	8006ce4 <std>
 8006dd8:	20004588 	.word	0x20004588
 8006ddc:	20004450 	.word	0x20004450
 8006de0:	08006d51 	.word	0x08006d51

08006de4 <__sfp_lock_acquire>:
 8006de4:	4801      	ldr	r0, [pc, #4]	@ (8006dec <__sfp_lock_acquire+0x8>)
 8006de6:	f000 b956 	b.w	8007096 <__retarget_lock_acquire_recursive>
 8006dea:	bf00      	nop
 8006dec:	20004591 	.word	0x20004591

08006df0 <__sfp_lock_release>:
 8006df0:	4801      	ldr	r0, [pc, #4]	@ (8006df8 <__sfp_lock_release+0x8>)
 8006df2:	f000 b951 	b.w	8007098 <__retarget_lock_release_recursive>
 8006df6:	bf00      	nop
 8006df8:	20004591 	.word	0x20004591

08006dfc <__sinit>:
 8006dfc:	b510      	push	{r4, lr}
 8006dfe:	4604      	mov	r4, r0
 8006e00:	f7ff fff0 	bl	8006de4 <__sfp_lock_acquire>
 8006e04:	6a23      	ldr	r3, [r4, #32]
 8006e06:	b11b      	cbz	r3, 8006e10 <__sinit+0x14>
 8006e08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e0c:	f7ff bff0 	b.w	8006df0 <__sfp_lock_release>
 8006e10:	4b04      	ldr	r3, [pc, #16]	@ (8006e24 <__sinit+0x28>)
 8006e12:	6223      	str	r3, [r4, #32]
 8006e14:	4b04      	ldr	r3, [pc, #16]	@ (8006e28 <__sinit+0x2c>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d1f5      	bne.n	8006e08 <__sinit+0xc>
 8006e1c:	f7ff ffc4 	bl	8006da8 <global_stdio_init.part.0>
 8006e20:	e7f2      	b.n	8006e08 <__sinit+0xc>
 8006e22:	bf00      	nop
 8006e24:	08006d69 	.word	0x08006d69
 8006e28:	20004588 	.word	0x20004588

08006e2c <_fwalk_sglue>:
 8006e2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e30:	4607      	mov	r7, r0
 8006e32:	4688      	mov	r8, r1
 8006e34:	4614      	mov	r4, r2
 8006e36:	2600      	movs	r6, #0
 8006e38:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e3c:	f1b9 0901 	subs.w	r9, r9, #1
 8006e40:	d505      	bpl.n	8006e4e <_fwalk_sglue+0x22>
 8006e42:	6824      	ldr	r4, [r4, #0]
 8006e44:	2c00      	cmp	r4, #0
 8006e46:	d1f7      	bne.n	8006e38 <_fwalk_sglue+0xc>
 8006e48:	4630      	mov	r0, r6
 8006e4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e4e:	89ab      	ldrh	r3, [r5, #12]
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d907      	bls.n	8006e64 <_fwalk_sglue+0x38>
 8006e54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e58:	3301      	adds	r3, #1
 8006e5a:	d003      	beq.n	8006e64 <_fwalk_sglue+0x38>
 8006e5c:	4629      	mov	r1, r5
 8006e5e:	4638      	mov	r0, r7
 8006e60:	47c0      	blx	r8
 8006e62:	4306      	orrs	r6, r0
 8006e64:	3568      	adds	r5, #104	@ 0x68
 8006e66:	e7e9      	b.n	8006e3c <_fwalk_sglue+0x10>

08006e68 <__sread>:
 8006e68:	b510      	push	{r4, lr}
 8006e6a:	460c      	mov	r4, r1
 8006e6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e70:	f000 f8c2 	bl	8006ff8 <_read_r>
 8006e74:	2800      	cmp	r0, #0
 8006e76:	bfab      	itete	ge
 8006e78:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006e7a:	89a3      	ldrhlt	r3, [r4, #12]
 8006e7c:	181b      	addge	r3, r3, r0
 8006e7e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006e82:	bfac      	ite	ge
 8006e84:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006e86:	81a3      	strhlt	r3, [r4, #12]
 8006e88:	bd10      	pop	{r4, pc}

08006e8a <__swrite>:
 8006e8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e8e:	461f      	mov	r7, r3
 8006e90:	898b      	ldrh	r3, [r1, #12]
 8006e92:	05db      	lsls	r3, r3, #23
 8006e94:	4605      	mov	r5, r0
 8006e96:	460c      	mov	r4, r1
 8006e98:	4616      	mov	r6, r2
 8006e9a:	d505      	bpl.n	8006ea8 <__swrite+0x1e>
 8006e9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ea0:	2302      	movs	r3, #2
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f000 f896 	bl	8006fd4 <_lseek_r>
 8006ea8:	89a3      	ldrh	r3, [r4, #12]
 8006eaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006eae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006eb2:	81a3      	strh	r3, [r4, #12]
 8006eb4:	4632      	mov	r2, r6
 8006eb6:	463b      	mov	r3, r7
 8006eb8:	4628      	mov	r0, r5
 8006eba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ebe:	f000 b8ad 	b.w	800701c <_write_r>

08006ec2 <__sseek>:
 8006ec2:	b510      	push	{r4, lr}
 8006ec4:	460c      	mov	r4, r1
 8006ec6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eca:	f000 f883 	bl	8006fd4 <_lseek_r>
 8006ece:	1c43      	adds	r3, r0, #1
 8006ed0:	89a3      	ldrh	r3, [r4, #12]
 8006ed2:	bf15      	itete	ne
 8006ed4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006ed6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006eda:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006ede:	81a3      	strheq	r3, [r4, #12]
 8006ee0:	bf18      	it	ne
 8006ee2:	81a3      	strhne	r3, [r4, #12]
 8006ee4:	bd10      	pop	{r4, pc}

08006ee6 <__sclose>:
 8006ee6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eea:	f000 b80d 	b.w	8006f08 <_close_r>

08006eee <memset>:
 8006eee:	4402      	add	r2, r0
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d100      	bne.n	8006ef8 <memset+0xa>
 8006ef6:	4770      	bx	lr
 8006ef8:	f803 1b01 	strb.w	r1, [r3], #1
 8006efc:	e7f9      	b.n	8006ef2 <memset+0x4>
	...

08006f00 <_localeconv_r>:
 8006f00:	4800      	ldr	r0, [pc, #0]	@ (8006f04 <_localeconv_r+0x4>)
 8006f02:	4770      	bx	lr
 8006f04:	2000015c 	.word	0x2000015c

08006f08 <_close_r>:
 8006f08:	b538      	push	{r3, r4, r5, lr}
 8006f0a:	4d06      	ldr	r5, [pc, #24]	@ (8006f24 <_close_r+0x1c>)
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	4604      	mov	r4, r0
 8006f10:	4608      	mov	r0, r1
 8006f12:	602b      	str	r3, [r5, #0]
 8006f14:	f7fa fda6 	bl	8001a64 <_close>
 8006f18:	1c43      	adds	r3, r0, #1
 8006f1a:	d102      	bne.n	8006f22 <_close_r+0x1a>
 8006f1c:	682b      	ldr	r3, [r5, #0]
 8006f1e:	b103      	cbz	r3, 8006f22 <_close_r+0x1a>
 8006f20:	6023      	str	r3, [r4, #0]
 8006f22:	bd38      	pop	{r3, r4, r5, pc}
 8006f24:	2000458c 	.word	0x2000458c

08006f28 <_reclaim_reent>:
 8006f28:	4b29      	ldr	r3, [pc, #164]	@ (8006fd0 <_reclaim_reent+0xa8>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4283      	cmp	r3, r0
 8006f2e:	b570      	push	{r4, r5, r6, lr}
 8006f30:	4604      	mov	r4, r0
 8006f32:	d04b      	beq.n	8006fcc <_reclaim_reent+0xa4>
 8006f34:	69c3      	ldr	r3, [r0, #28]
 8006f36:	b1ab      	cbz	r3, 8006f64 <_reclaim_reent+0x3c>
 8006f38:	68db      	ldr	r3, [r3, #12]
 8006f3a:	b16b      	cbz	r3, 8006f58 <_reclaim_reent+0x30>
 8006f3c:	2500      	movs	r5, #0
 8006f3e:	69e3      	ldr	r3, [r4, #28]
 8006f40:	68db      	ldr	r3, [r3, #12]
 8006f42:	5959      	ldr	r1, [r3, r5]
 8006f44:	2900      	cmp	r1, #0
 8006f46:	d13b      	bne.n	8006fc0 <_reclaim_reent+0x98>
 8006f48:	3504      	adds	r5, #4
 8006f4a:	2d80      	cmp	r5, #128	@ 0x80
 8006f4c:	d1f7      	bne.n	8006f3e <_reclaim_reent+0x16>
 8006f4e:	69e3      	ldr	r3, [r4, #28]
 8006f50:	4620      	mov	r0, r4
 8006f52:	68d9      	ldr	r1, [r3, #12]
 8006f54:	f000 fefc 	bl	8007d50 <_free_r>
 8006f58:	69e3      	ldr	r3, [r4, #28]
 8006f5a:	6819      	ldr	r1, [r3, #0]
 8006f5c:	b111      	cbz	r1, 8006f64 <_reclaim_reent+0x3c>
 8006f5e:	4620      	mov	r0, r4
 8006f60:	f000 fef6 	bl	8007d50 <_free_r>
 8006f64:	6961      	ldr	r1, [r4, #20]
 8006f66:	b111      	cbz	r1, 8006f6e <_reclaim_reent+0x46>
 8006f68:	4620      	mov	r0, r4
 8006f6a:	f000 fef1 	bl	8007d50 <_free_r>
 8006f6e:	69e1      	ldr	r1, [r4, #28]
 8006f70:	b111      	cbz	r1, 8006f78 <_reclaim_reent+0x50>
 8006f72:	4620      	mov	r0, r4
 8006f74:	f000 feec 	bl	8007d50 <_free_r>
 8006f78:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006f7a:	b111      	cbz	r1, 8006f82 <_reclaim_reent+0x5a>
 8006f7c:	4620      	mov	r0, r4
 8006f7e:	f000 fee7 	bl	8007d50 <_free_r>
 8006f82:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006f84:	b111      	cbz	r1, 8006f8c <_reclaim_reent+0x64>
 8006f86:	4620      	mov	r0, r4
 8006f88:	f000 fee2 	bl	8007d50 <_free_r>
 8006f8c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006f8e:	b111      	cbz	r1, 8006f96 <_reclaim_reent+0x6e>
 8006f90:	4620      	mov	r0, r4
 8006f92:	f000 fedd 	bl	8007d50 <_free_r>
 8006f96:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006f98:	b111      	cbz	r1, 8006fa0 <_reclaim_reent+0x78>
 8006f9a:	4620      	mov	r0, r4
 8006f9c:	f000 fed8 	bl	8007d50 <_free_r>
 8006fa0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006fa2:	b111      	cbz	r1, 8006faa <_reclaim_reent+0x82>
 8006fa4:	4620      	mov	r0, r4
 8006fa6:	f000 fed3 	bl	8007d50 <_free_r>
 8006faa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006fac:	b111      	cbz	r1, 8006fb4 <_reclaim_reent+0x8c>
 8006fae:	4620      	mov	r0, r4
 8006fb0:	f000 fece 	bl	8007d50 <_free_r>
 8006fb4:	6a23      	ldr	r3, [r4, #32]
 8006fb6:	b14b      	cbz	r3, 8006fcc <_reclaim_reent+0xa4>
 8006fb8:	4620      	mov	r0, r4
 8006fba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006fbe:	4718      	bx	r3
 8006fc0:	680e      	ldr	r6, [r1, #0]
 8006fc2:	4620      	mov	r0, r4
 8006fc4:	f000 fec4 	bl	8007d50 <_free_r>
 8006fc8:	4631      	mov	r1, r6
 8006fca:	e7bb      	b.n	8006f44 <_reclaim_reent+0x1c>
 8006fcc:	bd70      	pop	{r4, r5, r6, pc}
 8006fce:	bf00      	nop
 8006fd0:	2000001c 	.word	0x2000001c

08006fd4 <_lseek_r>:
 8006fd4:	b538      	push	{r3, r4, r5, lr}
 8006fd6:	4d07      	ldr	r5, [pc, #28]	@ (8006ff4 <_lseek_r+0x20>)
 8006fd8:	4604      	mov	r4, r0
 8006fda:	4608      	mov	r0, r1
 8006fdc:	4611      	mov	r1, r2
 8006fde:	2200      	movs	r2, #0
 8006fe0:	602a      	str	r2, [r5, #0]
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	f7fa fd65 	bl	8001ab2 <_lseek>
 8006fe8:	1c43      	adds	r3, r0, #1
 8006fea:	d102      	bne.n	8006ff2 <_lseek_r+0x1e>
 8006fec:	682b      	ldr	r3, [r5, #0]
 8006fee:	b103      	cbz	r3, 8006ff2 <_lseek_r+0x1e>
 8006ff0:	6023      	str	r3, [r4, #0]
 8006ff2:	bd38      	pop	{r3, r4, r5, pc}
 8006ff4:	2000458c 	.word	0x2000458c

08006ff8 <_read_r>:
 8006ff8:	b538      	push	{r3, r4, r5, lr}
 8006ffa:	4d07      	ldr	r5, [pc, #28]	@ (8007018 <_read_r+0x20>)
 8006ffc:	4604      	mov	r4, r0
 8006ffe:	4608      	mov	r0, r1
 8007000:	4611      	mov	r1, r2
 8007002:	2200      	movs	r2, #0
 8007004:	602a      	str	r2, [r5, #0]
 8007006:	461a      	mov	r2, r3
 8007008:	f7fa fcf3 	bl	80019f2 <_read>
 800700c:	1c43      	adds	r3, r0, #1
 800700e:	d102      	bne.n	8007016 <_read_r+0x1e>
 8007010:	682b      	ldr	r3, [r5, #0]
 8007012:	b103      	cbz	r3, 8007016 <_read_r+0x1e>
 8007014:	6023      	str	r3, [r4, #0]
 8007016:	bd38      	pop	{r3, r4, r5, pc}
 8007018:	2000458c 	.word	0x2000458c

0800701c <_write_r>:
 800701c:	b538      	push	{r3, r4, r5, lr}
 800701e:	4d07      	ldr	r5, [pc, #28]	@ (800703c <_write_r+0x20>)
 8007020:	4604      	mov	r4, r0
 8007022:	4608      	mov	r0, r1
 8007024:	4611      	mov	r1, r2
 8007026:	2200      	movs	r2, #0
 8007028:	602a      	str	r2, [r5, #0]
 800702a:	461a      	mov	r2, r3
 800702c:	f7fa fcfe 	bl	8001a2c <_write>
 8007030:	1c43      	adds	r3, r0, #1
 8007032:	d102      	bne.n	800703a <_write_r+0x1e>
 8007034:	682b      	ldr	r3, [r5, #0]
 8007036:	b103      	cbz	r3, 800703a <_write_r+0x1e>
 8007038:	6023      	str	r3, [r4, #0]
 800703a:	bd38      	pop	{r3, r4, r5, pc}
 800703c:	2000458c 	.word	0x2000458c

08007040 <__errno>:
 8007040:	4b01      	ldr	r3, [pc, #4]	@ (8007048 <__errno+0x8>)
 8007042:	6818      	ldr	r0, [r3, #0]
 8007044:	4770      	bx	lr
 8007046:	bf00      	nop
 8007048:	2000001c 	.word	0x2000001c

0800704c <__libc_init_array>:
 800704c:	b570      	push	{r4, r5, r6, lr}
 800704e:	4d0d      	ldr	r5, [pc, #52]	@ (8007084 <__libc_init_array+0x38>)
 8007050:	4c0d      	ldr	r4, [pc, #52]	@ (8007088 <__libc_init_array+0x3c>)
 8007052:	1b64      	subs	r4, r4, r5
 8007054:	10a4      	asrs	r4, r4, #2
 8007056:	2600      	movs	r6, #0
 8007058:	42a6      	cmp	r6, r4
 800705a:	d109      	bne.n	8007070 <__libc_init_array+0x24>
 800705c:	4d0b      	ldr	r5, [pc, #44]	@ (800708c <__libc_init_array+0x40>)
 800705e:	4c0c      	ldr	r4, [pc, #48]	@ (8007090 <__libc_init_array+0x44>)
 8007060:	f001 febc 	bl	8008ddc <_init>
 8007064:	1b64      	subs	r4, r4, r5
 8007066:	10a4      	asrs	r4, r4, #2
 8007068:	2600      	movs	r6, #0
 800706a:	42a6      	cmp	r6, r4
 800706c:	d105      	bne.n	800707a <__libc_init_array+0x2e>
 800706e:	bd70      	pop	{r4, r5, r6, pc}
 8007070:	f855 3b04 	ldr.w	r3, [r5], #4
 8007074:	4798      	blx	r3
 8007076:	3601      	adds	r6, #1
 8007078:	e7ee      	b.n	8007058 <__libc_init_array+0xc>
 800707a:	f855 3b04 	ldr.w	r3, [r5], #4
 800707e:	4798      	blx	r3
 8007080:	3601      	adds	r6, #1
 8007082:	e7f2      	b.n	800706a <__libc_init_array+0x1e>
 8007084:	080091d0 	.word	0x080091d0
 8007088:	080091d0 	.word	0x080091d0
 800708c:	080091d0 	.word	0x080091d0
 8007090:	080091d4 	.word	0x080091d4

08007094 <__retarget_lock_init_recursive>:
 8007094:	4770      	bx	lr

08007096 <__retarget_lock_acquire_recursive>:
 8007096:	4770      	bx	lr

08007098 <__retarget_lock_release_recursive>:
 8007098:	4770      	bx	lr

0800709a <memcpy>:
 800709a:	440a      	add	r2, r1
 800709c:	4291      	cmp	r1, r2
 800709e:	f100 33ff 	add.w	r3, r0, #4294967295
 80070a2:	d100      	bne.n	80070a6 <memcpy+0xc>
 80070a4:	4770      	bx	lr
 80070a6:	b510      	push	{r4, lr}
 80070a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070b0:	4291      	cmp	r1, r2
 80070b2:	d1f9      	bne.n	80070a8 <memcpy+0xe>
 80070b4:	bd10      	pop	{r4, pc}

080070b6 <quorem>:
 80070b6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070ba:	6903      	ldr	r3, [r0, #16]
 80070bc:	690c      	ldr	r4, [r1, #16]
 80070be:	42a3      	cmp	r3, r4
 80070c0:	4607      	mov	r7, r0
 80070c2:	db7e      	blt.n	80071c2 <quorem+0x10c>
 80070c4:	3c01      	subs	r4, #1
 80070c6:	f101 0814 	add.w	r8, r1, #20
 80070ca:	00a3      	lsls	r3, r4, #2
 80070cc:	f100 0514 	add.w	r5, r0, #20
 80070d0:	9300      	str	r3, [sp, #0]
 80070d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80070d6:	9301      	str	r3, [sp, #4]
 80070d8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80070dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80070e0:	3301      	adds	r3, #1
 80070e2:	429a      	cmp	r2, r3
 80070e4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80070e8:	fbb2 f6f3 	udiv	r6, r2, r3
 80070ec:	d32e      	bcc.n	800714c <quorem+0x96>
 80070ee:	f04f 0a00 	mov.w	sl, #0
 80070f2:	46c4      	mov	ip, r8
 80070f4:	46ae      	mov	lr, r5
 80070f6:	46d3      	mov	fp, sl
 80070f8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80070fc:	b298      	uxth	r0, r3
 80070fe:	fb06 a000 	mla	r0, r6, r0, sl
 8007102:	0c02      	lsrs	r2, r0, #16
 8007104:	0c1b      	lsrs	r3, r3, #16
 8007106:	fb06 2303 	mla	r3, r6, r3, r2
 800710a:	f8de 2000 	ldr.w	r2, [lr]
 800710e:	b280      	uxth	r0, r0
 8007110:	b292      	uxth	r2, r2
 8007112:	1a12      	subs	r2, r2, r0
 8007114:	445a      	add	r2, fp
 8007116:	f8de 0000 	ldr.w	r0, [lr]
 800711a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800711e:	b29b      	uxth	r3, r3
 8007120:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007124:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007128:	b292      	uxth	r2, r2
 800712a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800712e:	45e1      	cmp	r9, ip
 8007130:	f84e 2b04 	str.w	r2, [lr], #4
 8007134:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007138:	d2de      	bcs.n	80070f8 <quorem+0x42>
 800713a:	9b00      	ldr	r3, [sp, #0]
 800713c:	58eb      	ldr	r3, [r5, r3]
 800713e:	b92b      	cbnz	r3, 800714c <quorem+0x96>
 8007140:	9b01      	ldr	r3, [sp, #4]
 8007142:	3b04      	subs	r3, #4
 8007144:	429d      	cmp	r5, r3
 8007146:	461a      	mov	r2, r3
 8007148:	d32f      	bcc.n	80071aa <quorem+0xf4>
 800714a:	613c      	str	r4, [r7, #16]
 800714c:	4638      	mov	r0, r7
 800714e:	f001 f979 	bl	8008444 <__mcmp>
 8007152:	2800      	cmp	r0, #0
 8007154:	db25      	blt.n	80071a2 <quorem+0xec>
 8007156:	4629      	mov	r1, r5
 8007158:	2000      	movs	r0, #0
 800715a:	f858 2b04 	ldr.w	r2, [r8], #4
 800715e:	f8d1 c000 	ldr.w	ip, [r1]
 8007162:	fa1f fe82 	uxth.w	lr, r2
 8007166:	fa1f f38c 	uxth.w	r3, ip
 800716a:	eba3 030e 	sub.w	r3, r3, lr
 800716e:	4403      	add	r3, r0
 8007170:	0c12      	lsrs	r2, r2, #16
 8007172:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007176:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800717a:	b29b      	uxth	r3, r3
 800717c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007180:	45c1      	cmp	r9, r8
 8007182:	f841 3b04 	str.w	r3, [r1], #4
 8007186:	ea4f 4022 	mov.w	r0, r2, asr #16
 800718a:	d2e6      	bcs.n	800715a <quorem+0xa4>
 800718c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007190:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007194:	b922      	cbnz	r2, 80071a0 <quorem+0xea>
 8007196:	3b04      	subs	r3, #4
 8007198:	429d      	cmp	r5, r3
 800719a:	461a      	mov	r2, r3
 800719c:	d30b      	bcc.n	80071b6 <quorem+0x100>
 800719e:	613c      	str	r4, [r7, #16]
 80071a0:	3601      	adds	r6, #1
 80071a2:	4630      	mov	r0, r6
 80071a4:	b003      	add	sp, #12
 80071a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071aa:	6812      	ldr	r2, [r2, #0]
 80071ac:	3b04      	subs	r3, #4
 80071ae:	2a00      	cmp	r2, #0
 80071b0:	d1cb      	bne.n	800714a <quorem+0x94>
 80071b2:	3c01      	subs	r4, #1
 80071b4:	e7c6      	b.n	8007144 <quorem+0x8e>
 80071b6:	6812      	ldr	r2, [r2, #0]
 80071b8:	3b04      	subs	r3, #4
 80071ba:	2a00      	cmp	r2, #0
 80071bc:	d1ef      	bne.n	800719e <quorem+0xe8>
 80071be:	3c01      	subs	r4, #1
 80071c0:	e7ea      	b.n	8007198 <quorem+0xe2>
 80071c2:	2000      	movs	r0, #0
 80071c4:	e7ee      	b.n	80071a4 <quorem+0xee>
	...

080071c8 <_dtoa_r>:
 80071c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071cc:	69c7      	ldr	r7, [r0, #28]
 80071ce:	b099      	sub	sp, #100	@ 0x64
 80071d0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80071d4:	ec55 4b10 	vmov	r4, r5, d0
 80071d8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80071da:	9109      	str	r1, [sp, #36]	@ 0x24
 80071dc:	4683      	mov	fp, r0
 80071de:	920e      	str	r2, [sp, #56]	@ 0x38
 80071e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80071e2:	b97f      	cbnz	r7, 8007204 <_dtoa_r+0x3c>
 80071e4:	2010      	movs	r0, #16
 80071e6:	f000 fdfd 	bl	8007de4 <malloc>
 80071ea:	4602      	mov	r2, r0
 80071ec:	f8cb 001c 	str.w	r0, [fp, #28]
 80071f0:	b920      	cbnz	r0, 80071fc <_dtoa_r+0x34>
 80071f2:	4ba7      	ldr	r3, [pc, #668]	@ (8007490 <_dtoa_r+0x2c8>)
 80071f4:	21ef      	movs	r1, #239	@ 0xef
 80071f6:	48a7      	ldr	r0, [pc, #668]	@ (8007494 <_dtoa_r+0x2cc>)
 80071f8:	f001 fae8 	bl	80087cc <__assert_func>
 80071fc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007200:	6007      	str	r7, [r0, #0]
 8007202:	60c7      	str	r7, [r0, #12]
 8007204:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007208:	6819      	ldr	r1, [r3, #0]
 800720a:	b159      	cbz	r1, 8007224 <_dtoa_r+0x5c>
 800720c:	685a      	ldr	r2, [r3, #4]
 800720e:	604a      	str	r2, [r1, #4]
 8007210:	2301      	movs	r3, #1
 8007212:	4093      	lsls	r3, r2
 8007214:	608b      	str	r3, [r1, #8]
 8007216:	4658      	mov	r0, fp
 8007218:	f000 feda 	bl	8007fd0 <_Bfree>
 800721c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007220:	2200      	movs	r2, #0
 8007222:	601a      	str	r2, [r3, #0]
 8007224:	1e2b      	subs	r3, r5, #0
 8007226:	bfb9      	ittee	lt
 8007228:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800722c:	9303      	strlt	r3, [sp, #12]
 800722e:	2300      	movge	r3, #0
 8007230:	6033      	strge	r3, [r6, #0]
 8007232:	9f03      	ldr	r7, [sp, #12]
 8007234:	4b98      	ldr	r3, [pc, #608]	@ (8007498 <_dtoa_r+0x2d0>)
 8007236:	bfbc      	itt	lt
 8007238:	2201      	movlt	r2, #1
 800723a:	6032      	strlt	r2, [r6, #0]
 800723c:	43bb      	bics	r3, r7
 800723e:	d112      	bne.n	8007266 <_dtoa_r+0x9e>
 8007240:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007242:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007246:	6013      	str	r3, [r2, #0]
 8007248:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800724c:	4323      	orrs	r3, r4
 800724e:	f000 854d 	beq.w	8007cec <_dtoa_r+0xb24>
 8007252:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007254:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80074ac <_dtoa_r+0x2e4>
 8007258:	2b00      	cmp	r3, #0
 800725a:	f000 854f 	beq.w	8007cfc <_dtoa_r+0xb34>
 800725e:	f10a 0303 	add.w	r3, sl, #3
 8007262:	f000 bd49 	b.w	8007cf8 <_dtoa_r+0xb30>
 8007266:	ed9d 7b02 	vldr	d7, [sp, #8]
 800726a:	2200      	movs	r2, #0
 800726c:	ec51 0b17 	vmov	r0, r1, d7
 8007270:	2300      	movs	r3, #0
 8007272:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007276:	f7f9 fc27 	bl	8000ac8 <__aeabi_dcmpeq>
 800727a:	4680      	mov	r8, r0
 800727c:	b158      	cbz	r0, 8007296 <_dtoa_r+0xce>
 800727e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007280:	2301      	movs	r3, #1
 8007282:	6013      	str	r3, [r2, #0]
 8007284:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007286:	b113      	cbz	r3, 800728e <_dtoa_r+0xc6>
 8007288:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800728a:	4b84      	ldr	r3, [pc, #528]	@ (800749c <_dtoa_r+0x2d4>)
 800728c:	6013      	str	r3, [r2, #0]
 800728e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80074b0 <_dtoa_r+0x2e8>
 8007292:	f000 bd33 	b.w	8007cfc <_dtoa_r+0xb34>
 8007296:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800729a:	aa16      	add	r2, sp, #88	@ 0x58
 800729c:	a917      	add	r1, sp, #92	@ 0x5c
 800729e:	4658      	mov	r0, fp
 80072a0:	f001 f980 	bl	80085a4 <__d2b>
 80072a4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80072a8:	4681      	mov	r9, r0
 80072aa:	2e00      	cmp	r6, #0
 80072ac:	d077      	beq.n	800739e <_dtoa_r+0x1d6>
 80072ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80072b0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80072b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80072b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80072bc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80072c0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80072c4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80072c8:	4619      	mov	r1, r3
 80072ca:	2200      	movs	r2, #0
 80072cc:	4b74      	ldr	r3, [pc, #464]	@ (80074a0 <_dtoa_r+0x2d8>)
 80072ce:	f7f8 ffdb 	bl	8000288 <__aeabi_dsub>
 80072d2:	a369      	add	r3, pc, #420	@ (adr r3, 8007478 <_dtoa_r+0x2b0>)
 80072d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d8:	f7f9 f98e 	bl	80005f8 <__aeabi_dmul>
 80072dc:	a368      	add	r3, pc, #416	@ (adr r3, 8007480 <_dtoa_r+0x2b8>)
 80072de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e2:	f7f8 ffd3 	bl	800028c <__adddf3>
 80072e6:	4604      	mov	r4, r0
 80072e8:	4630      	mov	r0, r6
 80072ea:	460d      	mov	r5, r1
 80072ec:	f7f9 f91a 	bl	8000524 <__aeabi_i2d>
 80072f0:	a365      	add	r3, pc, #404	@ (adr r3, 8007488 <_dtoa_r+0x2c0>)
 80072f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f6:	f7f9 f97f 	bl	80005f8 <__aeabi_dmul>
 80072fa:	4602      	mov	r2, r0
 80072fc:	460b      	mov	r3, r1
 80072fe:	4620      	mov	r0, r4
 8007300:	4629      	mov	r1, r5
 8007302:	f7f8 ffc3 	bl	800028c <__adddf3>
 8007306:	4604      	mov	r4, r0
 8007308:	460d      	mov	r5, r1
 800730a:	f7f9 fc25 	bl	8000b58 <__aeabi_d2iz>
 800730e:	2200      	movs	r2, #0
 8007310:	4607      	mov	r7, r0
 8007312:	2300      	movs	r3, #0
 8007314:	4620      	mov	r0, r4
 8007316:	4629      	mov	r1, r5
 8007318:	f7f9 fbe0 	bl	8000adc <__aeabi_dcmplt>
 800731c:	b140      	cbz	r0, 8007330 <_dtoa_r+0x168>
 800731e:	4638      	mov	r0, r7
 8007320:	f7f9 f900 	bl	8000524 <__aeabi_i2d>
 8007324:	4622      	mov	r2, r4
 8007326:	462b      	mov	r3, r5
 8007328:	f7f9 fbce 	bl	8000ac8 <__aeabi_dcmpeq>
 800732c:	b900      	cbnz	r0, 8007330 <_dtoa_r+0x168>
 800732e:	3f01      	subs	r7, #1
 8007330:	2f16      	cmp	r7, #22
 8007332:	d851      	bhi.n	80073d8 <_dtoa_r+0x210>
 8007334:	4b5b      	ldr	r3, [pc, #364]	@ (80074a4 <_dtoa_r+0x2dc>)
 8007336:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800733a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800733e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007342:	f7f9 fbcb 	bl	8000adc <__aeabi_dcmplt>
 8007346:	2800      	cmp	r0, #0
 8007348:	d048      	beq.n	80073dc <_dtoa_r+0x214>
 800734a:	3f01      	subs	r7, #1
 800734c:	2300      	movs	r3, #0
 800734e:	9312      	str	r3, [sp, #72]	@ 0x48
 8007350:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007352:	1b9b      	subs	r3, r3, r6
 8007354:	1e5a      	subs	r2, r3, #1
 8007356:	bf44      	itt	mi
 8007358:	f1c3 0801 	rsbmi	r8, r3, #1
 800735c:	2300      	movmi	r3, #0
 800735e:	9208      	str	r2, [sp, #32]
 8007360:	bf54      	ite	pl
 8007362:	f04f 0800 	movpl.w	r8, #0
 8007366:	9308      	strmi	r3, [sp, #32]
 8007368:	2f00      	cmp	r7, #0
 800736a:	db39      	blt.n	80073e0 <_dtoa_r+0x218>
 800736c:	9b08      	ldr	r3, [sp, #32]
 800736e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007370:	443b      	add	r3, r7
 8007372:	9308      	str	r3, [sp, #32]
 8007374:	2300      	movs	r3, #0
 8007376:	930a      	str	r3, [sp, #40]	@ 0x28
 8007378:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800737a:	2b09      	cmp	r3, #9
 800737c:	d864      	bhi.n	8007448 <_dtoa_r+0x280>
 800737e:	2b05      	cmp	r3, #5
 8007380:	bfc4      	itt	gt
 8007382:	3b04      	subgt	r3, #4
 8007384:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007386:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007388:	f1a3 0302 	sub.w	r3, r3, #2
 800738c:	bfcc      	ite	gt
 800738e:	2400      	movgt	r4, #0
 8007390:	2401      	movle	r4, #1
 8007392:	2b03      	cmp	r3, #3
 8007394:	d863      	bhi.n	800745e <_dtoa_r+0x296>
 8007396:	e8df f003 	tbb	[pc, r3]
 800739a:	372a      	.short	0x372a
 800739c:	5535      	.short	0x5535
 800739e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80073a2:	441e      	add	r6, r3
 80073a4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80073a8:	2b20      	cmp	r3, #32
 80073aa:	bfc1      	itttt	gt
 80073ac:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80073b0:	409f      	lslgt	r7, r3
 80073b2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80073b6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80073ba:	bfd6      	itet	le
 80073bc:	f1c3 0320 	rsble	r3, r3, #32
 80073c0:	ea47 0003 	orrgt.w	r0, r7, r3
 80073c4:	fa04 f003 	lslle.w	r0, r4, r3
 80073c8:	f7f9 f89c 	bl	8000504 <__aeabi_ui2d>
 80073cc:	2201      	movs	r2, #1
 80073ce:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80073d2:	3e01      	subs	r6, #1
 80073d4:	9214      	str	r2, [sp, #80]	@ 0x50
 80073d6:	e777      	b.n	80072c8 <_dtoa_r+0x100>
 80073d8:	2301      	movs	r3, #1
 80073da:	e7b8      	b.n	800734e <_dtoa_r+0x186>
 80073dc:	9012      	str	r0, [sp, #72]	@ 0x48
 80073de:	e7b7      	b.n	8007350 <_dtoa_r+0x188>
 80073e0:	427b      	negs	r3, r7
 80073e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80073e4:	2300      	movs	r3, #0
 80073e6:	eba8 0807 	sub.w	r8, r8, r7
 80073ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 80073ec:	e7c4      	b.n	8007378 <_dtoa_r+0x1b0>
 80073ee:	2300      	movs	r3, #0
 80073f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80073f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	dc35      	bgt.n	8007464 <_dtoa_r+0x29c>
 80073f8:	2301      	movs	r3, #1
 80073fa:	9300      	str	r3, [sp, #0]
 80073fc:	9307      	str	r3, [sp, #28]
 80073fe:	461a      	mov	r2, r3
 8007400:	920e      	str	r2, [sp, #56]	@ 0x38
 8007402:	e00b      	b.n	800741c <_dtoa_r+0x254>
 8007404:	2301      	movs	r3, #1
 8007406:	e7f3      	b.n	80073f0 <_dtoa_r+0x228>
 8007408:	2300      	movs	r3, #0
 800740a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800740c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800740e:	18fb      	adds	r3, r7, r3
 8007410:	9300      	str	r3, [sp, #0]
 8007412:	3301      	adds	r3, #1
 8007414:	2b01      	cmp	r3, #1
 8007416:	9307      	str	r3, [sp, #28]
 8007418:	bfb8      	it	lt
 800741a:	2301      	movlt	r3, #1
 800741c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007420:	2100      	movs	r1, #0
 8007422:	2204      	movs	r2, #4
 8007424:	f102 0514 	add.w	r5, r2, #20
 8007428:	429d      	cmp	r5, r3
 800742a:	d91f      	bls.n	800746c <_dtoa_r+0x2a4>
 800742c:	6041      	str	r1, [r0, #4]
 800742e:	4658      	mov	r0, fp
 8007430:	f000 fd8e 	bl	8007f50 <_Balloc>
 8007434:	4682      	mov	sl, r0
 8007436:	2800      	cmp	r0, #0
 8007438:	d13c      	bne.n	80074b4 <_dtoa_r+0x2ec>
 800743a:	4b1b      	ldr	r3, [pc, #108]	@ (80074a8 <_dtoa_r+0x2e0>)
 800743c:	4602      	mov	r2, r0
 800743e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007442:	e6d8      	b.n	80071f6 <_dtoa_r+0x2e>
 8007444:	2301      	movs	r3, #1
 8007446:	e7e0      	b.n	800740a <_dtoa_r+0x242>
 8007448:	2401      	movs	r4, #1
 800744a:	2300      	movs	r3, #0
 800744c:	9309      	str	r3, [sp, #36]	@ 0x24
 800744e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007450:	f04f 33ff 	mov.w	r3, #4294967295
 8007454:	9300      	str	r3, [sp, #0]
 8007456:	9307      	str	r3, [sp, #28]
 8007458:	2200      	movs	r2, #0
 800745a:	2312      	movs	r3, #18
 800745c:	e7d0      	b.n	8007400 <_dtoa_r+0x238>
 800745e:	2301      	movs	r3, #1
 8007460:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007462:	e7f5      	b.n	8007450 <_dtoa_r+0x288>
 8007464:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007466:	9300      	str	r3, [sp, #0]
 8007468:	9307      	str	r3, [sp, #28]
 800746a:	e7d7      	b.n	800741c <_dtoa_r+0x254>
 800746c:	3101      	adds	r1, #1
 800746e:	0052      	lsls	r2, r2, #1
 8007470:	e7d8      	b.n	8007424 <_dtoa_r+0x25c>
 8007472:	bf00      	nop
 8007474:	f3af 8000 	nop.w
 8007478:	636f4361 	.word	0x636f4361
 800747c:	3fd287a7 	.word	0x3fd287a7
 8007480:	8b60c8b3 	.word	0x8b60c8b3
 8007484:	3fc68a28 	.word	0x3fc68a28
 8007488:	509f79fb 	.word	0x509f79fb
 800748c:	3fd34413 	.word	0x3fd34413
 8007490:	08008e95 	.word	0x08008e95
 8007494:	08008eac 	.word	0x08008eac
 8007498:	7ff00000 	.word	0x7ff00000
 800749c:	08008e65 	.word	0x08008e65
 80074a0:	3ff80000 	.word	0x3ff80000
 80074a4:	08008fa8 	.word	0x08008fa8
 80074a8:	08008f04 	.word	0x08008f04
 80074ac:	08008e91 	.word	0x08008e91
 80074b0:	08008e64 	.word	0x08008e64
 80074b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80074b8:	6018      	str	r0, [r3, #0]
 80074ba:	9b07      	ldr	r3, [sp, #28]
 80074bc:	2b0e      	cmp	r3, #14
 80074be:	f200 80a4 	bhi.w	800760a <_dtoa_r+0x442>
 80074c2:	2c00      	cmp	r4, #0
 80074c4:	f000 80a1 	beq.w	800760a <_dtoa_r+0x442>
 80074c8:	2f00      	cmp	r7, #0
 80074ca:	dd33      	ble.n	8007534 <_dtoa_r+0x36c>
 80074cc:	4bad      	ldr	r3, [pc, #692]	@ (8007784 <_dtoa_r+0x5bc>)
 80074ce:	f007 020f 	and.w	r2, r7, #15
 80074d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074d6:	ed93 7b00 	vldr	d7, [r3]
 80074da:	05f8      	lsls	r0, r7, #23
 80074dc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80074e0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80074e4:	d516      	bpl.n	8007514 <_dtoa_r+0x34c>
 80074e6:	4ba8      	ldr	r3, [pc, #672]	@ (8007788 <_dtoa_r+0x5c0>)
 80074e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80074ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80074f0:	f7f9 f9ac 	bl	800084c <__aeabi_ddiv>
 80074f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074f8:	f004 040f 	and.w	r4, r4, #15
 80074fc:	2603      	movs	r6, #3
 80074fe:	4da2      	ldr	r5, [pc, #648]	@ (8007788 <_dtoa_r+0x5c0>)
 8007500:	b954      	cbnz	r4, 8007518 <_dtoa_r+0x350>
 8007502:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007506:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800750a:	f7f9 f99f 	bl	800084c <__aeabi_ddiv>
 800750e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007512:	e028      	b.n	8007566 <_dtoa_r+0x39e>
 8007514:	2602      	movs	r6, #2
 8007516:	e7f2      	b.n	80074fe <_dtoa_r+0x336>
 8007518:	07e1      	lsls	r1, r4, #31
 800751a:	d508      	bpl.n	800752e <_dtoa_r+0x366>
 800751c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007520:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007524:	f7f9 f868 	bl	80005f8 <__aeabi_dmul>
 8007528:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800752c:	3601      	adds	r6, #1
 800752e:	1064      	asrs	r4, r4, #1
 8007530:	3508      	adds	r5, #8
 8007532:	e7e5      	b.n	8007500 <_dtoa_r+0x338>
 8007534:	f000 80d2 	beq.w	80076dc <_dtoa_r+0x514>
 8007538:	427c      	negs	r4, r7
 800753a:	4b92      	ldr	r3, [pc, #584]	@ (8007784 <_dtoa_r+0x5bc>)
 800753c:	4d92      	ldr	r5, [pc, #584]	@ (8007788 <_dtoa_r+0x5c0>)
 800753e:	f004 020f 	and.w	r2, r4, #15
 8007542:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800754a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800754e:	f7f9 f853 	bl	80005f8 <__aeabi_dmul>
 8007552:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007556:	1124      	asrs	r4, r4, #4
 8007558:	2300      	movs	r3, #0
 800755a:	2602      	movs	r6, #2
 800755c:	2c00      	cmp	r4, #0
 800755e:	f040 80b2 	bne.w	80076c6 <_dtoa_r+0x4fe>
 8007562:	2b00      	cmp	r3, #0
 8007564:	d1d3      	bne.n	800750e <_dtoa_r+0x346>
 8007566:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007568:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800756c:	2b00      	cmp	r3, #0
 800756e:	f000 80b7 	beq.w	80076e0 <_dtoa_r+0x518>
 8007572:	4b86      	ldr	r3, [pc, #536]	@ (800778c <_dtoa_r+0x5c4>)
 8007574:	2200      	movs	r2, #0
 8007576:	4620      	mov	r0, r4
 8007578:	4629      	mov	r1, r5
 800757a:	f7f9 faaf 	bl	8000adc <__aeabi_dcmplt>
 800757e:	2800      	cmp	r0, #0
 8007580:	f000 80ae 	beq.w	80076e0 <_dtoa_r+0x518>
 8007584:	9b07      	ldr	r3, [sp, #28]
 8007586:	2b00      	cmp	r3, #0
 8007588:	f000 80aa 	beq.w	80076e0 <_dtoa_r+0x518>
 800758c:	9b00      	ldr	r3, [sp, #0]
 800758e:	2b00      	cmp	r3, #0
 8007590:	dd37      	ble.n	8007602 <_dtoa_r+0x43a>
 8007592:	1e7b      	subs	r3, r7, #1
 8007594:	9304      	str	r3, [sp, #16]
 8007596:	4620      	mov	r0, r4
 8007598:	4b7d      	ldr	r3, [pc, #500]	@ (8007790 <_dtoa_r+0x5c8>)
 800759a:	2200      	movs	r2, #0
 800759c:	4629      	mov	r1, r5
 800759e:	f7f9 f82b 	bl	80005f8 <__aeabi_dmul>
 80075a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075a6:	9c00      	ldr	r4, [sp, #0]
 80075a8:	3601      	adds	r6, #1
 80075aa:	4630      	mov	r0, r6
 80075ac:	f7f8 ffba 	bl	8000524 <__aeabi_i2d>
 80075b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80075b4:	f7f9 f820 	bl	80005f8 <__aeabi_dmul>
 80075b8:	4b76      	ldr	r3, [pc, #472]	@ (8007794 <_dtoa_r+0x5cc>)
 80075ba:	2200      	movs	r2, #0
 80075bc:	f7f8 fe66 	bl	800028c <__adddf3>
 80075c0:	4605      	mov	r5, r0
 80075c2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80075c6:	2c00      	cmp	r4, #0
 80075c8:	f040 808d 	bne.w	80076e6 <_dtoa_r+0x51e>
 80075cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075d0:	4b71      	ldr	r3, [pc, #452]	@ (8007798 <_dtoa_r+0x5d0>)
 80075d2:	2200      	movs	r2, #0
 80075d4:	f7f8 fe58 	bl	8000288 <__aeabi_dsub>
 80075d8:	4602      	mov	r2, r0
 80075da:	460b      	mov	r3, r1
 80075dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80075e0:	462a      	mov	r2, r5
 80075e2:	4633      	mov	r3, r6
 80075e4:	f7f9 fa98 	bl	8000b18 <__aeabi_dcmpgt>
 80075e8:	2800      	cmp	r0, #0
 80075ea:	f040 828b 	bne.w	8007b04 <_dtoa_r+0x93c>
 80075ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075f2:	462a      	mov	r2, r5
 80075f4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80075f8:	f7f9 fa70 	bl	8000adc <__aeabi_dcmplt>
 80075fc:	2800      	cmp	r0, #0
 80075fe:	f040 8128 	bne.w	8007852 <_dtoa_r+0x68a>
 8007602:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007606:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800760a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800760c:	2b00      	cmp	r3, #0
 800760e:	f2c0 815a 	blt.w	80078c6 <_dtoa_r+0x6fe>
 8007612:	2f0e      	cmp	r7, #14
 8007614:	f300 8157 	bgt.w	80078c6 <_dtoa_r+0x6fe>
 8007618:	4b5a      	ldr	r3, [pc, #360]	@ (8007784 <_dtoa_r+0x5bc>)
 800761a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800761e:	ed93 7b00 	vldr	d7, [r3]
 8007622:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007624:	2b00      	cmp	r3, #0
 8007626:	ed8d 7b00 	vstr	d7, [sp]
 800762a:	da03      	bge.n	8007634 <_dtoa_r+0x46c>
 800762c:	9b07      	ldr	r3, [sp, #28]
 800762e:	2b00      	cmp	r3, #0
 8007630:	f340 8101 	ble.w	8007836 <_dtoa_r+0x66e>
 8007634:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007638:	4656      	mov	r6, sl
 800763a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800763e:	4620      	mov	r0, r4
 8007640:	4629      	mov	r1, r5
 8007642:	f7f9 f903 	bl	800084c <__aeabi_ddiv>
 8007646:	f7f9 fa87 	bl	8000b58 <__aeabi_d2iz>
 800764a:	4680      	mov	r8, r0
 800764c:	f7f8 ff6a 	bl	8000524 <__aeabi_i2d>
 8007650:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007654:	f7f8 ffd0 	bl	80005f8 <__aeabi_dmul>
 8007658:	4602      	mov	r2, r0
 800765a:	460b      	mov	r3, r1
 800765c:	4620      	mov	r0, r4
 800765e:	4629      	mov	r1, r5
 8007660:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007664:	f7f8 fe10 	bl	8000288 <__aeabi_dsub>
 8007668:	f806 4b01 	strb.w	r4, [r6], #1
 800766c:	9d07      	ldr	r5, [sp, #28]
 800766e:	eba6 040a 	sub.w	r4, r6, sl
 8007672:	42a5      	cmp	r5, r4
 8007674:	4602      	mov	r2, r0
 8007676:	460b      	mov	r3, r1
 8007678:	f040 8117 	bne.w	80078aa <_dtoa_r+0x6e2>
 800767c:	f7f8 fe06 	bl	800028c <__adddf3>
 8007680:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007684:	4604      	mov	r4, r0
 8007686:	460d      	mov	r5, r1
 8007688:	f7f9 fa46 	bl	8000b18 <__aeabi_dcmpgt>
 800768c:	2800      	cmp	r0, #0
 800768e:	f040 80f9 	bne.w	8007884 <_dtoa_r+0x6bc>
 8007692:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007696:	4620      	mov	r0, r4
 8007698:	4629      	mov	r1, r5
 800769a:	f7f9 fa15 	bl	8000ac8 <__aeabi_dcmpeq>
 800769e:	b118      	cbz	r0, 80076a8 <_dtoa_r+0x4e0>
 80076a0:	f018 0f01 	tst.w	r8, #1
 80076a4:	f040 80ee 	bne.w	8007884 <_dtoa_r+0x6bc>
 80076a8:	4649      	mov	r1, r9
 80076aa:	4658      	mov	r0, fp
 80076ac:	f000 fc90 	bl	8007fd0 <_Bfree>
 80076b0:	2300      	movs	r3, #0
 80076b2:	7033      	strb	r3, [r6, #0]
 80076b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80076b6:	3701      	adds	r7, #1
 80076b8:	601f      	str	r7, [r3, #0]
 80076ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80076bc:	2b00      	cmp	r3, #0
 80076be:	f000 831d 	beq.w	8007cfc <_dtoa_r+0xb34>
 80076c2:	601e      	str	r6, [r3, #0]
 80076c4:	e31a      	b.n	8007cfc <_dtoa_r+0xb34>
 80076c6:	07e2      	lsls	r2, r4, #31
 80076c8:	d505      	bpl.n	80076d6 <_dtoa_r+0x50e>
 80076ca:	e9d5 2300 	ldrd	r2, r3, [r5]
 80076ce:	f7f8 ff93 	bl	80005f8 <__aeabi_dmul>
 80076d2:	3601      	adds	r6, #1
 80076d4:	2301      	movs	r3, #1
 80076d6:	1064      	asrs	r4, r4, #1
 80076d8:	3508      	adds	r5, #8
 80076da:	e73f      	b.n	800755c <_dtoa_r+0x394>
 80076dc:	2602      	movs	r6, #2
 80076de:	e742      	b.n	8007566 <_dtoa_r+0x39e>
 80076e0:	9c07      	ldr	r4, [sp, #28]
 80076e2:	9704      	str	r7, [sp, #16]
 80076e4:	e761      	b.n	80075aa <_dtoa_r+0x3e2>
 80076e6:	4b27      	ldr	r3, [pc, #156]	@ (8007784 <_dtoa_r+0x5bc>)
 80076e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80076ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80076ee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80076f2:	4454      	add	r4, sl
 80076f4:	2900      	cmp	r1, #0
 80076f6:	d053      	beq.n	80077a0 <_dtoa_r+0x5d8>
 80076f8:	4928      	ldr	r1, [pc, #160]	@ (800779c <_dtoa_r+0x5d4>)
 80076fa:	2000      	movs	r0, #0
 80076fc:	f7f9 f8a6 	bl	800084c <__aeabi_ddiv>
 8007700:	4633      	mov	r3, r6
 8007702:	462a      	mov	r2, r5
 8007704:	f7f8 fdc0 	bl	8000288 <__aeabi_dsub>
 8007708:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800770c:	4656      	mov	r6, sl
 800770e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007712:	f7f9 fa21 	bl	8000b58 <__aeabi_d2iz>
 8007716:	4605      	mov	r5, r0
 8007718:	f7f8 ff04 	bl	8000524 <__aeabi_i2d>
 800771c:	4602      	mov	r2, r0
 800771e:	460b      	mov	r3, r1
 8007720:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007724:	f7f8 fdb0 	bl	8000288 <__aeabi_dsub>
 8007728:	3530      	adds	r5, #48	@ 0x30
 800772a:	4602      	mov	r2, r0
 800772c:	460b      	mov	r3, r1
 800772e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007732:	f806 5b01 	strb.w	r5, [r6], #1
 8007736:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800773a:	f7f9 f9cf 	bl	8000adc <__aeabi_dcmplt>
 800773e:	2800      	cmp	r0, #0
 8007740:	d171      	bne.n	8007826 <_dtoa_r+0x65e>
 8007742:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007746:	4911      	ldr	r1, [pc, #68]	@ (800778c <_dtoa_r+0x5c4>)
 8007748:	2000      	movs	r0, #0
 800774a:	f7f8 fd9d 	bl	8000288 <__aeabi_dsub>
 800774e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007752:	f7f9 f9c3 	bl	8000adc <__aeabi_dcmplt>
 8007756:	2800      	cmp	r0, #0
 8007758:	f040 8095 	bne.w	8007886 <_dtoa_r+0x6be>
 800775c:	42a6      	cmp	r6, r4
 800775e:	f43f af50 	beq.w	8007602 <_dtoa_r+0x43a>
 8007762:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007766:	4b0a      	ldr	r3, [pc, #40]	@ (8007790 <_dtoa_r+0x5c8>)
 8007768:	2200      	movs	r2, #0
 800776a:	f7f8 ff45 	bl	80005f8 <__aeabi_dmul>
 800776e:	4b08      	ldr	r3, [pc, #32]	@ (8007790 <_dtoa_r+0x5c8>)
 8007770:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007774:	2200      	movs	r2, #0
 8007776:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800777a:	f7f8 ff3d 	bl	80005f8 <__aeabi_dmul>
 800777e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007782:	e7c4      	b.n	800770e <_dtoa_r+0x546>
 8007784:	08008fa8 	.word	0x08008fa8
 8007788:	08008f80 	.word	0x08008f80
 800778c:	3ff00000 	.word	0x3ff00000
 8007790:	40240000 	.word	0x40240000
 8007794:	401c0000 	.word	0x401c0000
 8007798:	40140000 	.word	0x40140000
 800779c:	3fe00000 	.word	0x3fe00000
 80077a0:	4631      	mov	r1, r6
 80077a2:	4628      	mov	r0, r5
 80077a4:	f7f8 ff28 	bl	80005f8 <__aeabi_dmul>
 80077a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80077ac:	9415      	str	r4, [sp, #84]	@ 0x54
 80077ae:	4656      	mov	r6, sl
 80077b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077b4:	f7f9 f9d0 	bl	8000b58 <__aeabi_d2iz>
 80077b8:	4605      	mov	r5, r0
 80077ba:	f7f8 feb3 	bl	8000524 <__aeabi_i2d>
 80077be:	4602      	mov	r2, r0
 80077c0:	460b      	mov	r3, r1
 80077c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077c6:	f7f8 fd5f 	bl	8000288 <__aeabi_dsub>
 80077ca:	3530      	adds	r5, #48	@ 0x30
 80077cc:	f806 5b01 	strb.w	r5, [r6], #1
 80077d0:	4602      	mov	r2, r0
 80077d2:	460b      	mov	r3, r1
 80077d4:	42a6      	cmp	r6, r4
 80077d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80077da:	f04f 0200 	mov.w	r2, #0
 80077de:	d124      	bne.n	800782a <_dtoa_r+0x662>
 80077e0:	4bac      	ldr	r3, [pc, #688]	@ (8007a94 <_dtoa_r+0x8cc>)
 80077e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80077e6:	f7f8 fd51 	bl	800028c <__adddf3>
 80077ea:	4602      	mov	r2, r0
 80077ec:	460b      	mov	r3, r1
 80077ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077f2:	f7f9 f991 	bl	8000b18 <__aeabi_dcmpgt>
 80077f6:	2800      	cmp	r0, #0
 80077f8:	d145      	bne.n	8007886 <_dtoa_r+0x6be>
 80077fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80077fe:	49a5      	ldr	r1, [pc, #660]	@ (8007a94 <_dtoa_r+0x8cc>)
 8007800:	2000      	movs	r0, #0
 8007802:	f7f8 fd41 	bl	8000288 <__aeabi_dsub>
 8007806:	4602      	mov	r2, r0
 8007808:	460b      	mov	r3, r1
 800780a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800780e:	f7f9 f965 	bl	8000adc <__aeabi_dcmplt>
 8007812:	2800      	cmp	r0, #0
 8007814:	f43f aef5 	beq.w	8007602 <_dtoa_r+0x43a>
 8007818:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800781a:	1e73      	subs	r3, r6, #1
 800781c:	9315      	str	r3, [sp, #84]	@ 0x54
 800781e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007822:	2b30      	cmp	r3, #48	@ 0x30
 8007824:	d0f8      	beq.n	8007818 <_dtoa_r+0x650>
 8007826:	9f04      	ldr	r7, [sp, #16]
 8007828:	e73e      	b.n	80076a8 <_dtoa_r+0x4e0>
 800782a:	4b9b      	ldr	r3, [pc, #620]	@ (8007a98 <_dtoa_r+0x8d0>)
 800782c:	f7f8 fee4 	bl	80005f8 <__aeabi_dmul>
 8007830:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007834:	e7bc      	b.n	80077b0 <_dtoa_r+0x5e8>
 8007836:	d10c      	bne.n	8007852 <_dtoa_r+0x68a>
 8007838:	4b98      	ldr	r3, [pc, #608]	@ (8007a9c <_dtoa_r+0x8d4>)
 800783a:	2200      	movs	r2, #0
 800783c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007840:	f7f8 feda 	bl	80005f8 <__aeabi_dmul>
 8007844:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007848:	f7f9 f95c 	bl	8000b04 <__aeabi_dcmpge>
 800784c:	2800      	cmp	r0, #0
 800784e:	f000 8157 	beq.w	8007b00 <_dtoa_r+0x938>
 8007852:	2400      	movs	r4, #0
 8007854:	4625      	mov	r5, r4
 8007856:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007858:	43db      	mvns	r3, r3
 800785a:	9304      	str	r3, [sp, #16]
 800785c:	4656      	mov	r6, sl
 800785e:	2700      	movs	r7, #0
 8007860:	4621      	mov	r1, r4
 8007862:	4658      	mov	r0, fp
 8007864:	f000 fbb4 	bl	8007fd0 <_Bfree>
 8007868:	2d00      	cmp	r5, #0
 800786a:	d0dc      	beq.n	8007826 <_dtoa_r+0x65e>
 800786c:	b12f      	cbz	r7, 800787a <_dtoa_r+0x6b2>
 800786e:	42af      	cmp	r7, r5
 8007870:	d003      	beq.n	800787a <_dtoa_r+0x6b2>
 8007872:	4639      	mov	r1, r7
 8007874:	4658      	mov	r0, fp
 8007876:	f000 fbab 	bl	8007fd0 <_Bfree>
 800787a:	4629      	mov	r1, r5
 800787c:	4658      	mov	r0, fp
 800787e:	f000 fba7 	bl	8007fd0 <_Bfree>
 8007882:	e7d0      	b.n	8007826 <_dtoa_r+0x65e>
 8007884:	9704      	str	r7, [sp, #16]
 8007886:	4633      	mov	r3, r6
 8007888:	461e      	mov	r6, r3
 800788a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800788e:	2a39      	cmp	r2, #57	@ 0x39
 8007890:	d107      	bne.n	80078a2 <_dtoa_r+0x6da>
 8007892:	459a      	cmp	sl, r3
 8007894:	d1f8      	bne.n	8007888 <_dtoa_r+0x6c0>
 8007896:	9a04      	ldr	r2, [sp, #16]
 8007898:	3201      	adds	r2, #1
 800789a:	9204      	str	r2, [sp, #16]
 800789c:	2230      	movs	r2, #48	@ 0x30
 800789e:	f88a 2000 	strb.w	r2, [sl]
 80078a2:	781a      	ldrb	r2, [r3, #0]
 80078a4:	3201      	adds	r2, #1
 80078a6:	701a      	strb	r2, [r3, #0]
 80078a8:	e7bd      	b.n	8007826 <_dtoa_r+0x65e>
 80078aa:	4b7b      	ldr	r3, [pc, #492]	@ (8007a98 <_dtoa_r+0x8d0>)
 80078ac:	2200      	movs	r2, #0
 80078ae:	f7f8 fea3 	bl	80005f8 <__aeabi_dmul>
 80078b2:	2200      	movs	r2, #0
 80078b4:	2300      	movs	r3, #0
 80078b6:	4604      	mov	r4, r0
 80078b8:	460d      	mov	r5, r1
 80078ba:	f7f9 f905 	bl	8000ac8 <__aeabi_dcmpeq>
 80078be:	2800      	cmp	r0, #0
 80078c0:	f43f aebb 	beq.w	800763a <_dtoa_r+0x472>
 80078c4:	e6f0      	b.n	80076a8 <_dtoa_r+0x4e0>
 80078c6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80078c8:	2a00      	cmp	r2, #0
 80078ca:	f000 80db 	beq.w	8007a84 <_dtoa_r+0x8bc>
 80078ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80078d0:	2a01      	cmp	r2, #1
 80078d2:	f300 80bf 	bgt.w	8007a54 <_dtoa_r+0x88c>
 80078d6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80078d8:	2a00      	cmp	r2, #0
 80078da:	f000 80b7 	beq.w	8007a4c <_dtoa_r+0x884>
 80078de:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80078e2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80078e4:	4646      	mov	r6, r8
 80078e6:	9a08      	ldr	r2, [sp, #32]
 80078e8:	2101      	movs	r1, #1
 80078ea:	441a      	add	r2, r3
 80078ec:	4658      	mov	r0, fp
 80078ee:	4498      	add	r8, r3
 80078f0:	9208      	str	r2, [sp, #32]
 80078f2:	f000 fc21 	bl	8008138 <__i2b>
 80078f6:	4605      	mov	r5, r0
 80078f8:	b15e      	cbz	r6, 8007912 <_dtoa_r+0x74a>
 80078fa:	9b08      	ldr	r3, [sp, #32]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	dd08      	ble.n	8007912 <_dtoa_r+0x74a>
 8007900:	42b3      	cmp	r3, r6
 8007902:	9a08      	ldr	r2, [sp, #32]
 8007904:	bfa8      	it	ge
 8007906:	4633      	movge	r3, r6
 8007908:	eba8 0803 	sub.w	r8, r8, r3
 800790c:	1af6      	subs	r6, r6, r3
 800790e:	1ad3      	subs	r3, r2, r3
 8007910:	9308      	str	r3, [sp, #32]
 8007912:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007914:	b1f3      	cbz	r3, 8007954 <_dtoa_r+0x78c>
 8007916:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007918:	2b00      	cmp	r3, #0
 800791a:	f000 80b7 	beq.w	8007a8c <_dtoa_r+0x8c4>
 800791e:	b18c      	cbz	r4, 8007944 <_dtoa_r+0x77c>
 8007920:	4629      	mov	r1, r5
 8007922:	4622      	mov	r2, r4
 8007924:	4658      	mov	r0, fp
 8007926:	f000 fcc7 	bl	80082b8 <__pow5mult>
 800792a:	464a      	mov	r2, r9
 800792c:	4601      	mov	r1, r0
 800792e:	4605      	mov	r5, r0
 8007930:	4658      	mov	r0, fp
 8007932:	f000 fc17 	bl	8008164 <__multiply>
 8007936:	4649      	mov	r1, r9
 8007938:	9004      	str	r0, [sp, #16]
 800793a:	4658      	mov	r0, fp
 800793c:	f000 fb48 	bl	8007fd0 <_Bfree>
 8007940:	9b04      	ldr	r3, [sp, #16]
 8007942:	4699      	mov	r9, r3
 8007944:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007946:	1b1a      	subs	r2, r3, r4
 8007948:	d004      	beq.n	8007954 <_dtoa_r+0x78c>
 800794a:	4649      	mov	r1, r9
 800794c:	4658      	mov	r0, fp
 800794e:	f000 fcb3 	bl	80082b8 <__pow5mult>
 8007952:	4681      	mov	r9, r0
 8007954:	2101      	movs	r1, #1
 8007956:	4658      	mov	r0, fp
 8007958:	f000 fbee 	bl	8008138 <__i2b>
 800795c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800795e:	4604      	mov	r4, r0
 8007960:	2b00      	cmp	r3, #0
 8007962:	f000 81cf 	beq.w	8007d04 <_dtoa_r+0xb3c>
 8007966:	461a      	mov	r2, r3
 8007968:	4601      	mov	r1, r0
 800796a:	4658      	mov	r0, fp
 800796c:	f000 fca4 	bl	80082b8 <__pow5mult>
 8007970:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007972:	2b01      	cmp	r3, #1
 8007974:	4604      	mov	r4, r0
 8007976:	f300 8095 	bgt.w	8007aa4 <_dtoa_r+0x8dc>
 800797a:	9b02      	ldr	r3, [sp, #8]
 800797c:	2b00      	cmp	r3, #0
 800797e:	f040 8087 	bne.w	8007a90 <_dtoa_r+0x8c8>
 8007982:	9b03      	ldr	r3, [sp, #12]
 8007984:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007988:	2b00      	cmp	r3, #0
 800798a:	f040 8089 	bne.w	8007aa0 <_dtoa_r+0x8d8>
 800798e:	9b03      	ldr	r3, [sp, #12]
 8007990:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007994:	0d1b      	lsrs	r3, r3, #20
 8007996:	051b      	lsls	r3, r3, #20
 8007998:	b12b      	cbz	r3, 80079a6 <_dtoa_r+0x7de>
 800799a:	9b08      	ldr	r3, [sp, #32]
 800799c:	3301      	adds	r3, #1
 800799e:	9308      	str	r3, [sp, #32]
 80079a0:	f108 0801 	add.w	r8, r8, #1
 80079a4:	2301      	movs	r3, #1
 80079a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80079a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	f000 81b0 	beq.w	8007d10 <_dtoa_r+0xb48>
 80079b0:	6923      	ldr	r3, [r4, #16]
 80079b2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80079b6:	6918      	ldr	r0, [r3, #16]
 80079b8:	f000 fb72 	bl	80080a0 <__hi0bits>
 80079bc:	f1c0 0020 	rsb	r0, r0, #32
 80079c0:	9b08      	ldr	r3, [sp, #32]
 80079c2:	4418      	add	r0, r3
 80079c4:	f010 001f 	ands.w	r0, r0, #31
 80079c8:	d077      	beq.n	8007aba <_dtoa_r+0x8f2>
 80079ca:	f1c0 0320 	rsb	r3, r0, #32
 80079ce:	2b04      	cmp	r3, #4
 80079d0:	dd6b      	ble.n	8007aaa <_dtoa_r+0x8e2>
 80079d2:	9b08      	ldr	r3, [sp, #32]
 80079d4:	f1c0 001c 	rsb	r0, r0, #28
 80079d8:	4403      	add	r3, r0
 80079da:	4480      	add	r8, r0
 80079dc:	4406      	add	r6, r0
 80079de:	9308      	str	r3, [sp, #32]
 80079e0:	f1b8 0f00 	cmp.w	r8, #0
 80079e4:	dd05      	ble.n	80079f2 <_dtoa_r+0x82a>
 80079e6:	4649      	mov	r1, r9
 80079e8:	4642      	mov	r2, r8
 80079ea:	4658      	mov	r0, fp
 80079ec:	f000 fcbe 	bl	800836c <__lshift>
 80079f0:	4681      	mov	r9, r0
 80079f2:	9b08      	ldr	r3, [sp, #32]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	dd05      	ble.n	8007a04 <_dtoa_r+0x83c>
 80079f8:	4621      	mov	r1, r4
 80079fa:	461a      	mov	r2, r3
 80079fc:	4658      	mov	r0, fp
 80079fe:	f000 fcb5 	bl	800836c <__lshift>
 8007a02:	4604      	mov	r4, r0
 8007a04:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d059      	beq.n	8007abe <_dtoa_r+0x8f6>
 8007a0a:	4621      	mov	r1, r4
 8007a0c:	4648      	mov	r0, r9
 8007a0e:	f000 fd19 	bl	8008444 <__mcmp>
 8007a12:	2800      	cmp	r0, #0
 8007a14:	da53      	bge.n	8007abe <_dtoa_r+0x8f6>
 8007a16:	1e7b      	subs	r3, r7, #1
 8007a18:	9304      	str	r3, [sp, #16]
 8007a1a:	4649      	mov	r1, r9
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	220a      	movs	r2, #10
 8007a20:	4658      	mov	r0, fp
 8007a22:	f000 faf7 	bl	8008014 <__multadd>
 8007a26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a28:	4681      	mov	r9, r0
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	f000 8172 	beq.w	8007d14 <_dtoa_r+0xb4c>
 8007a30:	2300      	movs	r3, #0
 8007a32:	4629      	mov	r1, r5
 8007a34:	220a      	movs	r2, #10
 8007a36:	4658      	mov	r0, fp
 8007a38:	f000 faec 	bl	8008014 <__multadd>
 8007a3c:	9b00      	ldr	r3, [sp, #0]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	4605      	mov	r5, r0
 8007a42:	dc67      	bgt.n	8007b14 <_dtoa_r+0x94c>
 8007a44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a46:	2b02      	cmp	r3, #2
 8007a48:	dc41      	bgt.n	8007ace <_dtoa_r+0x906>
 8007a4a:	e063      	b.n	8007b14 <_dtoa_r+0x94c>
 8007a4c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007a4e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007a52:	e746      	b.n	80078e2 <_dtoa_r+0x71a>
 8007a54:	9b07      	ldr	r3, [sp, #28]
 8007a56:	1e5c      	subs	r4, r3, #1
 8007a58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a5a:	42a3      	cmp	r3, r4
 8007a5c:	bfbf      	itttt	lt
 8007a5e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007a60:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007a62:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007a64:	1ae3      	sublt	r3, r4, r3
 8007a66:	bfb4      	ite	lt
 8007a68:	18d2      	addlt	r2, r2, r3
 8007a6a:	1b1c      	subge	r4, r3, r4
 8007a6c:	9b07      	ldr	r3, [sp, #28]
 8007a6e:	bfbc      	itt	lt
 8007a70:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007a72:	2400      	movlt	r4, #0
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	bfb5      	itete	lt
 8007a78:	eba8 0603 	sublt.w	r6, r8, r3
 8007a7c:	9b07      	ldrge	r3, [sp, #28]
 8007a7e:	2300      	movlt	r3, #0
 8007a80:	4646      	movge	r6, r8
 8007a82:	e730      	b.n	80078e6 <_dtoa_r+0x71e>
 8007a84:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007a86:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007a88:	4646      	mov	r6, r8
 8007a8a:	e735      	b.n	80078f8 <_dtoa_r+0x730>
 8007a8c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007a8e:	e75c      	b.n	800794a <_dtoa_r+0x782>
 8007a90:	2300      	movs	r3, #0
 8007a92:	e788      	b.n	80079a6 <_dtoa_r+0x7de>
 8007a94:	3fe00000 	.word	0x3fe00000
 8007a98:	40240000 	.word	0x40240000
 8007a9c:	40140000 	.word	0x40140000
 8007aa0:	9b02      	ldr	r3, [sp, #8]
 8007aa2:	e780      	b.n	80079a6 <_dtoa_r+0x7de>
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007aa8:	e782      	b.n	80079b0 <_dtoa_r+0x7e8>
 8007aaa:	d099      	beq.n	80079e0 <_dtoa_r+0x818>
 8007aac:	9a08      	ldr	r2, [sp, #32]
 8007aae:	331c      	adds	r3, #28
 8007ab0:	441a      	add	r2, r3
 8007ab2:	4498      	add	r8, r3
 8007ab4:	441e      	add	r6, r3
 8007ab6:	9208      	str	r2, [sp, #32]
 8007ab8:	e792      	b.n	80079e0 <_dtoa_r+0x818>
 8007aba:	4603      	mov	r3, r0
 8007abc:	e7f6      	b.n	8007aac <_dtoa_r+0x8e4>
 8007abe:	9b07      	ldr	r3, [sp, #28]
 8007ac0:	9704      	str	r7, [sp, #16]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	dc20      	bgt.n	8007b08 <_dtoa_r+0x940>
 8007ac6:	9300      	str	r3, [sp, #0]
 8007ac8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007aca:	2b02      	cmp	r3, #2
 8007acc:	dd1e      	ble.n	8007b0c <_dtoa_r+0x944>
 8007ace:	9b00      	ldr	r3, [sp, #0]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	f47f aec0 	bne.w	8007856 <_dtoa_r+0x68e>
 8007ad6:	4621      	mov	r1, r4
 8007ad8:	2205      	movs	r2, #5
 8007ada:	4658      	mov	r0, fp
 8007adc:	f000 fa9a 	bl	8008014 <__multadd>
 8007ae0:	4601      	mov	r1, r0
 8007ae2:	4604      	mov	r4, r0
 8007ae4:	4648      	mov	r0, r9
 8007ae6:	f000 fcad 	bl	8008444 <__mcmp>
 8007aea:	2800      	cmp	r0, #0
 8007aec:	f77f aeb3 	ble.w	8007856 <_dtoa_r+0x68e>
 8007af0:	4656      	mov	r6, sl
 8007af2:	2331      	movs	r3, #49	@ 0x31
 8007af4:	f806 3b01 	strb.w	r3, [r6], #1
 8007af8:	9b04      	ldr	r3, [sp, #16]
 8007afa:	3301      	adds	r3, #1
 8007afc:	9304      	str	r3, [sp, #16]
 8007afe:	e6ae      	b.n	800785e <_dtoa_r+0x696>
 8007b00:	9c07      	ldr	r4, [sp, #28]
 8007b02:	9704      	str	r7, [sp, #16]
 8007b04:	4625      	mov	r5, r4
 8007b06:	e7f3      	b.n	8007af0 <_dtoa_r+0x928>
 8007b08:	9b07      	ldr	r3, [sp, #28]
 8007b0a:	9300      	str	r3, [sp, #0]
 8007b0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	f000 8104 	beq.w	8007d1c <_dtoa_r+0xb54>
 8007b14:	2e00      	cmp	r6, #0
 8007b16:	dd05      	ble.n	8007b24 <_dtoa_r+0x95c>
 8007b18:	4629      	mov	r1, r5
 8007b1a:	4632      	mov	r2, r6
 8007b1c:	4658      	mov	r0, fp
 8007b1e:	f000 fc25 	bl	800836c <__lshift>
 8007b22:	4605      	mov	r5, r0
 8007b24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d05a      	beq.n	8007be0 <_dtoa_r+0xa18>
 8007b2a:	6869      	ldr	r1, [r5, #4]
 8007b2c:	4658      	mov	r0, fp
 8007b2e:	f000 fa0f 	bl	8007f50 <_Balloc>
 8007b32:	4606      	mov	r6, r0
 8007b34:	b928      	cbnz	r0, 8007b42 <_dtoa_r+0x97a>
 8007b36:	4b84      	ldr	r3, [pc, #528]	@ (8007d48 <_dtoa_r+0xb80>)
 8007b38:	4602      	mov	r2, r0
 8007b3a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007b3e:	f7ff bb5a 	b.w	80071f6 <_dtoa_r+0x2e>
 8007b42:	692a      	ldr	r2, [r5, #16]
 8007b44:	3202      	adds	r2, #2
 8007b46:	0092      	lsls	r2, r2, #2
 8007b48:	f105 010c 	add.w	r1, r5, #12
 8007b4c:	300c      	adds	r0, #12
 8007b4e:	f7ff faa4 	bl	800709a <memcpy>
 8007b52:	2201      	movs	r2, #1
 8007b54:	4631      	mov	r1, r6
 8007b56:	4658      	mov	r0, fp
 8007b58:	f000 fc08 	bl	800836c <__lshift>
 8007b5c:	f10a 0301 	add.w	r3, sl, #1
 8007b60:	9307      	str	r3, [sp, #28]
 8007b62:	9b00      	ldr	r3, [sp, #0]
 8007b64:	4453      	add	r3, sl
 8007b66:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b68:	9b02      	ldr	r3, [sp, #8]
 8007b6a:	f003 0301 	and.w	r3, r3, #1
 8007b6e:	462f      	mov	r7, r5
 8007b70:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b72:	4605      	mov	r5, r0
 8007b74:	9b07      	ldr	r3, [sp, #28]
 8007b76:	4621      	mov	r1, r4
 8007b78:	3b01      	subs	r3, #1
 8007b7a:	4648      	mov	r0, r9
 8007b7c:	9300      	str	r3, [sp, #0]
 8007b7e:	f7ff fa9a 	bl	80070b6 <quorem>
 8007b82:	4639      	mov	r1, r7
 8007b84:	9002      	str	r0, [sp, #8]
 8007b86:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007b8a:	4648      	mov	r0, r9
 8007b8c:	f000 fc5a 	bl	8008444 <__mcmp>
 8007b90:	462a      	mov	r2, r5
 8007b92:	9008      	str	r0, [sp, #32]
 8007b94:	4621      	mov	r1, r4
 8007b96:	4658      	mov	r0, fp
 8007b98:	f000 fc70 	bl	800847c <__mdiff>
 8007b9c:	68c2      	ldr	r2, [r0, #12]
 8007b9e:	4606      	mov	r6, r0
 8007ba0:	bb02      	cbnz	r2, 8007be4 <_dtoa_r+0xa1c>
 8007ba2:	4601      	mov	r1, r0
 8007ba4:	4648      	mov	r0, r9
 8007ba6:	f000 fc4d 	bl	8008444 <__mcmp>
 8007baa:	4602      	mov	r2, r0
 8007bac:	4631      	mov	r1, r6
 8007bae:	4658      	mov	r0, fp
 8007bb0:	920e      	str	r2, [sp, #56]	@ 0x38
 8007bb2:	f000 fa0d 	bl	8007fd0 <_Bfree>
 8007bb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bb8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007bba:	9e07      	ldr	r6, [sp, #28]
 8007bbc:	ea43 0102 	orr.w	r1, r3, r2
 8007bc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007bc2:	4319      	orrs	r1, r3
 8007bc4:	d110      	bne.n	8007be8 <_dtoa_r+0xa20>
 8007bc6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007bca:	d029      	beq.n	8007c20 <_dtoa_r+0xa58>
 8007bcc:	9b08      	ldr	r3, [sp, #32]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	dd02      	ble.n	8007bd8 <_dtoa_r+0xa10>
 8007bd2:	9b02      	ldr	r3, [sp, #8]
 8007bd4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007bd8:	9b00      	ldr	r3, [sp, #0]
 8007bda:	f883 8000 	strb.w	r8, [r3]
 8007bde:	e63f      	b.n	8007860 <_dtoa_r+0x698>
 8007be0:	4628      	mov	r0, r5
 8007be2:	e7bb      	b.n	8007b5c <_dtoa_r+0x994>
 8007be4:	2201      	movs	r2, #1
 8007be6:	e7e1      	b.n	8007bac <_dtoa_r+0x9e4>
 8007be8:	9b08      	ldr	r3, [sp, #32]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	db04      	blt.n	8007bf8 <_dtoa_r+0xa30>
 8007bee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007bf0:	430b      	orrs	r3, r1
 8007bf2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007bf4:	430b      	orrs	r3, r1
 8007bf6:	d120      	bne.n	8007c3a <_dtoa_r+0xa72>
 8007bf8:	2a00      	cmp	r2, #0
 8007bfa:	dded      	ble.n	8007bd8 <_dtoa_r+0xa10>
 8007bfc:	4649      	mov	r1, r9
 8007bfe:	2201      	movs	r2, #1
 8007c00:	4658      	mov	r0, fp
 8007c02:	f000 fbb3 	bl	800836c <__lshift>
 8007c06:	4621      	mov	r1, r4
 8007c08:	4681      	mov	r9, r0
 8007c0a:	f000 fc1b 	bl	8008444 <__mcmp>
 8007c0e:	2800      	cmp	r0, #0
 8007c10:	dc03      	bgt.n	8007c1a <_dtoa_r+0xa52>
 8007c12:	d1e1      	bne.n	8007bd8 <_dtoa_r+0xa10>
 8007c14:	f018 0f01 	tst.w	r8, #1
 8007c18:	d0de      	beq.n	8007bd8 <_dtoa_r+0xa10>
 8007c1a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007c1e:	d1d8      	bne.n	8007bd2 <_dtoa_r+0xa0a>
 8007c20:	9a00      	ldr	r2, [sp, #0]
 8007c22:	2339      	movs	r3, #57	@ 0x39
 8007c24:	7013      	strb	r3, [r2, #0]
 8007c26:	4633      	mov	r3, r6
 8007c28:	461e      	mov	r6, r3
 8007c2a:	3b01      	subs	r3, #1
 8007c2c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007c30:	2a39      	cmp	r2, #57	@ 0x39
 8007c32:	d052      	beq.n	8007cda <_dtoa_r+0xb12>
 8007c34:	3201      	adds	r2, #1
 8007c36:	701a      	strb	r2, [r3, #0]
 8007c38:	e612      	b.n	8007860 <_dtoa_r+0x698>
 8007c3a:	2a00      	cmp	r2, #0
 8007c3c:	dd07      	ble.n	8007c4e <_dtoa_r+0xa86>
 8007c3e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007c42:	d0ed      	beq.n	8007c20 <_dtoa_r+0xa58>
 8007c44:	9a00      	ldr	r2, [sp, #0]
 8007c46:	f108 0301 	add.w	r3, r8, #1
 8007c4a:	7013      	strb	r3, [r2, #0]
 8007c4c:	e608      	b.n	8007860 <_dtoa_r+0x698>
 8007c4e:	9b07      	ldr	r3, [sp, #28]
 8007c50:	9a07      	ldr	r2, [sp, #28]
 8007c52:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007c56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d028      	beq.n	8007cae <_dtoa_r+0xae6>
 8007c5c:	4649      	mov	r1, r9
 8007c5e:	2300      	movs	r3, #0
 8007c60:	220a      	movs	r2, #10
 8007c62:	4658      	mov	r0, fp
 8007c64:	f000 f9d6 	bl	8008014 <__multadd>
 8007c68:	42af      	cmp	r7, r5
 8007c6a:	4681      	mov	r9, r0
 8007c6c:	f04f 0300 	mov.w	r3, #0
 8007c70:	f04f 020a 	mov.w	r2, #10
 8007c74:	4639      	mov	r1, r7
 8007c76:	4658      	mov	r0, fp
 8007c78:	d107      	bne.n	8007c8a <_dtoa_r+0xac2>
 8007c7a:	f000 f9cb 	bl	8008014 <__multadd>
 8007c7e:	4607      	mov	r7, r0
 8007c80:	4605      	mov	r5, r0
 8007c82:	9b07      	ldr	r3, [sp, #28]
 8007c84:	3301      	adds	r3, #1
 8007c86:	9307      	str	r3, [sp, #28]
 8007c88:	e774      	b.n	8007b74 <_dtoa_r+0x9ac>
 8007c8a:	f000 f9c3 	bl	8008014 <__multadd>
 8007c8e:	4629      	mov	r1, r5
 8007c90:	4607      	mov	r7, r0
 8007c92:	2300      	movs	r3, #0
 8007c94:	220a      	movs	r2, #10
 8007c96:	4658      	mov	r0, fp
 8007c98:	f000 f9bc 	bl	8008014 <__multadd>
 8007c9c:	4605      	mov	r5, r0
 8007c9e:	e7f0      	b.n	8007c82 <_dtoa_r+0xaba>
 8007ca0:	9b00      	ldr	r3, [sp, #0]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	bfcc      	ite	gt
 8007ca6:	461e      	movgt	r6, r3
 8007ca8:	2601      	movle	r6, #1
 8007caa:	4456      	add	r6, sl
 8007cac:	2700      	movs	r7, #0
 8007cae:	4649      	mov	r1, r9
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	4658      	mov	r0, fp
 8007cb4:	f000 fb5a 	bl	800836c <__lshift>
 8007cb8:	4621      	mov	r1, r4
 8007cba:	4681      	mov	r9, r0
 8007cbc:	f000 fbc2 	bl	8008444 <__mcmp>
 8007cc0:	2800      	cmp	r0, #0
 8007cc2:	dcb0      	bgt.n	8007c26 <_dtoa_r+0xa5e>
 8007cc4:	d102      	bne.n	8007ccc <_dtoa_r+0xb04>
 8007cc6:	f018 0f01 	tst.w	r8, #1
 8007cca:	d1ac      	bne.n	8007c26 <_dtoa_r+0xa5e>
 8007ccc:	4633      	mov	r3, r6
 8007cce:	461e      	mov	r6, r3
 8007cd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007cd4:	2a30      	cmp	r2, #48	@ 0x30
 8007cd6:	d0fa      	beq.n	8007cce <_dtoa_r+0xb06>
 8007cd8:	e5c2      	b.n	8007860 <_dtoa_r+0x698>
 8007cda:	459a      	cmp	sl, r3
 8007cdc:	d1a4      	bne.n	8007c28 <_dtoa_r+0xa60>
 8007cde:	9b04      	ldr	r3, [sp, #16]
 8007ce0:	3301      	adds	r3, #1
 8007ce2:	9304      	str	r3, [sp, #16]
 8007ce4:	2331      	movs	r3, #49	@ 0x31
 8007ce6:	f88a 3000 	strb.w	r3, [sl]
 8007cea:	e5b9      	b.n	8007860 <_dtoa_r+0x698>
 8007cec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007cee:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007d4c <_dtoa_r+0xb84>
 8007cf2:	b11b      	cbz	r3, 8007cfc <_dtoa_r+0xb34>
 8007cf4:	f10a 0308 	add.w	r3, sl, #8
 8007cf8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007cfa:	6013      	str	r3, [r2, #0]
 8007cfc:	4650      	mov	r0, sl
 8007cfe:	b019      	add	sp, #100	@ 0x64
 8007d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	f77f ae37 	ble.w	800797a <_dtoa_r+0x7b2>
 8007d0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d10:	2001      	movs	r0, #1
 8007d12:	e655      	b.n	80079c0 <_dtoa_r+0x7f8>
 8007d14:	9b00      	ldr	r3, [sp, #0]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	f77f aed6 	ble.w	8007ac8 <_dtoa_r+0x900>
 8007d1c:	4656      	mov	r6, sl
 8007d1e:	4621      	mov	r1, r4
 8007d20:	4648      	mov	r0, r9
 8007d22:	f7ff f9c8 	bl	80070b6 <quorem>
 8007d26:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007d2a:	f806 8b01 	strb.w	r8, [r6], #1
 8007d2e:	9b00      	ldr	r3, [sp, #0]
 8007d30:	eba6 020a 	sub.w	r2, r6, sl
 8007d34:	4293      	cmp	r3, r2
 8007d36:	ddb3      	ble.n	8007ca0 <_dtoa_r+0xad8>
 8007d38:	4649      	mov	r1, r9
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	220a      	movs	r2, #10
 8007d3e:	4658      	mov	r0, fp
 8007d40:	f000 f968 	bl	8008014 <__multadd>
 8007d44:	4681      	mov	r9, r0
 8007d46:	e7ea      	b.n	8007d1e <_dtoa_r+0xb56>
 8007d48:	08008f04 	.word	0x08008f04
 8007d4c:	08008e88 	.word	0x08008e88

08007d50 <_free_r>:
 8007d50:	b538      	push	{r3, r4, r5, lr}
 8007d52:	4605      	mov	r5, r0
 8007d54:	2900      	cmp	r1, #0
 8007d56:	d041      	beq.n	8007ddc <_free_r+0x8c>
 8007d58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d5c:	1f0c      	subs	r4, r1, #4
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	bfb8      	it	lt
 8007d62:	18e4      	addlt	r4, r4, r3
 8007d64:	f000 f8e8 	bl	8007f38 <__malloc_lock>
 8007d68:	4a1d      	ldr	r2, [pc, #116]	@ (8007de0 <_free_r+0x90>)
 8007d6a:	6813      	ldr	r3, [r2, #0]
 8007d6c:	b933      	cbnz	r3, 8007d7c <_free_r+0x2c>
 8007d6e:	6063      	str	r3, [r4, #4]
 8007d70:	6014      	str	r4, [r2, #0]
 8007d72:	4628      	mov	r0, r5
 8007d74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d78:	f000 b8e4 	b.w	8007f44 <__malloc_unlock>
 8007d7c:	42a3      	cmp	r3, r4
 8007d7e:	d908      	bls.n	8007d92 <_free_r+0x42>
 8007d80:	6820      	ldr	r0, [r4, #0]
 8007d82:	1821      	adds	r1, r4, r0
 8007d84:	428b      	cmp	r3, r1
 8007d86:	bf01      	itttt	eq
 8007d88:	6819      	ldreq	r1, [r3, #0]
 8007d8a:	685b      	ldreq	r3, [r3, #4]
 8007d8c:	1809      	addeq	r1, r1, r0
 8007d8e:	6021      	streq	r1, [r4, #0]
 8007d90:	e7ed      	b.n	8007d6e <_free_r+0x1e>
 8007d92:	461a      	mov	r2, r3
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	b10b      	cbz	r3, 8007d9c <_free_r+0x4c>
 8007d98:	42a3      	cmp	r3, r4
 8007d9a:	d9fa      	bls.n	8007d92 <_free_r+0x42>
 8007d9c:	6811      	ldr	r1, [r2, #0]
 8007d9e:	1850      	adds	r0, r2, r1
 8007da0:	42a0      	cmp	r0, r4
 8007da2:	d10b      	bne.n	8007dbc <_free_r+0x6c>
 8007da4:	6820      	ldr	r0, [r4, #0]
 8007da6:	4401      	add	r1, r0
 8007da8:	1850      	adds	r0, r2, r1
 8007daa:	4283      	cmp	r3, r0
 8007dac:	6011      	str	r1, [r2, #0]
 8007dae:	d1e0      	bne.n	8007d72 <_free_r+0x22>
 8007db0:	6818      	ldr	r0, [r3, #0]
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	6053      	str	r3, [r2, #4]
 8007db6:	4408      	add	r0, r1
 8007db8:	6010      	str	r0, [r2, #0]
 8007dba:	e7da      	b.n	8007d72 <_free_r+0x22>
 8007dbc:	d902      	bls.n	8007dc4 <_free_r+0x74>
 8007dbe:	230c      	movs	r3, #12
 8007dc0:	602b      	str	r3, [r5, #0]
 8007dc2:	e7d6      	b.n	8007d72 <_free_r+0x22>
 8007dc4:	6820      	ldr	r0, [r4, #0]
 8007dc6:	1821      	adds	r1, r4, r0
 8007dc8:	428b      	cmp	r3, r1
 8007dca:	bf04      	itt	eq
 8007dcc:	6819      	ldreq	r1, [r3, #0]
 8007dce:	685b      	ldreq	r3, [r3, #4]
 8007dd0:	6063      	str	r3, [r4, #4]
 8007dd2:	bf04      	itt	eq
 8007dd4:	1809      	addeq	r1, r1, r0
 8007dd6:	6021      	streq	r1, [r4, #0]
 8007dd8:	6054      	str	r4, [r2, #4]
 8007dda:	e7ca      	b.n	8007d72 <_free_r+0x22>
 8007ddc:	bd38      	pop	{r3, r4, r5, pc}
 8007dde:	bf00      	nop
 8007de0:	20004598 	.word	0x20004598

08007de4 <malloc>:
 8007de4:	4b02      	ldr	r3, [pc, #8]	@ (8007df0 <malloc+0xc>)
 8007de6:	4601      	mov	r1, r0
 8007de8:	6818      	ldr	r0, [r3, #0]
 8007dea:	f000 b825 	b.w	8007e38 <_malloc_r>
 8007dee:	bf00      	nop
 8007df0:	2000001c 	.word	0x2000001c

08007df4 <sbrk_aligned>:
 8007df4:	b570      	push	{r4, r5, r6, lr}
 8007df6:	4e0f      	ldr	r6, [pc, #60]	@ (8007e34 <sbrk_aligned+0x40>)
 8007df8:	460c      	mov	r4, r1
 8007dfa:	6831      	ldr	r1, [r6, #0]
 8007dfc:	4605      	mov	r5, r0
 8007dfe:	b911      	cbnz	r1, 8007e06 <sbrk_aligned+0x12>
 8007e00:	f000 fcd4 	bl	80087ac <_sbrk_r>
 8007e04:	6030      	str	r0, [r6, #0]
 8007e06:	4621      	mov	r1, r4
 8007e08:	4628      	mov	r0, r5
 8007e0a:	f000 fccf 	bl	80087ac <_sbrk_r>
 8007e0e:	1c43      	adds	r3, r0, #1
 8007e10:	d103      	bne.n	8007e1a <sbrk_aligned+0x26>
 8007e12:	f04f 34ff 	mov.w	r4, #4294967295
 8007e16:	4620      	mov	r0, r4
 8007e18:	bd70      	pop	{r4, r5, r6, pc}
 8007e1a:	1cc4      	adds	r4, r0, #3
 8007e1c:	f024 0403 	bic.w	r4, r4, #3
 8007e20:	42a0      	cmp	r0, r4
 8007e22:	d0f8      	beq.n	8007e16 <sbrk_aligned+0x22>
 8007e24:	1a21      	subs	r1, r4, r0
 8007e26:	4628      	mov	r0, r5
 8007e28:	f000 fcc0 	bl	80087ac <_sbrk_r>
 8007e2c:	3001      	adds	r0, #1
 8007e2e:	d1f2      	bne.n	8007e16 <sbrk_aligned+0x22>
 8007e30:	e7ef      	b.n	8007e12 <sbrk_aligned+0x1e>
 8007e32:	bf00      	nop
 8007e34:	20004594 	.word	0x20004594

08007e38 <_malloc_r>:
 8007e38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e3c:	1ccd      	adds	r5, r1, #3
 8007e3e:	f025 0503 	bic.w	r5, r5, #3
 8007e42:	3508      	adds	r5, #8
 8007e44:	2d0c      	cmp	r5, #12
 8007e46:	bf38      	it	cc
 8007e48:	250c      	movcc	r5, #12
 8007e4a:	2d00      	cmp	r5, #0
 8007e4c:	4606      	mov	r6, r0
 8007e4e:	db01      	blt.n	8007e54 <_malloc_r+0x1c>
 8007e50:	42a9      	cmp	r1, r5
 8007e52:	d904      	bls.n	8007e5e <_malloc_r+0x26>
 8007e54:	230c      	movs	r3, #12
 8007e56:	6033      	str	r3, [r6, #0]
 8007e58:	2000      	movs	r0, #0
 8007e5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007f34 <_malloc_r+0xfc>
 8007e62:	f000 f869 	bl	8007f38 <__malloc_lock>
 8007e66:	f8d8 3000 	ldr.w	r3, [r8]
 8007e6a:	461c      	mov	r4, r3
 8007e6c:	bb44      	cbnz	r4, 8007ec0 <_malloc_r+0x88>
 8007e6e:	4629      	mov	r1, r5
 8007e70:	4630      	mov	r0, r6
 8007e72:	f7ff ffbf 	bl	8007df4 <sbrk_aligned>
 8007e76:	1c43      	adds	r3, r0, #1
 8007e78:	4604      	mov	r4, r0
 8007e7a:	d158      	bne.n	8007f2e <_malloc_r+0xf6>
 8007e7c:	f8d8 4000 	ldr.w	r4, [r8]
 8007e80:	4627      	mov	r7, r4
 8007e82:	2f00      	cmp	r7, #0
 8007e84:	d143      	bne.n	8007f0e <_malloc_r+0xd6>
 8007e86:	2c00      	cmp	r4, #0
 8007e88:	d04b      	beq.n	8007f22 <_malloc_r+0xea>
 8007e8a:	6823      	ldr	r3, [r4, #0]
 8007e8c:	4639      	mov	r1, r7
 8007e8e:	4630      	mov	r0, r6
 8007e90:	eb04 0903 	add.w	r9, r4, r3
 8007e94:	f000 fc8a 	bl	80087ac <_sbrk_r>
 8007e98:	4581      	cmp	r9, r0
 8007e9a:	d142      	bne.n	8007f22 <_malloc_r+0xea>
 8007e9c:	6821      	ldr	r1, [r4, #0]
 8007e9e:	1a6d      	subs	r5, r5, r1
 8007ea0:	4629      	mov	r1, r5
 8007ea2:	4630      	mov	r0, r6
 8007ea4:	f7ff ffa6 	bl	8007df4 <sbrk_aligned>
 8007ea8:	3001      	adds	r0, #1
 8007eaa:	d03a      	beq.n	8007f22 <_malloc_r+0xea>
 8007eac:	6823      	ldr	r3, [r4, #0]
 8007eae:	442b      	add	r3, r5
 8007eb0:	6023      	str	r3, [r4, #0]
 8007eb2:	f8d8 3000 	ldr.w	r3, [r8]
 8007eb6:	685a      	ldr	r2, [r3, #4]
 8007eb8:	bb62      	cbnz	r2, 8007f14 <_malloc_r+0xdc>
 8007eba:	f8c8 7000 	str.w	r7, [r8]
 8007ebe:	e00f      	b.n	8007ee0 <_malloc_r+0xa8>
 8007ec0:	6822      	ldr	r2, [r4, #0]
 8007ec2:	1b52      	subs	r2, r2, r5
 8007ec4:	d420      	bmi.n	8007f08 <_malloc_r+0xd0>
 8007ec6:	2a0b      	cmp	r2, #11
 8007ec8:	d917      	bls.n	8007efa <_malloc_r+0xc2>
 8007eca:	1961      	adds	r1, r4, r5
 8007ecc:	42a3      	cmp	r3, r4
 8007ece:	6025      	str	r5, [r4, #0]
 8007ed0:	bf18      	it	ne
 8007ed2:	6059      	strne	r1, [r3, #4]
 8007ed4:	6863      	ldr	r3, [r4, #4]
 8007ed6:	bf08      	it	eq
 8007ed8:	f8c8 1000 	streq.w	r1, [r8]
 8007edc:	5162      	str	r2, [r4, r5]
 8007ede:	604b      	str	r3, [r1, #4]
 8007ee0:	4630      	mov	r0, r6
 8007ee2:	f000 f82f 	bl	8007f44 <__malloc_unlock>
 8007ee6:	f104 000b 	add.w	r0, r4, #11
 8007eea:	1d23      	adds	r3, r4, #4
 8007eec:	f020 0007 	bic.w	r0, r0, #7
 8007ef0:	1ac2      	subs	r2, r0, r3
 8007ef2:	bf1c      	itt	ne
 8007ef4:	1a1b      	subne	r3, r3, r0
 8007ef6:	50a3      	strne	r3, [r4, r2]
 8007ef8:	e7af      	b.n	8007e5a <_malloc_r+0x22>
 8007efa:	6862      	ldr	r2, [r4, #4]
 8007efc:	42a3      	cmp	r3, r4
 8007efe:	bf0c      	ite	eq
 8007f00:	f8c8 2000 	streq.w	r2, [r8]
 8007f04:	605a      	strne	r2, [r3, #4]
 8007f06:	e7eb      	b.n	8007ee0 <_malloc_r+0xa8>
 8007f08:	4623      	mov	r3, r4
 8007f0a:	6864      	ldr	r4, [r4, #4]
 8007f0c:	e7ae      	b.n	8007e6c <_malloc_r+0x34>
 8007f0e:	463c      	mov	r4, r7
 8007f10:	687f      	ldr	r7, [r7, #4]
 8007f12:	e7b6      	b.n	8007e82 <_malloc_r+0x4a>
 8007f14:	461a      	mov	r2, r3
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	42a3      	cmp	r3, r4
 8007f1a:	d1fb      	bne.n	8007f14 <_malloc_r+0xdc>
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	6053      	str	r3, [r2, #4]
 8007f20:	e7de      	b.n	8007ee0 <_malloc_r+0xa8>
 8007f22:	230c      	movs	r3, #12
 8007f24:	6033      	str	r3, [r6, #0]
 8007f26:	4630      	mov	r0, r6
 8007f28:	f000 f80c 	bl	8007f44 <__malloc_unlock>
 8007f2c:	e794      	b.n	8007e58 <_malloc_r+0x20>
 8007f2e:	6005      	str	r5, [r0, #0]
 8007f30:	e7d6      	b.n	8007ee0 <_malloc_r+0xa8>
 8007f32:	bf00      	nop
 8007f34:	20004598 	.word	0x20004598

08007f38 <__malloc_lock>:
 8007f38:	4801      	ldr	r0, [pc, #4]	@ (8007f40 <__malloc_lock+0x8>)
 8007f3a:	f7ff b8ac 	b.w	8007096 <__retarget_lock_acquire_recursive>
 8007f3e:	bf00      	nop
 8007f40:	20004590 	.word	0x20004590

08007f44 <__malloc_unlock>:
 8007f44:	4801      	ldr	r0, [pc, #4]	@ (8007f4c <__malloc_unlock+0x8>)
 8007f46:	f7ff b8a7 	b.w	8007098 <__retarget_lock_release_recursive>
 8007f4a:	bf00      	nop
 8007f4c:	20004590 	.word	0x20004590

08007f50 <_Balloc>:
 8007f50:	b570      	push	{r4, r5, r6, lr}
 8007f52:	69c6      	ldr	r6, [r0, #28]
 8007f54:	4604      	mov	r4, r0
 8007f56:	460d      	mov	r5, r1
 8007f58:	b976      	cbnz	r6, 8007f78 <_Balloc+0x28>
 8007f5a:	2010      	movs	r0, #16
 8007f5c:	f7ff ff42 	bl	8007de4 <malloc>
 8007f60:	4602      	mov	r2, r0
 8007f62:	61e0      	str	r0, [r4, #28]
 8007f64:	b920      	cbnz	r0, 8007f70 <_Balloc+0x20>
 8007f66:	4b18      	ldr	r3, [pc, #96]	@ (8007fc8 <_Balloc+0x78>)
 8007f68:	4818      	ldr	r0, [pc, #96]	@ (8007fcc <_Balloc+0x7c>)
 8007f6a:	216b      	movs	r1, #107	@ 0x6b
 8007f6c:	f000 fc2e 	bl	80087cc <__assert_func>
 8007f70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f74:	6006      	str	r6, [r0, #0]
 8007f76:	60c6      	str	r6, [r0, #12]
 8007f78:	69e6      	ldr	r6, [r4, #28]
 8007f7a:	68f3      	ldr	r3, [r6, #12]
 8007f7c:	b183      	cbz	r3, 8007fa0 <_Balloc+0x50>
 8007f7e:	69e3      	ldr	r3, [r4, #28]
 8007f80:	68db      	ldr	r3, [r3, #12]
 8007f82:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007f86:	b9b8      	cbnz	r0, 8007fb8 <_Balloc+0x68>
 8007f88:	2101      	movs	r1, #1
 8007f8a:	fa01 f605 	lsl.w	r6, r1, r5
 8007f8e:	1d72      	adds	r2, r6, #5
 8007f90:	0092      	lsls	r2, r2, #2
 8007f92:	4620      	mov	r0, r4
 8007f94:	f000 fc38 	bl	8008808 <_calloc_r>
 8007f98:	b160      	cbz	r0, 8007fb4 <_Balloc+0x64>
 8007f9a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007f9e:	e00e      	b.n	8007fbe <_Balloc+0x6e>
 8007fa0:	2221      	movs	r2, #33	@ 0x21
 8007fa2:	2104      	movs	r1, #4
 8007fa4:	4620      	mov	r0, r4
 8007fa6:	f000 fc2f 	bl	8008808 <_calloc_r>
 8007faa:	69e3      	ldr	r3, [r4, #28]
 8007fac:	60f0      	str	r0, [r6, #12]
 8007fae:	68db      	ldr	r3, [r3, #12]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d1e4      	bne.n	8007f7e <_Balloc+0x2e>
 8007fb4:	2000      	movs	r0, #0
 8007fb6:	bd70      	pop	{r4, r5, r6, pc}
 8007fb8:	6802      	ldr	r2, [r0, #0]
 8007fba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007fc4:	e7f7      	b.n	8007fb6 <_Balloc+0x66>
 8007fc6:	bf00      	nop
 8007fc8:	08008e95 	.word	0x08008e95
 8007fcc:	08008f15 	.word	0x08008f15

08007fd0 <_Bfree>:
 8007fd0:	b570      	push	{r4, r5, r6, lr}
 8007fd2:	69c6      	ldr	r6, [r0, #28]
 8007fd4:	4605      	mov	r5, r0
 8007fd6:	460c      	mov	r4, r1
 8007fd8:	b976      	cbnz	r6, 8007ff8 <_Bfree+0x28>
 8007fda:	2010      	movs	r0, #16
 8007fdc:	f7ff ff02 	bl	8007de4 <malloc>
 8007fe0:	4602      	mov	r2, r0
 8007fe2:	61e8      	str	r0, [r5, #28]
 8007fe4:	b920      	cbnz	r0, 8007ff0 <_Bfree+0x20>
 8007fe6:	4b09      	ldr	r3, [pc, #36]	@ (800800c <_Bfree+0x3c>)
 8007fe8:	4809      	ldr	r0, [pc, #36]	@ (8008010 <_Bfree+0x40>)
 8007fea:	218f      	movs	r1, #143	@ 0x8f
 8007fec:	f000 fbee 	bl	80087cc <__assert_func>
 8007ff0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ff4:	6006      	str	r6, [r0, #0]
 8007ff6:	60c6      	str	r6, [r0, #12]
 8007ff8:	b13c      	cbz	r4, 800800a <_Bfree+0x3a>
 8007ffa:	69eb      	ldr	r3, [r5, #28]
 8007ffc:	6862      	ldr	r2, [r4, #4]
 8007ffe:	68db      	ldr	r3, [r3, #12]
 8008000:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008004:	6021      	str	r1, [r4, #0]
 8008006:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800800a:	bd70      	pop	{r4, r5, r6, pc}
 800800c:	08008e95 	.word	0x08008e95
 8008010:	08008f15 	.word	0x08008f15

08008014 <__multadd>:
 8008014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008018:	690d      	ldr	r5, [r1, #16]
 800801a:	4607      	mov	r7, r0
 800801c:	460c      	mov	r4, r1
 800801e:	461e      	mov	r6, r3
 8008020:	f101 0c14 	add.w	ip, r1, #20
 8008024:	2000      	movs	r0, #0
 8008026:	f8dc 3000 	ldr.w	r3, [ip]
 800802a:	b299      	uxth	r1, r3
 800802c:	fb02 6101 	mla	r1, r2, r1, r6
 8008030:	0c1e      	lsrs	r6, r3, #16
 8008032:	0c0b      	lsrs	r3, r1, #16
 8008034:	fb02 3306 	mla	r3, r2, r6, r3
 8008038:	b289      	uxth	r1, r1
 800803a:	3001      	adds	r0, #1
 800803c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008040:	4285      	cmp	r5, r0
 8008042:	f84c 1b04 	str.w	r1, [ip], #4
 8008046:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800804a:	dcec      	bgt.n	8008026 <__multadd+0x12>
 800804c:	b30e      	cbz	r6, 8008092 <__multadd+0x7e>
 800804e:	68a3      	ldr	r3, [r4, #8]
 8008050:	42ab      	cmp	r3, r5
 8008052:	dc19      	bgt.n	8008088 <__multadd+0x74>
 8008054:	6861      	ldr	r1, [r4, #4]
 8008056:	4638      	mov	r0, r7
 8008058:	3101      	adds	r1, #1
 800805a:	f7ff ff79 	bl	8007f50 <_Balloc>
 800805e:	4680      	mov	r8, r0
 8008060:	b928      	cbnz	r0, 800806e <__multadd+0x5a>
 8008062:	4602      	mov	r2, r0
 8008064:	4b0c      	ldr	r3, [pc, #48]	@ (8008098 <__multadd+0x84>)
 8008066:	480d      	ldr	r0, [pc, #52]	@ (800809c <__multadd+0x88>)
 8008068:	21ba      	movs	r1, #186	@ 0xba
 800806a:	f000 fbaf 	bl	80087cc <__assert_func>
 800806e:	6922      	ldr	r2, [r4, #16]
 8008070:	3202      	adds	r2, #2
 8008072:	f104 010c 	add.w	r1, r4, #12
 8008076:	0092      	lsls	r2, r2, #2
 8008078:	300c      	adds	r0, #12
 800807a:	f7ff f80e 	bl	800709a <memcpy>
 800807e:	4621      	mov	r1, r4
 8008080:	4638      	mov	r0, r7
 8008082:	f7ff ffa5 	bl	8007fd0 <_Bfree>
 8008086:	4644      	mov	r4, r8
 8008088:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800808c:	3501      	adds	r5, #1
 800808e:	615e      	str	r6, [r3, #20]
 8008090:	6125      	str	r5, [r4, #16]
 8008092:	4620      	mov	r0, r4
 8008094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008098:	08008f04 	.word	0x08008f04
 800809c:	08008f15 	.word	0x08008f15

080080a0 <__hi0bits>:
 80080a0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80080a4:	4603      	mov	r3, r0
 80080a6:	bf36      	itet	cc
 80080a8:	0403      	lslcc	r3, r0, #16
 80080aa:	2000      	movcs	r0, #0
 80080ac:	2010      	movcc	r0, #16
 80080ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80080b2:	bf3c      	itt	cc
 80080b4:	021b      	lslcc	r3, r3, #8
 80080b6:	3008      	addcc	r0, #8
 80080b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80080bc:	bf3c      	itt	cc
 80080be:	011b      	lslcc	r3, r3, #4
 80080c0:	3004      	addcc	r0, #4
 80080c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080c6:	bf3c      	itt	cc
 80080c8:	009b      	lslcc	r3, r3, #2
 80080ca:	3002      	addcc	r0, #2
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	db05      	blt.n	80080dc <__hi0bits+0x3c>
 80080d0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80080d4:	f100 0001 	add.w	r0, r0, #1
 80080d8:	bf08      	it	eq
 80080da:	2020      	moveq	r0, #32
 80080dc:	4770      	bx	lr

080080de <__lo0bits>:
 80080de:	6803      	ldr	r3, [r0, #0]
 80080e0:	4602      	mov	r2, r0
 80080e2:	f013 0007 	ands.w	r0, r3, #7
 80080e6:	d00b      	beq.n	8008100 <__lo0bits+0x22>
 80080e8:	07d9      	lsls	r1, r3, #31
 80080ea:	d421      	bmi.n	8008130 <__lo0bits+0x52>
 80080ec:	0798      	lsls	r0, r3, #30
 80080ee:	bf49      	itett	mi
 80080f0:	085b      	lsrmi	r3, r3, #1
 80080f2:	089b      	lsrpl	r3, r3, #2
 80080f4:	2001      	movmi	r0, #1
 80080f6:	6013      	strmi	r3, [r2, #0]
 80080f8:	bf5c      	itt	pl
 80080fa:	6013      	strpl	r3, [r2, #0]
 80080fc:	2002      	movpl	r0, #2
 80080fe:	4770      	bx	lr
 8008100:	b299      	uxth	r1, r3
 8008102:	b909      	cbnz	r1, 8008108 <__lo0bits+0x2a>
 8008104:	0c1b      	lsrs	r3, r3, #16
 8008106:	2010      	movs	r0, #16
 8008108:	b2d9      	uxtb	r1, r3
 800810a:	b909      	cbnz	r1, 8008110 <__lo0bits+0x32>
 800810c:	3008      	adds	r0, #8
 800810e:	0a1b      	lsrs	r3, r3, #8
 8008110:	0719      	lsls	r1, r3, #28
 8008112:	bf04      	itt	eq
 8008114:	091b      	lsreq	r3, r3, #4
 8008116:	3004      	addeq	r0, #4
 8008118:	0799      	lsls	r1, r3, #30
 800811a:	bf04      	itt	eq
 800811c:	089b      	lsreq	r3, r3, #2
 800811e:	3002      	addeq	r0, #2
 8008120:	07d9      	lsls	r1, r3, #31
 8008122:	d403      	bmi.n	800812c <__lo0bits+0x4e>
 8008124:	085b      	lsrs	r3, r3, #1
 8008126:	f100 0001 	add.w	r0, r0, #1
 800812a:	d003      	beq.n	8008134 <__lo0bits+0x56>
 800812c:	6013      	str	r3, [r2, #0]
 800812e:	4770      	bx	lr
 8008130:	2000      	movs	r0, #0
 8008132:	4770      	bx	lr
 8008134:	2020      	movs	r0, #32
 8008136:	4770      	bx	lr

08008138 <__i2b>:
 8008138:	b510      	push	{r4, lr}
 800813a:	460c      	mov	r4, r1
 800813c:	2101      	movs	r1, #1
 800813e:	f7ff ff07 	bl	8007f50 <_Balloc>
 8008142:	4602      	mov	r2, r0
 8008144:	b928      	cbnz	r0, 8008152 <__i2b+0x1a>
 8008146:	4b05      	ldr	r3, [pc, #20]	@ (800815c <__i2b+0x24>)
 8008148:	4805      	ldr	r0, [pc, #20]	@ (8008160 <__i2b+0x28>)
 800814a:	f240 1145 	movw	r1, #325	@ 0x145
 800814e:	f000 fb3d 	bl	80087cc <__assert_func>
 8008152:	2301      	movs	r3, #1
 8008154:	6144      	str	r4, [r0, #20]
 8008156:	6103      	str	r3, [r0, #16]
 8008158:	bd10      	pop	{r4, pc}
 800815a:	bf00      	nop
 800815c:	08008f04 	.word	0x08008f04
 8008160:	08008f15 	.word	0x08008f15

08008164 <__multiply>:
 8008164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008168:	4614      	mov	r4, r2
 800816a:	690a      	ldr	r2, [r1, #16]
 800816c:	6923      	ldr	r3, [r4, #16]
 800816e:	429a      	cmp	r2, r3
 8008170:	bfa8      	it	ge
 8008172:	4623      	movge	r3, r4
 8008174:	460f      	mov	r7, r1
 8008176:	bfa4      	itt	ge
 8008178:	460c      	movge	r4, r1
 800817a:	461f      	movge	r7, r3
 800817c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008180:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008184:	68a3      	ldr	r3, [r4, #8]
 8008186:	6861      	ldr	r1, [r4, #4]
 8008188:	eb0a 0609 	add.w	r6, sl, r9
 800818c:	42b3      	cmp	r3, r6
 800818e:	b085      	sub	sp, #20
 8008190:	bfb8      	it	lt
 8008192:	3101      	addlt	r1, #1
 8008194:	f7ff fedc 	bl	8007f50 <_Balloc>
 8008198:	b930      	cbnz	r0, 80081a8 <__multiply+0x44>
 800819a:	4602      	mov	r2, r0
 800819c:	4b44      	ldr	r3, [pc, #272]	@ (80082b0 <__multiply+0x14c>)
 800819e:	4845      	ldr	r0, [pc, #276]	@ (80082b4 <__multiply+0x150>)
 80081a0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80081a4:	f000 fb12 	bl	80087cc <__assert_func>
 80081a8:	f100 0514 	add.w	r5, r0, #20
 80081ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80081b0:	462b      	mov	r3, r5
 80081b2:	2200      	movs	r2, #0
 80081b4:	4543      	cmp	r3, r8
 80081b6:	d321      	bcc.n	80081fc <__multiply+0x98>
 80081b8:	f107 0114 	add.w	r1, r7, #20
 80081bc:	f104 0214 	add.w	r2, r4, #20
 80081c0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80081c4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80081c8:	9302      	str	r3, [sp, #8]
 80081ca:	1b13      	subs	r3, r2, r4
 80081cc:	3b15      	subs	r3, #21
 80081ce:	f023 0303 	bic.w	r3, r3, #3
 80081d2:	3304      	adds	r3, #4
 80081d4:	f104 0715 	add.w	r7, r4, #21
 80081d8:	42ba      	cmp	r2, r7
 80081da:	bf38      	it	cc
 80081dc:	2304      	movcc	r3, #4
 80081de:	9301      	str	r3, [sp, #4]
 80081e0:	9b02      	ldr	r3, [sp, #8]
 80081e2:	9103      	str	r1, [sp, #12]
 80081e4:	428b      	cmp	r3, r1
 80081e6:	d80c      	bhi.n	8008202 <__multiply+0x9e>
 80081e8:	2e00      	cmp	r6, #0
 80081ea:	dd03      	ble.n	80081f4 <__multiply+0x90>
 80081ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d05b      	beq.n	80082ac <__multiply+0x148>
 80081f4:	6106      	str	r6, [r0, #16]
 80081f6:	b005      	add	sp, #20
 80081f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081fc:	f843 2b04 	str.w	r2, [r3], #4
 8008200:	e7d8      	b.n	80081b4 <__multiply+0x50>
 8008202:	f8b1 a000 	ldrh.w	sl, [r1]
 8008206:	f1ba 0f00 	cmp.w	sl, #0
 800820a:	d024      	beq.n	8008256 <__multiply+0xf2>
 800820c:	f104 0e14 	add.w	lr, r4, #20
 8008210:	46a9      	mov	r9, r5
 8008212:	f04f 0c00 	mov.w	ip, #0
 8008216:	f85e 7b04 	ldr.w	r7, [lr], #4
 800821a:	f8d9 3000 	ldr.w	r3, [r9]
 800821e:	fa1f fb87 	uxth.w	fp, r7
 8008222:	b29b      	uxth	r3, r3
 8008224:	fb0a 330b 	mla	r3, sl, fp, r3
 8008228:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800822c:	f8d9 7000 	ldr.w	r7, [r9]
 8008230:	4463      	add	r3, ip
 8008232:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008236:	fb0a c70b 	mla	r7, sl, fp, ip
 800823a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800823e:	b29b      	uxth	r3, r3
 8008240:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008244:	4572      	cmp	r2, lr
 8008246:	f849 3b04 	str.w	r3, [r9], #4
 800824a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800824e:	d8e2      	bhi.n	8008216 <__multiply+0xb2>
 8008250:	9b01      	ldr	r3, [sp, #4]
 8008252:	f845 c003 	str.w	ip, [r5, r3]
 8008256:	9b03      	ldr	r3, [sp, #12]
 8008258:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800825c:	3104      	adds	r1, #4
 800825e:	f1b9 0f00 	cmp.w	r9, #0
 8008262:	d021      	beq.n	80082a8 <__multiply+0x144>
 8008264:	682b      	ldr	r3, [r5, #0]
 8008266:	f104 0c14 	add.w	ip, r4, #20
 800826a:	46ae      	mov	lr, r5
 800826c:	f04f 0a00 	mov.w	sl, #0
 8008270:	f8bc b000 	ldrh.w	fp, [ip]
 8008274:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008278:	fb09 770b 	mla	r7, r9, fp, r7
 800827c:	4457      	add	r7, sl
 800827e:	b29b      	uxth	r3, r3
 8008280:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008284:	f84e 3b04 	str.w	r3, [lr], #4
 8008288:	f85c 3b04 	ldr.w	r3, [ip], #4
 800828c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008290:	f8be 3000 	ldrh.w	r3, [lr]
 8008294:	fb09 330a 	mla	r3, r9, sl, r3
 8008298:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800829c:	4562      	cmp	r2, ip
 800829e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80082a2:	d8e5      	bhi.n	8008270 <__multiply+0x10c>
 80082a4:	9f01      	ldr	r7, [sp, #4]
 80082a6:	51eb      	str	r3, [r5, r7]
 80082a8:	3504      	adds	r5, #4
 80082aa:	e799      	b.n	80081e0 <__multiply+0x7c>
 80082ac:	3e01      	subs	r6, #1
 80082ae:	e79b      	b.n	80081e8 <__multiply+0x84>
 80082b0:	08008f04 	.word	0x08008f04
 80082b4:	08008f15 	.word	0x08008f15

080082b8 <__pow5mult>:
 80082b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082bc:	4615      	mov	r5, r2
 80082be:	f012 0203 	ands.w	r2, r2, #3
 80082c2:	4607      	mov	r7, r0
 80082c4:	460e      	mov	r6, r1
 80082c6:	d007      	beq.n	80082d8 <__pow5mult+0x20>
 80082c8:	4c25      	ldr	r4, [pc, #148]	@ (8008360 <__pow5mult+0xa8>)
 80082ca:	3a01      	subs	r2, #1
 80082cc:	2300      	movs	r3, #0
 80082ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80082d2:	f7ff fe9f 	bl	8008014 <__multadd>
 80082d6:	4606      	mov	r6, r0
 80082d8:	10ad      	asrs	r5, r5, #2
 80082da:	d03d      	beq.n	8008358 <__pow5mult+0xa0>
 80082dc:	69fc      	ldr	r4, [r7, #28]
 80082de:	b97c      	cbnz	r4, 8008300 <__pow5mult+0x48>
 80082e0:	2010      	movs	r0, #16
 80082e2:	f7ff fd7f 	bl	8007de4 <malloc>
 80082e6:	4602      	mov	r2, r0
 80082e8:	61f8      	str	r0, [r7, #28]
 80082ea:	b928      	cbnz	r0, 80082f8 <__pow5mult+0x40>
 80082ec:	4b1d      	ldr	r3, [pc, #116]	@ (8008364 <__pow5mult+0xac>)
 80082ee:	481e      	ldr	r0, [pc, #120]	@ (8008368 <__pow5mult+0xb0>)
 80082f0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80082f4:	f000 fa6a 	bl	80087cc <__assert_func>
 80082f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80082fc:	6004      	str	r4, [r0, #0]
 80082fe:	60c4      	str	r4, [r0, #12]
 8008300:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008304:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008308:	b94c      	cbnz	r4, 800831e <__pow5mult+0x66>
 800830a:	f240 2171 	movw	r1, #625	@ 0x271
 800830e:	4638      	mov	r0, r7
 8008310:	f7ff ff12 	bl	8008138 <__i2b>
 8008314:	2300      	movs	r3, #0
 8008316:	f8c8 0008 	str.w	r0, [r8, #8]
 800831a:	4604      	mov	r4, r0
 800831c:	6003      	str	r3, [r0, #0]
 800831e:	f04f 0900 	mov.w	r9, #0
 8008322:	07eb      	lsls	r3, r5, #31
 8008324:	d50a      	bpl.n	800833c <__pow5mult+0x84>
 8008326:	4631      	mov	r1, r6
 8008328:	4622      	mov	r2, r4
 800832a:	4638      	mov	r0, r7
 800832c:	f7ff ff1a 	bl	8008164 <__multiply>
 8008330:	4631      	mov	r1, r6
 8008332:	4680      	mov	r8, r0
 8008334:	4638      	mov	r0, r7
 8008336:	f7ff fe4b 	bl	8007fd0 <_Bfree>
 800833a:	4646      	mov	r6, r8
 800833c:	106d      	asrs	r5, r5, #1
 800833e:	d00b      	beq.n	8008358 <__pow5mult+0xa0>
 8008340:	6820      	ldr	r0, [r4, #0]
 8008342:	b938      	cbnz	r0, 8008354 <__pow5mult+0x9c>
 8008344:	4622      	mov	r2, r4
 8008346:	4621      	mov	r1, r4
 8008348:	4638      	mov	r0, r7
 800834a:	f7ff ff0b 	bl	8008164 <__multiply>
 800834e:	6020      	str	r0, [r4, #0]
 8008350:	f8c0 9000 	str.w	r9, [r0]
 8008354:	4604      	mov	r4, r0
 8008356:	e7e4      	b.n	8008322 <__pow5mult+0x6a>
 8008358:	4630      	mov	r0, r6
 800835a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800835e:	bf00      	nop
 8008360:	08008f70 	.word	0x08008f70
 8008364:	08008e95 	.word	0x08008e95
 8008368:	08008f15 	.word	0x08008f15

0800836c <__lshift>:
 800836c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008370:	460c      	mov	r4, r1
 8008372:	6849      	ldr	r1, [r1, #4]
 8008374:	6923      	ldr	r3, [r4, #16]
 8008376:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800837a:	68a3      	ldr	r3, [r4, #8]
 800837c:	4607      	mov	r7, r0
 800837e:	4691      	mov	r9, r2
 8008380:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008384:	f108 0601 	add.w	r6, r8, #1
 8008388:	42b3      	cmp	r3, r6
 800838a:	db0b      	blt.n	80083a4 <__lshift+0x38>
 800838c:	4638      	mov	r0, r7
 800838e:	f7ff fddf 	bl	8007f50 <_Balloc>
 8008392:	4605      	mov	r5, r0
 8008394:	b948      	cbnz	r0, 80083aa <__lshift+0x3e>
 8008396:	4602      	mov	r2, r0
 8008398:	4b28      	ldr	r3, [pc, #160]	@ (800843c <__lshift+0xd0>)
 800839a:	4829      	ldr	r0, [pc, #164]	@ (8008440 <__lshift+0xd4>)
 800839c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80083a0:	f000 fa14 	bl	80087cc <__assert_func>
 80083a4:	3101      	adds	r1, #1
 80083a6:	005b      	lsls	r3, r3, #1
 80083a8:	e7ee      	b.n	8008388 <__lshift+0x1c>
 80083aa:	2300      	movs	r3, #0
 80083ac:	f100 0114 	add.w	r1, r0, #20
 80083b0:	f100 0210 	add.w	r2, r0, #16
 80083b4:	4618      	mov	r0, r3
 80083b6:	4553      	cmp	r3, sl
 80083b8:	db33      	blt.n	8008422 <__lshift+0xb6>
 80083ba:	6920      	ldr	r0, [r4, #16]
 80083bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80083c0:	f104 0314 	add.w	r3, r4, #20
 80083c4:	f019 091f 	ands.w	r9, r9, #31
 80083c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80083cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80083d0:	d02b      	beq.n	800842a <__lshift+0xbe>
 80083d2:	f1c9 0e20 	rsb	lr, r9, #32
 80083d6:	468a      	mov	sl, r1
 80083d8:	2200      	movs	r2, #0
 80083da:	6818      	ldr	r0, [r3, #0]
 80083dc:	fa00 f009 	lsl.w	r0, r0, r9
 80083e0:	4310      	orrs	r0, r2
 80083e2:	f84a 0b04 	str.w	r0, [sl], #4
 80083e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80083ea:	459c      	cmp	ip, r3
 80083ec:	fa22 f20e 	lsr.w	r2, r2, lr
 80083f0:	d8f3      	bhi.n	80083da <__lshift+0x6e>
 80083f2:	ebac 0304 	sub.w	r3, ip, r4
 80083f6:	3b15      	subs	r3, #21
 80083f8:	f023 0303 	bic.w	r3, r3, #3
 80083fc:	3304      	adds	r3, #4
 80083fe:	f104 0015 	add.w	r0, r4, #21
 8008402:	4584      	cmp	ip, r0
 8008404:	bf38      	it	cc
 8008406:	2304      	movcc	r3, #4
 8008408:	50ca      	str	r2, [r1, r3]
 800840a:	b10a      	cbz	r2, 8008410 <__lshift+0xa4>
 800840c:	f108 0602 	add.w	r6, r8, #2
 8008410:	3e01      	subs	r6, #1
 8008412:	4638      	mov	r0, r7
 8008414:	612e      	str	r6, [r5, #16]
 8008416:	4621      	mov	r1, r4
 8008418:	f7ff fdda 	bl	8007fd0 <_Bfree>
 800841c:	4628      	mov	r0, r5
 800841e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008422:	f842 0f04 	str.w	r0, [r2, #4]!
 8008426:	3301      	adds	r3, #1
 8008428:	e7c5      	b.n	80083b6 <__lshift+0x4a>
 800842a:	3904      	subs	r1, #4
 800842c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008430:	f841 2f04 	str.w	r2, [r1, #4]!
 8008434:	459c      	cmp	ip, r3
 8008436:	d8f9      	bhi.n	800842c <__lshift+0xc0>
 8008438:	e7ea      	b.n	8008410 <__lshift+0xa4>
 800843a:	bf00      	nop
 800843c:	08008f04 	.word	0x08008f04
 8008440:	08008f15 	.word	0x08008f15

08008444 <__mcmp>:
 8008444:	690a      	ldr	r2, [r1, #16]
 8008446:	4603      	mov	r3, r0
 8008448:	6900      	ldr	r0, [r0, #16]
 800844a:	1a80      	subs	r0, r0, r2
 800844c:	b530      	push	{r4, r5, lr}
 800844e:	d10e      	bne.n	800846e <__mcmp+0x2a>
 8008450:	3314      	adds	r3, #20
 8008452:	3114      	adds	r1, #20
 8008454:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008458:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800845c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008460:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008464:	4295      	cmp	r5, r2
 8008466:	d003      	beq.n	8008470 <__mcmp+0x2c>
 8008468:	d205      	bcs.n	8008476 <__mcmp+0x32>
 800846a:	f04f 30ff 	mov.w	r0, #4294967295
 800846e:	bd30      	pop	{r4, r5, pc}
 8008470:	42a3      	cmp	r3, r4
 8008472:	d3f3      	bcc.n	800845c <__mcmp+0x18>
 8008474:	e7fb      	b.n	800846e <__mcmp+0x2a>
 8008476:	2001      	movs	r0, #1
 8008478:	e7f9      	b.n	800846e <__mcmp+0x2a>
	...

0800847c <__mdiff>:
 800847c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008480:	4689      	mov	r9, r1
 8008482:	4606      	mov	r6, r0
 8008484:	4611      	mov	r1, r2
 8008486:	4648      	mov	r0, r9
 8008488:	4614      	mov	r4, r2
 800848a:	f7ff ffdb 	bl	8008444 <__mcmp>
 800848e:	1e05      	subs	r5, r0, #0
 8008490:	d112      	bne.n	80084b8 <__mdiff+0x3c>
 8008492:	4629      	mov	r1, r5
 8008494:	4630      	mov	r0, r6
 8008496:	f7ff fd5b 	bl	8007f50 <_Balloc>
 800849a:	4602      	mov	r2, r0
 800849c:	b928      	cbnz	r0, 80084aa <__mdiff+0x2e>
 800849e:	4b3f      	ldr	r3, [pc, #252]	@ (800859c <__mdiff+0x120>)
 80084a0:	f240 2137 	movw	r1, #567	@ 0x237
 80084a4:	483e      	ldr	r0, [pc, #248]	@ (80085a0 <__mdiff+0x124>)
 80084a6:	f000 f991 	bl	80087cc <__assert_func>
 80084aa:	2301      	movs	r3, #1
 80084ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80084b0:	4610      	mov	r0, r2
 80084b2:	b003      	add	sp, #12
 80084b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084b8:	bfbc      	itt	lt
 80084ba:	464b      	movlt	r3, r9
 80084bc:	46a1      	movlt	r9, r4
 80084be:	4630      	mov	r0, r6
 80084c0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80084c4:	bfba      	itte	lt
 80084c6:	461c      	movlt	r4, r3
 80084c8:	2501      	movlt	r5, #1
 80084ca:	2500      	movge	r5, #0
 80084cc:	f7ff fd40 	bl	8007f50 <_Balloc>
 80084d0:	4602      	mov	r2, r0
 80084d2:	b918      	cbnz	r0, 80084dc <__mdiff+0x60>
 80084d4:	4b31      	ldr	r3, [pc, #196]	@ (800859c <__mdiff+0x120>)
 80084d6:	f240 2145 	movw	r1, #581	@ 0x245
 80084da:	e7e3      	b.n	80084a4 <__mdiff+0x28>
 80084dc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80084e0:	6926      	ldr	r6, [r4, #16]
 80084e2:	60c5      	str	r5, [r0, #12]
 80084e4:	f109 0310 	add.w	r3, r9, #16
 80084e8:	f109 0514 	add.w	r5, r9, #20
 80084ec:	f104 0e14 	add.w	lr, r4, #20
 80084f0:	f100 0b14 	add.w	fp, r0, #20
 80084f4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80084f8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80084fc:	9301      	str	r3, [sp, #4]
 80084fe:	46d9      	mov	r9, fp
 8008500:	f04f 0c00 	mov.w	ip, #0
 8008504:	9b01      	ldr	r3, [sp, #4]
 8008506:	f85e 0b04 	ldr.w	r0, [lr], #4
 800850a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800850e:	9301      	str	r3, [sp, #4]
 8008510:	fa1f f38a 	uxth.w	r3, sl
 8008514:	4619      	mov	r1, r3
 8008516:	b283      	uxth	r3, r0
 8008518:	1acb      	subs	r3, r1, r3
 800851a:	0c00      	lsrs	r0, r0, #16
 800851c:	4463      	add	r3, ip
 800851e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008522:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008526:	b29b      	uxth	r3, r3
 8008528:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800852c:	4576      	cmp	r6, lr
 800852e:	f849 3b04 	str.w	r3, [r9], #4
 8008532:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008536:	d8e5      	bhi.n	8008504 <__mdiff+0x88>
 8008538:	1b33      	subs	r3, r6, r4
 800853a:	3b15      	subs	r3, #21
 800853c:	f023 0303 	bic.w	r3, r3, #3
 8008540:	3415      	adds	r4, #21
 8008542:	3304      	adds	r3, #4
 8008544:	42a6      	cmp	r6, r4
 8008546:	bf38      	it	cc
 8008548:	2304      	movcc	r3, #4
 800854a:	441d      	add	r5, r3
 800854c:	445b      	add	r3, fp
 800854e:	461e      	mov	r6, r3
 8008550:	462c      	mov	r4, r5
 8008552:	4544      	cmp	r4, r8
 8008554:	d30e      	bcc.n	8008574 <__mdiff+0xf8>
 8008556:	f108 0103 	add.w	r1, r8, #3
 800855a:	1b49      	subs	r1, r1, r5
 800855c:	f021 0103 	bic.w	r1, r1, #3
 8008560:	3d03      	subs	r5, #3
 8008562:	45a8      	cmp	r8, r5
 8008564:	bf38      	it	cc
 8008566:	2100      	movcc	r1, #0
 8008568:	440b      	add	r3, r1
 800856a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800856e:	b191      	cbz	r1, 8008596 <__mdiff+0x11a>
 8008570:	6117      	str	r7, [r2, #16]
 8008572:	e79d      	b.n	80084b0 <__mdiff+0x34>
 8008574:	f854 1b04 	ldr.w	r1, [r4], #4
 8008578:	46e6      	mov	lr, ip
 800857a:	0c08      	lsrs	r0, r1, #16
 800857c:	fa1c fc81 	uxtah	ip, ip, r1
 8008580:	4471      	add	r1, lr
 8008582:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008586:	b289      	uxth	r1, r1
 8008588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800858c:	f846 1b04 	str.w	r1, [r6], #4
 8008590:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008594:	e7dd      	b.n	8008552 <__mdiff+0xd6>
 8008596:	3f01      	subs	r7, #1
 8008598:	e7e7      	b.n	800856a <__mdiff+0xee>
 800859a:	bf00      	nop
 800859c:	08008f04 	.word	0x08008f04
 80085a0:	08008f15 	.word	0x08008f15

080085a4 <__d2b>:
 80085a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80085a8:	460f      	mov	r7, r1
 80085aa:	2101      	movs	r1, #1
 80085ac:	ec59 8b10 	vmov	r8, r9, d0
 80085b0:	4616      	mov	r6, r2
 80085b2:	f7ff fccd 	bl	8007f50 <_Balloc>
 80085b6:	4604      	mov	r4, r0
 80085b8:	b930      	cbnz	r0, 80085c8 <__d2b+0x24>
 80085ba:	4602      	mov	r2, r0
 80085bc:	4b23      	ldr	r3, [pc, #140]	@ (800864c <__d2b+0xa8>)
 80085be:	4824      	ldr	r0, [pc, #144]	@ (8008650 <__d2b+0xac>)
 80085c0:	f240 310f 	movw	r1, #783	@ 0x30f
 80085c4:	f000 f902 	bl	80087cc <__assert_func>
 80085c8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80085cc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80085d0:	b10d      	cbz	r5, 80085d6 <__d2b+0x32>
 80085d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80085d6:	9301      	str	r3, [sp, #4]
 80085d8:	f1b8 0300 	subs.w	r3, r8, #0
 80085dc:	d023      	beq.n	8008626 <__d2b+0x82>
 80085de:	4668      	mov	r0, sp
 80085e0:	9300      	str	r3, [sp, #0]
 80085e2:	f7ff fd7c 	bl	80080de <__lo0bits>
 80085e6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80085ea:	b1d0      	cbz	r0, 8008622 <__d2b+0x7e>
 80085ec:	f1c0 0320 	rsb	r3, r0, #32
 80085f0:	fa02 f303 	lsl.w	r3, r2, r3
 80085f4:	430b      	orrs	r3, r1
 80085f6:	40c2      	lsrs	r2, r0
 80085f8:	6163      	str	r3, [r4, #20]
 80085fa:	9201      	str	r2, [sp, #4]
 80085fc:	9b01      	ldr	r3, [sp, #4]
 80085fe:	61a3      	str	r3, [r4, #24]
 8008600:	2b00      	cmp	r3, #0
 8008602:	bf0c      	ite	eq
 8008604:	2201      	moveq	r2, #1
 8008606:	2202      	movne	r2, #2
 8008608:	6122      	str	r2, [r4, #16]
 800860a:	b1a5      	cbz	r5, 8008636 <__d2b+0x92>
 800860c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008610:	4405      	add	r5, r0
 8008612:	603d      	str	r5, [r7, #0]
 8008614:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008618:	6030      	str	r0, [r6, #0]
 800861a:	4620      	mov	r0, r4
 800861c:	b003      	add	sp, #12
 800861e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008622:	6161      	str	r1, [r4, #20]
 8008624:	e7ea      	b.n	80085fc <__d2b+0x58>
 8008626:	a801      	add	r0, sp, #4
 8008628:	f7ff fd59 	bl	80080de <__lo0bits>
 800862c:	9b01      	ldr	r3, [sp, #4]
 800862e:	6163      	str	r3, [r4, #20]
 8008630:	3020      	adds	r0, #32
 8008632:	2201      	movs	r2, #1
 8008634:	e7e8      	b.n	8008608 <__d2b+0x64>
 8008636:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800863a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800863e:	6038      	str	r0, [r7, #0]
 8008640:	6918      	ldr	r0, [r3, #16]
 8008642:	f7ff fd2d 	bl	80080a0 <__hi0bits>
 8008646:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800864a:	e7e5      	b.n	8008618 <__d2b+0x74>
 800864c:	08008f04 	.word	0x08008f04
 8008650:	08008f15 	.word	0x08008f15

08008654 <__sflush_r>:
 8008654:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800865c:	0716      	lsls	r6, r2, #28
 800865e:	4605      	mov	r5, r0
 8008660:	460c      	mov	r4, r1
 8008662:	d454      	bmi.n	800870e <__sflush_r+0xba>
 8008664:	684b      	ldr	r3, [r1, #4]
 8008666:	2b00      	cmp	r3, #0
 8008668:	dc02      	bgt.n	8008670 <__sflush_r+0x1c>
 800866a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800866c:	2b00      	cmp	r3, #0
 800866e:	dd48      	ble.n	8008702 <__sflush_r+0xae>
 8008670:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008672:	2e00      	cmp	r6, #0
 8008674:	d045      	beq.n	8008702 <__sflush_r+0xae>
 8008676:	2300      	movs	r3, #0
 8008678:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800867c:	682f      	ldr	r7, [r5, #0]
 800867e:	6a21      	ldr	r1, [r4, #32]
 8008680:	602b      	str	r3, [r5, #0]
 8008682:	d030      	beq.n	80086e6 <__sflush_r+0x92>
 8008684:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008686:	89a3      	ldrh	r3, [r4, #12]
 8008688:	0759      	lsls	r1, r3, #29
 800868a:	d505      	bpl.n	8008698 <__sflush_r+0x44>
 800868c:	6863      	ldr	r3, [r4, #4]
 800868e:	1ad2      	subs	r2, r2, r3
 8008690:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008692:	b10b      	cbz	r3, 8008698 <__sflush_r+0x44>
 8008694:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008696:	1ad2      	subs	r2, r2, r3
 8008698:	2300      	movs	r3, #0
 800869a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800869c:	6a21      	ldr	r1, [r4, #32]
 800869e:	4628      	mov	r0, r5
 80086a0:	47b0      	blx	r6
 80086a2:	1c43      	adds	r3, r0, #1
 80086a4:	89a3      	ldrh	r3, [r4, #12]
 80086a6:	d106      	bne.n	80086b6 <__sflush_r+0x62>
 80086a8:	6829      	ldr	r1, [r5, #0]
 80086aa:	291d      	cmp	r1, #29
 80086ac:	d82b      	bhi.n	8008706 <__sflush_r+0xb2>
 80086ae:	4a2a      	ldr	r2, [pc, #168]	@ (8008758 <__sflush_r+0x104>)
 80086b0:	410a      	asrs	r2, r1
 80086b2:	07d6      	lsls	r6, r2, #31
 80086b4:	d427      	bmi.n	8008706 <__sflush_r+0xb2>
 80086b6:	2200      	movs	r2, #0
 80086b8:	6062      	str	r2, [r4, #4]
 80086ba:	04d9      	lsls	r1, r3, #19
 80086bc:	6922      	ldr	r2, [r4, #16]
 80086be:	6022      	str	r2, [r4, #0]
 80086c0:	d504      	bpl.n	80086cc <__sflush_r+0x78>
 80086c2:	1c42      	adds	r2, r0, #1
 80086c4:	d101      	bne.n	80086ca <__sflush_r+0x76>
 80086c6:	682b      	ldr	r3, [r5, #0]
 80086c8:	b903      	cbnz	r3, 80086cc <__sflush_r+0x78>
 80086ca:	6560      	str	r0, [r4, #84]	@ 0x54
 80086cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80086ce:	602f      	str	r7, [r5, #0]
 80086d0:	b1b9      	cbz	r1, 8008702 <__sflush_r+0xae>
 80086d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80086d6:	4299      	cmp	r1, r3
 80086d8:	d002      	beq.n	80086e0 <__sflush_r+0x8c>
 80086da:	4628      	mov	r0, r5
 80086dc:	f7ff fb38 	bl	8007d50 <_free_r>
 80086e0:	2300      	movs	r3, #0
 80086e2:	6363      	str	r3, [r4, #52]	@ 0x34
 80086e4:	e00d      	b.n	8008702 <__sflush_r+0xae>
 80086e6:	2301      	movs	r3, #1
 80086e8:	4628      	mov	r0, r5
 80086ea:	47b0      	blx	r6
 80086ec:	4602      	mov	r2, r0
 80086ee:	1c50      	adds	r0, r2, #1
 80086f0:	d1c9      	bne.n	8008686 <__sflush_r+0x32>
 80086f2:	682b      	ldr	r3, [r5, #0]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d0c6      	beq.n	8008686 <__sflush_r+0x32>
 80086f8:	2b1d      	cmp	r3, #29
 80086fa:	d001      	beq.n	8008700 <__sflush_r+0xac>
 80086fc:	2b16      	cmp	r3, #22
 80086fe:	d11e      	bne.n	800873e <__sflush_r+0xea>
 8008700:	602f      	str	r7, [r5, #0]
 8008702:	2000      	movs	r0, #0
 8008704:	e022      	b.n	800874c <__sflush_r+0xf8>
 8008706:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800870a:	b21b      	sxth	r3, r3
 800870c:	e01b      	b.n	8008746 <__sflush_r+0xf2>
 800870e:	690f      	ldr	r7, [r1, #16]
 8008710:	2f00      	cmp	r7, #0
 8008712:	d0f6      	beq.n	8008702 <__sflush_r+0xae>
 8008714:	0793      	lsls	r3, r2, #30
 8008716:	680e      	ldr	r6, [r1, #0]
 8008718:	bf08      	it	eq
 800871a:	694b      	ldreq	r3, [r1, #20]
 800871c:	600f      	str	r7, [r1, #0]
 800871e:	bf18      	it	ne
 8008720:	2300      	movne	r3, #0
 8008722:	eba6 0807 	sub.w	r8, r6, r7
 8008726:	608b      	str	r3, [r1, #8]
 8008728:	f1b8 0f00 	cmp.w	r8, #0
 800872c:	dde9      	ble.n	8008702 <__sflush_r+0xae>
 800872e:	6a21      	ldr	r1, [r4, #32]
 8008730:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008732:	4643      	mov	r3, r8
 8008734:	463a      	mov	r2, r7
 8008736:	4628      	mov	r0, r5
 8008738:	47b0      	blx	r6
 800873a:	2800      	cmp	r0, #0
 800873c:	dc08      	bgt.n	8008750 <__sflush_r+0xfc>
 800873e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008742:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008746:	81a3      	strh	r3, [r4, #12]
 8008748:	f04f 30ff 	mov.w	r0, #4294967295
 800874c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008750:	4407      	add	r7, r0
 8008752:	eba8 0800 	sub.w	r8, r8, r0
 8008756:	e7e7      	b.n	8008728 <__sflush_r+0xd4>
 8008758:	dfbffffe 	.word	0xdfbffffe

0800875c <_fflush_r>:
 800875c:	b538      	push	{r3, r4, r5, lr}
 800875e:	690b      	ldr	r3, [r1, #16]
 8008760:	4605      	mov	r5, r0
 8008762:	460c      	mov	r4, r1
 8008764:	b913      	cbnz	r3, 800876c <_fflush_r+0x10>
 8008766:	2500      	movs	r5, #0
 8008768:	4628      	mov	r0, r5
 800876a:	bd38      	pop	{r3, r4, r5, pc}
 800876c:	b118      	cbz	r0, 8008776 <_fflush_r+0x1a>
 800876e:	6a03      	ldr	r3, [r0, #32]
 8008770:	b90b      	cbnz	r3, 8008776 <_fflush_r+0x1a>
 8008772:	f7fe fb43 	bl	8006dfc <__sinit>
 8008776:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d0f3      	beq.n	8008766 <_fflush_r+0xa>
 800877e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008780:	07d0      	lsls	r0, r2, #31
 8008782:	d404      	bmi.n	800878e <_fflush_r+0x32>
 8008784:	0599      	lsls	r1, r3, #22
 8008786:	d402      	bmi.n	800878e <_fflush_r+0x32>
 8008788:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800878a:	f7fe fc84 	bl	8007096 <__retarget_lock_acquire_recursive>
 800878e:	4628      	mov	r0, r5
 8008790:	4621      	mov	r1, r4
 8008792:	f7ff ff5f 	bl	8008654 <__sflush_r>
 8008796:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008798:	07da      	lsls	r2, r3, #31
 800879a:	4605      	mov	r5, r0
 800879c:	d4e4      	bmi.n	8008768 <_fflush_r+0xc>
 800879e:	89a3      	ldrh	r3, [r4, #12]
 80087a0:	059b      	lsls	r3, r3, #22
 80087a2:	d4e1      	bmi.n	8008768 <_fflush_r+0xc>
 80087a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80087a6:	f7fe fc77 	bl	8007098 <__retarget_lock_release_recursive>
 80087aa:	e7dd      	b.n	8008768 <_fflush_r+0xc>

080087ac <_sbrk_r>:
 80087ac:	b538      	push	{r3, r4, r5, lr}
 80087ae:	4d06      	ldr	r5, [pc, #24]	@ (80087c8 <_sbrk_r+0x1c>)
 80087b0:	2300      	movs	r3, #0
 80087b2:	4604      	mov	r4, r0
 80087b4:	4608      	mov	r0, r1
 80087b6:	602b      	str	r3, [r5, #0]
 80087b8:	f7f9 f988 	bl	8001acc <_sbrk>
 80087bc:	1c43      	adds	r3, r0, #1
 80087be:	d102      	bne.n	80087c6 <_sbrk_r+0x1a>
 80087c0:	682b      	ldr	r3, [r5, #0]
 80087c2:	b103      	cbz	r3, 80087c6 <_sbrk_r+0x1a>
 80087c4:	6023      	str	r3, [r4, #0]
 80087c6:	bd38      	pop	{r3, r4, r5, pc}
 80087c8:	2000458c 	.word	0x2000458c

080087cc <__assert_func>:
 80087cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80087ce:	4614      	mov	r4, r2
 80087d0:	461a      	mov	r2, r3
 80087d2:	4b09      	ldr	r3, [pc, #36]	@ (80087f8 <__assert_func+0x2c>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4605      	mov	r5, r0
 80087d8:	68d8      	ldr	r0, [r3, #12]
 80087da:	b954      	cbnz	r4, 80087f2 <__assert_func+0x26>
 80087dc:	4b07      	ldr	r3, [pc, #28]	@ (80087fc <__assert_func+0x30>)
 80087de:	461c      	mov	r4, r3
 80087e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80087e4:	9100      	str	r1, [sp, #0]
 80087e6:	462b      	mov	r3, r5
 80087e8:	4905      	ldr	r1, [pc, #20]	@ (8008800 <__assert_func+0x34>)
 80087ea:	f000 f841 	bl	8008870 <fiprintf>
 80087ee:	f000 f851 	bl	8008894 <abort>
 80087f2:	4b04      	ldr	r3, [pc, #16]	@ (8008804 <__assert_func+0x38>)
 80087f4:	e7f4      	b.n	80087e0 <__assert_func+0x14>
 80087f6:	bf00      	nop
 80087f8:	2000001c 	.word	0x2000001c
 80087fc:	080090b5 	.word	0x080090b5
 8008800:	08009087 	.word	0x08009087
 8008804:	0800907a 	.word	0x0800907a

08008808 <_calloc_r>:
 8008808:	b570      	push	{r4, r5, r6, lr}
 800880a:	fba1 5402 	umull	r5, r4, r1, r2
 800880e:	b93c      	cbnz	r4, 8008820 <_calloc_r+0x18>
 8008810:	4629      	mov	r1, r5
 8008812:	f7ff fb11 	bl	8007e38 <_malloc_r>
 8008816:	4606      	mov	r6, r0
 8008818:	b928      	cbnz	r0, 8008826 <_calloc_r+0x1e>
 800881a:	2600      	movs	r6, #0
 800881c:	4630      	mov	r0, r6
 800881e:	bd70      	pop	{r4, r5, r6, pc}
 8008820:	220c      	movs	r2, #12
 8008822:	6002      	str	r2, [r0, #0]
 8008824:	e7f9      	b.n	800881a <_calloc_r+0x12>
 8008826:	462a      	mov	r2, r5
 8008828:	4621      	mov	r1, r4
 800882a:	f7fe fb60 	bl	8006eee <memset>
 800882e:	e7f5      	b.n	800881c <_calloc_r+0x14>

08008830 <__ascii_mbtowc>:
 8008830:	b082      	sub	sp, #8
 8008832:	b901      	cbnz	r1, 8008836 <__ascii_mbtowc+0x6>
 8008834:	a901      	add	r1, sp, #4
 8008836:	b142      	cbz	r2, 800884a <__ascii_mbtowc+0x1a>
 8008838:	b14b      	cbz	r3, 800884e <__ascii_mbtowc+0x1e>
 800883a:	7813      	ldrb	r3, [r2, #0]
 800883c:	600b      	str	r3, [r1, #0]
 800883e:	7812      	ldrb	r2, [r2, #0]
 8008840:	1e10      	subs	r0, r2, #0
 8008842:	bf18      	it	ne
 8008844:	2001      	movne	r0, #1
 8008846:	b002      	add	sp, #8
 8008848:	4770      	bx	lr
 800884a:	4610      	mov	r0, r2
 800884c:	e7fb      	b.n	8008846 <__ascii_mbtowc+0x16>
 800884e:	f06f 0001 	mvn.w	r0, #1
 8008852:	e7f8      	b.n	8008846 <__ascii_mbtowc+0x16>

08008854 <__ascii_wctomb>:
 8008854:	4603      	mov	r3, r0
 8008856:	4608      	mov	r0, r1
 8008858:	b141      	cbz	r1, 800886c <__ascii_wctomb+0x18>
 800885a:	2aff      	cmp	r2, #255	@ 0xff
 800885c:	d904      	bls.n	8008868 <__ascii_wctomb+0x14>
 800885e:	228a      	movs	r2, #138	@ 0x8a
 8008860:	601a      	str	r2, [r3, #0]
 8008862:	f04f 30ff 	mov.w	r0, #4294967295
 8008866:	4770      	bx	lr
 8008868:	700a      	strb	r2, [r1, #0]
 800886a:	2001      	movs	r0, #1
 800886c:	4770      	bx	lr
	...

08008870 <fiprintf>:
 8008870:	b40e      	push	{r1, r2, r3}
 8008872:	b503      	push	{r0, r1, lr}
 8008874:	4601      	mov	r1, r0
 8008876:	ab03      	add	r3, sp, #12
 8008878:	4805      	ldr	r0, [pc, #20]	@ (8008890 <fiprintf+0x20>)
 800887a:	f853 2b04 	ldr.w	r2, [r3], #4
 800887e:	6800      	ldr	r0, [r0, #0]
 8008880:	9301      	str	r3, [sp, #4]
 8008882:	f000 f837 	bl	80088f4 <_vfiprintf_r>
 8008886:	b002      	add	sp, #8
 8008888:	f85d eb04 	ldr.w	lr, [sp], #4
 800888c:	b003      	add	sp, #12
 800888e:	4770      	bx	lr
 8008890:	2000001c 	.word	0x2000001c

08008894 <abort>:
 8008894:	b508      	push	{r3, lr}
 8008896:	2006      	movs	r0, #6
 8008898:	f000 fa00 	bl	8008c9c <raise>
 800889c:	2001      	movs	r0, #1
 800889e:	f7f9 f89d 	bl	80019dc <_exit>

080088a2 <__sfputc_r>:
 80088a2:	6893      	ldr	r3, [r2, #8]
 80088a4:	3b01      	subs	r3, #1
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	b410      	push	{r4}
 80088aa:	6093      	str	r3, [r2, #8]
 80088ac:	da08      	bge.n	80088c0 <__sfputc_r+0x1e>
 80088ae:	6994      	ldr	r4, [r2, #24]
 80088b0:	42a3      	cmp	r3, r4
 80088b2:	db01      	blt.n	80088b8 <__sfputc_r+0x16>
 80088b4:	290a      	cmp	r1, #10
 80088b6:	d103      	bne.n	80088c0 <__sfputc_r+0x1e>
 80088b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80088bc:	f000 b932 	b.w	8008b24 <__swbuf_r>
 80088c0:	6813      	ldr	r3, [r2, #0]
 80088c2:	1c58      	adds	r0, r3, #1
 80088c4:	6010      	str	r0, [r2, #0]
 80088c6:	7019      	strb	r1, [r3, #0]
 80088c8:	4608      	mov	r0, r1
 80088ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80088ce:	4770      	bx	lr

080088d0 <__sfputs_r>:
 80088d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088d2:	4606      	mov	r6, r0
 80088d4:	460f      	mov	r7, r1
 80088d6:	4614      	mov	r4, r2
 80088d8:	18d5      	adds	r5, r2, r3
 80088da:	42ac      	cmp	r4, r5
 80088dc:	d101      	bne.n	80088e2 <__sfputs_r+0x12>
 80088de:	2000      	movs	r0, #0
 80088e0:	e007      	b.n	80088f2 <__sfputs_r+0x22>
 80088e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088e6:	463a      	mov	r2, r7
 80088e8:	4630      	mov	r0, r6
 80088ea:	f7ff ffda 	bl	80088a2 <__sfputc_r>
 80088ee:	1c43      	adds	r3, r0, #1
 80088f0:	d1f3      	bne.n	80088da <__sfputs_r+0xa>
 80088f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080088f4 <_vfiprintf_r>:
 80088f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088f8:	460d      	mov	r5, r1
 80088fa:	b09d      	sub	sp, #116	@ 0x74
 80088fc:	4614      	mov	r4, r2
 80088fe:	4698      	mov	r8, r3
 8008900:	4606      	mov	r6, r0
 8008902:	b118      	cbz	r0, 800890c <_vfiprintf_r+0x18>
 8008904:	6a03      	ldr	r3, [r0, #32]
 8008906:	b90b      	cbnz	r3, 800890c <_vfiprintf_r+0x18>
 8008908:	f7fe fa78 	bl	8006dfc <__sinit>
 800890c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800890e:	07d9      	lsls	r1, r3, #31
 8008910:	d405      	bmi.n	800891e <_vfiprintf_r+0x2a>
 8008912:	89ab      	ldrh	r3, [r5, #12]
 8008914:	059a      	lsls	r2, r3, #22
 8008916:	d402      	bmi.n	800891e <_vfiprintf_r+0x2a>
 8008918:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800891a:	f7fe fbbc 	bl	8007096 <__retarget_lock_acquire_recursive>
 800891e:	89ab      	ldrh	r3, [r5, #12]
 8008920:	071b      	lsls	r3, r3, #28
 8008922:	d501      	bpl.n	8008928 <_vfiprintf_r+0x34>
 8008924:	692b      	ldr	r3, [r5, #16]
 8008926:	b99b      	cbnz	r3, 8008950 <_vfiprintf_r+0x5c>
 8008928:	4629      	mov	r1, r5
 800892a:	4630      	mov	r0, r6
 800892c:	f000 f938 	bl	8008ba0 <__swsetup_r>
 8008930:	b170      	cbz	r0, 8008950 <_vfiprintf_r+0x5c>
 8008932:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008934:	07dc      	lsls	r4, r3, #31
 8008936:	d504      	bpl.n	8008942 <_vfiprintf_r+0x4e>
 8008938:	f04f 30ff 	mov.w	r0, #4294967295
 800893c:	b01d      	add	sp, #116	@ 0x74
 800893e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008942:	89ab      	ldrh	r3, [r5, #12]
 8008944:	0598      	lsls	r0, r3, #22
 8008946:	d4f7      	bmi.n	8008938 <_vfiprintf_r+0x44>
 8008948:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800894a:	f7fe fba5 	bl	8007098 <__retarget_lock_release_recursive>
 800894e:	e7f3      	b.n	8008938 <_vfiprintf_r+0x44>
 8008950:	2300      	movs	r3, #0
 8008952:	9309      	str	r3, [sp, #36]	@ 0x24
 8008954:	2320      	movs	r3, #32
 8008956:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800895a:	f8cd 800c 	str.w	r8, [sp, #12]
 800895e:	2330      	movs	r3, #48	@ 0x30
 8008960:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008b10 <_vfiprintf_r+0x21c>
 8008964:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008968:	f04f 0901 	mov.w	r9, #1
 800896c:	4623      	mov	r3, r4
 800896e:	469a      	mov	sl, r3
 8008970:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008974:	b10a      	cbz	r2, 800897a <_vfiprintf_r+0x86>
 8008976:	2a25      	cmp	r2, #37	@ 0x25
 8008978:	d1f9      	bne.n	800896e <_vfiprintf_r+0x7a>
 800897a:	ebba 0b04 	subs.w	fp, sl, r4
 800897e:	d00b      	beq.n	8008998 <_vfiprintf_r+0xa4>
 8008980:	465b      	mov	r3, fp
 8008982:	4622      	mov	r2, r4
 8008984:	4629      	mov	r1, r5
 8008986:	4630      	mov	r0, r6
 8008988:	f7ff ffa2 	bl	80088d0 <__sfputs_r>
 800898c:	3001      	adds	r0, #1
 800898e:	f000 80a7 	beq.w	8008ae0 <_vfiprintf_r+0x1ec>
 8008992:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008994:	445a      	add	r2, fp
 8008996:	9209      	str	r2, [sp, #36]	@ 0x24
 8008998:	f89a 3000 	ldrb.w	r3, [sl]
 800899c:	2b00      	cmp	r3, #0
 800899e:	f000 809f 	beq.w	8008ae0 <_vfiprintf_r+0x1ec>
 80089a2:	2300      	movs	r3, #0
 80089a4:	f04f 32ff 	mov.w	r2, #4294967295
 80089a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089ac:	f10a 0a01 	add.w	sl, sl, #1
 80089b0:	9304      	str	r3, [sp, #16]
 80089b2:	9307      	str	r3, [sp, #28]
 80089b4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80089b8:	931a      	str	r3, [sp, #104]	@ 0x68
 80089ba:	4654      	mov	r4, sl
 80089bc:	2205      	movs	r2, #5
 80089be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089c2:	4853      	ldr	r0, [pc, #332]	@ (8008b10 <_vfiprintf_r+0x21c>)
 80089c4:	f7f7 fc04 	bl	80001d0 <memchr>
 80089c8:	9a04      	ldr	r2, [sp, #16]
 80089ca:	b9d8      	cbnz	r0, 8008a04 <_vfiprintf_r+0x110>
 80089cc:	06d1      	lsls	r1, r2, #27
 80089ce:	bf44      	itt	mi
 80089d0:	2320      	movmi	r3, #32
 80089d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80089d6:	0713      	lsls	r3, r2, #28
 80089d8:	bf44      	itt	mi
 80089da:	232b      	movmi	r3, #43	@ 0x2b
 80089dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80089e0:	f89a 3000 	ldrb.w	r3, [sl]
 80089e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80089e6:	d015      	beq.n	8008a14 <_vfiprintf_r+0x120>
 80089e8:	9a07      	ldr	r2, [sp, #28]
 80089ea:	4654      	mov	r4, sl
 80089ec:	2000      	movs	r0, #0
 80089ee:	f04f 0c0a 	mov.w	ip, #10
 80089f2:	4621      	mov	r1, r4
 80089f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089f8:	3b30      	subs	r3, #48	@ 0x30
 80089fa:	2b09      	cmp	r3, #9
 80089fc:	d94b      	bls.n	8008a96 <_vfiprintf_r+0x1a2>
 80089fe:	b1b0      	cbz	r0, 8008a2e <_vfiprintf_r+0x13a>
 8008a00:	9207      	str	r2, [sp, #28]
 8008a02:	e014      	b.n	8008a2e <_vfiprintf_r+0x13a>
 8008a04:	eba0 0308 	sub.w	r3, r0, r8
 8008a08:	fa09 f303 	lsl.w	r3, r9, r3
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	9304      	str	r3, [sp, #16]
 8008a10:	46a2      	mov	sl, r4
 8008a12:	e7d2      	b.n	80089ba <_vfiprintf_r+0xc6>
 8008a14:	9b03      	ldr	r3, [sp, #12]
 8008a16:	1d19      	adds	r1, r3, #4
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	9103      	str	r1, [sp, #12]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	bfbb      	ittet	lt
 8008a20:	425b      	neglt	r3, r3
 8008a22:	f042 0202 	orrlt.w	r2, r2, #2
 8008a26:	9307      	strge	r3, [sp, #28]
 8008a28:	9307      	strlt	r3, [sp, #28]
 8008a2a:	bfb8      	it	lt
 8008a2c:	9204      	strlt	r2, [sp, #16]
 8008a2e:	7823      	ldrb	r3, [r4, #0]
 8008a30:	2b2e      	cmp	r3, #46	@ 0x2e
 8008a32:	d10a      	bne.n	8008a4a <_vfiprintf_r+0x156>
 8008a34:	7863      	ldrb	r3, [r4, #1]
 8008a36:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a38:	d132      	bne.n	8008aa0 <_vfiprintf_r+0x1ac>
 8008a3a:	9b03      	ldr	r3, [sp, #12]
 8008a3c:	1d1a      	adds	r2, r3, #4
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	9203      	str	r2, [sp, #12]
 8008a42:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008a46:	3402      	adds	r4, #2
 8008a48:	9305      	str	r3, [sp, #20]
 8008a4a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008b20 <_vfiprintf_r+0x22c>
 8008a4e:	7821      	ldrb	r1, [r4, #0]
 8008a50:	2203      	movs	r2, #3
 8008a52:	4650      	mov	r0, sl
 8008a54:	f7f7 fbbc 	bl	80001d0 <memchr>
 8008a58:	b138      	cbz	r0, 8008a6a <_vfiprintf_r+0x176>
 8008a5a:	9b04      	ldr	r3, [sp, #16]
 8008a5c:	eba0 000a 	sub.w	r0, r0, sl
 8008a60:	2240      	movs	r2, #64	@ 0x40
 8008a62:	4082      	lsls	r2, r0
 8008a64:	4313      	orrs	r3, r2
 8008a66:	3401      	adds	r4, #1
 8008a68:	9304      	str	r3, [sp, #16]
 8008a6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a6e:	4829      	ldr	r0, [pc, #164]	@ (8008b14 <_vfiprintf_r+0x220>)
 8008a70:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008a74:	2206      	movs	r2, #6
 8008a76:	f7f7 fbab 	bl	80001d0 <memchr>
 8008a7a:	2800      	cmp	r0, #0
 8008a7c:	d03f      	beq.n	8008afe <_vfiprintf_r+0x20a>
 8008a7e:	4b26      	ldr	r3, [pc, #152]	@ (8008b18 <_vfiprintf_r+0x224>)
 8008a80:	bb1b      	cbnz	r3, 8008aca <_vfiprintf_r+0x1d6>
 8008a82:	9b03      	ldr	r3, [sp, #12]
 8008a84:	3307      	adds	r3, #7
 8008a86:	f023 0307 	bic.w	r3, r3, #7
 8008a8a:	3308      	adds	r3, #8
 8008a8c:	9303      	str	r3, [sp, #12]
 8008a8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a90:	443b      	add	r3, r7
 8008a92:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a94:	e76a      	b.n	800896c <_vfiprintf_r+0x78>
 8008a96:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a9a:	460c      	mov	r4, r1
 8008a9c:	2001      	movs	r0, #1
 8008a9e:	e7a8      	b.n	80089f2 <_vfiprintf_r+0xfe>
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	3401      	adds	r4, #1
 8008aa4:	9305      	str	r3, [sp, #20]
 8008aa6:	4619      	mov	r1, r3
 8008aa8:	f04f 0c0a 	mov.w	ip, #10
 8008aac:	4620      	mov	r0, r4
 8008aae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ab2:	3a30      	subs	r2, #48	@ 0x30
 8008ab4:	2a09      	cmp	r2, #9
 8008ab6:	d903      	bls.n	8008ac0 <_vfiprintf_r+0x1cc>
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d0c6      	beq.n	8008a4a <_vfiprintf_r+0x156>
 8008abc:	9105      	str	r1, [sp, #20]
 8008abe:	e7c4      	b.n	8008a4a <_vfiprintf_r+0x156>
 8008ac0:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ac4:	4604      	mov	r4, r0
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	e7f0      	b.n	8008aac <_vfiprintf_r+0x1b8>
 8008aca:	ab03      	add	r3, sp, #12
 8008acc:	9300      	str	r3, [sp, #0]
 8008ace:	462a      	mov	r2, r5
 8008ad0:	4b12      	ldr	r3, [pc, #72]	@ (8008b1c <_vfiprintf_r+0x228>)
 8008ad2:	a904      	add	r1, sp, #16
 8008ad4:	4630      	mov	r0, r6
 8008ad6:	f7fd fd4d 	bl	8006574 <_printf_float>
 8008ada:	4607      	mov	r7, r0
 8008adc:	1c78      	adds	r0, r7, #1
 8008ade:	d1d6      	bne.n	8008a8e <_vfiprintf_r+0x19a>
 8008ae0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ae2:	07d9      	lsls	r1, r3, #31
 8008ae4:	d405      	bmi.n	8008af2 <_vfiprintf_r+0x1fe>
 8008ae6:	89ab      	ldrh	r3, [r5, #12]
 8008ae8:	059a      	lsls	r2, r3, #22
 8008aea:	d402      	bmi.n	8008af2 <_vfiprintf_r+0x1fe>
 8008aec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008aee:	f7fe fad3 	bl	8007098 <__retarget_lock_release_recursive>
 8008af2:	89ab      	ldrh	r3, [r5, #12]
 8008af4:	065b      	lsls	r3, r3, #25
 8008af6:	f53f af1f 	bmi.w	8008938 <_vfiprintf_r+0x44>
 8008afa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008afc:	e71e      	b.n	800893c <_vfiprintf_r+0x48>
 8008afe:	ab03      	add	r3, sp, #12
 8008b00:	9300      	str	r3, [sp, #0]
 8008b02:	462a      	mov	r2, r5
 8008b04:	4b05      	ldr	r3, [pc, #20]	@ (8008b1c <_vfiprintf_r+0x228>)
 8008b06:	a904      	add	r1, sp, #16
 8008b08:	4630      	mov	r0, r6
 8008b0a:	f7fd ffcb 	bl	8006aa4 <_printf_i>
 8008b0e:	e7e4      	b.n	8008ada <_vfiprintf_r+0x1e6>
 8008b10:	080091b7 	.word	0x080091b7
 8008b14:	080091c1 	.word	0x080091c1
 8008b18:	08006575 	.word	0x08006575
 8008b1c:	080088d1 	.word	0x080088d1
 8008b20:	080091bd 	.word	0x080091bd

08008b24 <__swbuf_r>:
 8008b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b26:	460e      	mov	r6, r1
 8008b28:	4614      	mov	r4, r2
 8008b2a:	4605      	mov	r5, r0
 8008b2c:	b118      	cbz	r0, 8008b36 <__swbuf_r+0x12>
 8008b2e:	6a03      	ldr	r3, [r0, #32]
 8008b30:	b90b      	cbnz	r3, 8008b36 <__swbuf_r+0x12>
 8008b32:	f7fe f963 	bl	8006dfc <__sinit>
 8008b36:	69a3      	ldr	r3, [r4, #24]
 8008b38:	60a3      	str	r3, [r4, #8]
 8008b3a:	89a3      	ldrh	r3, [r4, #12]
 8008b3c:	071a      	lsls	r2, r3, #28
 8008b3e:	d501      	bpl.n	8008b44 <__swbuf_r+0x20>
 8008b40:	6923      	ldr	r3, [r4, #16]
 8008b42:	b943      	cbnz	r3, 8008b56 <__swbuf_r+0x32>
 8008b44:	4621      	mov	r1, r4
 8008b46:	4628      	mov	r0, r5
 8008b48:	f000 f82a 	bl	8008ba0 <__swsetup_r>
 8008b4c:	b118      	cbz	r0, 8008b56 <__swbuf_r+0x32>
 8008b4e:	f04f 37ff 	mov.w	r7, #4294967295
 8008b52:	4638      	mov	r0, r7
 8008b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b56:	6823      	ldr	r3, [r4, #0]
 8008b58:	6922      	ldr	r2, [r4, #16]
 8008b5a:	1a98      	subs	r0, r3, r2
 8008b5c:	6963      	ldr	r3, [r4, #20]
 8008b5e:	b2f6      	uxtb	r6, r6
 8008b60:	4283      	cmp	r3, r0
 8008b62:	4637      	mov	r7, r6
 8008b64:	dc05      	bgt.n	8008b72 <__swbuf_r+0x4e>
 8008b66:	4621      	mov	r1, r4
 8008b68:	4628      	mov	r0, r5
 8008b6a:	f7ff fdf7 	bl	800875c <_fflush_r>
 8008b6e:	2800      	cmp	r0, #0
 8008b70:	d1ed      	bne.n	8008b4e <__swbuf_r+0x2a>
 8008b72:	68a3      	ldr	r3, [r4, #8]
 8008b74:	3b01      	subs	r3, #1
 8008b76:	60a3      	str	r3, [r4, #8]
 8008b78:	6823      	ldr	r3, [r4, #0]
 8008b7a:	1c5a      	adds	r2, r3, #1
 8008b7c:	6022      	str	r2, [r4, #0]
 8008b7e:	701e      	strb	r6, [r3, #0]
 8008b80:	6962      	ldr	r2, [r4, #20]
 8008b82:	1c43      	adds	r3, r0, #1
 8008b84:	429a      	cmp	r2, r3
 8008b86:	d004      	beq.n	8008b92 <__swbuf_r+0x6e>
 8008b88:	89a3      	ldrh	r3, [r4, #12]
 8008b8a:	07db      	lsls	r3, r3, #31
 8008b8c:	d5e1      	bpl.n	8008b52 <__swbuf_r+0x2e>
 8008b8e:	2e0a      	cmp	r6, #10
 8008b90:	d1df      	bne.n	8008b52 <__swbuf_r+0x2e>
 8008b92:	4621      	mov	r1, r4
 8008b94:	4628      	mov	r0, r5
 8008b96:	f7ff fde1 	bl	800875c <_fflush_r>
 8008b9a:	2800      	cmp	r0, #0
 8008b9c:	d0d9      	beq.n	8008b52 <__swbuf_r+0x2e>
 8008b9e:	e7d6      	b.n	8008b4e <__swbuf_r+0x2a>

08008ba0 <__swsetup_r>:
 8008ba0:	b538      	push	{r3, r4, r5, lr}
 8008ba2:	4b29      	ldr	r3, [pc, #164]	@ (8008c48 <__swsetup_r+0xa8>)
 8008ba4:	4605      	mov	r5, r0
 8008ba6:	6818      	ldr	r0, [r3, #0]
 8008ba8:	460c      	mov	r4, r1
 8008baa:	b118      	cbz	r0, 8008bb4 <__swsetup_r+0x14>
 8008bac:	6a03      	ldr	r3, [r0, #32]
 8008bae:	b90b      	cbnz	r3, 8008bb4 <__swsetup_r+0x14>
 8008bb0:	f7fe f924 	bl	8006dfc <__sinit>
 8008bb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bb8:	0719      	lsls	r1, r3, #28
 8008bba:	d422      	bmi.n	8008c02 <__swsetup_r+0x62>
 8008bbc:	06da      	lsls	r2, r3, #27
 8008bbe:	d407      	bmi.n	8008bd0 <__swsetup_r+0x30>
 8008bc0:	2209      	movs	r2, #9
 8008bc2:	602a      	str	r2, [r5, #0]
 8008bc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008bc8:	81a3      	strh	r3, [r4, #12]
 8008bca:	f04f 30ff 	mov.w	r0, #4294967295
 8008bce:	e033      	b.n	8008c38 <__swsetup_r+0x98>
 8008bd0:	0758      	lsls	r0, r3, #29
 8008bd2:	d512      	bpl.n	8008bfa <__swsetup_r+0x5a>
 8008bd4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008bd6:	b141      	cbz	r1, 8008bea <__swsetup_r+0x4a>
 8008bd8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008bdc:	4299      	cmp	r1, r3
 8008bde:	d002      	beq.n	8008be6 <__swsetup_r+0x46>
 8008be0:	4628      	mov	r0, r5
 8008be2:	f7ff f8b5 	bl	8007d50 <_free_r>
 8008be6:	2300      	movs	r3, #0
 8008be8:	6363      	str	r3, [r4, #52]	@ 0x34
 8008bea:	89a3      	ldrh	r3, [r4, #12]
 8008bec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008bf0:	81a3      	strh	r3, [r4, #12]
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	6063      	str	r3, [r4, #4]
 8008bf6:	6923      	ldr	r3, [r4, #16]
 8008bf8:	6023      	str	r3, [r4, #0]
 8008bfa:	89a3      	ldrh	r3, [r4, #12]
 8008bfc:	f043 0308 	orr.w	r3, r3, #8
 8008c00:	81a3      	strh	r3, [r4, #12]
 8008c02:	6923      	ldr	r3, [r4, #16]
 8008c04:	b94b      	cbnz	r3, 8008c1a <__swsetup_r+0x7a>
 8008c06:	89a3      	ldrh	r3, [r4, #12]
 8008c08:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008c0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c10:	d003      	beq.n	8008c1a <__swsetup_r+0x7a>
 8008c12:	4621      	mov	r1, r4
 8008c14:	4628      	mov	r0, r5
 8008c16:	f000 f883 	bl	8008d20 <__smakebuf_r>
 8008c1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c1e:	f013 0201 	ands.w	r2, r3, #1
 8008c22:	d00a      	beq.n	8008c3a <__swsetup_r+0x9a>
 8008c24:	2200      	movs	r2, #0
 8008c26:	60a2      	str	r2, [r4, #8]
 8008c28:	6962      	ldr	r2, [r4, #20]
 8008c2a:	4252      	negs	r2, r2
 8008c2c:	61a2      	str	r2, [r4, #24]
 8008c2e:	6922      	ldr	r2, [r4, #16]
 8008c30:	b942      	cbnz	r2, 8008c44 <__swsetup_r+0xa4>
 8008c32:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008c36:	d1c5      	bne.n	8008bc4 <__swsetup_r+0x24>
 8008c38:	bd38      	pop	{r3, r4, r5, pc}
 8008c3a:	0799      	lsls	r1, r3, #30
 8008c3c:	bf58      	it	pl
 8008c3e:	6962      	ldrpl	r2, [r4, #20]
 8008c40:	60a2      	str	r2, [r4, #8]
 8008c42:	e7f4      	b.n	8008c2e <__swsetup_r+0x8e>
 8008c44:	2000      	movs	r0, #0
 8008c46:	e7f7      	b.n	8008c38 <__swsetup_r+0x98>
 8008c48:	2000001c 	.word	0x2000001c

08008c4c <_raise_r>:
 8008c4c:	291f      	cmp	r1, #31
 8008c4e:	b538      	push	{r3, r4, r5, lr}
 8008c50:	4605      	mov	r5, r0
 8008c52:	460c      	mov	r4, r1
 8008c54:	d904      	bls.n	8008c60 <_raise_r+0x14>
 8008c56:	2316      	movs	r3, #22
 8008c58:	6003      	str	r3, [r0, #0]
 8008c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8008c5e:	bd38      	pop	{r3, r4, r5, pc}
 8008c60:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008c62:	b112      	cbz	r2, 8008c6a <_raise_r+0x1e>
 8008c64:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008c68:	b94b      	cbnz	r3, 8008c7e <_raise_r+0x32>
 8008c6a:	4628      	mov	r0, r5
 8008c6c:	f000 f830 	bl	8008cd0 <_getpid_r>
 8008c70:	4622      	mov	r2, r4
 8008c72:	4601      	mov	r1, r0
 8008c74:	4628      	mov	r0, r5
 8008c76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c7a:	f000 b817 	b.w	8008cac <_kill_r>
 8008c7e:	2b01      	cmp	r3, #1
 8008c80:	d00a      	beq.n	8008c98 <_raise_r+0x4c>
 8008c82:	1c59      	adds	r1, r3, #1
 8008c84:	d103      	bne.n	8008c8e <_raise_r+0x42>
 8008c86:	2316      	movs	r3, #22
 8008c88:	6003      	str	r3, [r0, #0]
 8008c8a:	2001      	movs	r0, #1
 8008c8c:	e7e7      	b.n	8008c5e <_raise_r+0x12>
 8008c8e:	2100      	movs	r1, #0
 8008c90:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008c94:	4620      	mov	r0, r4
 8008c96:	4798      	blx	r3
 8008c98:	2000      	movs	r0, #0
 8008c9a:	e7e0      	b.n	8008c5e <_raise_r+0x12>

08008c9c <raise>:
 8008c9c:	4b02      	ldr	r3, [pc, #8]	@ (8008ca8 <raise+0xc>)
 8008c9e:	4601      	mov	r1, r0
 8008ca0:	6818      	ldr	r0, [r3, #0]
 8008ca2:	f7ff bfd3 	b.w	8008c4c <_raise_r>
 8008ca6:	bf00      	nop
 8008ca8:	2000001c 	.word	0x2000001c

08008cac <_kill_r>:
 8008cac:	b538      	push	{r3, r4, r5, lr}
 8008cae:	4d07      	ldr	r5, [pc, #28]	@ (8008ccc <_kill_r+0x20>)
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	4604      	mov	r4, r0
 8008cb4:	4608      	mov	r0, r1
 8008cb6:	4611      	mov	r1, r2
 8008cb8:	602b      	str	r3, [r5, #0]
 8008cba:	f7f8 fe7f 	bl	80019bc <_kill>
 8008cbe:	1c43      	adds	r3, r0, #1
 8008cc0:	d102      	bne.n	8008cc8 <_kill_r+0x1c>
 8008cc2:	682b      	ldr	r3, [r5, #0]
 8008cc4:	b103      	cbz	r3, 8008cc8 <_kill_r+0x1c>
 8008cc6:	6023      	str	r3, [r4, #0]
 8008cc8:	bd38      	pop	{r3, r4, r5, pc}
 8008cca:	bf00      	nop
 8008ccc:	2000458c 	.word	0x2000458c

08008cd0 <_getpid_r>:
 8008cd0:	f7f8 be6c 	b.w	80019ac <_getpid>

08008cd4 <__swhatbuf_r>:
 8008cd4:	b570      	push	{r4, r5, r6, lr}
 8008cd6:	460c      	mov	r4, r1
 8008cd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cdc:	2900      	cmp	r1, #0
 8008cde:	b096      	sub	sp, #88	@ 0x58
 8008ce0:	4615      	mov	r5, r2
 8008ce2:	461e      	mov	r6, r3
 8008ce4:	da0d      	bge.n	8008d02 <__swhatbuf_r+0x2e>
 8008ce6:	89a3      	ldrh	r3, [r4, #12]
 8008ce8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008cec:	f04f 0100 	mov.w	r1, #0
 8008cf0:	bf14      	ite	ne
 8008cf2:	2340      	movne	r3, #64	@ 0x40
 8008cf4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008cf8:	2000      	movs	r0, #0
 8008cfa:	6031      	str	r1, [r6, #0]
 8008cfc:	602b      	str	r3, [r5, #0]
 8008cfe:	b016      	add	sp, #88	@ 0x58
 8008d00:	bd70      	pop	{r4, r5, r6, pc}
 8008d02:	466a      	mov	r2, sp
 8008d04:	f000 f848 	bl	8008d98 <_fstat_r>
 8008d08:	2800      	cmp	r0, #0
 8008d0a:	dbec      	blt.n	8008ce6 <__swhatbuf_r+0x12>
 8008d0c:	9901      	ldr	r1, [sp, #4]
 8008d0e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008d12:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008d16:	4259      	negs	r1, r3
 8008d18:	4159      	adcs	r1, r3
 8008d1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008d1e:	e7eb      	b.n	8008cf8 <__swhatbuf_r+0x24>

08008d20 <__smakebuf_r>:
 8008d20:	898b      	ldrh	r3, [r1, #12]
 8008d22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d24:	079d      	lsls	r5, r3, #30
 8008d26:	4606      	mov	r6, r0
 8008d28:	460c      	mov	r4, r1
 8008d2a:	d507      	bpl.n	8008d3c <__smakebuf_r+0x1c>
 8008d2c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008d30:	6023      	str	r3, [r4, #0]
 8008d32:	6123      	str	r3, [r4, #16]
 8008d34:	2301      	movs	r3, #1
 8008d36:	6163      	str	r3, [r4, #20]
 8008d38:	b003      	add	sp, #12
 8008d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d3c:	ab01      	add	r3, sp, #4
 8008d3e:	466a      	mov	r2, sp
 8008d40:	f7ff ffc8 	bl	8008cd4 <__swhatbuf_r>
 8008d44:	9f00      	ldr	r7, [sp, #0]
 8008d46:	4605      	mov	r5, r0
 8008d48:	4639      	mov	r1, r7
 8008d4a:	4630      	mov	r0, r6
 8008d4c:	f7ff f874 	bl	8007e38 <_malloc_r>
 8008d50:	b948      	cbnz	r0, 8008d66 <__smakebuf_r+0x46>
 8008d52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d56:	059a      	lsls	r2, r3, #22
 8008d58:	d4ee      	bmi.n	8008d38 <__smakebuf_r+0x18>
 8008d5a:	f023 0303 	bic.w	r3, r3, #3
 8008d5e:	f043 0302 	orr.w	r3, r3, #2
 8008d62:	81a3      	strh	r3, [r4, #12]
 8008d64:	e7e2      	b.n	8008d2c <__smakebuf_r+0xc>
 8008d66:	89a3      	ldrh	r3, [r4, #12]
 8008d68:	6020      	str	r0, [r4, #0]
 8008d6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d6e:	81a3      	strh	r3, [r4, #12]
 8008d70:	9b01      	ldr	r3, [sp, #4]
 8008d72:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008d76:	b15b      	cbz	r3, 8008d90 <__smakebuf_r+0x70>
 8008d78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d7c:	4630      	mov	r0, r6
 8008d7e:	f000 f81d 	bl	8008dbc <_isatty_r>
 8008d82:	b128      	cbz	r0, 8008d90 <__smakebuf_r+0x70>
 8008d84:	89a3      	ldrh	r3, [r4, #12]
 8008d86:	f023 0303 	bic.w	r3, r3, #3
 8008d8a:	f043 0301 	orr.w	r3, r3, #1
 8008d8e:	81a3      	strh	r3, [r4, #12]
 8008d90:	89a3      	ldrh	r3, [r4, #12]
 8008d92:	431d      	orrs	r5, r3
 8008d94:	81a5      	strh	r5, [r4, #12]
 8008d96:	e7cf      	b.n	8008d38 <__smakebuf_r+0x18>

08008d98 <_fstat_r>:
 8008d98:	b538      	push	{r3, r4, r5, lr}
 8008d9a:	4d07      	ldr	r5, [pc, #28]	@ (8008db8 <_fstat_r+0x20>)
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	4604      	mov	r4, r0
 8008da0:	4608      	mov	r0, r1
 8008da2:	4611      	mov	r1, r2
 8008da4:	602b      	str	r3, [r5, #0]
 8008da6:	f7f8 fe69 	bl	8001a7c <_fstat>
 8008daa:	1c43      	adds	r3, r0, #1
 8008dac:	d102      	bne.n	8008db4 <_fstat_r+0x1c>
 8008dae:	682b      	ldr	r3, [r5, #0]
 8008db0:	b103      	cbz	r3, 8008db4 <_fstat_r+0x1c>
 8008db2:	6023      	str	r3, [r4, #0]
 8008db4:	bd38      	pop	{r3, r4, r5, pc}
 8008db6:	bf00      	nop
 8008db8:	2000458c 	.word	0x2000458c

08008dbc <_isatty_r>:
 8008dbc:	b538      	push	{r3, r4, r5, lr}
 8008dbe:	4d06      	ldr	r5, [pc, #24]	@ (8008dd8 <_isatty_r+0x1c>)
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	4604      	mov	r4, r0
 8008dc4:	4608      	mov	r0, r1
 8008dc6:	602b      	str	r3, [r5, #0]
 8008dc8:	f7f8 fe68 	bl	8001a9c <_isatty>
 8008dcc:	1c43      	adds	r3, r0, #1
 8008dce:	d102      	bne.n	8008dd6 <_isatty_r+0x1a>
 8008dd0:	682b      	ldr	r3, [r5, #0]
 8008dd2:	b103      	cbz	r3, 8008dd6 <_isatty_r+0x1a>
 8008dd4:	6023      	str	r3, [r4, #0]
 8008dd6:	bd38      	pop	{r3, r4, r5, pc}
 8008dd8:	2000458c 	.word	0x2000458c

08008ddc <_init>:
 8008ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dde:	bf00      	nop
 8008de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008de2:	bc08      	pop	{r3}
 8008de4:	469e      	mov	lr, r3
 8008de6:	4770      	bx	lr

08008de8 <_fini>:
 8008de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dea:	bf00      	nop
 8008dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dee:	bc08      	pop	{r3}
 8008df0:	469e      	mov	lr, r3
 8008df2:	4770      	bx	lr
