
IOT2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d74  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000418  08008f08  08008f08  00009f08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009320  08009320  0000b1d8  2**0
                  CONTENTS
  4 .ARM          00000008  08009320  08009320  0000a320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009328  08009328  0000b1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009328  08009328  0000a328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800932c  0800932c  0000a32c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08009330  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b1d8  2**0
                  CONTENTS
 10 .bss          000043cc  200001d8  200001d8  0000b1d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200045a4  200045a4  0000b1d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b1d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016682  00000000  00000000  0000b208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003466  00000000  00000000  0002188a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001588  00000000  00000000  00024cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010bd  00000000  00000000  00026278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002261e  00000000  00000000  00027335  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019439  00000000  00000000  00049953  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d98cd  00000000  00000000  00062d8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013c659  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006ac4  00000000  00000000  0013c69c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000040  00000000  00000000  00143160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008eec 	.word	0x08008eec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	08008eec 	.word	0x08008eec

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	4a07      	ldr	r2, [pc, #28]	@ (8000f64 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f48:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	4a06      	ldr	r2, [pc, #24]	@ (8000f68 <vApplicationGetIdleTaskMemory+0x30>)
 8000f4e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2280      	movs	r2, #128	@ 0x80
 8000f54:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f56:	bf00      	nop
 8000f58:	3714      	adds	r7, #20
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	200001f4 	.word	0x200001f4
 8000f68:	20000294 	.word	0x20000294
 8000f6c:	00000000 	.word	0x00000000

08000f70 <GetTemperature>:
void StartTask01(void const * argument);
void StartTask02(void const * argument);
void StartTask03(void const * argument);

/* USER CODE BEGIN PFP */
float GetTemperature(void) {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
    uint16_t value;
    float temperature;

    HAL_ADC_Start(&hadc1);
 8000f76:	4822      	ldr	r0, [pc, #136]	@ (8001000 <GetTemperature+0x90>)
 8000f78:	f000 ff10 	bl	8001d9c <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 8000f7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f80:	481f      	ldr	r0, [pc, #124]	@ (8001000 <GetTemperature+0x90>)
 8000f82:	f001 f810 	bl	8001fa6 <HAL_ADC_PollForConversion>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d127      	bne.n	8000fdc <GetTemperature+0x6c>
        value = HAL_ADC_GetValue(&hadc1);
 8000f8c:	481c      	ldr	r0, [pc, #112]	@ (8001000 <GetTemperature+0x90>)
 8000f8e:	f001 f895 	bl	80020bc <HAL_ADC_GetValue>
 8000f92:	4603      	mov	r3, r0
 8000f94:	807b      	strh	r3, [r7, #2]
        temperature = (value / 4096.0) * 3.3 * 100.0;
 8000f96:	887b      	ldrh	r3, [r7, #2]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff fac3 	bl	8000524 <__aeabi_i2d>
 8000f9e:	f04f 0200 	mov.w	r2, #0
 8000fa2:	4b18      	ldr	r3, [pc, #96]	@ (8001004 <GetTemperature+0x94>)
 8000fa4:	f7ff fc52 	bl	800084c <__aeabi_ddiv>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	460b      	mov	r3, r1
 8000fac:	4610      	mov	r0, r2
 8000fae:	4619      	mov	r1, r3
 8000fb0:	a311      	add	r3, pc, #68	@ (adr r3, 8000ff8 <GetTemperature+0x88>)
 8000fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb6:	f7ff fb1f 	bl	80005f8 <__aeabi_dmul>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	4610      	mov	r0, r2
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	f04f 0200 	mov.w	r2, #0
 8000fc6:	4b10      	ldr	r3, [pc, #64]	@ (8001008 <GetTemperature+0x98>)
 8000fc8:	f7ff fb16 	bl	80005f8 <__aeabi_dmul>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	460b      	mov	r3, r1
 8000fd0:	4610      	mov	r0, r2
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	f7ff fde8 	bl	8000ba8 <__aeabi_d2f>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	607b      	str	r3, [r7, #4]
    }
    HAL_ADC_Stop(&hadc1);
 8000fdc:	4808      	ldr	r0, [pc, #32]	@ (8001000 <GetTemperature+0x90>)
 8000fde:	f000 ffaf 	bl	8001f40 <HAL_ADC_Stop>

    return temperature;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	ee07 3a90 	vmov	s15, r3
}
 8000fe8:	eeb0 0a67 	vmov.f32	s0, s15
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	f3af 8000 	nop.w
 8000ff8:	66666666 	.word	0x66666666
 8000ffc:	400a6666 	.word	0x400a6666
 8001000:	20000494 	.word	0x20000494
 8001004:	40b00000 	.word	0x40b00000
 8001008:	40590000 	.word	0x40590000

0800100c <WriteTemperatureToEEPROM>:

void WriteTemperatureToEEPROM(float temperature) {
 800100c:	b580      	push	{r7, lr}
 800100e:	b08a      	sub	sp, #40	@ 0x28
 8001010:	af04      	add	r7, sp, #16
 8001012:	ed87 0a01 	vstr	s0, [r7, #4]
    uint8_t data[4];
    uint32_t eepromAddress = 0xA0;
 8001016:	23a0      	movs	r3, #160	@ 0xa0
 8001018:	617b      	str	r3, [r7, #20]
    uint16_t memAddress = 0x0000;
 800101a:	2300      	movs	r3, #0
 800101c:	827b      	strh	r3, [r7, #18]

    memcpy(data, &temperature, sizeof(float));
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	60fb      	str	r3, [r7, #12]

    HAL_I2C_Mem_Write(&hi2c1, eepromAddress, memAddress, I2C_MEMADD_SIZE_16BIT, data, sizeof(data), HAL_MAX_DELAY);
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	b299      	uxth	r1, r3
 8001026:	8a7a      	ldrh	r2, [r7, #18]
 8001028:	f04f 33ff 	mov.w	r3, #4294967295
 800102c:	9302      	str	r3, [sp, #8]
 800102e:	2304      	movs	r3, #4
 8001030:	9301      	str	r3, [sp, #4]
 8001032:	f107 030c 	add.w	r3, r7, #12
 8001036:	9300      	str	r3, [sp, #0]
 8001038:	2310      	movs	r3, #16
 800103a:	4803      	ldr	r0, [pc, #12]	@ (8001048 <WriteTemperatureToEEPROM+0x3c>)
 800103c:	f002 f962 	bl	8003304 <HAL_I2C_Mem_Write>
}
 8001040:	bf00      	nop
 8001042:	3718      	adds	r7, #24
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	2000053c 	.word	0x2000053c

0800104c <ReadTemperatureFromEEPROM>:

float ReadTemperatureFromEEPROM(void) {
 800104c:	b580      	push	{r7, lr}
 800104e:	b088      	sub	sp, #32
 8001050:	af04      	add	r7, sp, #16
    uint8_t data[4];
    float temperature;
    uint32_t eepromAddress = 0xA0;
 8001052:	23a0      	movs	r3, #160	@ 0xa0
 8001054:	60fb      	str	r3, [r7, #12]
    uint16_t memAddress = 0x0000;
 8001056:	2300      	movs	r3, #0
 8001058:	817b      	strh	r3, [r7, #10]

    if (HAL_I2C_Mem_Read(&hi2c1, eepromAddress, memAddress, I2C_MEMADD_SIZE_16BIT, data, sizeof(data), HAL_MAX_DELAY) == HAL_OK) {
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	b299      	uxth	r1, r3
 800105e:	897a      	ldrh	r2, [r7, #10]
 8001060:	f04f 33ff 	mov.w	r3, #4294967295
 8001064:	9302      	str	r3, [sp, #8]
 8001066:	2304      	movs	r3, #4
 8001068:	9301      	str	r3, [sp, #4]
 800106a:	1d3b      	adds	r3, r7, #4
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	2310      	movs	r3, #16
 8001070:	4809      	ldr	r0, [pc, #36]	@ (8001098 <ReadTemperatureFromEEPROM+0x4c>)
 8001072:	f002 fa41 	bl	80034f8 <HAL_I2C_Mem_Read>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d102      	bne.n	8001082 <ReadTemperatureFromEEPROM+0x36>
        memcpy(&temperature, data, sizeof(float));
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	603b      	str	r3, [r7, #0]
 8001080:	e001      	b.n	8001086 <ReadTemperatureFromEEPROM+0x3a>
    } else {
        temperature = -1;
 8001082:	4b06      	ldr	r3, [pc, #24]	@ (800109c <ReadTemperatureFromEEPROM+0x50>)
 8001084:	603b      	str	r3, [r7, #0]

    }

    return temperature;
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	ee07 3a90 	vmov	s15, r3
}
 800108c:	eeb0 0a67 	vmov.f32	s0, s15
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	2000053c 	.word	0x2000053c
 800109c:	bf800000 	.word	0xbf800000

080010a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a0:	b5b0      	push	{r4, r5, r7, lr}
 80010a2:	b096      	sub	sp, #88	@ 0x58
 80010a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010a6:	f000 fdf3 	bl	8001c90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010aa:	f000 f851 	bl	8001150 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ae:	f000 f9a1 	bl	80013f4 <MX_GPIO_Init>
  MX_DMA_Init();
 80010b2:	f000 f961 	bl	8001378 <MX_DMA_Init>
  MX_ADC1_Init();
 80010b6:	f000 f8a9 	bl	800120c <MX_ADC1_Init>
  MX_SPI1_Init();
 80010ba:	f000 f927 	bl	800130c <MX_SPI1_Init>
  MX_I2C1_Init();
 80010be:	f000 f8f7 	bl	80012b0 <MX_I2C1_Init>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task01 */
  osThreadDef(Task01, StartTask01, osPriorityNormal, 0, 128);
 80010c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001138 <main+0x98>)
 80010c4:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80010c8:	461d      	mov	r5, r3
 80010ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task01Handle = osThreadCreate(osThread(Task01), NULL);
 80010d6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80010da:	2100      	movs	r1, #0
 80010dc:	4618      	mov	r0, r3
 80010de:	f003 ffc4 	bl	800506a <osThreadCreate>
 80010e2:	4603      	mov	r3, r0
 80010e4:	4a15      	ldr	r2, [pc, #84]	@ (800113c <main+0x9c>)
 80010e6:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task02 */
  osThreadDef(Task02, StartTask02, osPriorityNormal, 0, 128);
 80010e8:	4b15      	ldr	r3, [pc, #84]	@ (8001140 <main+0xa0>)
 80010ea:	f107 0420 	add.w	r4, r7, #32
 80010ee:	461d      	mov	r5, r3
 80010f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task02Handle = osThreadCreate(osThread(Task02), NULL);
 80010fc:	f107 0320 	add.w	r3, r7, #32
 8001100:	2100      	movs	r1, #0
 8001102:	4618      	mov	r0, r3
 8001104:	f003 ffb1 	bl	800506a <osThreadCreate>
 8001108:	4603      	mov	r3, r0
 800110a:	4a0e      	ldr	r2, [pc, #56]	@ (8001144 <main+0xa4>)
 800110c:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task03 */
  osThreadDef(Task03, StartTask03, osPriorityNormal, 0, 128);
 800110e:	4b0e      	ldr	r3, [pc, #56]	@ (8001148 <main+0xa8>)
 8001110:	1d3c      	adds	r4, r7, #4
 8001112:	461d      	mov	r5, r3
 8001114:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001116:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001118:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800111c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task03Handle = osThreadCreate(osThread(Task03), NULL);
 8001120:	1d3b      	adds	r3, r7, #4
 8001122:	2100      	movs	r1, #0
 8001124:	4618      	mov	r0, r3
 8001126:	f003 ffa0 	bl	800506a <osThreadCreate>
 800112a:	4603      	mov	r3, r0
 800112c:	4a07      	ldr	r2, [pc, #28]	@ (800114c <main+0xac>)
 800112e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001130:	f003 ff94 	bl	800505c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001134:	bf00      	nop
 8001136:	e7fd      	b.n	8001134 <main+0x94>
 8001138:	08008f20 	.word	0x08008f20
 800113c:	200006a8 	.word	0x200006a8
 8001140:	08008f44 	.word	0x08008f44
 8001144:	200006ac 	.word	0x200006ac
 8001148:	08008f68 	.word	0x08008f68
 800114c:	200006b0 	.word	0x200006b0

08001150 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b094      	sub	sp, #80	@ 0x50
 8001154:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001156:	f107 0320 	add.w	r3, r7, #32
 800115a:	2230      	movs	r2, #48	@ 0x30
 800115c:	2100      	movs	r1, #0
 800115e:	4618      	mov	r0, r3
 8001160:	f005 ff4d 	bl	8006ffe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001164:	f107 030c 	add.w	r3, r7, #12
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001174:	2300      	movs	r3, #0
 8001176:	60bb      	str	r3, [r7, #8]
 8001178:	4b22      	ldr	r3, [pc, #136]	@ (8001204 <SystemClock_Config+0xb4>)
 800117a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800117c:	4a21      	ldr	r2, [pc, #132]	@ (8001204 <SystemClock_Config+0xb4>)
 800117e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001182:	6413      	str	r3, [r2, #64]	@ 0x40
 8001184:	4b1f      	ldr	r3, [pc, #124]	@ (8001204 <SystemClock_Config+0xb4>)
 8001186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001188:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800118c:	60bb      	str	r3, [r7, #8]
 800118e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001190:	2300      	movs	r3, #0
 8001192:	607b      	str	r3, [r7, #4]
 8001194:	4b1c      	ldr	r3, [pc, #112]	@ (8001208 <SystemClock_Config+0xb8>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a1b      	ldr	r2, [pc, #108]	@ (8001208 <SystemClock_Config+0xb8>)
 800119a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800119e:	6013      	str	r3, [r2, #0]
 80011a0:	4b19      	ldr	r3, [pc, #100]	@ (8001208 <SystemClock_Config+0xb8>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011a8:	607b      	str	r3, [r7, #4]
 80011aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011ac:	2302      	movs	r3, #2
 80011ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011b0:	2301      	movs	r3, #1
 80011b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011b4:	2310      	movs	r3, #16
 80011b6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011b8:	2300      	movs	r3, #0
 80011ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011bc:	f107 0320 	add.w	r3, r7, #32
 80011c0:	4618      	mov	r0, r3
 80011c2:	f002 ff7f 	bl	80040c4 <HAL_RCC_OscConfig>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80011cc:	f000 fa02 	bl	80015d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011d0:	230f      	movs	r3, #15
 80011d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80011d4:	2300      	movs	r3, #0
 80011d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011d8:	2300      	movs	r3, #0
 80011da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011dc:	2300      	movs	r3, #0
 80011de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011e0:	2300      	movs	r3, #0
 80011e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011e4:	f107 030c 	add.w	r3, r7, #12
 80011e8:	2100      	movs	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f003 f9e2 	bl	80045b4 <HAL_RCC_ClockConfig>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80011f6:	f000 f9ed 	bl	80015d4 <Error_Handler>
  }
}
 80011fa:	bf00      	nop
 80011fc:	3750      	adds	r7, #80	@ 0x50
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40023800 	.word	0x40023800
 8001208:	40007000 	.word	0x40007000

0800120c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001212:	463b      	mov	r3, r7
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800121e:	4b21      	ldr	r3, [pc, #132]	@ (80012a4 <MX_ADC1_Init+0x98>)
 8001220:	4a21      	ldr	r2, [pc, #132]	@ (80012a8 <MX_ADC1_Init+0x9c>)
 8001222:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001224:	4b1f      	ldr	r3, [pc, #124]	@ (80012a4 <MX_ADC1_Init+0x98>)
 8001226:	2200      	movs	r2, #0
 8001228:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800122a:	4b1e      	ldr	r3, [pc, #120]	@ (80012a4 <MX_ADC1_Init+0x98>)
 800122c:	2200      	movs	r2, #0
 800122e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001230:	4b1c      	ldr	r3, [pc, #112]	@ (80012a4 <MX_ADC1_Init+0x98>)
 8001232:	2200      	movs	r2, #0
 8001234:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001236:	4b1b      	ldr	r3, [pc, #108]	@ (80012a4 <MX_ADC1_Init+0x98>)
 8001238:	2200      	movs	r2, #0
 800123a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800123c:	4b19      	ldr	r3, [pc, #100]	@ (80012a4 <MX_ADC1_Init+0x98>)
 800123e:	2200      	movs	r2, #0
 8001240:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001244:	4b17      	ldr	r3, [pc, #92]	@ (80012a4 <MX_ADC1_Init+0x98>)
 8001246:	2200      	movs	r2, #0
 8001248:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800124a:	4b16      	ldr	r3, [pc, #88]	@ (80012a4 <MX_ADC1_Init+0x98>)
 800124c:	4a17      	ldr	r2, [pc, #92]	@ (80012ac <MX_ADC1_Init+0xa0>)
 800124e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001250:	4b14      	ldr	r3, [pc, #80]	@ (80012a4 <MX_ADC1_Init+0x98>)
 8001252:	2200      	movs	r2, #0
 8001254:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001256:	4b13      	ldr	r3, [pc, #76]	@ (80012a4 <MX_ADC1_Init+0x98>)
 8001258:	2201      	movs	r2, #1
 800125a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800125c:	4b11      	ldr	r3, [pc, #68]	@ (80012a4 <MX_ADC1_Init+0x98>)
 800125e:	2200      	movs	r2, #0
 8001260:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001264:	4b0f      	ldr	r3, [pc, #60]	@ (80012a4 <MX_ADC1_Init+0x98>)
 8001266:	2201      	movs	r2, #1
 8001268:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800126a:	480e      	ldr	r0, [pc, #56]	@ (80012a4 <MX_ADC1_Init+0x98>)
 800126c:	f000 fd52 	bl	8001d14 <HAL_ADC_Init>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001276:	f000 f9ad 	bl	80015d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800127a:	2310      	movs	r3, #16
 800127c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800127e:	2301      	movs	r3, #1
 8001280:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001282:	2300      	movs	r3, #0
 8001284:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001286:	463b      	mov	r3, r7
 8001288:	4619      	mov	r1, r3
 800128a:	4806      	ldr	r0, [pc, #24]	@ (80012a4 <MX_ADC1_Init+0x98>)
 800128c:	f000 ff24 	bl	80020d8 <HAL_ADC_ConfigChannel>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001296:	f000 f99d 	bl	80015d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800129a:	bf00      	nop
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000494 	.word	0x20000494
 80012a8:	40012000 	.word	0x40012000
 80012ac:	0f000001 	.word	0x0f000001

080012b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012b4:	4b12      	ldr	r3, [pc, #72]	@ (8001300 <MX_I2C1_Init+0x50>)
 80012b6:	4a13      	ldr	r2, [pc, #76]	@ (8001304 <MX_I2C1_Init+0x54>)
 80012b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012ba:	4b11      	ldr	r3, [pc, #68]	@ (8001300 <MX_I2C1_Init+0x50>)
 80012bc:	4a12      	ldr	r2, [pc, #72]	@ (8001308 <MX_I2C1_Init+0x58>)
 80012be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001300 <MX_I2C1_Init+0x50>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001300 <MX_I2C1_Init+0x50>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001300 <MX_I2C1_Init+0x50>)
 80012ce:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001300 <MX_I2C1_Init+0x50>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012da:	4b09      	ldr	r3, [pc, #36]	@ (8001300 <MX_I2C1_Init+0x50>)
 80012dc:	2200      	movs	r2, #0
 80012de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012e0:	4b07      	ldr	r3, [pc, #28]	@ (8001300 <MX_I2C1_Init+0x50>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012e6:	4b06      	ldr	r3, [pc, #24]	@ (8001300 <MX_I2C1_Init+0x50>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012ec:	4804      	ldr	r0, [pc, #16]	@ (8001300 <MX_I2C1_Init+0x50>)
 80012ee:	f001 fec5 	bl	800307c <HAL_I2C_Init>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012f8:	f000 f96c 	bl	80015d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012fc:	bf00      	nop
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	2000053c 	.word	0x2000053c
 8001304:	40005400 	.word	0x40005400
 8001308:	000186a0 	.word	0x000186a0

0800130c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001310:	4b17      	ldr	r3, [pc, #92]	@ (8001370 <MX_SPI1_Init+0x64>)
 8001312:	4a18      	ldr	r2, [pc, #96]	@ (8001374 <MX_SPI1_Init+0x68>)
 8001314:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001316:	4b16      	ldr	r3, [pc, #88]	@ (8001370 <MX_SPI1_Init+0x64>)
 8001318:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800131c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800131e:	4b14      	ldr	r3, [pc, #80]	@ (8001370 <MX_SPI1_Init+0x64>)
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001324:	4b12      	ldr	r3, [pc, #72]	@ (8001370 <MX_SPI1_Init+0x64>)
 8001326:	2200      	movs	r2, #0
 8001328:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800132a:	4b11      	ldr	r3, [pc, #68]	@ (8001370 <MX_SPI1_Init+0x64>)
 800132c:	2200      	movs	r2, #0
 800132e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001330:	4b0f      	ldr	r3, [pc, #60]	@ (8001370 <MX_SPI1_Init+0x64>)
 8001332:	2200      	movs	r2, #0
 8001334:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001336:	4b0e      	ldr	r3, [pc, #56]	@ (8001370 <MX_SPI1_Init+0x64>)
 8001338:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800133c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800133e:	4b0c      	ldr	r3, [pc, #48]	@ (8001370 <MX_SPI1_Init+0x64>)
 8001340:	2200      	movs	r2, #0
 8001342:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001344:	4b0a      	ldr	r3, [pc, #40]	@ (8001370 <MX_SPI1_Init+0x64>)
 8001346:	2200      	movs	r2, #0
 8001348:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800134a:	4b09      	ldr	r3, [pc, #36]	@ (8001370 <MX_SPI1_Init+0x64>)
 800134c:	2200      	movs	r2, #0
 800134e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001350:	4b07      	ldr	r3, [pc, #28]	@ (8001370 <MX_SPI1_Init+0x64>)
 8001352:	2200      	movs	r2, #0
 8001354:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001356:	4b06      	ldr	r3, [pc, #24]	@ (8001370 <MX_SPI1_Init+0x64>)
 8001358:	220a      	movs	r2, #10
 800135a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800135c:	4804      	ldr	r0, [pc, #16]	@ (8001370 <MX_SPI1_Init+0x64>)
 800135e:	f003 fb3b 	bl	80049d8 <HAL_SPI_Init>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001368:	f000 f934 	bl	80015d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800136c:	bf00      	nop
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20000650 	.word	0x20000650
 8001374:	40013000 	.word	0x40013000

08001378 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	607b      	str	r3, [r7, #4]
 8001382:	4b1b      	ldr	r3, [pc, #108]	@ (80013f0 <MX_DMA_Init+0x78>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001386:	4a1a      	ldr	r2, [pc, #104]	@ (80013f0 <MX_DMA_Init+0x78>)
 8001388:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800138c:	6313      	str	r3, [r2, #48]	@ 0x30
 800138e:	4b18      	ldr	r3, [pc, #96]	@ (80013f0 <MX_DMA_Init+0x78>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001392:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001396:	607b      	str	r3, [r7, #4]
 8001398:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	603b      	str	r3, [r7, #0]
 800139e:	4b14      	ldr	r3, [pc, #80]	@ (80013f0 <MX_DMA_Init+0x78>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a2:	4a13      	ldr	r2, [pc, #76]	@ (80013f0 <MX_DMA_Init+0x78>)
 80013a4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80013a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013aa:	4b11      	ldr	r3, [pc, #68]	@ (80013f0 <MX_DMA_Init+0x78>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013b2:	603b      	str	r3, [r7, #0]
 80013b4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80013b6:	2200      	movs	r2, #0
 80013b8:	2105      	movs	r1, #5
 80013ba:	200b      	movs	r0, #11
 80013bc:	f001 f962 	bl	8002684 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80013c0:	200b      	movs	r0, #11
 80013c2:	f001 f97b 	bl	80026bc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2105      	movs	r1, #5
 80013ca:	2011      	movs	r0, #17
 80013cc:	f001 f95a 	bl	8002684 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80013d0:	2011      	movs	r0, #17
 80013d2:	f001 f973 	bl	80026bc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80013d6:	2200      	movs	r2, #0
 80013d8:	2105      	movs	r1, #5
 80013da:	2038      	movs	r0, #56	@ 0x38
 80013dc:	f001 f952 	bl	8002684 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80013e0:	2038      	movs	r0, #56	@ 0x38
 80013e2:	f001 f96b 	bl	80026bc <HAL_NVIC_EnableIRQ>

}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40023800 	.word	0x40023800

080013f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b088      	sub	sp, #32
 80013f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fa:	f107 030c 	add.w	r3, r7, #12
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	609a      	str	r2, [r3, #8]
 8001406:	60da      	str	r2, [r3, #12]
 8001408:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	4b2a      	ldr	r3, [pc, #168]	@ (80014b8 <MX_GPIO_Init+0xc4>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001412:	4a29      	ldr	r2, [pc, #164]	@ (80014b8 <MX_GPIO_Init+0xc4>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6313      	str	r3, [r2, #48]	@ 0x30
 800141a:	4b27      	ldr	r3, [pc, #156]	@ (80014b8 <MX_GPIO_Init+0xc4>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	607b      	str	r3, [r7, #4]
 800142a:	4b23      	ldr	r3, [pc, #140]	@ (80014b8 <MX_GPIO_Init+0xc4>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142e:	4a22      	ldr	r2, [pc, #136]	@ (80014b8 <MX_GPIO_Init+0xc4>)
 8001430:	f043 0302 	orr.w	r3, r3, #2
 8001434:	6313      	str	r3, [r2, #48]	@ 0x30
 8001436:	4b20      	ldr	r3, [pc, #128]	@ (80014b8 <MX_GPIO_Init+0xc4>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	607b      	str	r3, [r7, #4]
 8001440:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 8001442:	2200      	movs	r2, #0
 8001444:	f241 1187 	movw	r1, #4487	@ 0x1187
 8001448:	481c      	ldr	r0, [pc, #112]	@ (80014bc <MX_GPIO_Init+0xc8>)
 800144a:	f001 fde3 	bl	8003014 <HAL_GPIO_WritePin>
                          |LCD_CS_Pin|LCD_RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 800144e:	2200      	movs	r2, #0
 8001450:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001454:	481a      	ldr	r0, [pc, #104]	@ (80014c0 <MX_GPIO_Init+0xcc>)
 8001456:	f001 fddd 	bl	8003014 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800145a:	2302      	movs	r3, #2
 800145c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800145e:	2300      	movs	r3, #0
 8001460:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001462:	2301      	movs	r3, #1
 8001464:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001466:	f107 030c 	add.w	r3, r7, #12
 800146a:	4619      	mov	r1, r3
 800146c:	4814      	ldr	r0, [pc, #80]	@ (80014c0 <MX_GPIO_Init+0xcc>)
 800146e:	f001 fc1d 	bl	8002cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12
                           LCD_CS_Pin LCD_RS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 8001472:	f241 1387 	movw	r3, #4487	@ 0x1187
 8001476:	60fb      	str	r3, [r7, #12]
                          |LCD_CS_Pin|LCD_RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001478:	2301      	movs	r3, #1
 800147a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001480:	2300      	movs	r3, #0
 8001482:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001484:	f107 030c 	add.w	r3, r7, #12
 8001488:	4619      	mov	r1, r3
 800148a:	480c      	ldr	r0, [pc, #48]	@ (80014bc <MX_GPIO_Init+0xc8>)
 800148c:	f001 fc0e 	bl	8002cac <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 8001490:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001494:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001496:	2301      	movs	r3, #1
 8001498:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149e:	2300      	movs	r3, #0
 80014a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 80014a2:	f107 030c 	add.w	r3, r7, #12
 80014a6:	4619      	mov	r1, r3
 80014a8:	4805      	ldr	r0, [pc, #20]	@ (80014c0 <MX_GPIO_Init+0xcc>)
 80014aa:	f001 fbff 	bl	8002cac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014ae:	bf00      	nop
 80014b0:	3720      	adds	r7, #32
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40023800 	.word	0x40023800
 80014bc:	40020400 	.word	0x40020400
 80014c0:	40020000 	.word	0x40020000

080014c4 <StartTask01>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask01 */
void StartTask01(void const * argument)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
    while (1) {
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 80014cc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014d0:	4804      	ldr	r0, [pc, #16]	@ (80014e4 <StartTask01+0x20>)
 80014d2:	f001 fdb8 	bl	8003046 <HAL_GPIO_TogglePin>
        osDelay(1000);
 80014d6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014da:	f003 fe12 	bl	8005102 <osDelay>
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 80014de:	bf00      	nop
 80014e0:	e7f4      	b.n	80014cc <StartTask01+0x8>
 80014e2:	bf00      	nop
 80014e4:	40020400 	.word	0x40020400

080014e8 <StartTask02>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	/* Infinite loop */

    while (1) {
        float temperature = GetTemperature();
 80014f0:	f7ff fd3e 	bl	8000f70 <GetTemperature>
 80014f4:	ed87 0a03 	vstr	s0, [r7, #12]
        WriteTemperatureToEEPROM(temperature);
 80014f8:	ed97 0a03 	vldr	s0, [r7, #12]
 80014fc:	f7ff fd86 	bl	800100c <WriteTemperatureToEEPROM>

        float readTemperature = ReadTemperatureFromEEPROM();
 8001500:	f7ff fda4 	bl	800104c <ReadTemperatureFromEEPROM>
 8001504:	ed87 0a02 	vstr	s0, [r7, #8]
        if (readTemperature == temperature) {
 8001508:	ed97 7a02 	vldr	s14, [r7, #8]
 800150c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001510:	eeb4 7a67 	vcmp.f32	s14, s15
 8001514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001518:	d105      	bne.n	8001526 <StartTask02+0x3e>
            HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 800151a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800151e:	4807      	ldr	r0, [pc, #28]	@ (800153c <StartTask02+0x54>)
 8001520:	f001 fd91 	bl	8003046 <HAL_GPIO_TogglePin>
 8001524:	e005      	b.n	8001532 <StartTask02+0x4a>
        } else {
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001526:	2201      	movs	r2, #1
 8001528:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800152c:	4803      	ldr	r0, [pc, #12]	@ (800153c <StartTask02+0x54>)
 800152e:	f001 fd71 	bl	8003014 <HAL_GPIO_WritePin>
        }

        osDelay(5000);
 8001532:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001536:	f003 fde4 	bl	8005102 <osDelay>
    while (1) {
 800153a:	e7d9      	b.n	80014f0 <StartTask02+0x8>
 800153c:	40020400 	.word	0x40020400

08001540 <StartTask03>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
//        }
//        osDelay(10);
//    }


	uint8_t SW_State = GPIO_PIN_SET;
 8001548:	2301      	movs	r3, #1
 800154a:	73bb      	strb	r3, [r7, #14]
	uint8_t SW_LastState = GPIO_PIN_SET;
 800154c:	2301      	movs	r3, #1
 800154e:	73fb      	strb	r3, [r7, #15]

	while (1)
	{
	    SW_State = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
 8001550:	2102      	movs	r1, #2
 8001552:	4815      	ldr	r0, [pc, #84]	@ (80015a8 <StartTask03+0x68>)
 8001554:	f001 fd46 	bl	8002fe4 <HAL_GPIO_ReadPin>
 8001558:	4603      	mov	r3, r0
 800155a:	73bb      	strb	r3, [r7, #14]
	    if (SW_State != SW_LastState)
 800155c:	7bba      	ldrb	r2, [r7, #14]
 800155e:	7bfb      	ldrb	r3, [r7, #15]
 8001560:	429a      	cmp	r2, r3
 8001562:	d01c      	beq.n	800159e <StartTask03+0x5e>
	    {
	        if (SW_State == GPIO_PIN_SET)
 8001564:	7bbb      	ldrb	r3, [r7, #14]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d117      	bne.n	800159a <StartTask03+0x5a>
	        {
	            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET)
 800156a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800156e:	480f      	ldr	r0, [pc, #60]	@ (80015ac <StartTask03+0x6c>)
 8001570:	f001 fd38 	bl	8002fe4 <HAL_GPIO_ReadPin>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d106      	bne.n	8001588 <StartTask03+0x48>
	            {
	                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, SET);
 800157a:	2201      	movs	r2, #1
 800157c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001580:	480a      	ldr	r0, [pc, #40]	@ (80015ac <StartTask03+0x6c>)
 8001582:	f001 fd47 	bl	8003014 <HAL_GPIO_WritePin>
 8001586:	e005      	b.n	8001594 <StartTask03+0x54>
	            }
	            else
	            {
	                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, RESET);
 8001588:	2200      	movs	r2, #0
 800158a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800158e:	4807      	ldr	r0, [pc, #28]	@ (80015ac <StartTask03+0x6c>)
 8001590:	f001 fd40 	bl	8003014 <HAL_GPIO_WritePin>
//	            DisplayTemperatureOnLCD(temperature);
//	        	uint32_t color = 0xFFFFFF;
//	        	ILI9341_FillScreen(color);
//                ILI9341_WriteString(50, 50, "HELLO", Font_7x10, 0x0000, 0xFFFF);

	            osDelay(50);
 8001594:	2032      	movs	r0, #50	@ 0x32
 8001596:	f003 fdb4 	bl	8005102 <osDelay>
	        }

	        SW_LastState = SW_State;
 800159a:	7bbb      	ldrb	r3, [r7, #14]
 800159c:	73fb      	strb	r3, [r7, #15]
	    }

	    osDelay(10);
 800159e:	200a      	movs	r0, #10
 80015a0:	f003 fdaf 	bl	8005102 <osDelay>
	    SW_State = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
 80015a4:	e7d4      	b.n	8001550 <StartTask03+0x10>
 80015a6:	bf00      	nop
 80015a8:	40020000 	.word	0x40020000
 80015ac:	40020400 	.word	0x40020400

080015b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a04      	ldr	r2, [pc, #16]	@ (80015d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d101      	bne.n	80015c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80015c2:	f000 fb87 	bl	8001cd4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40010000 	.word	0x40010000

080015d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015d8:	b672      	cpsid	i
}
 80015da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80015dc:	bf00      	nop
 80015de:	e7fd      	b.n	80015dc <Error_Handler+0x8>

080015e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	607b      	str	r3, [r7, #4]
 80015ea:	4b12      	ldr	r3, [pc, #72]	@ (8001634 <HAL_MspInit+0x54>)
 80015ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ee:	4a11      	ldr	r2, [pc, #68]	@ (8001634 <HAL_MspInit+0x54>)
 80015f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80015f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001634 <HAL_MspInit+0x54>)
 80015f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015fe:	607b      	str	r3, [r7, #4]
 8001600:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	603b      	str	r3, [r7, #0]
 8001606:	4b0b      	ldr	r3, [pc, #44]	@ (8001634 <HAL_MspInit+0x54>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160a:	4a0a      	ldr	r2, [pc, #40]	@ (8001634 <HAL_MspInit+0x54>)
 800160c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001610:	6413      	str	r3, [r2, #64]	@ 0x40
 8001612:	4b08      	ldr	r3, [pc, #32]	@ (8001634 <HAL_MspInit+0x54>)
 8001614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001616:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800161a:	603b      	str	r3, [r7, #0]
 800161c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800161e:	2200      	movs	r2, #0
 8001620:	210f      	movs	r1, #15
 8001622:	f06f 0001 	mvn.w	r0, #1
 8001626:	f001 f82d 	bl	8002684 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800162a:	bf00      	nop
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40023800 	.word	0x40023800

08001638 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a26      	ldr	r2, [pc, #152]	@ (80016e0 <HAL_ADC_MspInit+0xa8>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d145      	bne.n	80016d6 <HAL_ADC_MspInit+0x9e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	4b25      	ldr	r3, [pc, #148]	@ (80016e4 <HAL_ADC_MspInit+0xac>)
 8001650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001652:	4a24      	ldr	r2, [pc, #144]	@ (80016e4 <HAL_ADC_MspInit+0xac>)
 8001654:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001658:	6453      	str	r3, [r2, #68]	@ 0x44
 800165a:	4b22      	ldr	r3, [pc, #136]	@ (80016e4 <HAL_ADC_MspInit+0xac>)
 800165c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800165e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001666:	4b20      	ldr	r3, [pc, #128]	@ (80016e8 <HAL_ADC_MspInit+0xb0>)
 8001668:	4a20      	ldr	r2, [pc, #128]	@ (80016ec <HAL_ADC_MspInit+0xb4>)
 800166a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800166c:	4b1e      	ldr	r3, [pc, #120]	@ (80016e8 <HAL_ADC_MspInit+0xb0>)
 800166e:	2200      	movs	r2, #0
 8001670:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001672:	4b1d      	ldr	r3, [pc, #116]	@ (80016e8 <HAL_ADC_MspInit+0xb0>)
 8001674:	2200      	movs	r2, #0
 8001676:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001678:	4b1b      	ldr	r3, [pc, #108]	@ (80016e8 <HAL_ADC_MspInit+0xb0>)
 800167a:	2200      	movs	r2, #0
 800167c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800167e:	4b1a      	ldr	r3, [pc, #104]	@ (80016e8 <HAL_ADC_MspInit+0xb0>)
 8001680:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001684:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001686:	4b18      	ldr	r3, [pc, #96]	@ (80016e8 <HAL_ADC_MspInit+0xb0>)
 8001688:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800168c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800168e:	4b16      	ldr	r3, [pc, #88]	@ (80016e8 <HAL_ADC_MspInit+0xb0>)
 8001690:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001694:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001696:	4b14      	ldr	r3, [pc, #80]	@ (80016e8 <HAL_ADC_MspInit+0xb0>)
 8001698:	2200      	movs	r2, #0
 800169a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800169c:	4b12      	ldr	r3, [pc, #72]	@ (80016e8 <HAL_ADC_MspInit+0xb0>)
 800169e:	2200      	movs	r2, #0
 80016a0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80016a2:	4b11      	ldr	r3, [pc, #68]	@ (80016e8 <HAL_ADC_MspInit+0xb0>)
 80016a4:	2204      	movs	r2, #4
 80016a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80016a8:	4b0f      	ldr	r3, [pc, #60]	@ (80016e8 <HAL_ADC_MspInit+0xb0>)
 80016aa:	2203      	movs	r2, #3
 80016ac:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 80016ae:	4b0e      	ldr	r3, [pc, #56]	@ (80016e8 <HAL_ADC_MspInit+0xb0>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80016b4:	4b0c      	ldr	r3, [pc, #48]	@ (80016e8 <HAL_ADC_MspInit+0xb0>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80016ba:	480b      	ldr	r0, [pc, #44]	@ (80016e8 <HAL_ADC_MspInit+0xb0>)
 80016bc:	f001 f80c 	bl	80026d8 <HAL_DMA_Init>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <HAL_ADC_MspInit+0x92>
    {
      Error_Handler();
 80016c6:	f7ff ff85 	bl	80015d4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a06      	ldr	r2, [pc, #24]	@ (80016e8 <HAL_ADC_MspInit+0xb0>)
 80016ce:	639a      	str	r2, [r3, #56]	@ 0x38
 80016d0:	4a05      	ldr	r2, [pc, #20]	@ (80016e8 <HAL_ADC_MspInit+0xb0>)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80016d6:	bf00      	nop
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40012000 	.word	0x40012000
 80016e4:	40023800 	.word	0x40023800
 80016e8:	200004dc 	.word	0x200004dc
 80016ec:	40026410 	.word	0x40026410

080016f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b08a      	sub	sp, #40	@ 0x28
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
 8001706:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a49      	ldr	r2, [pc, #292]	@ (8001834 <HAL_I2C_MspInit+0x144>)
 800170e:	4293      	cmp	r3, r2
 8001710:	f040 808b 	bne.w	800182a <HAL_I2C_MspInit+0x13a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001714:	2300      	movs	r3, #0
 8001716:	613b      	str	r3, [r7, #16]
 8001718:	4b47      	ldr	r3, [pc, #284]	@ (8001838 <HAL_I2C_MspInit+0x148>)
 800171a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171c:	4a46      	ldr	r2, [pc, #280]	@ (8001838 <HAL_I2C_MspInit+0x148>)
 800171e:	f043 0302 	orr.w	r3, r3, #2
 8001722:	6313      	str	r3, [r2, #48]	@ 0x30
 8001724:	4b44      	ldr	r3, [pc, #272]	@ (8001838 <HAL_I2C_MspInit+0x148>)
 8001726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001728:	f003 0302 	and.w	r3, r3, #2
 800172c:	613b      	str	r3, [r7, #16]
 800172e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001730:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001734:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001736:	2312      	movs	r3, #18
 8001738:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173a:	2300      	movs	r3, #0
 800173c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173e:	2303      	movs	r3, #3
 8001740:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001742:	2304      	movs	r3, #4
 8001744:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001746:	f107 0314 	add.w	r3, r7, #20
 800174a:	4619      	mov	r1, r3
 800174c:	483b      	ldr	r0, [pc, #236]	@ (800183c <HAL_I2C_MspInit+0x14c>)
 800174e:	f001 faad 	bl	8002cac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	4b38      	ldr	r3, [pc, #224]	@ (8001838 <HAL_I2C_MspInit+0x148>)
 8001758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175a:	4a37      	ldr	r2, [pc, #220]	@ (8001838 <HAL_I2C_MspInit+0x148>)
 800175c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001760:	6413      	str	r3, [r2, #64]	@ 0x40
 8001762:	4b35      	ldr	r3, [pc, #212]	@ (8001838 <HAL_I2C_MspInit+0x148>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001766:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 800176e:	4b34      	ldr	r3, [pc, #208]	@ (8001840 <HAL_I2C_MspInit+0x150>)
 8001770:	4a34      	ldr	r2, [pc, #208]	@ (8001844 <HAL_I2C_MspInit+0x154>)
 8001772:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8001774:	4b32      	ldr	r3, [pc, #200]	@ (8001840 <HAL_I2C_MspInit+0x150>)
 8001776:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800177a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800177c:	4b30      	ldr	r3, [pc, #192]	@ (8001840 <HAL_I2C_MspInit+0x150>)
 800177e:	2240      	movs	r2, #64	@ 0x40
 8001780:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001782:	4b2f      	ldr	r3, [pc, #188]	@ (8001840 <HAL_I2C_MspInit+0x150>)
 8001784:	2200      	movs	r2, #0
 8001786:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001788:	4b2d      	ldr	r3, [pc, #180]	@ (8001840 <HAL_I2C_MspInit+0x150>)
 800178a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800178e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001790:	4b2b      	ldr	r3, [pc, #172]	@ (8001840 <HAL_I2C_MspInit+0x150>)
 8001792:	2200      	movs	r2, #0
 8001794:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001796:	4b2a      	ldr	r3, [pc, #168]	@ (8001840 <HAL_I2C_MspInit+0x150>)
 8001798:	2200      	movs	r2, #0
 800179a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800179c:	4b28      	ldr	r3, [pc, #160]	@ (8001840 <HAL_I2C_MspInit+0x150>)
 800179e:	2200      	movs	r2, #0
 80017a0:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80017a2:	4b27      	ldr	r3, [pc, #156]	@ (8001840 <HAL_I2C_MspInit+0x150>)
 80017a4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80017a8:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017aa:	4b25      	ldr	r3, [pc, #148]	@ (8001840 <HAL_I2C_MspInit+0x150>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80017b0:	4823      	ldr	r0, [pc, #140]	@ (8001840 <HAL_I2C_MspInit+0x150>)
 80017b2:	f000 ff91 	bl	80026d8 <HAL_DMA_Init>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <HAL_I2C_MspInit+0xd0>
    {
      Error_Handler();
 80017bc:	f7ff ff0a 	bl	80015d4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4a1f      	ldr	r2, [pc, #124]	@ (8001840 <HAL_I2C_MspInit+0x150>)
 80017c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80017c6:	4a1e      	ldr	r2, [pc, #120]	@ (8001840 <HAL_I2C_MspInit+0x150>)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80017cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001848 <HAL_I2C_MspInit+0x158>)
 80017ce:	4a1f      	ldr	r2, [pc, #124]	@ (800184c <HAL_I2C_MspInit+0x15c>)
 80017d0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80017d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001848 <HAL_I2C_MspInit+0x158>)
 80017d4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80017d8:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017da:	4b1b      	ldr	r3, [pc, #108]	@ (8001848 <HAL_I2C_MspInit+0x158>)
 80017dc:	2200      	movs	r2, #0
 80017de:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017e0:	4b19      	ldr	r3, [pc, #100]	@ (8001848 <HAL_I2C_MspInit+0x158>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017e6:	4b18      	ldr	r3, [pc, #96]	@ (8001848 <HAL_I2C_MspInit+0x158>)
 80017e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017ec:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017ee:	4b16      	ldr	r3, [pc, #88]	@ (8001848 <HAL_I2C_MspInit+0x158>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017f4:	4b14      	ldr	r3, [pc, #80]	@ (8001848 <HAL_I2C_MspInit+0x158>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80017fa:	4b13      	ldr	r3, [pc, #76]	@ (8001848 <HAL_I2C_MspInit+0x158>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001800:	4b11      	ldr	r3, [pc, #68]	@ (8001848 <HAL_I2C_MspInit+0x158>)
 8001802:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001806:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001808:	4b0f      	ldr	r3, [pc, #60]	@ (8001848 <HAL_I2C_MspInit+0x158>)
 800180a:	2200      	movs	r2, #0
 800180c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800180e:	480e      	ldr	r0, [pc, #56]	@ (8001848 <HAL_I2C_MspInit+0x158>)
 8001810:	f000 ff62 	bl	80026d8 <HAL_DMA_Init>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <HAL_I2C_MspInit+0x12e>
    {
      Error_Handler();
 800181a:	f7ff fedb 	bl	80015d4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a09      	ldr	r2, [pc, #36]	@ (8001848 <HAL_I2C_MspInit+0x158>)
 8001822:	639a      	str	r2, [r3, #56]	@ 0x38
 8001824:	4a08      	ldr	r2, [pc, #32]	@ (8001848 <HAL_I2C_MspInit+0x158>)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800182a:	bf00      	nop
 800182c:	3728      	adds	r7, #40	@ 0x28
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40005400 	.word	0x40005400
 8001838:	40023800 	.word	0x40023800
 800183c:	40020400 	.word	0x40020400
 8001840:	20000590 	.word	0x20000590
 8001844:	400260a0 	.word	0x400260a0
 8001848:	200005f0 	.word	0x200005f0
 800184c:	40026010 	.word	0x40026010

08001850 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b08a      	sub	sp, #40	@ 0x28
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001858:	f107 0314 	add.w	r3, r7, #20
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
 8001866:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a28      	ldr	r2, [pc, #160]	@ (8001910 <HAL_SPI_MspInit+0xc0>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d149      	bne.n	8001906 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	613b      	str	r3, [r7, #16]
 8001876:	4b27      	ldr	r3, [pc, #156]	@ (8001914 <HAL_SPI_MspInit+0xc4>)
 8001878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800187a:	4a26      	ldr	r2, [pc, #152]	@ (8001914 <HAL_SPI_MspInit+0xc4>)
 800187c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001880:	6453      	str	r3, [r2, #68]	@ 0x44
 8001882:	4b24      	ldr	r3, [pc, #144]	@ (8001914 <HAL_SPI_MspInit+0xc4>)
 8001884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001886:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800188a:	613b      	str	r3, [r7, #16]
 800188c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	4b20      	ldr	r3, [pc, #128]	@ (8001914 <HAL_SPI_MspInit+0xc4>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001896:	4a1f      	ldr	r2, [pc, #124]	@ (8001914 <HAL_SPI_MspInit+0xc4>)
 8001898:	f043 0301 	orr.w	r3, r3, #1
 800189c:	6313      	str	r3, [r2, #48]	@ 0x30
 800189e:	4b1d      	ldr	r3, [pc, #116]	@ (8001914 <HAL_SPI_MspInit+0xc4>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	60bb      	str	r3, [r7, #8]
 80018ae:	4b19      	ldr	r3, [pc, #100]	@ (8001914 <HAL_SPI_MspInit+0xc4>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b2:	4a18      	ldr	r2, [pc, #96]	@ (8001914 <HAL_SPI_MspInit+0xc4>)
 80018b4:	f043 0302 	orr.w	r3, r3, #2
 80018b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ba:	4b16      	ldr	r3, [pc, #88]	@ (8001914 <HAL_SPI_MspInit+0xc4>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	60bb      	str	r3, [r7, #8]
 80018c4:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018c6:	23c0      	movs	r3, #192	@ 0xc0
 80018c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ca:	2302      	movs	r3, #2
 80018cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d2:	2303      	movs	r3, #3
 80018d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018d6:	2305      	movs	r3, #5
 80018d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018da:	f107 0314 	add.w	r3, r7, #20
 80018de:	4619      	mov	r1, r3
 80018e0:	480d      	ldr	r0, [pc, #52]	@ (8001918 <HAL_SPI_MspInit+0xc8>)
 80018e2:	f001 f9e3 	bl	8002cac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80018e6:	2308      	movs	r3, #8
 80018e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ea:	2302      	movs	r3, #2
 80018ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f2:	2303      	movs	r3, #3
 80018f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018f6:	2305      	movs	r3, #5
 80018f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018fa:	f107 0314 	add.w	r3, r7, #20
 80018fe:	4619      	mov	r1, r3
 8001900:	4806      	ldr	r0, [pc, #24]	@ (800191c <HAL_SPI_MspInit+0xcc>)
 8001902:	f001 f9d3 	bl	8002cac <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001906:	bf00      	nop
 8001908:	3728      	adds	r7, #40	@ 0x28
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40013000 	.word	0x40013000
 8001914:	40023800 	.word	0x40023800
 8001918:	40020000 	.word	0x40020000
 800191c:	40020400 	.word	0x40020400

08001920 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b08c      	sub	sp, #48	@ 0x30
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001928:	2300      	movs	r3, #0
 800192a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800192c:	2300      	movs	r3, #0
 800192e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001930:	2300      	movs	r3, #0
 8001932:	60bb      	str	r3, [r7, #8]
 8001934:	4b2e      	ldr	r3, [pc, #184]	@ (80019f0 <HAL_InitTick+0xd0>)
 8001936:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001938:	4a2d      	ldr	r2, [pc, #180]	@ (80019f0 <HAL_InitTick+0xd0>)
 800193a:	f043 0301 	orr.w	r3, r3, #1
 800193e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001940:	4b2b      	ldr	r3, [pc, #172]	@ (80019f0 <HAL_InitTick+0xd0>)
 8001942:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001944:	f003 0301 	and.w	r3, r3, #1
 8001948:	60bb      	str	r3, [r7, #8]
 800194a:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800194c:	f107 020c 	add.w	r2, r7, #12
 8001950:	f107 0310 	add.w	r3, r7, #16
 8001954:	4611      	mov	r1, r2
 8001956:	4618      	mov	r0, r3
 8001958:	f003 f80c 	bl	8004974 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800195c:	f002 fff6 	bl	800494c <HAL_RCC_GetPCLK2Freq>
 8001960:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001964:	4a23      	ldr	r2, [pc, #140]	@ (80019f4 <HAL_InitTick+0xd4>)
 8001966:	fba2 2303 	umull	r2, r3, r2, r3
 800196a:	0c9b      	lsrs	r3, r3, #18
 800196c:	3b01      	subs	r3, #1
 800196e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001970:	4b21      	ldr	r3, [pc, #132]	@ (80019f8 <HAL_InitTick+0xd8>)
 8001972:	4a22      	ldr	r2, [pc, #136]	@ (80019fc <HAL_InitTick+0xdc>)
 8001974:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001976:	4b20      	ldr	r3, [pc, #128]	@ (80019f8 <HAL_InitTick+0xd8>)
 8001978:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800197c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800197e:	4a1e      	ldr	r2, [pc, #120]	@ (80019f8 <HAL_InitTick+0xd8>)
 8001980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001982:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001984:	4b1c      	ldr	r3, [pc, #112]	@ (80019f8 <HAL_InitTick+0xd8>)
 8001986:	2200      	movs	r2, #0
 8001988:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800198a:	4b1b      	ldr	r3, [pc, #108]	@ (80019f8 <HAL_InitTick+0xd8>)
 800198c:	2200      	movs	r2, #0
 800198e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001990:	4b19      	ldr	r3, [pc, #100]	@ (80019f8 <HAL_InitTick+0xd8>)
 8001992:	2200      	movs	r2, #0
 8001994:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001996:	4818      	ldr	r0, [pc, #96]	@ (80019f8 <HAL_InitTick+0xd8>)
 8001998:	f003 f8a7 	bl	8004aea <HAL_TIM_Base_Init>
 800199c:	4603      	mov	r3, r0
 800199e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80019a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d11b      	bne.n	80019e2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80019aa:	4813      	ldr	r0, [pc, #76]	@ (80019f8 <HAL_InitTick+0xd8>)
 80019ac:	f003 f8f6 	bl	8004b9c <HAL_TIM_Base_Start_IT>
 80019b0:	4603      	mov	r3, r0
 80019b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80019b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d111      	bne.n	80019e2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80019be:	2019      	movs	r0, #25
 80019c0:	f000 fe7c 	bl	80026bc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2b0f      	cmp	r3, #15
 80019c8:	d808      	bhi.n	80019dc <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80019ca:	2200      	movs	r2, #0
 80019cc:	6879      	ldr	r1, [r7, #4]
 80019ce:	2019      	movs	r0, #25
 80019d0:	f000 fe58 	bl	8002684 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019d4:	4a0a      	ldr	r2, [pc, #40]	@ (8001a00 <HAL_InitTick+0xe0>)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6013      	str	r3, [r2, #0]
 80019da:	e002      	b.n	80019e2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80019e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3730      	adds	r7, #48	@ 0x30
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	40023800 	.word	0x40023800
 80019f4:	431bde83 	.word	0x431bde83
 80019f8:	200006b4 	.word	0x200006b4
 80019fc:	40010000 	.word	0x40010000
 8001a00:	20000004 	.word	0x20000004

08001a04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a08:	bf00      	nop
 8001a0a:	e7fd      	b.n	8001a08 <NMI_Handler+0x4>

08001a0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a10:	bf00      	nop
 8001a12:	e7fd      	b.n	8001a10 <HardFault_Handler+0x4>

08001a14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a18:	bf00      	nop
 8001a1a:	e7fd      	b.n	8001a18 <MemManage_Handler+0x4>

08001a1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a20:	bf00      	nop
 8001a22:	e7fd      	b.n	8001a20 <BusFault_Handler+0x4>

08001a24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a28:	bf00      	nop
 8001a2a:	e7fd      	b.n	8001a28 <UsageFault_Handler+0x4>

08001a2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
	...

08001a3c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001a40:	4802      	ldr	r0, [pc, #8]	@ (8001a4c <DMA1_Stream0_IRQHandler+0x10>)
 8001a42:	f000 fef7 	bl	8002834 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	200005f0 	.word	0x200005f0

08001a50 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001a54:	4802      	ldr	r0, [pc, #8]	@ (8001a60 <DMA1_Stream6_IRQHandler+0x10>)
 8001a56:	f000 feed 	bl	8002834 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	20000590 	.word	0x20000590

08001a64 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a68:	4802      	ldr	r0, [pc, #8]	@ (8001a74 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001a6a:	f003 f907 	bl	8004c7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	200006b4 	.word	0x200006b4

08001a78 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001a7c:	4802      	ldr	r0, [pc, #8]	@ (8001a88 <DMA2_Stream0_IRQHandler+0x10>)
 8001a7e:	f000 fed9 	bl	8002834 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	200004dc 	.word	0x200004dc

08001a8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  return 1;
 8001a90:	2301      	movs	r3, #1
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <_kill>:

int _kill(int pid, int sig)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001aa6:	f005 fb53 	bl	8007150 <__errno>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2216      	movs	r2, #22
 8001aae:	601a      	str	r2, [r3, #0]
  return -1;
 8001ab0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <_exit>:

void _exit (int status)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f7ff ffe7 	bl	8001a9c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ace:	bf00      	nop
 8001ad0:	e7fd      	b.n	8001ace <_exit+0x12>

08001ad2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b086      	sub	sp, #24
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	60f8      	str	r0, [r7, #12]
 8001ada:	60b9      	str	r1, [r7, #8]
 8001adc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ade:	2300      	movs	r3, #0
 8001ae0:	617b      	str	r3, [r7, #20]
 8001ae2:	e00a      	b.n	8001afa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ae4:	f3af 8000 	nop.w
 8001ae8:	4601      	mov	r1, r0
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	1c5a      	adds	r2, r3, #1
 8001aee:	60ba      	str	r2, [r7, #8]
 8001af0:	b2ca      	uxtb	r2, r1
 8001af2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	3301      	adds	r3, #1
 8001af8:	617b      	str	r3, [r7, #20]
 8001afa:	697a      	ldr	r2, [r7, #20]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	dbf0      	blt.n	8001ae4 <_read+0x12>
  }

  return len;
 8001b02:	687b      	ldr	r3, [r7, #4]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3718      	adds	r7, #24
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]
 8001b1c:	e009      	b.n	8001b32 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	1c5a      	adds	r2, r3, #1
 8001b22:	60ba      	str	r2, [r7, #8]
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	617b      	str	r3, [r7, #20]
 8001b32:	697a      	ldr	r2, [r7, #20]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	dbf1      	blt.n	8001b1e <_write+0x12>
  }
  return len;
 8001b3a:	687b      	ldr	r3, [r7, #4]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3718      	adds	r7, #24
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <_close>:

int _close(int file)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b6c:	605a      	str	r2, [r3, #4]
  return 0;
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <_isatty>:

int _isatty(int file)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b84:	2301      	movs	r3, #1
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b92:	b480      	push	{r7}
 8001b94:	b085      	sub	sp, #20
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	60f8      	str	r0, [r7, #12]
 8001b9a:	60b9      	str	r1, [r7, #8]
 8001b9c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b9e:	2300      	movs	r3, #0
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3714      	adds	r7, #20
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bb4:	4a14      	ldr	r2, [pc, #80]	@ (8001c08 <_sbrk+0x5c>)
 8001bb6:	4b15      	ldr	r3, [pc, #84]	@ (8001c0c <_sbrk+0x60>)
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bc0:	4b13      	ldr	r3, [pc, #76]	@ (8001c10 <_sbrk+0x64>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d102      	bne.n	8001bce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bc8:	4b11      	ldr	r3, [pc, #68]	@ (8001c10 <_sbrk+0x64>)
 8001bca:	4a12      	ldr	r2, [pc, #72]	@ (8001c14 <_sbrk+0x68>)
 8001bcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bce:	4b10      	ldr	r3, [pc, #64]	@ (8001c10 <_sbrk+0x64>)
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d207      	bcs.n	8001bec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bdc:	f005 fab8 	bl	8007150 <__errno>
 8001be0:	4603      	mov	r3, r0
 8001be2:	220c      	movs	r2, #12
 8001be4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001be6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bea:	e009      	b.n	8001c00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bec:	4b08      	ldr	r3, [pc, #32]	@ (8001c10 <_sbrk+0x64>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bf2:	4b07      	ldr	r3, [pc, #28]	@ (8001c10 <_sbrk+0x64>)
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	4a05      	ldr	r2, [pc, #20]	@ (8001c10 <_sbrk+0x64>)
 8001bfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3718      	adds	r7, #24
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	20020000 	.word	0x20020000
 8001c0c:	00000400 	.word	0x00000400
 8001c10:	200006fc 	.word	0x200006fc
 8001c14:	200045a8 	.word	0x200045a8

08001c18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c1c:	4b06      	ldr	r3, [pc, #24]	@ (8001c38 <SystemInit+0x20>)
 8001c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c22:	4a05      	ldr	r2, [pc, #20]	@ (8001c38 <SystemInit+0x20>)
 8001c24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c2c:	bf00      	nop
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	e000ed00 	.word	0xe000ed00

08001c3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001c3c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c74 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001c40:	f7ff ffea 	bl	8001c18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c44:	480c      	ldr	r0, [pc, #48]	@ (8001c78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c46:	490d      	ldr	r1, [pc, #52]	@ (8001c7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c48:	4a0d      	ldr	r2, [pc, #52]	@ (8001c80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c4c:	e002      	b.n	8001c54 <LoopCopyDataInit>

08001c4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c52:	3304      	adds	r3, #4

08001c54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c58:	d3f9      	bcc.n	8001c4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c5c:	4c0a      	ldr	r4, [pc, #40]	@ (8001c88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c60:	e001      	b.n	8001c66 <LoopFillZerobss>

08001c62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c64:	3204      	adds	r2, #4

08001c66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c68:	d3fb      	bcc.n	8001c62 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001c6a:	f005 fa77 	bl	800715c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c6e:	f7ff fa17 	bl	80010a0 <main>
  bx  lr    
 8001c72:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c7c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001c80:	08009330 	.word	0x08009330
  ldr r2, =_sbss
 8001c84:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001c88:	200045a4 	.word	0x200045a4

08001c8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c8c:	e7fe      	b.n	8001c8c <ADC_IRQHandler>
	...

08001c90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c94:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd0 <HAL_Init+0x40>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a0d      	ldr	r2, [pc, #52]	@ (8001cd0 <HAL_Init+0x40>)
 8001c9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd0 <HAL_Init+0x40>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a0a      	ldr	r2, [pc, #40]	@ (8001cd0 <HAL_Init+0x40>)
 8001ca6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001caa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cac:	4b08      	ldr	r3, [pc, #32]	@ (8001cd0 <HAL_Init+0x40>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a07      	ldr	r2, [pc, #28]	@ (8001cd0 <HAL_Init+0x40>)
 8001cb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cb8:	2003      	movs	r0, #3
 8001cba:	f000 fcd8 	bl	800266e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cbe:	200f      	movs	r0, #15
 8001cc0:	f7ff fe2e 	bl	8001920 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cc4:	f7ff fc8c 	bl	80015e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40023c00 	.word	0x40023c00

08001cd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cd8:	4b06      	ldr	r3, [pc, #24]	@ (8001cf4 <HAL_IncTick+0x20>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	461a      	mov	r2, r3
 8001cde:	4b06      	ldr	r3, [pc, #24]	@ (8001cf8 <HAL_IncTick+0x24>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	4a04      	ldr	r2, [pc, #16]	@ (8001cf8 <HAL_IncTick+0x24>)
 8001ce6:	6013      	str	r3, [r2, #0]
}
 8001ce8:	bf00      	nop
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	20000008 	.word	0x20000008
 8001cf8:	20000700 	.word	0x20000700

08001cfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  return uwTick;
 8001d00:	4b03      	ldr	r3, [pc, #12]	@ (8001d10 <HAL_GetTick+0x14>)
 8001d02:	681b      	ldr	r3, [r3, #0]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	20000700 	.word	0x20000700

08001d14 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e033      	b.n	8001d92 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d109      	bne.n	8001d46 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f7ff fc80 	bl	8001638 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d4a:	f003 0310 	and.w	r3, r3, #16
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d118      	bne.n	8001d84 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d56:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001d5a:	f023 0302 	bic.w	r3, r3, #2
 8001d5e:	f043 0202 	orr.w	r2, r3, #2
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 fad8 	bl	800231c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d76:	f023 0303 	bic.w	r3, r3, #3
 8001d7a:	f043 0201 	orr.w	r2, r3, #1
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d82:	e001      	b.n	8001d88 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
	...

08001d9c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001da4:	2300      	movs	r3, #0
 8001da6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d101      	bne.n	8001db6 <HAL_ADC_Start+0x1a>
 8001db2:	2302      	movs	r3, #2
 8001db4:	e0b2      	b.n	8001f1c <HAL_ADC_Start+0x180>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2201      	movs	r2, #1
 8001dba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d018      	beq.n	8001dfe <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	689a      	ldr	r2, [r3, #8]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f042 0201 	orr.w	r2, r2, #1
 8001dda:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ddc:	4b52      	ldr	r3, [pc, #328]	@ (8001f28 <HAL_ADC_Start+0x18c>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a52      	ldr	r2, [pc, #328]	@ (8001f2c <HAL_ADC_Start+0x190>)
 8001de2:	fba2 2303 	umull	r2, r3, r2, r3
 8001de6:	0c9a      	lsrs	r2, r3, #18
 8001de8:	4613      	mov	r3, r2
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	4413      	add	r3, r2
 8001dee:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001df0:	e002      	b.n	8001df8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	3b01      	subs	r3, #1
 8001df6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d1f9      	bne.n	8001df2 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d17a      	bne.n	8001f02 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e10:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001e14:	f023 0301 	bic.w	r3, r3, #1
 8001e18:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d007      	beq.n	8001e3e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e32:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001e36:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e42:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e4a:	d106      	bne.n	8001e5a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e50:	f023 0206 	bic.w	r2, r3, #6
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	645a      	str	r2, [r3, #68]	@ 0x44
 8001e58:	e002      	b.n	8001e60 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e68:	4b31      	ldr	r3, [pc, #196]	@ (8001f30 <HAL_ADC_Start+0x194>)
 8001e6a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001e74:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f003 031f 	and.w	r3, r3, #31
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d12a      	bne.n	8001ed8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a2b      	ldr	r2, [pc, #172]	@ (8001f34 <HAL_ADC_Start+0x198>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d015      	beq.n	8001eb8 <HAL_ADC_Start+0x11c>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a29      	ldr	r2, [pc, #164]	@ (8001f38 <HAL_ADC_Start+0x19c>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d105      	bne.n	8001ea2 <HAL_ADC_Start+0x106>
 8001e96:	4b26      	ldr	r3, [pc, #152]	@ (8001f30 <HAL_ADC_Start+0x194>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f003 031f 	and.w	r3, r3, #31
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d00a      	beq.n	8001eb8 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a25      	ldr	r2, [pc, #148]	@ (8001f3c <HAL_ADC_Start+0x1a0>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d136      	bne.n	8001f1a <HAL_ADC_Start+0x17e>
 8001eac:	4b20      	ldr	r3, [pc, #128]	@ (8001f30 <HAL_ADC_Start+0x194>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f003 0310 	and.w	r3, r3, #16
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d130      	bne.n	8001f1a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d129      	bne.n	8001f1a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	689a      	ldr	r2, [r3, #8]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001ed4:	609a      	str	r2, [r3, #8]
 8001ed6:	e020      	b.n	8001f1a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a15      	ldr	r2, [pc, #84]	@ (8001f34 <HAL_ADC_Start+0x198>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d11b      	bne.n	8001f1a <HAL_ADC_Start+0x17e>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d114      	bne.n	8001f1a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	689a      	ldr	r2, [r3, #8]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001efe:	609a      	str	r2, [r3, #8]
 8001f00:	e00b      	b.n	8001f1a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f06:	f043 0210 	orr.w	r2, r3, #16
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f12:	f043 0201 	orr.w	r2, r3, #1
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3714      	adds	r7, #20
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	20000000 	.word	0x20000000
 8001f2c:	431bde83 	.word	0x431bde83
 8001f30:	40012300 	.word	0x40012300
 8001f34:	40012000 	.word	0x40012000
 8001f38:	40012100 	.word	0x40012100
 8001f3c:	40012200 	.word	0x40012200

08001f40 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d101      	bne.n	8001f56 <HAL_ADC_Stop+0x16>
 8001f52:	2302      	movs	r3, #2
 8001f54:	e021      	b.n	8001f9a <HAL_ADC_Stop+0x5a>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	689a      	ldr	r2, [r3, #8]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f022 0201 	bic.w	r2, r2, #1
 8001f6c:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d109      	bne.n	8001f90 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f80:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001f84:	f023 0301 	bic.w	r3, r3, #1
 8001f88:	f043 0201 	orr.w	r2, r3, #1
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b084      	sub	sp, #16
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
 8001fae:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fc2:	d113      	bne.n	8001fec <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001fce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001fd2:	d10b      	bne.n	8001fec <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd8:	f043 0220 	orr.w	r2, r3, #32
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e063      	b.n	80020b4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fec:	f7ff fe86 	bl	8001cfc <HAL_GetTick>
 8001ff0:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ff2:	e021      	b.n	8002038 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ffa:	d01d      	beq.n	8002038 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d007      	beq.n	8002012 <HAL_ADC_PollForConversion+0x6c>
 8002002:	f7ff fe7b 	bl	8001cfc <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	429a      	cmp	r2, r3
 8002010:	d212      	bcs.n	8002038 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b02      	cmp	r3, #2
 800201e:	d00b      	beq.n	8002038 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002024:	f043 0204 	orr.w	r2, r3, #4
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e03d      	b.n	80020b4 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b02      	cmp	r3, #2
 8002044:	d1d6      	bne.n	8001ff4 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f06f 0212 	mvn.w	r2, #18
 800204e:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002054:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d123      	bne.n	80020b2 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800206e:	2b00      	cmp	r3, #0
 8002070:	d11f      	bne.n	80020b2 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002078:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800207c:	2b00      	cmp	r3, #0
 800207e:	d006      	beq.n	800208e <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800208a:	2b00      	cmp	r3, #0
 800208c:	d111      	bne.n	80020b2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002092:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d105      	bne.n	80020b2 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020aa:	f043 0201 	orr.w	r2, r3, #1
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3710      	adds	r7, #16
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
	...

080020d8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80020e2:	2300      	movs	r3, #0
 80020e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d101      	bne.n	80020f4 <HAL_ADC_ConfigChannel+0x1c>
 80020f0:	2302      	movs	r3, #2
 80020f2:	e105      	b.n	8002300 <HAL_ADC_ConfigChannel+0x228>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2b09      	cmp	r3, #9
 8002102:	d925      	bls.n	8002150 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	68d9      	ldr	r1, [r3, #12]
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	b29b      	uxth	r3, r3
 8002110:	461a      	mov	r2, r3
 8002112:	4613      	mov	r3, r2
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	4413      	add	r3, r2
 8002118:	3b1e      	subs	r3, #30
 800211a:	2207      	movs	r2, #7
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	43da      	mvns	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	400a      	ands	r2, r1
 8002128:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68d9      	ldr	r1, [r3, #12]
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	b29b      	uxth	r3, r3
 800213a:	4618      	mov	r0, r3
 800213c:	4603      	mov	r3, r0
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	4403      	add	r3, r0
 8002142:	3b1e      	subs	r3, #30
 8002144:	409a      	lsls	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	430a      	orrs	r2, r1
 800214c:	60da      	str	r2, [r3, #12]
 800214e:	e022      	b.n	8002196 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	6919      	ldr	r1, [r3, #16]
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	b29b      	uxth	r3, r3
 800215c:	461a      	mov	r2, r3
 800215e:	4613      	mov	r3, r2
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	4413      	add	r3, r2
 8002164:	2207      	movs	r2, #7
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	43da      	mvns	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	400a      	ands	r2, r1
 8002172:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6919      	ldr	r1, [r3, #16]
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	689a      	ldr	r2, [r3, #8]
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	b29b      	uxth	r3, r3
 8002184:	4618      	mov	r0, r3
 8002186:	4603      	mov	r3, r0
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	4403      	add	r3, r0
 800218c:	409a      	lsls	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	430a      	orrs	r2, r1
 8002194:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	2b06      	cmp	r3, #6
 800219c:	d824      	bhi.n	80021e8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685a      	ldr	r2, [r3, #4]
 80021a8:	4613      	mov	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4413      	add	r3, r2
 80021ae:	3b05      	subs	r3, #5
 80021b0:	221f      	movs	r2, #31
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	43da      	mvns	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	400a      	ands	r2, r1
 80021be:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	4618      	mov	r0, r3
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685a      	ldr	r2, [r3, #4]
 80021d2:	4613      	mov	r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	4413      	add	r3, r2
 80021d8:	3b05      	subs	r3, #5
 80021da:	fa00 f203 	lsl.w	r2, r0, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	430a      	orrs	r2, r1
 80021e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80021e6:	e04c      	b.n	8002282 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	2b0c      	cmp	r3, #12
 80021ee:	d824      	bhi.n	800223a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685a      	ldr	r2, [r3, #4]
 80021fa:	4613      	mov	r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4413      	add	r3, r2
 8002200:	3b23      	subs	r3, #35	@ 0x23
 8002202:	221f      	movs	r2, #31
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	43da      	mvns	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	400a      	ands	r2, r1
 8002210:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	b29b      	uxth	r3, r3
 800221e:	4618      	mov	r0, r3
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685a      	ldr	r2, [r3, #4]
 8002224:	4613      	mov	r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	4413      	add	r3, r2
 800222a:	3b23      	subs	r3, #35	@ 0x23
 800222c:	fa00 f203 	lsl.w	r2, r0, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	430a      	orrs	r2, r1
 8002236:	631a      	str	r2, [r3, #48]	@ 0x30
 8002238:	e023      	b.n	8002282 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685a      	ldr	r2, [r3, #4]
 8002244:	4613      	mov	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	4413      	add	r3, r2
 800224a:	3b41      	subs	r3, #65	@ 0x41
 800224c:	221f      	movs	r2, #31
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	43da      	mvns	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	400a      	ands	r2, r1
 800225a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	b29b      	uxth	r3, r3
 8002268:	4618      	mov	r0, r3
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685a      	ldr	r2, [r3, #4]
 800226e:	4613      	mov	r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	4413      	add	r3, r2
 8002274:	3b41      	subs	r3, #65	@ 0x41
 8002276:	fa00 f203 	lsl.w	r2, r0, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	430a      	orrs	r2, r1
 8002280:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002282:	4b22      	ldr	r3, [pc, #136]	@ (800230c <HAL_ADC_ConfigChannel+0x234>)
 8002284:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a21      	ldr	r2, [pc, #132]	@ (8002310 <HAL_ADC_ConfigChannel+0x238>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d109      	bne.n	80022a4 <HAL_ADC_ConfigChannel+0x1cc>
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2b12      	cmp	r3, #18
 8002296:	d105      	bne.n	80022a4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a19      	ldr	r2, [pc, #100]	@ (8002310 <HAL_ADC_ConfigChannel+0x238>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d123      	bne.n	80022f6 <HAL_ADC_ConfigChannel+0x21e>
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2b10      	cmp	r3, #16
 80022b4:	d003      	beq.n	80022be <HAL_ADC_ConfigChannel+0x1e6>
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2b11      	cmp	r3, #17
 80022bc:	d11b      	bne.n	80022f6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2b10      	cmp	r3, #16
 80022d0:	d111      	bne.n	80022f6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80022d2:	4b10      	ldr	r3, [pc, #64]	@ (8002314 <HAL_ADC_ConfigChannel+0x23c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a10      	ldr	r2, [pc, #64]	@ (8002318 <HAL_ADC_ConfigChannel+0x240>)
 80022d8:	fba2 2303 	umull	r2, r3, r2, r3
 80022dc:	0c9a      	lsrs	r2, r3, #18
 80022de:	4613      	mov	r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	4413      	add	r3, r2
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80022e8:	e002      	b.n	80022f0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	3b01      	subs	r3, #1
 80022ee:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1f9      	bne.n	80022ea <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	3714      	adds	r7, #20
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr
 800230c:	40012300 	.word	0x40012300
 8002310:	40012000 	.word	0x40012000
 8002314:	20000000 	.word	0x20000000
 8002318:	431bde83 	.word	0x431bde83

0800231c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002324:	4b79      	ldr	r3, [pc, #484]	@ (800250c <ADC_Init+0x1f0>)
 8002326:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	685a      	ldr	r2, [r3, #4]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	431a      	orrs	r2, r3
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	685a      	ldr	r2, [r3, #4]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002350:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	6859      	ldr	r1, [r3, #4]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	021a      	lsls	r2, r3, #8
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	430a      	orrs	r2, r1
 8002364:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002374:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	6859      	ldr	r1, [r3, #4]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	430a      	orrs	r2, r1
 8002386:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	689a      	ldr	r2, [r3, #8]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002396:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6899      	ldr	r1, [r3, #8]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	68da      	ldr	r2, [r3, #12]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	430a      	orrs	r2, r1
 80023a8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ae:	4a58      	ldr	r2, [pc, #352]	@ (8002510 <ADC_Init+0x1f4>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d022      	beq.n	80023fa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	689a      	ldr	r2, [r3, #8]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80023c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	6899      	ldr	r1, [r3, #8]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	430a      	orrs	r2, r1
 80023d4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	689a      	ldr	r2, [r3, #8]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80023e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6899      	ldr	r1, [r3, #8]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	430a      	orrs	r2, r1
 80023f6:	609a      	str	r2, [r3, #8]
 80023f8:	e00f      	b.n	800241a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	689a      	ldr	r2, [r3, #8]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002408:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	689a      	ldr	r2, [r3, #8]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002418:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	689a      	ldr	r2, [r3, #8]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f022 0202 	bic.w	r2, r2, #2
 8002428:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	6899      	ldr	r1, [r3, #8]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	7e1b      	ldrb	r3, [r3, #24]
 8002434:	005a      	lsls	r2, r3, #1
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	430a      	orrs	r2, r1
 800243c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d01b      	beq.n	8002480 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	685a      	ldr	r2, [r3, #4]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002456:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002466:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6859      	ldr	r1, [r3, #4]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002472:	3b01      	subs	r3, #1
 8002474:	035a      	lsls	r2, r3, #13
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	430a      	orrs	r2, r1
 800247c:	605a      	str	r2, [r3, #4]
 800247e:	e007      	b.n	8002490 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	685a      	ldr	r2, [r3, #4]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800248e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800249e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	3b01      	subs	r3, #1
 80024ac:	051a      	lsls	r2, r3, #20
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	430a      	orrs	r2, r1
 80024b4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80024c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	6899      	ldr	r1, [r3, #8]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80024d2:	025a      	lsls	r2, r3, #9
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	430a      	orrs	r2, r1
 80024da:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	689a      	ldr	r2, [r3, #8]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	6899      	ldr	r1, [r3, #8]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	029a      	lsls	r2, r3, #10
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	430a      	orrs	r2, r1
 80024fe:	609a      	str	r2, [r3, #8]
}
 8002500:	bf00      	nop
 8002502:	3714      	adds	r7, #20
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	40012300 	.word	0x40012300
 8002510:	0f000001 	.word	0x0f000001

08002514 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002514:	b480      	push	{r7}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f003 0307 	and.w	r3, r3, #7
 8002522:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002524:	4b0c      	ldr	r3, [pc, #48]	@ (8002558 <__NVIC_SetPriorityGrouping+0x44>)
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800252a:	68ba      	ldr	r2, [r7, #8]
 800252c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002530:	4013      	ands	r3, r2
 8002532:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800253c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002540:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002544:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002546:	4a04      	ldr	r2, [pc, #16]	@ (8002558 <__NVIC_SetPriorityGrouping+0x44>)
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	60d3      	str	r3, [r2, #12]
}
 800254c:	bf00      	nop
 800254e:	3714      	adds	r7, #20
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	e000ed00 	.word	0xe000ed00

0800255c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002560:	4b04      	ldr	r3, [pc, #16]	@ (8002574 <__NVIC_GetPriorityGrouping+0x18>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	0a1b      	lsrs	r3, r3, #8
 8002566:	f003 0307 	and.w	r3, r3, #7
}
 800256a:	4618      	mov	r0, r3
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	e000ed00 	.word	0xe000ed00

08002578 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	4603      	mov	r3, r0
 8002580:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002586:	2b00      	cmp	r3, #0
 8002588:	db0b      	blt.n	80025a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800258a:	79fb      	ldrb	r3, [r7, #7]
 800258c:	f003 021f 	and.w	r2, r3, #31
 8002590:	4907      	ldr	r1, [pc, #28]	@ (80025b0 <__NVIC_EnableIRQ+0x38>)
 8002592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002596:	095b      	lsrs	r3, r3, #5
 8002598:	2001      	movs	r0, #1
 800259a:	fa00 f202 	lsl.w	r2, r0, r2
 800259e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	e000e100 	.word	0xe000e100

080025b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	4603      	mov	r3, r0
 80025bc:	6039      	str	r1, [r7, #0]
 80025be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	db0a      	blt.n	80025de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	b2da      	uxtb	r2, r3
 80025cc:	490c      	ldr	r1, [pc, #48]	@ (8002600 <__NVIC_SetPriority+0x4c>)
 80025ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d2:	0112      	lsls	r2, r2, #4
 80025d4:	b2d2      	uxtb	r2, r2
 80025d6:	440b      	add	r3, r1
 80025d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025dc:	e00a      	b.n	80025f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	b2da      	uxtb	r2, r3
 80025e2:	4908      	ldr	r1, [pc, #32]	@ (8002604 <__NVIC_SetPriority+0x50>)
 80025e4:	79fb      	ldrb	r3, [r7, #7]
 80025e6:	f003 030f 	and.w	r3, r3, #15
 80025ea:	3b04      	subs	r3, #4
 80025ec:	0112      	lsls	r2, r2, #4
 80025ee:	b2d2      	uxtb	r2, r2
 80025f0:	440b      	add	r3, r1
 80025f2:	761a      	strb	r2, [r3, #24]
}
 80025f4:	bf00      	nop
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr
 8002600:	e000e100 	.word	0xe000e100
 8002604:	e000ed00 	.word	0xe000ed00

08002608 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002608:	b480      	push	{r7}
 800260a:	b089      	sub	sp, #36	@ 0x24
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f003 0307 	and.w	r3, r3, #7
 800261a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	f1c3 0307 	rsb	r3, r3, #7
 8002622:	2b04      	cmp	r3, #4
 8002624:	bf28      	it	cs
 8002626:	2304      	movcs	r3, #4
 8002628:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	3304      	adds	r3, #4
 800262e:	2b06      	cmp	r3, #6
 8002630:	d902      	bls.n	8002638 <NVIC_EncodePriority+0x30>
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	3b03      	subs	r3, #3
 8002636:	e000      	b.n	800263a <NVIC_EncodePriority+0x32>
 8002638:	2300      	movs	r3, #0
 800263a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800263c:	f04f 32ff 	mov.w	r2, #4294967295
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	43da      	mvns	r2, r3
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	401a      	ands	r2, r3
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002650:	f04f 31ff 	mov.w	r1, #4294967295
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	fa01 f303 	lsl.w	r3, r1, r3
 800265a:	43d9      	mvns	r1, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002660:	4313      	orrs	r3, r2
         );
}
 8002662:	4618      	mov	r0, r3
 8002664:	3724      	adds	r7, #36	@ 0x24
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr

0800266e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	b082      	sub	sp, #8
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f7ff ff4c 	bl	8002514 <__NVIC_SetPriorityGrouping>
}
 800267c:	bf00      	nop
 800267e:	3708      	adds	r7, #8
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002684:	b580      	push	{r7, lr}
 8002686:	b086      	sub	sp, #24
 8002688:	af00      	add	r7, sp, #0
 800268a:	4603      	mov	r3, r0
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
 8002690:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002692:	2300      	movs	r3, #0
 8002694:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002696:	f7ff ff61 	bl	800255c <__NVIC_GetPriorityGrouping>
 800269a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	68b9      	ldr	r1, [r7, #8]
 80026a0:	6978      	ldr	r0, [r7, #20]
 80026a2:	f7ff ffb1 	bl	8002608 <NVIC_EncodePriority>
 80026a6:	4602      	mov	r2, r0
 80026a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ac:	4611      	mov	r1, r2
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff ff80 	bl	80025b4 <__NVIC_SetPriority>
}
 80026b4:	bf00      	nop
 80026b6:	3718      	adds	r7, #24
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	4603      	mov	r3, r0
 80026c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7ff ff54 	bl	8002578 <__NVIC_EnableIRQ>
}
 80026d0:	bf00      	nop
 80026d2:	3708      	adds	r7, #8
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026e0:	2300      	movs	r3, #0
 80026e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80026e4:	f7ff fb0a 	bl	8001cfc <HAL_GetTick>
 80026e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d101      	bne.n	80026f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e099      	b.n	8002828 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2202      	movs	r2, #2
 80026f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f022 0201 	bic.w	r2, r2, #1
 8002712:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002714:	e00f      	b.n	8002736 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002716:	f7ff faf1 	bl	8001cfc <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b05      	cmp	r3, #5
 8002722:	d908      	bls.n	8002736 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2220      	movs	r2, #32
 8002728:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2203      	movs	r2, #3
 800272e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e078      	b.n	8002828 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0301 	and.w	r3, r3, #1
 8002740:	2b00      	cmp	r3, #0
 8002742:	d1e8      	bne.n	8002716 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800274c:	697a      	ldr	r2, [r7, #20]
 800274e:	4b38      	ldr	r3, [pc, #224]	@ (8002830 <HAL_DMA_Init+0x158>)
 8002750:	4013      	ands	r3, r2
 8002752:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685a      	ldr	r2, [r3, #4]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002762:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800276e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800277a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a1b      	ldr	r3, [r3, #32]
 8002780:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	4313      	orrs	r3, r2
 8002786:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800278c:	2b04      	cmp	r3, #4
 800278e:	d107      	bne.n	80027a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002798:	4313      	orrs	r3, r2
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	4313      	orrs	r3, r2
 800279e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	697a      	ldr	r2, [r7, #20]
 80027a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	f023 0307 	bic.w	r3, r3, #7
 80027b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027bc:	697a      	ldr	r2, [r7, #20]
 80027be:	4313      	orrs	r3, r2
 80027c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c6:	2b04      	cmp	r3, #4
 80027c8:	d117      	bne.n	80027fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ce:	697a      	ldr	r2, [r7, #20]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d00e      	beq.n	80027fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f000 f9e9 	bl	8002bb4 <DMA_CheckFifoParam>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d008      	beq.n	80027fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2240      	movs	r2, #64	@ 0x40
 80027ec:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2201      	movs	r2, #1
 80027f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80027f6:	2301      	movs	r3, #1
 80027f8:	e016      	b.n	8002828 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	697a      	ldr	r2, [r7, #20]
 8002800:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 f9a0 	bl	8002b48 <DMA_CalcBaseAndBitshift>
 8002808:	4603      	mov	r3, r0
 800280a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002810:	223f      	movs	r2, #63	@ 0x3f
 8002812:	409a      	lsls	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2201      	movs	r2, #1
 8002822:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3718      	adds	r7, #24
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	f010803f 	.word	0xf010803f

08002834 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800283c:	2300      	movs	r3, #0
 800283e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002840:	4b8e      	ldr	r3, [pc, #568]	@ (8002a7c <HAL_DMA_IRQHandler+0x248>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a8e      	ldr	r2, [pc, #568]	@ (8002a80 <HAL_DMA_IRQHandler+0x24c>)
 8002846:	fba2 2303 	umull	r2, r3, r2, r3
 800284a:	0a9b      	lsrs	r3, r3, #10
 800284c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002852:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800285e:	2208      	movs	r2, #8
 8002860:	409a      	lsls	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	4013      	ands	r3, r2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d01a      	beq.n	80028a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0304 	and.w	r3, r3, #4
 8002874:	2b00      	cmp	r3, #0
 8002876:	d013      	beq.n	80028a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f022 0204 	bic.w	r2, r2, #4
 8002886:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800288c:	2208      	movs	r2, #8
 800288e:	409a      	lsls	r2, r3
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002898:	f043 0201 	orr.w	r2, r3, #1
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028a4:	2201      	movs	r2, #1
 80028a6:	409a      	lsls	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	4013      	ands	r3, r2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d012      	beq.n	80028d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00b      	beq.n	80028d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028c2:	2201      	movs	r2, #1
 80028c4:	409a      	lsls	r2, r3
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028ce:	f043 0202 	orr.w	r2, r3, #2
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028da:	2204      	movs	r2, #4
 80028dc:	409a      	lsls	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	4013      	ands	r3, r2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d012      	beq.n	800290c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0302 	and.w	r3, r3, #2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d00b      	beq.n	800290c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028f8:	2204      	movs	r2, #4
 80028fa:	409a      	lsls	r2, r3
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002904:	f043 0204 	orr.w	r2, r3, #4
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002910:	2210      	movs	r2, #16
 8002912:	409a      	lsls	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	4013      	ands	r3, r2
 8002918:	2b00      	cmp	r3, #0
 800291a:	d043      	beq.n	80029a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0308 	and.w	r3, r3, #8
 8002926:	2b00      	cmp	r3, #0
 8002928:	d03c      	beq.n	80029a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800292e:	2210      	movs	r2, #16
 8002930:	409a      	lsls	r2, r3
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d018      	beq.n	8002976 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d108      	bne.n	8002964 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002956:	2b00      	cmp	r3, #0
 8002958:	d024      	beq.n	80029a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	4798      	blx	r3
 8002962:	e01f      	b.n	80029a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002968:	2b00      	cmp	r3, #0
 800296a:	d01b      	beq.n	80029a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	4798      	blx	r3
 8002974:	e016      	b.n	80029a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002980:	2b00      	cmp	r3, #0
 8002982:	d107      	bne.n	8002994 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f022 0208 	bic.w	r2, r2, #8
 8002992:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002998:	2b00      	cmp	r3, #0
 800299a:	d003      	beq.n	80029a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029a8:	2220      	movs	r2, #32
 80029aa:	409a      	lsls	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	4013      	ands	r3, r2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f000 808f 	beq.w	8002ad4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0310 	and.w	r3, r3, #16
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f000 8087 	beq.w	8002ad4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ca:	2220      	movs	r2, #32
 80029cc:	409a      	lsls	r2, r3
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2b05      	cmp	r3, #5
 80029dc:	d136      	bne.n	8002a4c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f022 0216 	bic.w	r2, r2, #22
 80029ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	695a      	ldr	r2, [r3, #20]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80029fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d103      	bne.n	8002a0e <HAL_DMA_IRQHandler+0x1da>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d007      	beq.n	8002a1e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 0208 	bic.w	r2, r2, #8
 8002a1c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a22:	223f      	movs	r2, #63	@ 0x3f
 8002a24:	409a      	lsls	r2, r3
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d07e      	beq.n	8002b40 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	4798      	blx	r3
        }
        return;
 8002a4a:	e079      	b.n	8002b40 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d01d      	beq.n	8002a96 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d10d      	bne.n	8002a84 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d031      	beq.n	8002ad4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	4798      	blx	r3
 8002a78:	e02c      	b.n	8002ad4 <HAL_DMA_IRQHandler+0x2a0>
 8002a7a:	bf00      	nop
 8002a7c:	20000000 	.word	0x20000000
 8002a80:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d023      	beq.n	8002ad4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	4798      	blx	r3
 8002a94:	e01e      	b.n	8002ad4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d10f      	bne.n	8002ac4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f022 0210 	bic.w	r2, r2, #16
 8002ab2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d003      	beq.n	8002ad4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d032      	beq.n	8002b42 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ae0:	f003 0301 	and.w	r3, r3, #1
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d022      	beq.n	8002b2e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2205      	movs	r2, #5
 8002aec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f022 0201 	bic.w	r2, r2, #1
 8002afe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	3301      	adds	r3, #1
 8002b04:	60bb      	str	r3, [r7, #8]
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d307      	bcc.n	8002b1c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d1f2      	bne.n	8002b00 <HAL_DMA_IRQHandler+0x2cc>
 8002b1a:	e000      	b.n	8002b1e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002b1c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d005      	beq.n	8002b42 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	4798      	blx	r3
 8002b3e:	e000      	b.n	8002b42 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002b40:	bf00      	nop
    }
  }
}
 8002b42:	3718      	adds	r7, #24
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	3b10      	subs	r3, #16
 8002b58:	4a14      	ldr	r2, [pc, #80]	@ (8002bac <DMA_CalcBaseAndBitshift+0x64>)
 8002b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5e:	091b      	lsrs	r3, r3, #4
 8002b60:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b62:	4a13      	ldr	r2, [pc, #76]	@ (8002bb0 <DMA_CalcBaseAndBitshift+0x68>)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	4413      	add	r3, r2
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2b03      	cmp	r3, #3
 8002b74:	d909      	bls.n	8002b8a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002b7e:	f023 0303 	bic.w	r3, r3, #3
 8002b82:	1d1a      	adds	r2, r3, #4
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	659a      	str	r2, [r3, #88]	@ 0x58
 8002b88:	e007      	b.n	8002b9a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002b92:	f023 0303 	bic.w	r3, r3, #3
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3714      	adds	r7, #20
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	aaaaaaab 	.word	0xaaaaaaab
 8002bb0:	08008fa4 	.word	0x08008fa4

08002bb4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b085      	sub	sp, #20
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bc4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d11f      	bne.n	8002c0e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	2b03      	cmp	r3, #3
 8002bd2:	d856      	bhi.n	8002c82 <DMA_CheckFifoParam+0xce>
 8002bd4:	a201      	add	r2, pc, #4	@ (adr r2, 8002bdc <DMA_CheckFifoParam+0x28>)
 8002bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bda:	bf00      	nop
 8002bdc:	08002bed 	.word	0x08002bed
 8002be0:	08002bff 	.word	0x08002bff
 8002be4:	08002bed 	.word	0x08002bed
 8002be8:	08002c83 	.word	0x08002c83
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bf0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d046      	beq.n	8002c86 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bfc:	e043      	b.n	8002c86 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c02:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002c06:	d140      	bne.n	8002c8a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c0c:	e03d      	b.n	8002c8a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c16:	d121      	bne.n	8002c5c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	2b03      	cmp	r3, #3
 8002c1c:	d837      	bhi.n	8002c8e <DMA_CheckFifoParam+0xda>
 8002c1e:	a201      	add	r2, pc, #4	@ (adr r2, 8002c24 <DMA_CheckFifoParam+0x70>)
 8002c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c24:	08002c35 	.word	0x08002c35
 8002c28:	08002c3b 	.word	0x08002c3b
 8002c2c:	08002c35 	.word	0x08002c35
 8002c30:	08002c4d 	.word	0x08002c4d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	73fb      	strb	r3, [r7, #15]
      break;
 8002c38:	e030      	b.n	8002c9c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c3e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d025      	beq.n	8002c92 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c4a:	e022      	b.n	8002c92 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c50:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002c54:	d11f      	bne.n	8002c96 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c5a:	e01c      	b.n	8002c96 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d903      	bls.n	8002c6a <DMA_CheckFifoParam+0xb6>
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	2b03      	cmp	r3, #3
 8002c66:	d003      	beq.n	8002c70 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c68:	e018      	b.n	8002c9c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	73fb      	strb	r3, [r7, #15]
      break;
 8002c6e:	e015      	b.n	8002c9c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d00e      	beq.n	8002c9a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c80:	e00b      	b.n	8002c9a <DMA_CheckFifoParam+0xe6>
      break;
 8002c82:	bf00      	nop
 8002c84:	e00a      	b.n	8002c9c <DMA_CheckFifoParam+0xe8>
      break;
 8002c86:	bf00      	nop
 8002c88:	e008      	b.n	8002c9c <DMA_CheckFifoParam+0xe8>
      break;
 8002c8a:	bf00      	nop
 8002c8c:	e006      	b.n	8002c9c <DMA_CheckFifoParam+0xe8>
      break;
 8002c8e:	bf00      	nop
 8002c90:	e004      	b.n	8002c9c <DMA_CheckFifoParam+0xe8>
      break;
 8002c92:	bf00      	nop
 8002c94:	e002      	b.n	8002c9c <DMA_CheckFifoParam+0xe8>
      break;   
 8002c96:	bf00      	nop
 8002c98:	e000      	b.n	8002c9c <DMA_CheckFifoParam+0xe8>
      break;
 8002c9a:	bf00      	nop
    }
  } 
  
  return status; 
 8002c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3714      	adds	r7, #20
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop

08002cac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b089      	sub	sp, #36	@ 0x24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	61fb      	str	r3, [r7, #28]
 8002cc6:	e16b      	b.n	8002fa0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002cc8:	2201      	movs	r2, #1
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	697a      	ldr	r2, [r7, #20]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cdc:	693a      	ldr	r2, [r7, #16]
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	f040 815a 	bne.w	8002f9a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f003 0303 	and.w	r3, r3, #3
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d005      	beq.n	8002cfe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d130      	bne.n	8002d60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	2203      	movs	r2, #3
 8002d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	4013      	ands	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	68da      	ldr	r2, [r3, #12]
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	69ba      	ldr	r2, [r7, #24]
 8002d2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d34:	2201      	movs	r2, #1
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	43db      	mvns	r3, r3
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	4013      	ands	r3, r2
 8002d42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	091b      	lsrs	r3, r3, #4
 8002d4a:	f003 0201 	and.w	r2, r3, #1
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f003 0303 	and.w	r3, r3, #3
 8002d68:	2b03      	cmp	r3, #3
 8002d6a:	d017      	beq.n	8002d9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	005b      	lsls	r3, r3, #1
 8002d76:	2203      	movs	r2, #3
 8002d78:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7c:	43db      	mvns	r3, r3
 8002d7e:	69ba      	ldr	r2, [r7, #24]
 8002d80:	4013      	ands	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	689a      	ldr	r2, [r3, #8]
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f003 0303 	and.w	r3, r3, #3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d123      	bne.n	8002df0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	08da      	lsrs	r2, r3, #3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	3208      	adds	r2, #8
 8002db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002db4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	f003 0307 	and.w	r3, r3, #7
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	220f      	movs	r2, #15
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	691a      	ldr	r2, [r3, #16]
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	f003 0307 	and.w	r3, r3, #7
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	08da      	lsrs	r2, r3, #3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	3208      	adds	r2, #8
 8002dea:	69b9      	ldr	r1, [r7, #24]
 8002dec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	2203      	movs	r2, #3
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	43db      	mvns	r3, r3
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	4013      	ands	r3, r2
 8002e06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f003 0203 	and.w	r2, r3, #3
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f000 80b4 	beq.w	8002f9a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e32:	2300      	movs	r3, #0
 8002e34:	60fb      	str	r3, [r7, #12]
 8002e36:	4b60      	ldr	r3, [pc, #384]	@ (8002fb8 <HAL_GPIO_Init+0x30c>)
 8002e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e3a:	4a5f      	ldr	r2, [pc, #380]	@ (8002fb8 <HAL_GPIO_Init+0x30c>)
 8002e3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e40:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e42:	4b5d      	ldr	r3, [pc, #372]	@ (8002fb8 <HAL_GPIO_Init+0x30c>)
 8002e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e4a:	60fb      	str	r3, [r7, #12]
 8002e4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e4e:	4a5b      	ldr	r2, [pc, #364]	@ (8002fbc <HAL_GPIO_Init+0x310>)
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	089b      	lsrs	r3, r3, #2
 8002e54:	3302      	adds	r3, #2
 8002e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	f003 0303 	and.w	r3, r3, #3
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	220f      	movs	r2, #15
 8002e66:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6a:	43db      	mvns	r3, r3
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	4013      	ands	r3, r2
 8002e70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a52      	ldr	r2, [pc, #328]	@ (8002fc0 <HAL_GPIO_Init+0x314>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d02b      	beq.n	8002ed2 <HAL_GPIO_Init+0x226>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a51      	ldr	r2, [pc, #324]	@ (8002fc4 <HAL_GPIO_Init+0x318>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d025      	beq.n	8002ece <HAL_GPIO_Init+0x222>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a50      	ldr	r2, [pc, #320]	@ (8002fc8 <HAL_GPIO_Init+0x31c>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d01f      	beq.n	8002eca <HAL_GPIO_Init+0x21e>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a4f      	ldr	r2, [pc, #316]	@ (8002fcc <HAL_GPIO_Init+0x320>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d019      	beq.n	8002ec6 <HAL_GPIO_Init+0x21a>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a4e      	ldr	r2, [pc, #312]	@ (8002fd0 <HAL_GPIO_Init+0x324>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d013      	beq.n	8002ec2 <HAL_GPIO_Init+0x216>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a4d      	ldr	r2, [pc, #308]	@ (8002fd4 <HAL_GPIO_Init+0x328>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d00d      	beq.n	8002ebe <HAL_GPIO_Init+0x212>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a4c      	ldr	r2, [pc, #304]	@ (8002fd8 <HAL_GPIO_Init+0x32c>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d007      	beq.n	8002eba <HAL_GPIO_Init+0x20e>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a4b      	ldr	r2, [pc, #300]	@ (8002fdc <HAL_GPIO_Init+0x330>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d101      	bne.n	8002eb6 <HAL_GPIO_Init+0x20a>
 8002eb2:	2307      	movs	r3, #7
 8002eb4:	e00e      	b.n	8002ed4 <HAL_GPIO_Init+0x228>
 8002eb6:	2308      	movs	r3, #8
 8002eb8:	e00c      	b.n	8002ed4 <HAL_GPIO_Init+0x228>
 8002eba:	2306      	movs	r3, #6
 8002ebc:	e00a      	b.n	8002ed4 <HAL_GPIO_Init+0x228>
 8002ebe:	2305      	movs	r3, #5
 8002ec0:	e008      	b.n	8002ed4 <HAL_GPIO_Init+0x228>
 8002ec2:	2304      	movs	r3, #4
 8002ec4:	e006      	b.n	8002ed4 <HAL_GPIO_Init+0x228>
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e004      	b.n	8002ed4 <HAL_GPIO_Init+0x228>
 8002eca:	2302      	movs	r3, #2
 8002ecc:	e002      	b.n	8002ed4 <HAL_GPIO_Init+0x228>
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e000      	b.n	8002ed4 <HAL_GPIO_Init+0x228>
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	69fa      	ldr	r2, [r7, #28]
 8002ed6:	f002 0203 	and.w	r2, r2, #3
 8002eda:	0092      	lsls	r2, r2, #2
 8002edc:	4093      	lsls	r3, r2
 8002ede:	69ba      	ldr	r2, [r7, #24]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ee4:	4935      	ldr	r1, [pc, #212]	@ (8002fbc <HAL_GPIO_Init+0x310>)
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	089b      	lsrs	r3, r3, #2
 8002eea:	3302      	adds	r3, #2
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ef2:	4b3b      	ldr	r3, [pc, #236]	@ (8002fe0 <HAL_GPIO_Init+0x334>)
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	43db      	mvns	r3, r3
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	4013      	ands	r3, r2
 8002f00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d003      	beq.n	8002f16 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f16:	4a32      	ldr	r2, [pc, #200]	@ (8002fe0 <HAL_GPIO_Init+0x334>)
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f1c:	4b30      	ldr	r3, [pc, #192]	@ (8002fe0 <HAL_GPIO_Init+0x334>)
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	43db      	mvns	r3, r3
 8002f26:	69ba      	ldr	r2, [r7, #24]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d003      	beq.n	8002f40 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002f38:	69ba      	ldr	r2, [r7, #24]
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f40:	4a27      	ldr	r2, [pc, #156]	@ (8002fe0 <HAL_GPIO_Init+0x334>)
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f46:	4b26      	ldr	r3, [pc, #152]	@ (8002fe0 <HAL_GPIO_Init+0x334>)
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	43db      	mvns	r3, r3
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	4013      	ands	r3, r2
 8002f54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d003      	beq.n	8002f6a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f6a:	4a1d      	ldr	r2, [pc, #116]	@ (8002fe0 <HAL_GPIO_Init+0x334>)
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f70:	4b1b      	ldr	r3, [pc, #108]	@ (8002fe0 <HAL_GPIO_Init+0x334>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d003      	beq.n	8002f94 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f94:	4a12      	ldr	r2, [pc, #72]	@ (8002fe0 <HAL_GPIO_Init+0x334>)
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	61fb      	str	r3, [r7, #28]
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	2b0f      	cmp	r3, #15
 8002fa4:	f67f ae90 	bls.w	8002cc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002fa8:	bf00      	nop
 8002faa:	bf00      	nop
 8002fac:	3724      	adds	r7, #36	@ 0x24
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	40023800 	.word	0x40023800
 8002fbc:	40013800 	.word	0x40013800
 8002fc0:	40020000 	.word	0x40020000
 8002fc4:	40020400 	.word	0x40020400
 8002fc8:	40020800 	.word	0x40020800
 8002fcc:	40020c00 	.word	0x40020c00
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	40021400 	.word	0x40021400
 8002fd8:	40021800 	.word	0x40021800
 8002fdc:	40021c00 	.word	0x40021c00
 8002fe0:	40013c00 	.word	0x40013c00

08002fe4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	460b      	mov	r3, r1
 8002fee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	691a      	ldr	r2, [r3, #16]
 8002ff4:	887b      	ldrh	r3, [r7, #2]
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d002      	beq.n	8003002 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	73fb      	strb	r3, [r7, #15]
 8003000:	e001      	b.n	8003006 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003002:	2300      	movs	r3, #0
 8003004:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003006:	7bfb      	ldrb	r3, [r7, #15]
}
 8003008:	4618      	mov	r0, r3
 800300a:	3714      	adds	r7, #20
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	460b      	mov	r3, r1
 800301e:	807b      	strh	r3, [r7, #2]
 8003020:	4613      	mov	r3, r2
 8003022:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003024:	787b      	ldrb	r3, [r7, #1]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800302a:	887a      	ldrh	r2, [r7, #2]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003030:	e003      	b.n	800303a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003032:	887b      	ldrh	r3, [r7, #2]
 8003034:	041a      	lsls	r2, r3, #16
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	619a      	str	r2, [r3, #24]
}
 800303a:	bf00      	nop
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr

08003046 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003046:	b480      	push	{r7}
 8003048:	b085      	sub	sp, #20
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
 800304e:	460b      	mov	r3, r1
 8003050:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003058:	887a      	ldrh	r2, [r7, #2]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	4013      	ands	r3, r2
 800305e:	041a      	lsls	r2, r3, #16
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	43d9      	mvns	r1, r3
 8003064:	887b      	ldrh	r3, [r7, #2]
 8003066:	400b      	ands	r3, r1
 8003068:	431a      	orrs	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	619a      	str	r2, [r3, #24]
}
 800306e:	bf00      	nop
 8003070:	3714      	adds	r7, #20
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
	...

0800307c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e12b      	b.n	80032e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b00      	cmp	r3, #0
 8003098:	d106      	bne.n	80030a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f7fe fb24 	bl	80016f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2224      	movs	r2, #36	@ 0x24
 80030ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f022 0201 	bic.w	r2, r2, #1
 80030be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80030ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80030de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030e0:	f001 fc20 	bl	8004924 <HAL_RCC_GetPCLK1Freq>
 80030e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	4a81      	ldr	r2, [pc, #516]	@ (80032f0 <HAL_I2C_Init+0x274>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d807      	bhi.n	8003100 <HAL_I2C_Init+0x84>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	4a80      	ldr	r2, [pc, #512]	@ (80032f4 <HAL_I2C_Init+0x278>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	bf94      	ite	ls
 80030f8:	2301      	movls	r3, #1
 80030fa:	2300      	movhi	r3, #0
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	e006      	b.n	800310e <HAL_I2C_Init+0x92>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	4a7d      	ldr	r2, [pc, #500]	@ (80032f8 <HAL_I2C_Init+0x27c>)
 8003104:	4293      	cmp	r3, r2
 8003106:	bf94      	ite	ls
 8003108:	2301      	movls	r3, #1
 800310a:	2300      	movhi	r3, #0
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e0e7      	b.n	80032e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	4a78      	ldr	r2, [pc, #480]	@ (80032fc <HAL_I2C_Init+0x280>)
 800311a:	fba2 2303 	umull	r2, r3, r2, r3
 800311e:	0c9b      	lsrs	r3, r3, #18
 8003120:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68ba      	ldr	r2, [r7, #8]
 8003132:	430a      	orrs	r2, r1
 8003134:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	6a1b      	ldr	r3, [r3, #32]
 800313c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	4a6a      	ldr	r2, [pc, #424]	@ (80032f0 <HAL_I2C_Init+0x274>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d802      	bhi.n	8003150 <HAL_I2C_Init+0xd4>
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	3301      	adds	r3, #1
 800314e:	e009      	b.n	8003164 <HAL_I2C_Init+0xe8>
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003156:	fb02 f303 	mul.w	r3, r2, r3
 800315a:	4a69      	ldr	r2, [pc, #420]	@ (8003300 <HAL_I2C_Init+0x284>)
 800315c:	fba2 2303 	umull	r2, r3, r2, r3
 8003160:	099b      	lsrs	r3, r3, #6
 8003162:	3301      	adds	r3, #1
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	6812      	ldr	r2, [r2, #0]
 8003168:	430b      	orrs	r3, r1
 800316a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	69db      	ldr	r3, [r3, #28]
 8003172:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003176:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	495c      	ldr	r1, [pc, #368]	@ (80032f0 <HAL_I2C_Init+0x274>)
 8003180:	428b      	cmp	r3, r1
 8003182:	d819      	bhi.n	80031b8 <HAL_I2C_Init+0x13c>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	1e59      	subs	r1, r3, #1
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003192:	1c59      	adds	r1, r3, #1
 8003194:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003198:	400b      	ands	r3, r1
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00a      	beq.n	80031b4 <HAL_I2C_Init+0x138>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	1e59      	subs	r1, r3, #1
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	005b      	lsls	r3, r3, #1
 80031a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80031ac:	3301      	adds	r3, #1
 80031ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031b2:	e051      	b.n	8003258 <HAL_I2C_Init+0x1dc>
 80031b4:	2304      	movs	r3, #4
 80031b6:	e04f      	b.n	8003258 <HAL_I2C_Init+0x1dc>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d111      	bne.n	80031e4 <HAL_I2C_Init+0x168>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	1e58      	subs	r0, r3, #1
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6859      	ldr	r1, [r3, #4]
 80031c8:	460b      	mov	r3, r1
 80031ca:	005b      	lsls	r3, r3, #1
 80031cc:	440b      	add	r3, r1
 80031ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80031d2:	3301      	adds	r3, #1
 80031d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031d8:	2b00      	cmp	r3, #0
 80031da:	bf0c      	ite	eq
 80031dc:	2301      	moveq	r3, #1
 80031de:	2300      	movne	r3, #0
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	e012      	b.n	800320a <HAL_I2C_Init+0x18e>
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	1e58      	subs	r0, r3, #1
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6859      	ldr	r1, [r3, #4]
 80031ec:	460b      	mov	r3, r1
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	440b      	add	r3, r1
 80031f2:	0099      	lsls	r1, r3, #2
 80031f4:	440b      	add	r3, r1
 80031f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80031fa:	3301      	adds	r3, #1
 80031fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003200:	2b00      	cmp	r3, #0
 8003202:	bf0c      	ite	eq
 8003204:	2301      	moveq	r3, #1
 8003206:	2300      	movne	r3, #0
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b00      	cmp	r3, #0
 800320c:	d001      	beq.n	8003212 <HAL_I2C_Init+0x196>
 800320e:	2301      	movs	r3, #1
 8003210:	e022      	b.n	8003258 <HAL_I2C_Init+0x1dc>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d10e      	bne.n	8003238 <HAL_I2C_Init+0x1bc>
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	1e58      	subs	r0, r3, #1
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6859      	ldr	r1, [r3, #4]
 8003222:	460b      	mov	r3, r1
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	440b      	add	r3, r1
 8003228:	fbb0 f3f3 	udiv	r3, r0, r3
 800322c:	3301      	adds	r3, #1
 800322e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003232:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003236:	e00f      	b.n	8003258 <HAL_I2C_Init+0x1dc>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	1e58      	subs	r0, r3, #1
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6859      	ldr	r1, [r3, #4]
 8003240:	460b      	mov	r3, r1
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	440b      	add	r3, r1
 8003246:	0099      	lsls	r1, r3, #2
 8003248:	440b      	add	r3, r1
 800324a:	fbb0 f3f3 	udiv	r3, r0, r3
 800324e:	3301      	adds	r3, #1
 8003250:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003254:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003258:	6879      	ldr	r1, [r7, #4]
 800325a:	6809      	ldr	r1, [r1, #0]
 800325c:	4313      	orrs	r3, r2
 800325e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	69da      	ldr	r2, [r3, #28]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a1b      	ldr	r3, [r3, #32]
 8003272:	431a      	orrs	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	430a      	orrs	r2, r1
 800327a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003286:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	6911      	ldr	r1, [r2, #16]
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	68d2      	ldr	r2, [r2, #12]
 8003292:	4311      	orrs	r1, r2
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	6812      	ldr	r2, [r2, #0]
 8003298:	430b      	orrs	r3, r1
 800329a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	695a      	ldr	r2, [r3, #20]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	431a      	orrs	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	430a      	orrs	r2, r1
 80032b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f042 0201 	orr.w	r2, r2, #1
 80032c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2220      	movs	r2, #32
 80032d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3710      	adds	r7, #16
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	000186a0 	.word	0x000186a0
 80032f4:	001e847f 	.word	0x001e847f
 80032f8:	003d08ff 	.word	0x003d08ff
 80032fc:	431bde83 	.word	0x431bde83
 8003300:	10624dd3 	.word	0x10624dd3

08003304 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b088      	sub	sp, #32
 8003308:	af02      	add	r7, sp, #8
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	4608      	mov	r0, r1
 800330e:	4611      	mov	r1, r2
 8003310:	461a      	mov	r2, r3
 8003312:	4603      	mov	r3, r0
 8003314:	817b      	strh	r3, [r7, #10]
 8003316:	460b      	mov	r3, r1
 8003318:	813b      	strh	r3, [r7, #8]
 800331a:	4613      	mov	r3, r2
 800331c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800331e:	f7fe fced 	bl	8001cfc <HAL_GetTick>
 8003322:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800332a:	b2db      	uxtb	r3, r3
 800332c:	2b20      	cmp	r3, #32
 800332e:	f040 80d9 	bne.w	80034e4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	9300      	str	r3, [sp, #0]
 8003336:	2319      	movs	r3, #25
 8003338:	2201      	movs	r2, #1
 800333a:	496d      	ldr	r1, [pc, #436]	@ (80034f0 <HAL_I2C_Mem_Write+0x1ec>)
 800333c:	68f8      	ldr	r0, [r7, #12]
 800333e:	f000 fc8b 	bl	8003c58 <I2C_WaitOnFlagUntilTimeout>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d001      	beq.n	800334c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003348:	2302      	movs	r3, #2
 800334a:	e0cc      	b.n	80034e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003352:	2b01      	cmp	r3, #1
 8003354:	d101      	bne.n	800335a <HAL_I2C_Mem_Write+0x56>
 8003356:	2302      	movs	r3, #2
 8003358:	e0c5      	b.n	80034e6 <HAL_I2C_Mem_Write+0x1e2>
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2201      	movs	r2, #1
 800335e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0301 	and.w	r3, r3, #1
 800336c:	2b01      	cmp	r3, #1
 800336e:	d007      	beq.n	8003380 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f042 0201 	orr.w	r2, r2, #1
 800337e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800338e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2221      	movs	r2, #33	@ 0x21
 8003394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2240      	movs	r2, #64	@ 0x40
 800339c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2200      	movs	r2, #0
 80033a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6a3a      	ldr	r2, [r7, #32]
 80033aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80033b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	4a4d      	ldr	r2, [pc, #308]	@ (80034f4 <HAL_I2C_Mem_Write+0x1f0>)
 80033c0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80033c2:	88f8      	ldrh	r0, [r7, #6]
 80033c4:	893a      	ldrh	r2, [r7, #8]
 80033c6:	8979      	ldrh	r1, [r7, #10]
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	9301      	str	r3, [sp, #4]
 80033cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033ce:	9300      	str	r3, [sp, #0]
 80033d0:	4603      	mov	r3, r0
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f000 fac2 	bl	800395c <I2C_RequestMemoryWrite>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d052      	beq.n	8003484 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e081      	b.n	80034e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033e2:	697a      	ldr	r2, [r7, #20]
 80033e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033e6:	68f8      	ldr	r0, [r7, #12]
 80033e8:	f000 fd50 	bl	8003e8c <I2C_WaitOnTXEFlagUntilTimeout>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00d      	beq.n	800340e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f6:	2b04      	cmp	r3, #4
 80033f8:	d107      	bne.n	800340a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003408:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e06b      	b.n	80034e6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003412:	781a      	ldrb	r2, [r3, #0]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341e:	1c5a      	adds	r2, r3, #1
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003428:	3b01      	subs	r3, #1
 800342a:	b29a      	uxth	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003434:	b29b      	uxth	r3, r3
 8003436:	3b01      	subs	r3, #1
 8003438:	b29a      	uxth	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	695b      	ldr	r3, [r3, #20]
 8003444:	f003 0304 	and.w	r3, r3, #4
 8003448:	2b04      	cmp	r3, #4
 800344a:	d11b      	bne.n	8003484 <HAL_I2C_Mem_Write+0x180>
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003450:	2b00      	cmp	r3, #0
 8003452:	d017      	beq.n	8003484 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003458:	781a      	ldrb	r2, [r3, #0]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003464:	1c5a      	adds	r2, r3, #1
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800346e:	3b01      	subs	r3, #1
 8003470:	b29a      	uxth	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800347a:	b29b      	uxth	r3, r3
 800347c:	3b01      	subs	r3, #1
 800347e:	b29a      	uxth	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003488:	2b00      	cmp	r3, #0
 800348a:	d1aa      	bne.n	80033e2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800348c:	697a      	ldr	r2, [r7, #20]
 800348e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	f000 fd43 	bl	8003f1c <I2C_WaitOnBTFFlagUntilTimeout>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d00d      	beq.n	80034b8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a0:	2b04      	cmp	r3, #4
 80034a2:	d107      	bne.n	80034b4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034b2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e016      	b.n	80034e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2220      	movs	r2, #32
 80034cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80034e0:	2300      	movs	r3, #0
 80034e2:	e000      	b.n	80034e6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80034e4:	2302      	movs	r3, #2
  }
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3718      	adds	r7, #24
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	00100002 	.word	0x00100002
 80034f4:	ffff0000 	.word	0xffff0000

080034f8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b08c      	sub	sp, #48	@ 0x30
 80034fc:	af02      	add	r7, sp, #8
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	4608      	mov	r0, r1
 8003502:	4611      	mov	r1, r2
 8003504:	461a      	mov	r2, r3
 8003506:	4603      	mov	r3, r0
 8003508:	817b      	strh	r3, [r7, #10]
 800350a:	460b      	mov	r3, r1
 800350c:	813b      	strh	r3, [r7, #8]
 800350e:	4613      	mov	r3, r2
 8003510:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003512:	f7fe fbf3 	bl	8001cfc <HAL_GetTick>
 8003516:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2b20      	cmp	r3, #32
 8003522:	f040 8214 	bne.w	800394e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003528:	9300      	str	r3, [sp, #0]
 800352a:	2319      	movs	r3, #25
 800352c:	2201      	movs	r2, #1
 800352e:	497b      	ldr	r1, [pc, #492]	@ (800371c <HAL_I2C_Mem_Read+0x224>)
 8003530:	68f8      	ldr	r0, [r7, #12]
 8003532:	f000 fb91 	bl	8003c58 <I2C_WaitOnFlagUntilTimeout>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d001      	beq.n	8003540 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800353c:	2302      	movs	r3, #2
 800353e:	e207      	b.n	8003950 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003546:	2b01      	cmp	r3, #1
 8003548:	d101      	bne.n	800354e <HAL_I2C_Mem_Read+0x56>
 800354a:	2302      	movs	r3, #2
 800354c:	e200      	b.n	8003950 <HAL_I2C_Mem_Read+0x458>
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2201      	movs	r2, #1
 8003552:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0301 	and.w	r3, r3, #1
 8003560:	2b01      	cmp	r3, #1
 8003562:	d007      	beq.n	8003574 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f042 0201 	orr.w	r2, r2, #1
 8003572:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003582:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2222      	movs	r2, #34	@ 0x22
 8003588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2240      	movs	r2, #64	@ 0x40
 8003590:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2200      	movs	r2, #0
 8003598:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800359e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80035a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035aa:	b29a      	uxth	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	4a5b      	ldr	r2, [pc, #364]	@ (8003720 <HAL_I2C_Mem_Read+0x228>)
 80035b4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80035b6:	88f8      	ldrh	r0, [r7, #6]
 80035b8:	893a      	ldrh	r2, [r7, #8]
 80035ba:	8979      	ldrh	r1, [r7, #10]
 80035bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035be:	9301      	str	r3, [sp, #4]
 80035c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035c2:	9300      	str	r3, [sp, #0]
 80035c4:	4603      	mov	r3, r0
 80035c6:	68f8      	ldr	r0, [r7, #12]
 80035c8:	f000 fa5e 	bl	8003a88 <I2C_RequestMemoryRead>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e1bc      	b.n	8003950 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d113      	bne.n	8003606 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035de:	2300      	movs	r3, #0
 80035e0:	623b      	str	r3, [r7, #32]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	695b      	ldr	r3, [r3, #20]
 80035e8:	623b      	str	r3, [r7, #32]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	623b      	str	r3, [r7, #32]
 80035f2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003602:	601a      	str	r2, [r3, #0]
 8003604:	e190      	b.n	8003928 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800360a:	2b01      	cmp	r3, #1
 800360c:	d11b      	bne.n	8003646 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800361c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800361e:	2300      	movs	r3, #0
 8003620:	61fb      	str	r3, [r7, #28]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	695b      	ldr	r3, [r3, #20]
 8003628:	61fb      	str	r3, [r7, #28]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	699b      	ldr	r3, [r3, #24]
 8003630:	61fb      	str	r3, [r7, #28]
 8003632:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003642:	601a      	str	r2, [r3, #0]
 8003644:	e170      	b.n	8003928 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800364a:	2b02      	cmp	r3, #2
 800364c:	d11b      	bne.n	8003686 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800365c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800366c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800366e:	2300      	movs	r3, #0
 8003670:	61bb      	str	r3, [r7, #24]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	61bb      	str	r3, [r7, #24]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	61bb      	str	r3, [r7, #24]
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	e150      	b.n	8003928 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003686:	2300      	movs	r3, #0
 8003688:	617b      	str	r3, [r7, #20]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	695b      	ldr	r3, [r3, #20]
 8003690:	617b      	str	r3, [r7, #20]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	617b      	str	r3, [r7, #20]
 800369a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800369c:	e144      	b.n	8003928 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036a2:	2b03      	cmp	r3, #3
 80036a4:	f200 80f1 	bhi.w	800388a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d123      	bne.n	80036f8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036b2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	f000 fc79 	bl	8003fac <I2C_WaitOnRXNEFlagUntilTimeout>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d001      	beq.n	80036c4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e145      	b.n	8003950 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	691a      	ldr	r2, [r3, #16]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ce:	b2d2      	uxtb	r2, r2
 80036d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d6:	1c5a      	adds	r2, r3, #1
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036e0:	3b01      	subs	r3, #1
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	3b01      	subs	r3, #1
 80036f0:	b29a      	uxth	r2, r3
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80036f6:	e117      	b.n	8003928 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d14e      	bne.n	800379e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003702:	9300      	str	r3, [sp, #0]
 8003704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003706:	2200      	movs	r2, #0
 8003708:	4906      	ldr	r1, [pc, #24]	@ (8003724 <HAL_I2C_Mem_Read+0x22c>)
 800370a:	68f8      	ldr	r0, [r7, #12]
 800370c:	f000 faa4 	bl	8003c58 <I2C_WaitOnFlagUntilTimeout>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d008      	beq.n	8003728 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e11a      	b.n	8003950 <HAL_I2C_Mem_Read+0x458>
 800371a:	bf00      	nop
 800371c:	00100002 	.word	0x00100002
 8003720:	ffff0000 	.word	0xffff0000
 8003724:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003736:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	691a      	ldr	r2, [r3, #16]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003742:	b2d2      	uxtb	r2, r2
 8003744:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800374a:	1c5a      	adds	r2, r3, #1
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003754:	3b01      	subs	r3, #1
 8003756:	b29a      	uxth	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003760:	b29b      	uxth	r3, r3
 8003762:	3b01      	subs	r3, #1
 8003764:	b29a      	uxth	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	691a      	ldr	r2, [r3, #16]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003774:	b2d2      	uxtb	r2, r2
 8003776:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800377c:	1c5a      	adds	r2, r3, #1
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003786:	3b01      	subs	r3, #1
 8003788:	b29a      	uxth	r2, r3
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003792:	b29b      	uxth	r3, r3
 8003794:	3b01      	subs	r3, #1
 8003796:	b29a      	uxth	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800379c:	e0c4      	b.n	8003928 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800379e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a0:	9300      	str	r3, [sp, #0]
 80037a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037a4:	2200      	movs	r2, #0
 80037a6:	496c      	ldr	r1, [pc, #432]	@ (8003958 <HAL_I2C_Mem_Read+0x460>)
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	f000 fa55 	bl	8003c58 <I2C_WaitOnFlagUntilTimeout>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d001      	beq.n	80037b8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e0cb      	b.n	8003950 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	691a      	ldr	r2, [r3, #16]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d2:	b2d2      	uxtb	r2, r2
 80037d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037da:	1c5a      	adds	r2, r3, #1
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037e4:	3b01      	subs	r3, #1
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	3b01      	subs	r3, #1
 80037f4:	b29a      	uxth	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037fc:	9300      	str	r3, [sp, #0]
 80037fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003800:	2200      	movs	r2, #0
 8003802:	4955      	ldr	r1, [pc, #340]	@ (8003958 <HAL_I2C_Mem_Read+0x460>)
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	f000 fa27 	bl	8003c58 <I2C_WaitOnFlagUntilTimeout>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d001      	beq.n	8003814 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e09d      	b.n	8003950 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003822:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	691a      	ldr	r2, [r3, #16]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800382e:	b2d2      	uxtb	r2, r2
 8003830:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003836:	1c5a      	adds	r2, r3, #1
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003840:	3b01      	subs	r3, #1
 8003842:	b29a      	uxth	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800384c:	b29b      	uxth	r3, r3
 800384e:	3b01      	subs	r3, #1
 8003850:	b29a      	uxth	r2, r3
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	691a      	ldr	r2, [r3, #16]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003860:	b2d2      	uxtb	r2, r2
 8003862:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003868:	1c5a      	adds	r2, r3, #1
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003872:	3b01      	subs	r3, #1
 8003874:	b29a      	uxth	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800387e:	b29b      	uxth	r3, r3
 8003880:	3b01      	subs	r3, #1
 8003882:	b29a      	uxth	r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003888:	e04e      	b.n	8003928 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800388a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800388c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800388e:	68f8      	ldr	r0, [r7, #12]
 8003890:	f000 fb8c 	bl	8003fac <I2C_WaitOnRXNEFlagUntilTimeout>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d001      	beq.n	800389e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e058      	b.n	8003950 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	691a      	ldr	r2, [r3, #16]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a8:	b2d2      	uxtb	r2, r2
 80038aa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b0:	1c5a      	adds	r2, r3, #1
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038ba:	3b01      	subs	r3, #1
 80038bc:	b29a      	uxth	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	3b01      	subs	r3, #1
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	f003 0304 	and.w	r3, r3, #4
 80038da:	2b04      	cmp	r3, #4
 80038dc:	d124      	bne.n	8003928 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038e2:	2b03      	cmp	r3, #3
 80038e4:	d107      	bne.n	80038f6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038f4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	691a      	ldr	r2, [r3, #16]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003900:	b2d2      	uxtb	r2, r2
 8003902:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003908:	1c5a      	adds	r2, r3, #1
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003912:	3b01      	subs	r3, #1
 8003914:	b29a      	uxth	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800391e:	b29b      	uxth	r3, r3
 8003920:	3b01      	subs	r3, #1
 8003922:	b29a      	uxth	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800392c:	2b00      	cmp	r3, #0
 800392e:	f47f aeb6 	bne.w	800369e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2220      	movs	r2, #32
 8003936:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800394a:	2300      	movs	r3, #0
 800394c:	e000      	b.n	8003950 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800394e:	2302      	movs	r3, #2
  }
}
 8003950:	4618      	mov	r0, r3
 8003952:	3728      	adds	r7, #40	@ 0x28
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	00010004 	.word	0x00010004

0800395c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b088      	sub	sp, #32
 8003960:	af02      	add	r7, sp, #8
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	4608      	mov	r0, r1
 8003966:	4611      	mov	r1, r2
 8003968:	461a      	mov	r2, r3
 800396a:	4603      	mov	r3, r0
 800396c:	817b      	strh	r3, [r7, #10]
 800396e:	460b      	mov	r3, r1
 8003970:	813b      	strh	r3, [r7, #8]
 8003972:	4613      	mov	r3, r2
 8003974:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003984:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003988:	9300      	str	r3, [sp, #0]
 800398a:	6a3b      	ldr	r3, [r7, #32]
 800398c:	2200      	movs	r2, #0
 800398e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	f000 f960 	bl	8003c58 <I2C_WaitOnFlagUntilTimeout>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00d      	beq.n	80039ba <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039ac:	d103      	bne.n	80039b6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039b4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e05f      	b.n	8003a7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039ba:	897b      	ldrh	r3, [r7, #10]
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	461a      	mov	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80039c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039cc:	6a3a      	ldr	r2, [r7, #32]
 80039ce:	492d      	ldr	r1, [pc, #180]	@ (8003a84 <I2C_RequestMemoryWrite+0x128>)
 80039d0:	68f8      	ldr	r0, [r7, #12]
 80039d2:	f000 f9bb 	bl	8003d4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d001      	beq.n	80039e0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e04c      	b.n	8003a7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039e0:	2300      	movs	r3, #0
 80039e2:	617b      	str	r3, [r7, #20]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	617b      	str	r3, [r7, #20]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	617b      	str	r3, [r7, #20]
 80039f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039f8:	6a39      	ldr	r1, [r7, #32]
 80039fa:	68f8      	ldr	r0, [r7, #12]
 80039fc:	f000 fa46 	bl	8003e8c <I2C_WaitOnTXEFlagUntilTimeout>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00d      	beq.n	8003a22 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a0a:	2b04      	cmp	r3, #4
 8003a0c:	d107      	bne.n	8003a1e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a1c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e02b      	b.n	8003a7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a22:	88fb      	ldrh	r3, [r7, #6]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d105      	bne.n	8003a34 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a28:	893b      	ldrh	r3, [r7, #8]
 8003a2a:	b2da      	uxtb	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	611a      	str	r2, [r3, #16]
 8003a32:	e021      	b.n	8003a78 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003a34:	893b      	ldrh	r3, [r7, #8]
 8003a36:	0a1b      	lsrs	r3, r3, #8
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	b2da      	uxtb	r2, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a44:	6a39      	ldr	r1, [r7, #32]
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f000 fa20 	bl	8003e8c <I2C_WaitOnTXEFlagUntilTimeout>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00d      	beq.n	8003a6e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a56:	2b04      	cmp	r3, #4
 8003a58:	d107      	bne.n	8003a6a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a68:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e005      	b.n	8003a7a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a6e:	893b      	ldrh	r3, [r7, #8]
 8003a70:	b2da      	uxtb	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3718      	adds	r7, #24
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	00010002 	.word	0x00010002

08003a88 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b088      	sub	sp, #32
 8003a8c:	af02      	add	r7, sp, #8
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	4608      	mov	r0, r1
 8003a92:	4611      	mov	r1, r2
 8003a94:	461a      	mov	r2, r3
 8003a96:	4603      	mov	r3, r0
 8003a98:	817b      	strh	r3, [r7, #10]
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	813b      	strh	r3, [r7, #8]
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003ab0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ac0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac4:	9300      	str	r3, [sp, #0]
 8003ac6:	6a3b      	ldr	r3, [r7, #32]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003ace:	68f8      	ldr	r0, [r7, #12]
 8003ad0:	f000 f8c2 	bl	8003c58 <I2C_WaitOnFlagUntilTimeout>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00d      	beq.n	8003af6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ae4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ae8:	d103      	bne.n	8003af2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003af0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e0aa      	b.n	8003c4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003af6:	897b      	ldrh	r3, [r7, #10]
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	461a      	mov	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003b04:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b08:	6a3a      	ldr	r2, [r7, #32]
 8003b0a:	4952      	ldr	r1, [pc, #328]	@ (8003c54 <I2C_RequestMemoryRead+0x1cc>)
 8003b0c:	68f8      	ldr	r0, [r7, #12]
 8003b0e:	f000 f91d 	bl	8003d4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d001      	beq.n	8003b1c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e097      	b.n	8003c4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	617b      	str	r3, [r7, #20]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	617b      	str	r3, [r7, #20]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	617b      	str	r3, [r7, #20]
 8003b30:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b34:	6a39      	ldr	r1, [r7, #32]
 8003b36:	68f8      	ldr	r0, [r7, #12]
 8003b38:	f000 f9a8 	bl	8003e8c <I2C_WaitOnTXEFlagUntilTimeout>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00d      	beq.n	8003b5e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b46:	2b04      	cmp	r3, #4
 8003b48:	d107      	bne.n	8003b5a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b58:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e076      	b.n	8003c4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b5e:	88fb      	ldrh	r3, [r7, #6]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d105      	bne.n	8003b70 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b64:	893b      	ldrh	r3, [r7, #8]
 8003b66:	b2da      	uxtb	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	611a      	str	r2, [r3, #16]
 8003b6e:	e021      	b.n	8003bb4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003b70:	893b      	ldrh	r3, [r7, #8]
 8003b72:	0a1b      	lsrs	r3, r3, #8
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	b2da      	uxtb	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b80:	6a39      	ldr	r1, [r7, #32]
 8003b82:	68f8      	ldr	r0, [r7, #12]
 8003b84:	f000 f982 	bl	8003e8c <I2C_WaitOnTXEFlagUntilTimeout>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00d      	beq.n	8003baa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b92:	2b04      	cmp	r3, #4
 8003b94:	d107      	bne.n	8003ba6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ba4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e050      	b.n	8003c4c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003baa:	893b      	ldrh	r3, [r7, #8]
 8003bac:	b2da      	uxtb	r2, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bb6:	6a39      	ldr	r1, [r7, #32]
 8003bb8:	68f8      	ldr	r0, [r7, #12]
 8003bba:	f000 f967 	bl	8003e8c <I2C_WaitOnTXEFlagUntilTimeout>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d00d      	beq.n	8003be0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc8:	2b04      	cmp	r3, #4
 8003bca:	d107      	bne.n	8003bdc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bda:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e035      	b.n	8003c4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bee:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf2:	9300      	str	r3, [sp, #0]
 8003bf4:	6a3b      	ldr	r3, [r7, #32]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003bfc:	68f8      	ldr	r0, [r7, #12]
 8003bfe:	f000 f82b 	bl	8003c58 <I2C_WaitOnFlagUntilTimeout>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d00d      	beq.n	8003c24 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c16:	d103      	bne.n	8003c20 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c1e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e013      	b.n	8003c4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003c24:	897b      	ldrh	r3, [r7, #10]
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	f043 0301 	orr.w	r3, r3, #1
 8003c2c:	b2da      	uxtb	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c36:	6a3a      	ldr	r2, [r7, #32]
 8003c38:	4906      	ldr	r1, [pc, #24]	@ (8003c54 <I2C_RequestMemoryRead+0x1cc>)
 8003c3a:	68f8      	ldr	r0, [r7, #12]
 8003c3c:	f000 f886 	bl	8003d4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e000      	b.n	8003c4c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003c4a:	2300      	movs	r3, #0
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3718      	adds	r7, #24
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	00010002 	.word	0x00010002

08003c58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	603b      	str	r3, [r7, #0]
 8003c64:	4613      	mov	r3, r2
 8003c66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c68:	e048      	b.n	8003cfc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c70:	d044      	beq.n	8003cfc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c72:	f7fe f843 	bl	8001cfc <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	683a      	ldr	r2, [r7, #0]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d302      	bcc.n	8003c88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d139      	bne.n	8003cfc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	0c1b      	lsrs	r3, r3, #16
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d10d      	bne.n	8003cae <I2C_WaitOnFlagUntilTimeout+0x56>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	695b      	ldr	r3, [r3, #20]
 8003c98:	43da      	mvns	r2, r3
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	bf0c      	ite	eq
 8003ca4:	2301      	moveq	r3, #1
 8003ca6:	2300      	movne	r3, #0
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	461a      	mov	r2, r3
 8003cac:	e00c      	b.n	8003cc8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	43da      	mvns	r2, r3
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	4013      	ands	r3, r2
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	bf0c      	ite	eq
 8003cc0:	2301      	moveq	r3, #1
 8003cc2:	2300      	movne	r3, #0
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	79fb      	ldrb	r3, [r7, #7]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d116      	bne.n	8003cfc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2220      	movs	r2, #32
 8003cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ce8:	f043 0220 	orr.w	r2, r3, #32
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e023      	b.n	8003d44 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	0c1b      	lsrs	r3, r3, #16
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d10d      	bne.n	8003d22 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	695b      	ldr	r3, [r3, #20]
 8003d0c:	43da      	mvns	r2, r3
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	4013      	ands	r3, r2
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	bf0c      	ite	eq
 8003d18:	2301      	moveq	r3, #1
 8003d1a:	2300      	movne	r3, #0
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	461a      	mov	r2, r3
 8003d20:	e00c      	b.n	8003d3c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	699b      	ldr	r3, [r3, #24]
 8003d28:	43da      	mvns	r2, r3
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	bf0c      	ite	eq
 8003d34:	2301      	moveq	r3, #1
 8003d36:	2300      	movne	r3, #0
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	79fb      	ldrb	r3, [r7, #7]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d093      	beq.n	8003c6a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3710      	adds	r7, #16
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	607a      	str	r2, [r7, #4]
 8003d58:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d5a:	e071      	b.n	8003e40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d6a:	d123      	bne.n	8003db4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d7a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003d84:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2220      	movs	r2, #32
 8003d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da0:	f043 0204 	orr.w	r2, r3, #4
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e067      	b.n	8003e84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dba:	d041      	beq.n	8003e40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dbc:	f7fd ff9e 	bl	8001cfc <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d302      	bcc.n	8003dd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d136      	bne.n	8003e40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	0c1b      	lsrs	r3, r3, #16
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d10c      	bne.n	8003df6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	43da      	mvns	r2, r3
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	4013      	ands	r3, r2
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	bf14      	ite	ne
 8003dee:	2301      	movne	r3, #1
 8003df0:	2300      	moveq	r3, #0
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	e00b      	b.n	8003e0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	43da      	mvns	r2, r3
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	4013      	ands	r3, r2
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	bf14      	ite	ne
 8003e08:	2301      	movne	r3, #1
 8003e0a:	2300      	moveq	r3, #0
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d016      	beq.n	8003e40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2220      	movs	r2, #32
 8003e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e2c:	f043 0220 	orr.w	r2, r3, #32
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e021      	b.n	8003e84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	0c1b      	lsrs	r3, r3, #16
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d10c      	bne.n	8003e64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	695b      	ldr	r3, [r3, #20]
 8003e50:	43da      	mvns	r2, r3
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	4013      	ands	r3, r2
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	bf14      	ite	ne
 8003e5c:	2301      	movne	r3, #1
 8003e5e:	2300      	moveq	r3, #0
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	e00b      	b.n	8003e7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	43da      	mvns	r2, r3
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	4013      	ands	r3, r2
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	bf14      	ite	ne
 8003e76:	2301      	movne	r3, #1
 8003e78:	2300      	moveq	r3, #0
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	f47f af6d 	bne.w	8003d5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3710      	adds	r7, #16
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e98:	e034      	b.n	8003f04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e9a:	68f8      	ldr	r0, [r7, #12]
 8003e9c:	f000 f8e3 	bl	8004066 <I2C_IsAcknowledgeFailed>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d001      	beq.n	8003eaa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e034      	b.n	8003f14 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb0:	d028      	beq.n	8003f04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eb2:	f7fd ff23 	bl	8001cfc <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	68ba      	ldr	r2, [r7, #8]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d302      	bcc.n	8003ec8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d11d      	bne.n	8003f04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ed2:	2b80      	cmp	r3, #128	@ 0x80
 8003ed4:	d016      	beq.n	8003f04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2220      	movs	r2, #32
 8003ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef0:	f043 0220 	orr.w	r2, r3, #32
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e007      	b.n	8003f14 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f0e:	2b80      	cmp	r3, #128	@ 0x80
 8003f10:	d1c3      	bne.n	8003e9a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3710      	adds	r7, #16
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f28:	e034      	b.n	8003f94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f2a:	68f8      	ldr	r0, [r7, #12]
 8003f2c:	f000 f89b 	bl	8004066 <I2C_IsAcknowledgeFailed>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d001      	beq.n	8003f3a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e034      	b.n	8003fa4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f40:	d028      	beq.n	8003f94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f42:	f7fd fedb 	bl	8001cfc <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	68ba      	ldr	r2, [r7, #8]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d302      	bcc.n	8003f58 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d11d      	bne.n	8003f94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	f003 0304 	and.w	r3, r3, #4
 8003f62:	2b04      	cmp	r3, #4
 8003f64:	d016      	beq.n	8003f94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2220      	movs	r2, #32
 8003f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f80:	f043 0220 	orr.w	r2, r3, #32
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e007      	b.n	8003fa4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	695b      	ldr	r3, [r3, #20]
 8003f9a:	f003 0304 	and.w	r3, r3, #4
 8003f9e:	2b04      	cmp	r3, #4
 8003fa0:	d1c3      	bne.n	8003f2a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3710      	adds	r7, #16
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003fb8:	e049      	b.n	800404e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	695b      	ldr	r3, [r3, #20]
 8003fc0:	f003 0310 	and.w	r3, r3, #16
 8003fc4:	2b10      	cmp	r3, #16
 8003fc6:	d119      	bne.n	8003ffc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f06f 0210 	mvn.w	r2, #16
 8003fd0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2220      	movs	r2, #32
 8003fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e030      	b.n	800405e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ffc:	f7fd fe7e 	bl	8001cfc <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	68ba      	ldr	r2, [r7, #8]
 8004008:	429a      	cmp	r2, r3
 800400a:	d302      	bcc.n	8004012 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d11d      	bne.n	800404e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	695b      	ldr	r3, [r3, #20]
 8004018:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800401c:	2b40      	cmp	r3, #64	@ 0x40
 800401e:	d016      	beq.n	800404e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2200      	movs	r2, #0
 8004024:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2220      	movs	r2, #32
 800402a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403a:	f043 0220 	orr.w	r2, r3, #32
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e007      	b.n	800405e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	695b      	ldr	r3, [r3, #20]
 8004054:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004058:	2b40      	cmp	r3, #64	@ 0x40
 800405a:	d1ae      	bne.n	8003fba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3710      	adds	r7, #16
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}

08004066 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004066:	b480      	push	{r7}
 8004068:	b083      	sub	sp, #12
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	695b      	ldr	r3, [r3, #20]
 8004074:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004078:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800407c:	d11b      	bne.n	80040b6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004086:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2220      	movs	r2, #32
 8004092:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a2:	f043 0204 	orr.w	r2, r3, #4
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e000      	b.n	80040b8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	370c      	adds	r7, #12
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b086      	sub	sp, #24
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d101      	bne.n	80040d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e267      	b.n	80045a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d075      	beq.n	80041ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80040e2:	4b88      	ldr	r3, [pc, #544]	@ (8004304 <HAL_RCC_OscConfig+0x240>)
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f003 030c 	and.w	r3, r3, #12
 80040ea:	2b04      	cmp	r3, #4
 80040ec:	d00c      	beq.n	8004108 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040ee:	4b85      	ldr	r3, [pc, #532]	@ (8004304 <HAL_RCC_OscConfig+0x240>)
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80040f6:	2b08      	cmp	r3, #8
 80040f8:	d112      	bne.n	8004120 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040fa:	4b82      	ldr	r3, [pc, #520]	@ (8004304 <HAL_RCC_OscConfig+0x240>)
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004102:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004106:	d10b      	bne.n	8004120 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004108:	4b7e      	ldr	r3, [pc, #504]	@ (8004304 <HAL_RCC_OscConfig+0x240>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d05b      	beq.n	80041cc <HAL_RCC_OscConfig+0x108>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d157      	bne.n	80041cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e242      	b.n	80045a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004128:	d106      	bne.n	8004138 <HAL_RCC_OscConfig+0x74>
 800412a:	4b76      	ldr	r3, [pc, #472]	@ (8004304 <HAL_RCC_OscConfig+0x240>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a75      	ldr	r2, [pc, #468]	@ (8004304 <HAL_RCC_OscConfig+0x240>)
 8004130:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004134:	6013      	str	r3, [r2, #0]
 8004136:	e01d      	b.n	8004174 <HAL_RCC_OscConfig+0xb0>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004140:	d10c      	bne.n	800415c <HAL_RCC_OscConfig+0x98>
 8004142:	4b70      	ldr	r3, [pc, #448]	@ (8004304 <HAL_RCC_OscConfig+0x240>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a6f      	ldr	r2, [pc, #444]	@ (8004304 <HAL_RCC_OscConfig+0x240>)
 8004148:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800414c:	6013      	str	r3, [r2, #0]
 800414e:	4b6d      	ldr	r3, [pc, #436]	@ (8004304 <HAL_RCC_OscConfig+0x240>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a6c      	ldr	r2, [pc, #432]	@ (8004304 <HAL_RCC_OscConfig+0x240>)
 8004154:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004158:	6013      	str	r3, [r2, #0]
 800415a:	e00b      	b.n	8004174 <HAL_RCC_OscConfig+0xb0>
 800415c:	4b69      	ldr	r3, [pc, #420]	@ (8004304 <HAL_RCC_OscConfig+0x240>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a68      	ldr	r2, [pc, #416]	@ (8004304 <HAL_RCC_OscConfig+0x240>)
 8004162:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004166:	6013      	str	r3, [r2, #0]
 8004168:	4b66      	ldr	r3, [pc, #408]	@ (8004304 <HAL_RCC_OscConfig+0x240>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a65      	ldr	r2, [pc, #404]	@ (8004304 <HAL_RCC_OscConfig+0x240>)
 800416e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004172:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d013      	beq.n	80041a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800417c:	f7fd fdbe 	bl	8001cfc <HAL_GetTick>
 8004180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004182:	e008      	b.n	8004196 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004184:	f7fd fdba 	bl	8001cfc <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	2b64      	cmp	r3, #100	@ 0x64
 8004190:	d901      	bls.n	8004196 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e207      	b.n	80045a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004196:	4b5b      	ldr	r3, [pc, #364]	@ (8004304 <HAL_RCC_OscConfig+0x240>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d0f0      	beq.n	8004184 <HAL_RCC_OscConfig+0xc0>
 80041a2:	e014      	b.n	80041ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041a4:	f7fd fdaa 	bl	8001cfc <HAL_GetTick>
 80041a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041aa:	e008      	b.n	80041be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041ac:	f7fd fda6 	bl	8001cfc <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	2b64      	cmp	r3, #100	@ 0x64
 80041b8:	d901      	bls.n	80041be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e1f3      	b.n	80045a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041be:	4b51      	ldr	r3, [pc, #324]	@ (8004304 <HAL_RCC_OscConfig+0x240>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1f0      	bne.n	80041ac <HAL_RCC_OscConfig+0xe8>
 80041ca:	e000      	b.n	80041ce <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0302 	and.w	r3, r3, #2
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d063      	beq.n	80042a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80041da:	4b4a      	ldr	r3, [pc, #296]	@ (8004304 <HAL_RCC_OscConfig+0x240>)
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f003 030c 	and.w	r3, r3, #12
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d00b      	beq.n	80041fe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041e6:	4b47      	ldr	r3, [pc, #284]	@ (8004304 <HAL_RCC_OscConfig+0x240>)
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80041ee:	2b08      	cmp	r3, #8
 80041f0:	d11c      	bne.n	800422c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041f2:	4b44      	ldr	r3, [pc, #272]	@ (8004304 <HAL_RCC_OscConfig+0x240>)
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d116      	bne.n	800422c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041fe:	4b41      	ldr	r3, [pc, #260]	@ (8004304 <HAL_RCC_OscConfig+0x240>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d005      	beq.n	8004216 <HAL_RCC_OscConfig+0x152>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	2b01      	cmp	r3, #1
 8004210:	d001      	beq.n	8004216 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e1c7      	b.n	80045a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004216:	4b3b      	ldr	r3, [pc, #236]	@ (8004304 <HAL_RCC_OscConfig+0x240>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	00db      	lsls	r3, r3, #3
 8004224:	4937      	ldr	r1, [pc, #220]	@ (8004304 <HAL_RCC_OscConfig+0x240>)
 8004226:	4313      	orrs	r3, r2
 8004228:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800422a:	e03a      	b.n	80042a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d020      	beq.n	8004276 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004234:	4b34      	ldr	r3, [pc, #208]	@ (8004308 <HAL_RCC_OscConfig+0x244>)
 8004236:	2201      	movs	r2, #1
 8004238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800423a:	f7fd fd5f 	bl	8001cfc <HAL_GetTick>
 800423e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004240:	e008      	b.n	8004254 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004242:	f7fd fd5b 	bl	8001cfc <HAL_GetTick>
 8004246:	4602      	mov	r2, r0
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	2b02      	cmp	r3, #2
 800424e:	d901      	bls.n	8004254 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004250:	2303      	movs	r3, #3
 8004252:	e1a8      	b.n	80045a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004254:	4b2b      	ldr	r3, [pc, #172]	@ (8004304 <HAL_RCC_OscConfig+0x240>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0302 	and.w	r3, r3, #2
 800425c:	2b00      	cmp	r3, #0
 800425e:	d0f0      	beq.n	8004242 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004260:	4b28      	ldr	r3, [pc, #160]	@ (8004304 <HAL_RCC_OscConfig+0x240>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	00db      	lsls	r3, r3, #3
 800426e:	4925      	ldr	r1, [pc, #148]	@ (8004304 <HAL_RCC_OscConfig+0x240>)
 8004270:	4313      	orrs	r3, r2
 8004272:	600b      	str	r3, [r1, #0]
 8004274:	e015      	b.n	80042a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004276:	4b24      	ldr	r3, [pc, #144]	@ (8004308 <HAL_RCC_OscConfig+0x244>)
 8004278:	2200      	movs	r2, #0
 800427a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800427c:	f7fd fd3e 	bl	8001cfc <HAL_GetTick>
 8004280:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004282:	e008      	b.n	8004296 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004284:	f7fd fd3a 	bl	8001cfc <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	2b02      	cmp	r3, #2
 8004290:	d901      	bls.n	8004296 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e187      	b.n	80045a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004296:	4b1b      	ldr	r3, [pc, #108]	@ (8004304 <HAL_RCC_OscConfig+0x240>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1f0      	bne.n	8004284 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0308 	and.w	r3, r3, #8
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d036      	beq.n	800431c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d016      	beq.n	80042e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042b6:	4b15      	ldr	r3, [pc, #84]	@ (800430c <HAL_RCC_OscConfig+0x248>)
 80042b8:	2201      	movs	r2, #1
 80042ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042bc:	f7fd fd1e 	bl	8001cfc <HAL_GetTick>
 80042c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042c2:	e008      	b.n	80042d6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042c4:	f7fd fd1a 	bl	8001cfc <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d901      	bls.n	80042d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e167      	b.n	80045a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042d6:	4b0b      	ldr	r3, [pc, #44]	@ (8004304 <HAL_RCC_OscConfig+0x240>)
 80042d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d0f0      	beq.n	80042c4 <HAL_RCC_OscConfig+0x200>
 80042e2:	e01b      	b.n	800431c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042e4:	4b09      	ldr	r3, [pc, #36]	@ (800430c <HAL_RCC_OscConfig+0x248>)
 80042e6:	2200      	movs	r2, #0
 80042e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042ea:	f7fd fd07 	bl	8001cfc <HAL_GetTick>
 80042ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042f0:	e00e      	b.n	8004310 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042f2:	f7fd fd03 	bl	8001cfc <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d907      	bls.n	8004310 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	e150      	b.n	80045a6 <HAL_RCC_OscConfig+0x4e2>
 8004304:	40023800 	.word	0x40023800
 8004308:	42470000 	.word	0x42470000
 800430c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004310:	4b88      	ldr	r3, [pc, #544]	@ (8004534 <HAL_RCC_OscConfig+0x470>)
 8004312:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004314:	f003 0302 	and.w	r3, r3, #2
 8004318:	2b00      	cmp	r3, #0
 800431a:	d1ea      	bne.n	80042f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0304 	and.w	r3, r3, #4
 8004324:	2b00      	cmp	r3, #0
 8004326:	f000 8097 	beq.w	8004458 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800432a:	2300      	movs	r3, #0
 800432c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800432e:	4b81      	ldr	r3, [pc, #516]	@ (8004534 <HAL_RCC_OscConfig+0x470>)
 8004330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004332:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d10f      	bne.n	800435a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800433a:	2300      	movs	r3, #0
 800433c:	60bb      	str	r3, [r7, #8]
 800433e:	4b7d      	ldr	r3, [pc, #500]	@ (8004534 <HAL_RCC_OscConfig+0x470>)
 8004340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004342:	4a7c      	ldr	r2, [pc, #496]	@ (8004534 <HAL_RCC_OscConfig+0x470>)
 8004344:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004348:	6413      	str	r3, [r2, #64]	@ 0x40
 800434a:	4b7a      	ldr	r3, [pc, #488]	@ (8004534 <HAL_RCC_OscConfig+0x470>)
 800434c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800434e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004352:	60bb      	str	r3, [r7, #8]
 8004354:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004356:	2301      	movs	r3, #1
 8004358:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800435a:	4b77      	ldr	r3, [pc, #476]	@ (8004538 <HAL_RCC_OscConfig+0x474>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004362:	2b00      	cmp	r3, #0
 8004364:	d118      	bne.n	8004398 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004366:	4b74      	ldr	r3, [pc, #464]	@ (8004538 <HAL_RCC_OscConfig+0x474>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a73      	ldr	r2, [pc, #460]	@ (8004538 <HAL_RCC_OscConfig+0x474>)
 800436c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004370:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004372:	f7fd fcc3 	bl	8001cfc <HAL_GetTick>
 8004376:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004378:	e008      	b.n	800438c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800437a:	f7fd fcbf 	bl	8001cfc <HAL_GetTick>
 800437e:	4602      	mov	r2, r0
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	2b02      	cmp	r3, #2
 8004386:	d901      	bls.n	800438c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e10c      	b.n	80045a6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800438c:	4b6a      	ldr	r3, [pc, #424]	@ (8004538 <HAL_RCC_OscConfig+0x474>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004394:	2b00      	cmp	r3, #0
 8004396:	d0f0      	beq.n	800437a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	2b01      	cmp	r3, #1
 800439e:	d106      	bne.n	80043ae <HAL_RCC_OscConfig+0x2ea>
 80043a0:	4b64      	ldr	r3, [pc, #400]	@ (8004534 <HAL_RCC_OscConfig+0x470>)
 80043a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043a4:	4a63      	ldr	r2, [pc, #396]	@ (8004534 <HAL_RCC_OscConfig+0x470>)
 80043a6:	f043 0301 	orr.w	r3, r3, #1
 80043aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80043ac:	e01c      	b.n	80043e8 <HAL_RCC_OscConfig+0x324>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	2b05      	cmp	r3, #5
 80043b4:	d10c      	bne.n	80043d0 <HAL_RCC_OscConfig+0x30c>
 80043b6:	4b5f      	ldr	r3, [pc, #380]	@ (8004534 <HAL_RCC_OscConfig+0x470>)
 80043b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043ba:	4a5e      	ldr	r2, [pc, #376]	@ (8004534 <HAL_RCC_OscConfig+0x470>)
 80043bc:	f043 0304 	orr.w	r3, r3, #4
 80043c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80043c2:	4b5c      	ldr	r3, [pc, #368]	@ (8004534 <HAL_RCC_OscConfig+0x470>)
 80043c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043c6:	4a5b      	ldr	r2, [pc, #364]	@ (8004534 <HAL_RCC_OscConfig+0x470>)
 80043c8:	f043 0301 	orr.w	r3, r3, #1
 80043cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80043ce:	e00b      	b.n	80043e8 <HAL_RCC_OscConfig+0x324>
 80043d0:	4b58      	ldr	r3, [pc, #352]	@ (8004534 <HAL_RCC_OscConfig+0x470>)
 80043d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043d4:	4a57      	ldr	r2, [pc, #348]	@ (8004534 <HAL_RCC_OscConfig+0x470>)
 80043d6:	f023 0301 	bic.w	r3, r3, #1
 80043da:	6713      	str	r3, [r2, #112]	@ 0x70
 80043dc:	4b55      	ldr	r3, [pc, #340]	@ (8004534 <HAL_RCC_OscConfig+0x470>)
 80043de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043e0:	4a54      	ldr	r2, [pc, #336]	@ (8004534 <HAL_RCC_OscConfig+0x470>)
 80043e2:	f023 0304 	bic.w	r3, r3, #4
 80043e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d015      	beq.n	800441c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043f0:	f7fd fc84 	bl	8001cfc <HAL_GetTick>
 80043f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043f6:	e00a      	b.n	800440e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043f8:	f7fd fc80 	bl	8001cfc <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004406:	4293      	cmp	r3, r2
 8004408:	d901      	bls.n	800440e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e0cb      	b.n	80045a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800440e:	4b49      	ldr	r3, [pc, #292]	@ (8004534 <HAL_RCC_OscConfig+0x470>)
 8004410:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004412:	f003 0302 	and.w	r3, r3, #2
 8004416:	2b00      	cmp	r3, #0
 8004418:	d0ee      	beq.n	80043f8 <HAL_RCC_OscConfig+0x334>
 800441a:	e014      	b.n	8004446 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800441c:	f7fd fc6e 	bl	8001cfc <HAL_GetTick>
 8004420:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004422:	e00a      	b.n	800443a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004424:	f7fd fc6a 	bl	8001cfc <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004432:	4293      	cmp	r3, r2
 8004434:	d901      	bls.n	800443a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e0b5      	b.n	80045a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800443a:	4b3e      	ldr	r3, [pc, #248]	@ (8004534 <HAL_RCC_OscConfig+0x470>)
 800443c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800443e:	f003 0302 	and.w	r3, r3, #2
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1ee      	bne.n	8004424 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004446:	7dfb      	ldrb	r3, [r7, #23]
 8004448:	2b01      	cmp	r3, #1
 800444a:	d105      	bne.n	8004458 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800444c:	4b39      	ldr	r3, [pc, #228]	@ (8004534 <HAL_RCC_OscConfig+0x470>)
 800444e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004450:	4a38      	ldr	r2, [pc, #224]	@ (8004534 <HAL_RCC_OscConfig+0x470>)
 8004452:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004456:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	2b00      	cmp	r3, #0
 800445e:	f000 80a1 	beq.w	80045a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004462:	4b34      	ldr	r3, [pc, #208]	@ (8004534 <HAL_RCC_OscConfig+0x470>)
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f003 030c 	and.w	r3, r3, #12
 800446a:	2b08      	cmp	r3, #8
 800446c:	d05c      	beq.n	8004528 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	2b02      	cmp	r3, #2
 8004474:	d141      	bne.n	80044fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004476:	4b31      	ldr	r3, [pc, #196]	@ (800453c <HAL_RCC_OscConfig+0x478>)
 8004478:	2200      	movs	r2, #0
 800447a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800447c:	f7fd fc3e 	bl	8001cfc <HAL_GetTick>
 8004480:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004482:	e008      	b.n	8004496 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004484:	f7fd fc3a 	bl	8001cfc <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	2b02      	cmp	r3, #2
 8004490:	d901      	bls.n	8004496 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e087      	b.n	80045a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004496:	4b27      	ldr	r3, [pc, #156]	@ (8004534 <HAL_RCC_OscConfig+0x470>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1f0      	bne.n	8004484 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	69da      	ldr	r2, [r3, #28]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a1b      	ldr	r3, [r3, #32]
 80044aa:	431a      	orrs	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b0:	019b      	lsls	r3, r3, #6
 80044b2:	431a      	orrs	r2, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044b8:	085b      	lsrs	r3, r3, #1
 80044ba:	3b01      	subs	r3, #1
 80044bc:	041b      	lsls	r3, r3, #16
 80044be:	431a      	orrs	r2, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044c4:	061b      	lsls	r3, r3, #24
 80044c6:	491b      	ldr	r1, [pc, #108]	@ (8004534 <HAL_RCC_OscConfig+0x470>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044cc:	4b1b      	ldr	r3, [pc, #108]	@ (800453c <HAL_RCC_OscConfig+0x478>)
 80044ce:	2201      	movs	r2, #1
 80044d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d2:	f7fd fc13 	bl	8001cfc <HAL_GetTick>
 80044d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044d8:	e008      	b.n	80044ec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044da:	f7fd fc0f 	bl	8001cfc <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d901      	bls.n	80044ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e05c      	b.n	80045a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044ec:	4b11      	ldr	r3, [pc, #68]	@ (8004534 <HAL_RCC_OscConfig+0x470>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d0f0      	beq.n	80044da <HAL_RCC_OscConfig+0x416>
 80044f8:	e054      	b.n	80045a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044fa:	4b10      	ldr	r3, [pc, #64]	@ (800453c <HAL_RCC_OscConfig+0x478>)
 80044fc:	2200      	movs	r2, #0
 80044fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004500:	f7fd fbfc 	bl	8001cfc <HAL_GetTick>
 8004504:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004506:	e008      	b.n	800451a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004508:	f7fd fbf8 	bl	8001cfc <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	2b02      	cmp	r3, #2
 8004514:	d901      	bls.n	800451a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e045      	b.n	80045a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800451a:	4b06      	ldr	r3, [pc, #24]	@ (8004534 <HAL_RCC_OscConfig+0x470>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1f0      	bne.n	8004508 <HAL_RCC_OscConfig+0x444>
 8004526:	e03d      	b.n	80045a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	699b      	ldr	r3, [r3, #24]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d107      	bne.n	8004540 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e038      	b.n	80045a6 <HAL_RCC_OscConfig+0x4e2>
 8004534:	40023800 	.word	0x40023800
 8004538:	40007000 	.word	0x40007000
 800453c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004540:	4b1b      	ldr	r3, [pc, #108]	@ (80045b0 <HAL_RCC_OscConfig+0x4ec>)
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	699b      	ldr	r3, [r3, #24]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d028      	beq.n	80045a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004558:	429a      	cmp	r2, r3
 800455a:	d121      	bne.n	80045a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004566:	429a      	cmp	r2, r3
 8004568:	d11a      	bne.n	80045a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004570:	4013      	ands	r3, r2
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004576:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004578:	4293      	cmp	r3, r2
 800457a:	d111      	bne.n	80045a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004586:	085b      	lsrs	r3, r3, #1
 8004588:	3b01      	subs	r3, #1
 800458a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800458c:	429a      	cmp	r2, r3
 800458e:	d107      	bne.n	80045a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800459a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800459c:	429a      	cmp	r2, r3
 800459e:	d001      	beq.n	80045a4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e000      	b.n	80045a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3718      	adds	r7, #24
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	40023800 	.word	0x40023800

080045b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d101      	bne.n	80045c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e0cc      	b.n	8004762 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045c8:	4b68      	ldr	r3, [pc, #416]	@ (800476c <HAL_RCC_ClockConfig+0x1b8>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0307 	and.w	r3, r3, #7
 80045d0:	683a      	ldr	r2, [r7, #0]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d90c      	bls.n	80045f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045d6:	4b65      	ldr	r3, [pc, #404]	@ (800476c <HAL_RCC_ClockConfig+0x1b8>)
 80045d8:	683a      	ldr	r2, [r7, #0]
 80045da:	b2d2      	uxtb	r2, r2
 80045dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045de:	4b63      	ldr	r3, [pc, #396]	@ (800476c <HAL_RCC_ClockConfig+0x1b8>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0307 	and.w	r3, r3, #7
 80045e6:	683a      	ldr	r2, [r7, #0]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d001      	beq.n	80045f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e0b8      	b.n	8004762 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0302 	and.w	r3, r3, #2
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d020      	beq.n	800463e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0304 	and.w	r3, r3, #4
 8004604:	2b00      	cmp	r3, #0
 8004606:	d005      	beq.n	8004614 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004608:	4b59      	ldr	r3, [pc, #356]	@ (8004770 <HAL_RCC_ClockConfig+0x1bc>)
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	4a58      	ldr	r2, [pc, #352]	@ (8004770 <HAL_RCC_ClockConfig+0x1bc>)
 800460e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004612:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0308 	and.w	r3, r3, #8
 800461c:	2b00      	cmp	r3, #0
 800461e:	d005      	beq.n	800462c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004620:	4b53      	ldr	r3, [pc, #332]	@ (8004770 <HAL_RCC_ClockConfig+0x1bc>)
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	4a52      	ldr	r2, [pc, #328]	@ (8004770 <HAL_RCC_ClockConfig+0x1bc>)
 8004626:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800462a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800462c:	4b50      	ldr	r3, [pc, #320]	@ (8004770 <HAL_RCC_ClockConfig+0x1bc>)
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	494d      	ldr	r1, [pc, #308]	@ (8004770 <HAL_RCC_ClockConfig+0x1bc>)
 800463a:	4313      	orrs	r3, r2
 800463c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	2b00      	cmp	r3, #0
 8004648:	d044      	beq.n	80046d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d107      	bne.n	8004662 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004652:	4b47      	ldr	r3, [pc, #284]	@ (8004770 <HAL_RCC_ClockConfig+0x1bc>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d119      	bne.n	8004692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e07f      	b.n	8004762 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	2b02      	cmp	r3, #2
 8004668:	d003      	beq.n	8004672 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800466e:	2b03      	cmp	r3, #3
 8004670:	d107      	bne.n	8004682 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004672:	4b3f      	ldr	r3, [pc, #252]	@ (8004770 <HAL_RCC_ClockConfig+0x1bc>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d109      	bne.n	8004692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e06f      	b.n	8004762 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004682:	4b3b      	ldr	r3, [pc, #236]	@ (8004770 <HAL_RCC_ClockConfig+0x1bc>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0302 	and.w	r3, r3, #2
 800468a:	2b00      	cmp	r3, #0
 800468c:	d101      	bne.n	8004692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e067      	b.n	8004762 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004692:	4b37      	ldr	r3, [pc, #220]	@ (8004770 <HAL_RCC_ClockConfig+0x1bc>)
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f023 0203 	bic.w	r2, r3, #3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	4934      	ldr	r1, [pc, #208]	@ (8004770 <HAL_RCC_ClockConfig+0x1bc>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046a4:	f7fd fb2a 	bl	8001cfc <HAL_GetTick>
 80046a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046aa:	e00a      	b.n	80046c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046ac:	f7fd fb26 	bl	8001cfc <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d901      	bls.n	80046c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e04f      	b.n	8004762 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046c2:	4b2b      	ldr	r3, [pc, #172]	@ (8004770 <HAL_RCC_ClockConfig+0x1bc>)
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f003 020c 	and.w	r2, r3, #12
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d1eb      	bne.n	80046ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046d4:	4b25      	ldr	r3, [pc, #148]	@ (800476c <HAL_RCC_ClockConfig+0x1b8>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0307 	and.w	r3, r3, #7
 80046dc:	683a      	ldr	r2, [r7, #0]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d20c      	bcs.n	80046fc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046e2:	4b22      	ldr	r3, [pc, #136]	@ (800476c <HAL_RCC_ClockConfig+0x1b8>)
 80046e4:	683a      	ldr	r2, [r7, #0]
 80046e6:	b2d2      	uxtb	r2, r2
 80046e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ea:	4b20      	ldr	r3, [pc, #128]	@ (800476c <HAL_RCC_ClockConfig+0x1b8>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0307 	and.w	r3, r3, #7
 80046f2:	683a      	ldr	r2, [r7, #0]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d001      	beq.n	80046fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e032      	b.n	8004762 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0304 	and.w	r3, r3, #4
 8004704:	2b00      	cmp	r3, #0
 8004706:	d008      	beq.n	800471a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004708:	4b19      	ldr	r3, [pc, #100]	@ (8004770 <HAL_RCC_ClockConfig+0x1bc>)
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	4916      	ldr	r1, [pc, #88]	@ (8004770 <HAL_RCC_ClockConfig+0x1bc>)
 8004716:	4313      	orrs	r3, r2
 8004718:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0308 	and.w	r3, r3, #8
 8004722:	2b00      	cmp	r3, #0
 8004724:	d009      	beq.n	800473a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004726:	4b12      	ldr	r3, [pc, #72]	@ (8004770 <HAL_RCC_ClockConfig+0x1bc>)
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	00db      	lsls	r3, r3, #3
 8004734:	490e      	ldr	r1, [pc, #56]	@ (8004770 <HAL_RCC_ClockConfig+0x1bc>)
 8004736:	4313      	orrs	r3, r2
 8004738:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800473a:	f000 f821 	bl	8004780 <HAL_RCC_GetSysClockFreq>
 800473e:	4602      	mov	r2, r0
 8004740:	4b0b      	ldr	r3, [pc, #44]	@ (8004770 <HAL_RCC_ClockConfig+0x1bc>)
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	091b      	lsrs	r3, r3, #4
 8004746:	f003 030f 	and.w	r3, r3, #15
 800474a:	490a      	ldr	r1, [pc, #40]	@ (8004774 <HAL_RCC_ClockConfig+0x1c0>)
 800474c:	5ccb      	ldrb	r3, [r1, r3]
 800474e:	fa22 f303 	lsr.w	r3, r2, r3
 8004752:	4a09      	ldr	r2, [pc, #36]	@ (8004778 <HAL_RCC_ClockConfig+0x1c4>)
 8004754:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004756:	4b09      	ldr	r3, [pc, #36]	@ (800477c <HAL_RCC_ClockConfig+0x1c8>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4618      	mov	r0, r3
 800475c:	f7fd f8e0 	bl	8001920 <HAL_InitTick>

  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3710      	adds	r7, #16
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	40023c00 	.word	0x40023c00
 8004770:	40023800 	.word	0x40023800
 8004774:	08008f8c 	.word	0x08008f8c
 8004778:	20000000 	.word	0x20000000
 800477c:	20000004 	.word	0x20000004

08004780 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004780:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004784:	b090      	sub	sp, #64	@ 0x40
 8004786:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004788:	2300      	movs	r3, #0
 800478a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800478c:	2300      	movs	r3, #0
 800478e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004790:	2300      	movs	r3, #0
 8004792:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004794:	2300      	movs	r3, #0
 8004796:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004798:	4b59      	ldr	r3, [pc, #356]	@ (8004900 <HAL_RCC_GetSysClockFreq+0x180>)
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	f003 030c 	and.w	r3, r3, #12
 80047a0:	2b08      	cmp	r3, #8
 80047a2:	d00d      	beq.n	80047c0 <HAL_RCC_GetSysClockFreq+0x40>
 80047a4:	2b08      	cmp	r3, #8
 80047a6:	f200 80a1 	bhi.w	80048ec <HAL_RCC_GetSysClockFreq+0x16c>
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d002      	beq.n	80047b4 <HAL_RCC_GetSysClockFreq+0x34>
 80047ae:	2b04      	cmp	r3, #4
 80047b0:	d003      	beq.n	80047ba <HAL_RCC_GetSysClockFreq+0x3a>
 80047b2:	e09b      	b.n	80048ec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047b4:	4b53      	ldr	r3, [pc, #332]	@ (8004904 <HAL_RCC_GetSysClockFreq+0x184>)
 80047b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80047b8:	e09b      	b.n	80048f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047ba:	4b53      	ldr	r3, [pc, #332]	@ (8004908 <HAL_RCC_GetSysClockFreq+0x188>)
 80047bc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80047be:	e098      	b.n	80048f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047c0:	4b4f      	ldr	r3, [pc, #316]	@ (8004900 <HAL_RCC_GetSysClockFreq+0x180>)
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80047c8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047ca:	4b4d      	ldr	r3, [pc, #308]	@ (8004900 <HAL_RCC_GetSysClockFreq+0x180>)
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d028      	beq.n	8004828 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047d6:	4b4a      	ldr	r3, [pc, #296]	@ (8004900 <HAL_RCC_GetSysClockFreq+0x180>)
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	099b      	lsrs	r3, r3, #6
 80047dc:	2200      	movs	r2, #0
 80047de:	623b      	str	r3, [r7, #32]
 80047e0:	627a      	str	r2, [r7, #36]	@ 0x24
 80047e2:	6a3b      	ldr	r3, [r7, #32]
 80047e4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80047e8:	2100      	movs	r1, #0
 80047ea:	4b47      	ldr	r3, [pc, #284]	@ (8004908 <HAL_RCC_GetSysClockFreq+0x188>)
 80047ec:	fb03 f201 	mul.w	r2, r3, r1
 80047f0:	2300      	movs	r3, #0
 80047f2:	fb00 f303 	mul.w	r3, r0, r3
 80047f6:	4413      	add	r3, r2
 80047f8:	4a43      	ldr	r2, [pc, #268]	@ (8004908 <HAL_RCC_GetSysClockFreq+0x188>)
 80047fa:	fba0 1202 	umull	r1, r2, r0, r2
 80047fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004800:	460a      	mov	r2, r1
 8004802:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004804:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004806:	4413      	add	r3, r2
 8004808:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800480a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800480c:	2200      	movs	r2, #0
 800480e:	61bb      	str	r3, [r7, #24]
 8004810:	61fa      	str	r2, [r7, #28]
 8004812:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004816:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800481a:	f7fc fa15 	bl	8000c48 <__aeabi_uldivmod>
 800481e:	4602      	mov	r2, r0
 8004820:	460b      	mov	r3, r1
 8004822:	4613      	mov	r3, r2
 8004824:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004826:	e053      	b.n	80048d0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004828:	4b35      	ldr	r3, [pc, #212]	@ (8004900 <HAL_RCC_GetSysClockFreq+0x180>)
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	099b      	lsrs	r3, r3, #6
 800482e:	2200      	movs	r2, #0
 8004830:	613b      	str	r3, [r7, #16]
 8004832:	617a      	str	r2, [r7, #20]
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800483a:	f04f 0b00 	mov.w	fp, #0
 800483e:	4652      	mov	r2, sl
 8004840:	465b      	mov	r3, fp
 8004842:	f04f 0000 	mov.w	r0, #0
 8004846:	f04f 0100 	mov.w	r1, #0
 800484a:	0159      	lsls	r1, r3, #5
 800484c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004850:	0150      	lsls	r0, r2, #5
 8004852:	4602      	mov	r2, r0
 8004854:	460b      	mov	r3, r1
 8004856:	ebb2 080a 	subs.w	r8, r2, sl
 800485a:	eb63 090b 	sbc.w	r9, r3, fp
 800485e:	f04f 0200 	mov.w	r2, #0
 8004862:	f04f 0300 	mov.w	r3, #0
 8004866:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800486a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800486e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004872:	ebb2 0408 	subs.w	r4, r2, r8
 8004876:	eb63 0509 	sbc.w	r5, r3, r9
 800487a:	f04f 0200 	mov.w	r2, #0
 800487e:	f04f 0300 	mov.w	r3, #0
 8004882:	00eb      	lsls	r3, r5, #3
 8004884:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004888:	00e2      	lsls	r2, r4, #3
 800488a:	4614      	mov	r4, r2
 800488c:	461d      	mov	r5, r3
 800488e:	eb14 030a 	adds.w	r3, r4, sl
 8004892:	603b      	str	r3, [r7, #0]
 8004894:	eb45 030b 	adc.w	r3, r5, fp
 8004898:	607b      	str	r3, [r7, #4]
 800489a:	f04f 0200 	mov.w	r2, #0
 800489e:	f04f 0300 	mov.w	r3, #0
 80048a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80048a6:	4629      	mov	r1, r5
 80048a8:	028b      	lsls	r3, r1, #10
 80048aa:	4621      	mov	r1, r4
 80048ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80048b0:	4621      	mov	r1, r4
 80048b2:	028a      	lsls	r2, r1, #10
 80048b4:	4610      	mov	r0, r2
 80048b6:	4619      	mov	r1, r3
 80048b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048ba:	2200      	movs	r2, #0
 80048bc:	60bb      	str	r3, [r7, #8]
 80048be:	60fa      	str	r2, [r7, #12]
 80048c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80048c4:	f7fc f9c0 	bl	8000c48 <__aeabi_uldivmod>
 80048c8:	4602      	mov	r2, r0
 80048ca:	460b      	mov	r3, r1
 80048cc:	4613      	mov	r3, r2
 80048ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80048d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004900 <HAL_RCC_GetSysClockFreq+0x180>)
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	0c1b      	lsrs	r3, r3, #16
 80048d6:	f003 0303 	and.w	r3, r3, #3
 80048da:	3301      	adds	r3, #1
 80048dc:	005b      	lsls	r3, r3, #1
 80048de:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80048e0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80048e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80048ea:	e002      	b.n	80048f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048ec:	4b05      	ldr	r3, [pc, #20]	@ (8004904 <HAL_RCC_GetSysClockFreq+0x184>)
 80048ee:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80048f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3740      	adds	r7, #64	@ 0x40
 80048f8:	46bd      	mov	sp, r7
 80048fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048fe:	bf00      	nop
 8004900:	40023800 	.word	0x40023800
 8004904:	00f42400 	.word	0x00f42400
 8004908:	017d7840 	.word	0x017d7840

0800490c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800490c:	b480      	push	{r7}
 800490e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004910:	4b03      	ldr	r3, [pc, #12]	@ (8004920 <HAL_RCC_GetHCLKFreq+0x14>)
 8004912:	681b      	ldr	r3, [r3, #0]
}
 8004914:	4618      	mov	r0, r3
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	20000000 	.word	0x20000000

08004924 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004928:	f7ff fff0 	bl	800490c <HAL_RCC_GetHCLKFreq>
 800492c:	4602      	mov	r2, r0
 800492e:	4b05      	ldr	r3, [pc, #20]	@ (8004944 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	0a9b      	lsrs	r3, r3, #10
 8004934:	f003 0307 	and.w	r3, r3, #7
 8004938:	4903      	ldr	r1, [pc, #12]	@ (8004948 <HAL_RCC_GetPCLK1Freq+0x24>)
 800493a:	5ccb      	ldrb	r3, [r1, r3]
 800493c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004940:	4618      	mov	r0, r3
 8004942:	bd80      	pop	{r7, pc}
 8004944:	40023800 	.word	0x40023800
 8004948:	08008f9c 	.word	0x08008f9c

0800494c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004950:	f7ff ffdc 	bl	800490c <HAL_RCC_GetHCLKFreq>
 8004954:	4602      	mov	r2, r0
 8004956:	4b05      	ldr	r3, [pc, #20]	@ (800496c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	0b5b      	lsrs	r3, r3, #13
 800495c:	f003 0307 	and.w	r3, r3, #7
 8004960:	4903      	ldr	r1, [pc, #12]	@ (8004970 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004962:	5ccb      	ldrb	r3, [r1, r3]
 8004964:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004968:	4618      	mov	r0, r3
 800496a:	bd80      	pop	{r7, pc}
 800496c:	40023800 	.word	0x40023800
 8004970:	08008f9c 	.word	0x08008f9c

08004974 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	220f      	movs	r2, #15
 8004982:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004984:	4b12      	ldr	r3, [pc, #72]	@ (80049d0 <HAL_RCC_GetClockConfig+0x5c>)
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	f003 0203 	and.w	r2, r3, #3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004990:	4b0f      	ldr	r3, [pc, #60]	@ (80049d0 <HAL_RCC_GetClockConfig+0x5c>)
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800499c:	4b0c      	ldr	r3, [pc, #48]	@ (80049d0 <HAL_RCC_GetClockConfig+0x5c>)
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80049a8:	4b09      	ldr	r3, [pc, #36]	@ (80049d0 <HAL_RCC_GetClockConfig+0x5c>)
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	08db      	lsrs	r3, r3, #3
 80049ae:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80049b6:	4b07      	ldr	r3, [pc, #28]	@ (80049d4 <HAL_RCC_GetClockConfig+0x60>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0207 	and.w	r2, r3, #7
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	601a      	str	r2, [r3, #0]
}
 80049c2:	bf00      	nop
 80049c4:	370c      	adds	r7, #12
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	40023800 	.word	0x40023800
 80049d4:	40023c00 	.word	0x40023c00

080049d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d101      	bne.n	80049ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e07b      	b.n	8004ae2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d108      	bne.n	8004a04 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80049fa:	d009      	beq.n	8004a10 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	61da      	str	r2, [r3, #28]
 8004a02:	e005      	b.n	8004a10 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d106      	bne.n	8004a30 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f7fc ff10 	bl	8001850 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2202      	movs	r2, #2
 8004a34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a46:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004a58:	431a      	orrs	r2, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a62:	431a      	orrs	r2, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	691b      	ldr	r3, [r3, #16]
 8004a68:	f003 0302 	and.w	r3, r3, #2
 8004a6c:	431a      	orrs	r2, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	695b      	ldr	r3, [r3, #20]
 8004a72:	f003 0301 	and.w	r3, r3, #1
 8004a76:	431a      	orrs	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	699b      	ldr	r3, [r3, #24]
 8004a7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a80:	431a      	orrs	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	69db      	ldr	r3, [r3, #28]
 8004a86:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a8a:	431a      	orrs	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a1b      	ldr	r3, [r3, #32]
 8004a90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a94:	ea42 0103 	orr.w	r1, r2, r3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a9c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	430a      	orrs	r2, r1
 8004aa6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	0c1b      	lsrs	r3, r3, #16
 8004aae:	f003 0104 	and.w	r1, r3, #4
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab6:	f003 0210 	and.w	r2, r3, #16
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	430a      	orrs	r2, r1
 8004ac0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	69da      	ldr	r2, [r3, #28]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ad0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3708      	adds	r7, #8
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}

08004aea <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b082      	sub	sp, #8
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d101      	bne.n	8004afc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e041      	b.n	8004b80 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d106      	bne.n	8004b16 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f000 f839 	bl	8004b88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2202      	movs	r2, #2
 8004b1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	3304      	adds	r3, #4
 8004b26:	4619      	mov	r1, r3
 8004b28:	4610      	mov	r0, r2
 8004b2a:	f000 f9bf 	bl	8004eac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2201      	movs	r2, #1
 8004b32:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2201      	movs	r2, #1
 8004b3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2201      	movs	r2, #1
 8004b42:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2201      	movs	r2, #1
 8004b52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2201      	movs	r2, #1
 8004b62:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2201      	movs	r2, #1
 8004b72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3708      	adds	r7, #8
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004b90:	bf00      	nop
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b085      	sub	sp, #20
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d001      	beq.n	8004bb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e04e      	b.n	8004c52 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2202      	movs	r2, #2
 8004bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68da      	ldr	r2, [r3, #12]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f042 0201 	orr.w	r2, r2, #1
 8004bca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a23      	ldr	r2, [pc, #140]	@ (8004c60 <HAL_TIM_Base_Start_IT+0xc4>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d022      	beq.n	8004c1c <HAL_TIM_Base_Start_IT+0x80>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bde:	d01d      	beq.n	8004c1c <HAL_TIM_Base_Start_IT+0x80>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a1f      	ldr	r2, [pc, #124]	@ (8004c64 <HAL_TIM_Base_Start_IT+0xc8>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d018      	beq.n	8004c1c <HAL_TIM_Base_Start_IT+0x80>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a1e      	ldr	r2, [pc, #120]	@ (8004c68 <HAL_TIM_Base_Start_IT+0xcc>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d013      	beq.n	8004c1c <HAL_TIM_Base_Start_IT+0x80>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a1c      	ldr	r2, [pc, #112]	@ (8004c6c <HAL_TIM_Base_Start_IT+0xd0>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d00e      	beq.n	8004c1c <HAL_TIM_Base_Start_IT+0x80>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a1b      	ldr	r2, [pc, #108]	@ (8004c70 <HAL_TIM_Base_Start_IT+0xd4>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d009      	beq.n	8004c1c <HAL_TIM_Base_Start_IT+0x80>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a19      	ldr	r2, [pc, #100]	@ (8004c74 <HAL_TIM_Base_Start_IT+0xd8>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d004      	beq.n	8004c1c <HAL_TIM_Base_Start_IT+0x80>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a18      	ldr	r2, [pc, #96]	@ (8004c78 <HAL_TIM_Base_Start_IT+0xdc>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d111      	bne.n	8004c40 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	f003 0307 	and.w	r3, r3, #7
 8004c26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2b06      	cmp	r3, #6
 8004c2c:	d010      	beq.n	8004c50 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f042 0201 	orr.w	r2, r2, #1
 8004c3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c3e:	e007      	b.n	8004c50 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f042 0201 	orr.w	r2, r2, #1
 8004c4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3714      	adds	r7, #20
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	40010000 	.word	0x40010000
 8004c64:	40000400 	.word	0x40000400
 8004c68:	40000800 	.word	0x40000800
 8004c6c:	40000c00 	.word	0x40000c00
 8004c70:	40010400 	.word	0x40010400
 8004c74:	40014000 	.word	0x40014000
 8004c78:	40001800 	.word	0x40001800

08004c7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	f003 0302 	and.w	r3, r3, #2
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d020      	beq.n	8004ce0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f003 0302 	and.w	r3, r3, #2
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d01b      	beq.n	8004ce0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f06f 0202 	mvn.w	r2, #2
 8004cb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	f003 0303 	and.w	r3, r3, #3
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d003      	beq.n	8004cce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 f8d2 	bl	8004e70 <HAL_TIM_IC_CaptureCallback>
 8004ccc:	e005      	b.n	8004cda <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 f8c4 	bl	8004e5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 f8d5 	bl	8004e84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	f003 0304 	and.w	r3, r3, #4
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d020      	beq.n	8004d2c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f003 0304 	and.w	r3, r3, #4
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d01b      	beq.n	8004d2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f06f 0204 	mvn.w	r2, #4
 8004cfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2202      	movs	r2, #2
 8004d02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	699b      	ldr	r3, [r3, #24]
 8004d0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d003      	beq.n	8004d1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 f8ac 	bl	8004e70 <HAL_TIM_IC_CaptureCallback>
 8004d18:	e005      	b.n	8004d26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 f89e 	bl	8004e5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f000 f8af 	bl	8004e84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	f003 0308 	and.w	r3, r3, #8
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d020      	beq.n	8004d78 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f003 0308 	and.w	r3, r3, #8
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d01b      	beq.n	8004d78 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f06f 0208 	mvn.w	r2, #8
 8004d48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2204      	movs	r2, #4
 8004d4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	69db      	ldr	r3, [r3, #28]
 8004d56:	f003 0303 	and.w	r3, r3, #3
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d003      	beq.n	8004d66 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 f886 	bl	8004e70 <HAL_TIM_IC_CaptureCallback>
 8004d64:	e005      	b.n	8004d72 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f000 f878 	bl	8004e5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 f889 	bl	8004e84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	f003 0310 	and.w	r3, r3, #16
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d020      	beq.n	8004dc4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f003 0310 	and.w	r3, r3, #16
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d01b      	beq.n	8004dc4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f06f 0210 	mvn.w	r2, #16
 8004d94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2208      	movs	r2, #8
 8004d9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	69db      	ldr	r3, [r3, #28]
 8004da2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d003      	beq.n	8004db2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 f860 	bl	8004e70 <HAL_TIM_IC_CaptureCallback>
 8004db0:	e005      	b.n	8004dbe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 f852 	bl	8004e5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f000 f863 	bl	8004e84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	f003 0301 	and.w	r3, r3, #1
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00c      	beq.n	8004de8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f003 0301 	and.w	r3, r3, #1
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d007      	beq.n	8004de8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f06f 0201 	mvn.w	r2, #1
 8004de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f7fc fbe4 	bl	80015b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d00c      	beq.n	8004e0c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d007      	beq.n	8004e0c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 f906 	bl	8005018 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00c      	beq.n	8004e30 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d007      	beq.n	8004e30 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004e28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 f834 	bl	8004e98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	f003 0320 	and.w	r3, r3, #32
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00c      	beq.n	8004e54 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f003 0320 	and.w	r3, r3, #32
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d007      	beq.n	8004e54 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f06f 0220 	mvn.w	r2, #32
 8004e4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 f8d8 	bl	8005004 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e54:	bf00      	nop
 8004e56:	3710      	adds	r7, #16
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e64:	bf00      	nop
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e78:	bf00      	nop
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e8c:	bf00      	nop
 8004e8e:	370c      	adds	r7, #12
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr

08004e98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ea0:	bf00      	nop
 8004ea2:	370c      	adds	r7, #12
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr

08004eac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b085      	sub	sp, #20
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4a46      	ldr	r2, [pc, #280]	@ (8004fd8 <TIM_Base_SetConfig+0x12c>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d013      	beq.n	8004eec <TIM_Base_SetConfig+0x40>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004eca:	d00f      	beq.n	8004eec <TIM_Base_SetConfig+0x40>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a43      	ldr	r2, [pc, #268]	@ (8004fdc <TIM_Base_SetConfig+0x130>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d00b      	beq.n	8004eec <TIM_Base_SetConfig+0x40>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a42      	ldr	r2, [pc, #264]	@ (8004fe0 <TIM_Base_SetConfig+0x134>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d007      	beq.n	8004eec <TIM_Base_SetConfig+0x40>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a41      	ldr	r2, [pc, #260]	@ (8004fe4 <TIM_Base_SetConfig+0x138>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d003      	beq.n	8004eec <TIM_Base_SetConfig+0x40>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a40      	ldr	r2, [pc, #256]	@ (8004fe8 <TIM_Base_SetConfig+0x13c>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d108      	bne.n	8004efe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ef2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a35      	ldr	r2, [pc, #212]	@ (8004fd8 <TIM_Base_SetConfig+0x12c>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d02b      	beq.n	8004f5e <TIM_Base_SetConfig+0xb2>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f0c:	d027      	beq.n	8004f5e <TIM_Base_SetConfig+0xb2>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a32      	ldr	r2, [pc, #200]	@ (8004fdc <TIM_Base_SetConfig+0x130>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d023      	beq.n	8004f5e <TIM_Base_SetConfig+0xb2>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a31      	ldr	r2, [pc, #196]	@ (8004fe0 <TIM_Base_SetConfig+0x134>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d01f      	beq.n	8004f5e <TIM_Base_SetConfig+0xb2>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a30      	ldr	r2, [pc, #192]	@ (8004fe4 <TIM_Base_SetConfig+0x138>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d01b      	beq.n	8004f5e <TIM_Base_SetConfig+0xb2>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a2f      	ldr	r2, [pc, #188]	@ (8004fe8 <TIM_Base_SetConfig+0x13c>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d017      	beq.n	8004f5e <TIM_Base_SetConfig+0xb2>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a2e      	ldr	r2, [pc, #184]	@ (8004fec <TIM_Base_SetConfig+0x140>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d013      	beq.n	8004f5e <TIM_Base_SetConfig+0xb2>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a2d      	ldr	r2, [pc, #180]	@ (8004ff0 <TIM_Base_SetConfig+0x144>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d00f      	beq.n	8004f5e <TIM_Base_SetConfig+0xb2>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a2c      	ldr	r2, [pc, #176]	@ (8004ff4 <TIM_Base_SetConfig+0x148>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d00b      	beq.n	8004f5e <TIM_Base_SetConfig+0xb2>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a2b      	ldr	r2, [pc, #172]	@ (8004ff8 <TIM_Base_SetConfig+0x14c>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d007      	beq.n	8004f5e <TIM_Base_SetConfig+0xb2>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a2a      	ldr	r2, [pc, #168]	@ (8004ffc <TIM_Base_SetConfig+0x150>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d003      	beq.n	8004f5e <TIM_Base_SetConfig+0xb2>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a29      	ldr	r2, [pc, #164]	@ (8005000 <TIM_Base_SetConfig+0x154>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d108      	bne.n	8004f70 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	68fa      	ldr	r2, [r7, #12]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	695b      	ldr	r3, [r3, #20]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	68fa      	ldr	r2, [r7, #12]
 8004f82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	689a      	ldr	r2, [r3, #8]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a10      	ldr	r2, [pc, #64]	@ (8004fd8 <TIM_Base_SetConfig+0x12c>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d003      	beq.n	8004fa4 <TIM_Base_SetConfig+0xf8>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a12      	ldr	r2, [pc, #72]	@ (8004fe8 <TIM_Base_SetConfig+0x13c>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d103      	bne.n	8004fac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	691a      	ldr	r2, [r3, #16]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	f003 0301 	and.w	r3, r3, #1
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d105      	bne.n	8004fca <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	f023 0201 	bic.w	r2, r3, #1
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	611a      	str	r2, [r3, #16]
  }
}
 8004fca:	bf00      	nop
 8004fcc:	3714      	adds	r7, #20
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop
 8004fd8:	40010000 	.word	0x40010000
 8004fdc:	40000400 	.word	0x40000400
 8004fe0:	40000800 	.word	0x40000800
 8004fe4:	40000c00 	.word	0x40000c00
 8004fe8:	40010400 	.word	0x40010400
 8004fec:	40014000 	.word	0x40014000
 8004ff0:	40014400 	.word	0x40014400
 8004ff4:	40014800 	.word	0x40014800
 8004ff8:	40001800 	.word	0x40001800
 8004ffc:	40001c00 	.word	0x40001c00
 8005000:	40002000 	.word	0x40002000

08005004 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800500c:	bf00      	nop
 800500e:	370c      	adds	r7, #12
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005020:	bf00      	nop
 8005022:	370c      	adds	r7, #12
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800502c:	b480      	push	{r7}
 800502e:	b085      	sub	sp, #20
 8005030:	af00      	add	r7, sp, #0
 8005032:	4603      	mov	r3, r0
 8005034:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005036:	2300      	movs	r3, #0
 8005038:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800503a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800503e:	2b84      	cmp	r3, #132	@ 0x84
 8005040:	d005      	beq.n	800504e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005042:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	4413      	add	r3, r2
 800504a:	3303      	adds	r3, #3
 800504c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800504e:	68fb      	ldr	r3, [r7, #12]
}
 8005050:	4618      	mov	r0, r3
 8005052:	3714      	adds	r7, #20
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr

0800505c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005060:	f000 fafc 	bl	800565c <vTaskStartScheduler>
  
  return osOK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	bd80      	pop	{r7, pc}

0800506a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800506a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800506c:	b089      	sub	sp, #36	@ 0x24
 800506e:	af04      	add	r7, sp, #16
 8005070:	6078      	str	r0, [r7, #4]
 8005072:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	695b      	ldr	r3, [r3, #20]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d020      	beq.n	80050be <osThreadCreate+0x54>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	699b      	ldr	r3, [r3, #24]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d01c      	beq.n	80050be <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	685c      	ldr	r4, [r3, #4]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	691e      	ldr	r6, [r3, #16]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005096:	4618      	mov	r0, r3
 8005098:	f7ff ffc8 	bl	800502c <makeFreeRtosPriority>
 800509c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	695b      	ldr	r3, [r3, #20]
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80050a6:	9202      	str	r2, [sp, #8]
 80050a8:	9301      	str	r3, [sp, #4]
 80050aa:	9100      	str	r1, [sp, #0]
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	4632      	mov	r2, r6
 80050b0:	4629      	mov	r1, r5
 80050b2:	4620      	mov	r0, r4
 80050b4:	f000 f8ed 	bl	8005292 <xTaskCreateStatic>
 80050b8:	4603      	mov	r3, r0
 80050ba:	60fb      	str	r3, [r7, #12]
 80050bc:	e01c      	b.n	80050f8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	685c      	ldr	r4, [r3, #4]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80050ca:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7ff ffaa 	bl	800502c <makeFreeRtosPriority>
 80050d8:	4602      	mov	r2, r0
 80050da:	f107 030c 	add.w	r3, r7, #12
 80050de:	9301      	str	r3, [sp, #4]
 80050e0:	9200      	str	r2, [sp, #0]
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	4632      	mov	r2, r6
 80050e6:	4629      	mov	r1, r5
 80050e8:	4620      	mov	r0, r4
 80050ea:	f000 f932 	bl	8005352 <xTaskCreate>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d001      	beq.n	80050f8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80050f4:	2300      	movs	r3, #0
 80050f6:	e000      	b.n	80050fa <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80050f8:	68fb      	ldr	r3, [r7, #12]
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3714      	adds	r7, #20
 80050fe:	46bd      	mov	sp, r7
 8005100:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005102 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005102:	b580      	push	{r7, lr}
 8005104:	b084      	sub	sp, #16
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d001      	beq.n	8005118 <osDelay+0x16>
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	e000      	b.n	800511a <osDelay+0x18>
 8005118:	2301      	movs	r3, #1
 800511a:	4618      	mov	r0, r3
 800511c:	f000 fa68 	bl	80055f0 <vTaskDelay>
  
  return osOK;
 8005120:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005122:	4618      	mov	r0, r3
 8005124:	3710      	adds	r7, #16
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}

0800512a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800512a:	b480      	push	{r7}
 800512c:	b083      	sub	sp, #12
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f103 0208 	add.w	r2, r3, #8
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f04f 32ff 	mov.w	r2, #4294967295
 8005142:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f103 0208 	add.w	r2, r3, #8
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f103 0208 	add.w	r2, r3, #8
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800515e:	bf00      	nop
 8005160:	370c      	adds	r7, #12
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr

0800516a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800516a:	b480      	push	{r7}
 800516c:	b083      	sub	sp, #12
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005178:	bf00      	nop
 800517a:	370c      	adds	r7, #12
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005184:	b480      	push	{r7}
 8005186:	b085      	sub	sp, #20
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	689a      	ldr	r2, [r3, #8]
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	683a      	ldr	r2, [r7, #0]
 80051a8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	683a      	ldr	r2, [r7, #0]
 80051ae:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	1c5a      	adds	r2, r3, #1
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	601a      	str	r2, [r3, #0]
}
 80051c0:	bf00      	nop
 80051c2:	3714      	adds	r7, #20
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr

080051cc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80051cc:	b480      	push	{r7}
 80051ce:	b085      	sub	sp, #20
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e2:	d103      	bne.n	80051ec <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	60fb      	str	r3, [r7, #12]
 80051ea:	e00c      	b.n	8005206 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	3308      	adds	r3, #8
 80051f0:	60fb      	str	r3, [r7, #12]
 80051f2:	e002      	b.n	80051fa <vListInsert+0x2e>
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	60fb      	str	r3, [r7, #12]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	68ba      	ldr	r2, [r7, #8]
 8005202:	429a      	cmp	r2, r3
 8005204:	d2f6      	bcs.n	80051f4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	685a      	ldr	r2, [r3, #4]
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	683a      	ldr	r2, [r7, #0]
 8005214:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	68fa      	ldr	r2, [r7, #12]
 800521a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	683a      	ldr	r2, [r7, #0]
 8005220:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	1c5a      	adds	r2, r3, #1
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	601a      	str	r2, [r3, #0]
}
 8005232:	bf00      	nop
 8005234:	3714      	adds	r7, #20
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr

0800523e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800523e:	b480      	push	{r7}
 8005240:	b085      	sub	sp, #20
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	6892      	ldr	r2, [r2, #8]
 8005254:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	6852      	ldr	r2, [r2, #4]
 800525e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	429a      	cmp	r2, r3
 8005268:	d103      	bne.n	8005272 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	689a      	ldr	r2, [r3, #8]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	1e5a      	subs	r2, r3, #1
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
}
 8005286:	4618      	mov	r0, r3
 8005288:	3714      	adds	r7, #20
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr

08005292 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005292:	b580      	push	{r7, lr}
 8005294:	b08e      	sub	sp, #56	@ 0x38
 8005296:	af04      	add	r7, sp, #16
 8005298:	60f8      	str	r0, [r7, #12]
 800529a:	60b9      	str	r1, [r7, #8]
 800529c:	607a      	str	r2, [r7, #4]
 800529e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80052a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d10b      	bne.n	80052be <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80052a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052aa:	f383 8811 	msr	BASEPRI, r3
 80052ae:	f3bf 8f6f 	isb	sy
 80052b2:	f3bf 8f4f 	dsb	sy
 80052b6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80052b8:	bf00      	nop
 80052ba:	bf00      	nop
 80052bc:	e7fd      	b.n	80052ba <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80052be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d10b      	bne.n	80052dc <xTaskCreateStatic+0x4a>
	__asm volatile
 80052c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052c8:	f383 8811 	msr	BASEPRI, r3
 80052cc:	f3bf 8f6f 	isb	sy
 80052d0:	f3bf 8f4f 	dsb	sy
 80052d4:	61fb      	str	r3, [r7, #28]
}
 80052d6:	bf00      	nop
 80052d8:	bf00      	nop
 80052da:	e7fd      	b.n	80052d8 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80052dc:	23a0      	movs	r3, #160	@ 0xa0
 80052de:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	2ba0      	cmp	r3, #160	@ 0xa0
 80052e4:	d00b      	beq.n	80052fe <xTaskCreateStatic+0x6c>
	__asm volatile
 80052e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ea:	f383 8811 	msr	BASEPRI, r3
 80052ee:	f3bf 8f6f 	isb	sy
 80052f2:	f3bf 8f4f 	dsb	sy
 80052f6:	61bb      	str	r3, [r7, #24]
}
 80052f8:	bf00      	nop
 80052fa:	bf00      	nop
 80052fc:	e7fd      	b.n	80052fa <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80052fe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005302:	2b00      	cmp	r3, #0
 8005304:	d01e      	beq.n	8005344 <xTaskCreateStatic+0xb2>
 8005306:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005308:	2b00      	cmp	r3, #0
 800530a:	d01b      	beq.n	8005344 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800530c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800530e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005312:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005314:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005318:	2202      	movs	r2, #2
 800531a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800531e:	2300      	movs	r3, #0
 8005320:	9303      	str	r3, [sp, #12]
 8005322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005324:	9302      	str	r3, [sp, #8]
 8005326:	f107 0314 	add.w	r3, r7, #20
 800532a:	9301      	str	r3, [sp, #4]
 800532c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800532e:	9300      	str	r3, [sp, #0]
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	68b9      	ldr	r1, [r7, #8]
 8005336:	68f8      	ldr	r0, [r7, #12]
 8005338:	f000 f850 	bl	80053dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800533c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800533e:	f000 f8ed 	bl	800551c <prvAddNewTaskToReadyList>
 8005342:	e001      	b.n	8005348 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005344:	2300      	movs	r3, #0
 8005346:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005348:	697b      	ldr	r3, [r7, #20]
	}
 800534a:	4618      	mov	r0, r3
 800534c:	3728      	adds	r7, #40	@ 0x28
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}

08005352 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005352:	b580      	push	{r7, lr}
 8005354:	b08c      	sub	sp, #48	@ 0x30
 8005356:	af04      	add	r7, sp, #16
 8005358:	60f8      	str	r0, [r7, #12]
 800535a:	60b9      	str	r1, [r7, #8]
 800535c:	603b      	str	r3, [r7, #0]
 800535e:	4613      	mov	r3, r2
 8005360:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005362:	88fb      	ldrh	r3, [r7, #6]
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	4618      	mov	r0, r3
 8005368:	f000 fefe 	bl	8006168 <pvPortMalloc>
 800536c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d00e      	beq.n	8005392 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005374:	20a0      	movs	r0, #160	@ 0xa0
 8005376:	f000 fef7 	bl	8006168 <pvPortMalloc>
 800537a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d003      	beq.n	800538a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	697a      	ldr	r2, [r7, #20]
 8005386:	631a      	str	r2, [r3, #48]	@ 0x30
 8005388:	e005      	b.n	8005396 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800538a:	6978      	ldr	r0, [r7, #20]
 800538c:	f000 ffba 	bl	8006304 <vPortFree>
 8005390:	e001      	b.n	8005396 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005392:	2300      	movs	r3, #0
 8005394:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d017      	beq.n	80053cc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80053a4:	88fa      	ldrh	r2, [r7, #6]
 80053a6:	2300      	movs	r3, #0
 80053a8:	9303      	str	r3, [sp, #12]
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	9302      	str	r3, [sp, #8]
 80053ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053b0:	9301      	str	r3, [sp, #4]
 80053b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053b4:	9300      	str	r3, [sp, #0]
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	68b9      	ldr	r1, [r7, #8]
 80053ba:	68f8      	ldr	r0, [r7, #12]
 80053bc:	f000 f80e 	bl	80053dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80053c0:	69f8      	ldr	r0, [r7, #28]
 80053c2:	f000 f8ab 	bl	800551c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80053c6:	2301      	movs	r3, #1
 80053c8:	61bb      	str	r3, [r7, #24]
 80053ca:	e002      	b.n	80053d2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80053cc:	f04f 33ff 	mov.w	r3, #4294967295
 80053d0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80053d2:	69bb      	ldr	r3, [r7, #24]
	}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3720      	adds	r7, #32
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b088      	sub	sp, #32
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	607a      	str	r2, [r7, #4]
 80053e8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80053ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80053f4:	3b01      	subs	r3, #1
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	4413      	add	r3, r2
 80053fa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	f023 0307 	bic.w	r3, r3, #7
 8005402:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	f003 0307 	and.w	r3, r3, #7
 800540a:	2b00      	cmp	r3, #0
 800540c:	d00b      	beq.n	8005426 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800540e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005412:	f383 8811 	msr	BASEPRI, r3
 8005416:	f3bf 8f6f 	isb	sy
 800541a:	f3bf 8f4f 	dsb	sy
 800541e:	617b      	str	r3, [r7, #20]
}
 8005420:	bf00      	nop
 8005422:	bf00      	nop
 8005424:	e7fd      	b.n	8005422 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d01f      	beq.n	800546c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800542c:	2300      	movs	r3, #0
 800542e:	61fb      	str	r3, [r7, #28]
 8005430:	e012      	b.n	8005458 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005432:	68ba      	ldr	r2, [r7, #8]
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	4413      	add	r3, r2
 8005438:	7819      	ldrb	r1, [r3, #0]
 800543a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800543c:	69fb      	ldr	r3, [r7, #28]
 800543e:	4413      	add	r3, r2
 8005440:	3334      	adds	r3, #52	@ 0x34
 8005442:	460a      	mov	r2, r1
 8005444:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005446:	68ba      	ldr	r2, [r7, #8]
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	4413      	add	r3, r2
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d006      	beq.n	8005460 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	3301      	adds	r3, #1
 8005456:	61fb      	str	r3, [r7, #28]
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	2b0f      	cmp	r3, #15
 800545c:	d9e9      	bls.n	8005432 <prvInitialiseNewTask+0x56>
 800545e:	e000      	b.n	8005462 <prvInitialiseNewTask+0x86>
			{
				break;
 8005460:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005464:	2200      	movs	r2, #0
 8005466:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800546a:	e003      	b.n	8005474 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800546c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800546e:	2200      	movs	r2, #0
 8005470:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005476:	2b06      	cmp	r3, #6
 8005478:	d901      	bls.n	800547e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800547a:	2306      	movs	r3, #6
 800547c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800547e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005480:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005482:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005486:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005488:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800548a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800548c:	2200      	movs	r2, #0
 800548e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005492:	3304      	adds	r3, #4
 8005494:	4618      	mov	r0, r3
 8005496:	f7ff fe68 	bl	800516a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800549a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800549c:	3318      	adds	r3, #24
 800549e:	4618      	mov	r0, r3
 80054a0:	f7ff fe63 	bl	800516a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80054a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054a8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ac:	f1c3 0207 	rsb	r2, r3, #7
 80054b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054b2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80054b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054b8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80054ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054bc:	2200      	movs	r2, #0
 80054be:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80054c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80054ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054cc:	334c      	adds	r3, #76	@ 0x4c
 80054ce:	224c      	movs	r2, #76	@ 0x4c
 80054d0:	2100      	movs	r1, #0
 80054d2:	4618      	mov	r0, r3
 80054d4:	f001 fd93 	bl	8006ffe <memset>
 80054d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054da:	4a0d      	ldr	r2, [pc, #52]	@ (8005510 <prvInitialiseNewTask+0x134>)
 80054dc:	651a      	str	r2, [r3, #80]	@ 0x50
 80054de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054e0:	4a0c      	ldr	r2, [pc, #48]	@ (8005514 <prvInitialiseNewTask+0x138>)
 80054e2:	655a      	str	r2, [r3, #84]	@ 0x54
 80054e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054e6:	4a0c      	ldr	r2, [pc, #48]	@ (8005518 <prvInitialiseNewTask+0x13c>)
 80054e8:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80054ea:	683a      	ldr	r2, [r7, #0]
 80054ec:	68f9      	ldr	r1, [r7, #12]
 80054ee:	69b8      	ldr	r0, [r7, #24]
 80054f0:	f000 fc2a 	bl	8005d48 <pxPortInitialiseStack>
 80054f4:	4602      	mov	r2, r0
 80054f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054f8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80054fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d002      	beq.n	8005506 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005502:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005504:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005506:	bf00      	nop
 8005508:	3720      	adds	r7, #32
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	20004458 	.word	0x20004458
 8005514:	200044c0 	.word	0x200044c0
 8005518:	20004528 	.word	0x20004528

0800551c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b082      	sub	sp, #8
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005524:	f000 fd40 	bl	8005fa8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005528:	4b2a      	ldr	r3, [pc, #168]	@ (80055d4 <prvAddNewTaskToReadyList+0xb8>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	3301      	adds	r3, #1
 800552e:	4a29      	ldr	r2, [pc, #164]	@ (80055d4 <prvAddNewTaskToReadyList+0xb8>)
 8005530:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005532:	4b29      	ldr	r3, [pc, #164]	@ (80055d8 <prvAddNewTaskToReadyList+0xbc>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d109      	bne.n	800554e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800553a:	4a27      	ldr	r2, [pc, #156]	@ (80055d8 <prvAddNewTaskToReadyList+0xbc>)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005540:	4b24      	ldr	r3, [pc, #144]	@ (80055d4 <prvAddNewTaskToReadyList+0xb8>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2b01      	cmp	r3, #1
 8005546:	d110      	bne.n	800556a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005548:	f000 fad4 	bl	8005af4 <prvInitialiseTaskLists>
 800554c:	e00d      	b.n	800556a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800554e:	4b23      	ldr	r3, [pc, #140]	@ (80055dc <prvAddNewTaskToReadyList+0xc0>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d109      	bne.n	800556a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005556:	4b20      	ldr	r3, [pc, #128]	@ (80055d8 <prvAddNewTaskToReadyList+0xbc>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005560:	429a      	cmp	r2, r3
 8005562:	d802      	bhi.n	800556a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005564:	4a1c      	ldr	r2, [pc, #112]	@ (80055d8 <prvAddNewTaskToReadyList+0xbc>)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800556a:	4b1d      	ldr	r3, [pc, #116]	@ (80055e0 <prvAddNewTaskToReadyList+0xc4>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	3301      	adds	r3, #1
 8005570:	4a1b      	ldr	r2, [pc, #108]	@ (80055e0 <prvAddNewTaskToReadyList+0xc4>)
 8005572:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005578:	2201      	movs	r2, #1
 800557a:	409a      	lsls	r2, r3
 800557c:	4b19      	ldr	r3, [pc, #100]	@ (80055e4 <prvAddNewTaskToReadyList+0xc8>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4313      	orrs	r3, r2
 8005582:	4a18      	ldr	r2, [pc, #96]	@ (80055e4 <prvAddNewTaskToReadyList+0xc8>)
 8005584:	6013      	str	r3, [r2, #0]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800558a:	4613      	mov	r3, r2
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	4413      	add	r3, r2
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	4a15      	ldr	r2, [pc, #84]	@ (80055e8 <prvAddNewTaskToReadyList+0xcc>)
 8005594:	441a      	add	r2, r3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	3304      	adds	r3, #4
 800559a:	4619      	mov	r1, r3
 800559c:	4610      	mov	r0, r2
 800559e:	f7ff fdf1 	bl	8005184 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80055a2:	f000 fd33 	bl	800600c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80055a6:	4b0d      	ldr	r3, [pc, #52]	@ (80055dc <prvAddNewTaskToReadyList+0xc0>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00e      	beq.n	80055cc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80055ae:	4b0a      	ldr	r3, [pc, #40]	@ (80055d8 <prvAddNewTaskToReadyList+0xbc>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d207      	bcs.n	80055cc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80055bc:	4b0b      	ldr	r3, [pc, #44]	@ (80055ec <prvAddNewTaskToReadyList+0xd0>)
 80055be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055c2:	601a      	str	r2, [r3, #0]
 80055c4:	f3bf 8f4f 	dsb	sy
 80055c8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055cc:	bf00      	nop
 80055ce:	3708      	adds	r7, #8
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	20000804 	.word	0x20000804
 80055d8:	20000704 	.word	0x20000704
 80055dc:	20000810 	.word	0x20000810
 80055e0:	20000820 	.word	0x20000820
 80055e4:	2000080c 	.word	0x2000080c
 80055e8:	20000708 	.word	0x20000708
 80055ec:	e000ed04 	.word	0xe000ed04

080055f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b084      	sub	sp, #16
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80055f8:	2300      	movs	r3, #0
 80055fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d018      	beq.n	8005634 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005602:	4b14      	ldr	r3, [pc, #80]	@ (8005654 <vTaskDelay+0x64>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d00b      	beq.n	8005622 <vTaskDelay+0x32>
	__asm volatile
 800560a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800560e:	f383 8811 	msr	BASEPRI, r3
 8005612:	f3bf 8f6f 	isb	sy
 8005616:	f3bf 8f4f 	dsb	sy
 800561a:	60bb      	str	r3, [r7, #8]
}
 800561c:	bf00      	nop
 800561e:	bf00      	nop
 8005620:	e7fd      	b.n	800561e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005622:	f000 f885 	bl	8005730 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005626:	2100      	movs	r1, #0
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f000 fb27 	bl	8005c7c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800562e:	f000 f88d 	bl	800574c <xTaskResumeAll>
 8005632:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d107      	bne.n	800564a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800563a:	4b07      	ldr	r3, [pc, #28]	@ (8005658 <vTaskDelay+0x68>)
 800563c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005640:	601a      	str	r2, [r3, #0]
 8005642:	f3bf 8f4f 	dsb	sy
 8005646:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800564a:	bf00      	nop
 800564c:	3710      	adds	r7, #16
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	2000082c 	.word	0x2000082c
 8005658:	e000ed04 	.word	0xe000ed04

0800565c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b08a      	sub	sp, #40	@ 0x28
 8005660:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005662:	2300      	movs	r3, #0
 8005664:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005666:	2300      	movs	r3, #0
 8005668:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800566a:	463a      	mov	r2, r7
 800566c:	1d39      	adds	r1, r7, #4
 800566e:	f107 0308 	add.w	r3, r7, #8
 8005672:	4618      	mov	r0, r3
 8005674:	f7fb fc60 	bl	8000f38 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005678:	6839      	ldr	r1, [r7, #0]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	68ba      	ldr	r2, [r7, #8]
 800567e:	9202      	str	r2, [sp, #8]
 8005680:	9301      	str	r3, [sp, #4]
 8005682:	2300      	movs	r3, #0
 8005684:	9300      	str	r3, [sp, #0]
 8005686:	2300      	movs	r3, #0
 8005688:	460a      	mov	r2, r1
 800568a:	4921      	ldr	r1, [pc, #132]	@ (8005710 <vTaskStartScheduler+0xb4>)
 800568c:	4821      	ldr	r0, [pc, #132]	@ (8005714 <vTaskStartScheduler+0xb8>)
 800568e:	f7ff fe00 	bl	8005292 <xTaskCreateStatic>
 8005692:	4603      	mov	r3, r0
 8005694:	4a20      	ldr	r2, [pc, #128]	@ (8005718 <vTaskStartScheduler+0xbc>)
 8005696:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005698:	4b1f      	ldr	r3, [pc, #124]	@ (8005718 <vTaskStartScheduler+0xbc>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d002      	beq.n	80056a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80056a0:	2301      	movs	r3, #1
 80056a2:	617b      	str	r3, [r7, #20]
 80056a4:	e001      	b.n	80056aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80056a6:	2300      	movs	r3, #0
 80056a8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d11b      	bne.n	80056e8 <vTaskStartScheduler+0x8c>
	__asm volatile
 80056b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056b4:	f383 8811 	msr	BASEPRI, r3
 80056b8:	f3bf 8f6f 	isb	sy
 80056bc:	f3bf 8f4f 	dsb	sy
 80056c0:	613b      	str	r3, [r7, #16]
}
 80056c2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80056c4:	4b15      	ldr	r3, [pc, #84]	@ (800571c <vTaskStartScheduler+0xc0>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	334c      	adds	r3, #76	@ 0x4c
 80056ca:	4a15      	ldr	r2, [pc, #84]	@ (8005720 <vTaskStartScheduler+0xc4>)
 80056cc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80056ce:	4b15      	ldr	r3, [pc, #84]	@ (8005724 <vTaskStartScheduler+0xc8>)
 80056d0:	f04f 32ff 	mov.w	r2, #4294967295
 80056d4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80056d6:	4b14      	ldr	r3, [pc, #80]	@ (8005728 <vTaskStartScheduler+0xcc>)
 80056d8:	2201      	movs	r2, #1
 80056da:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80056dc:	4b13      	ldr	r3, [pc, #76]	@ (800572c <vTaskStartScheduler+0xd0>)
 80056de:	2200      	movs	r2, #0
 80056e0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80056e2:	f000 fbbd 	bl	8005e60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80056e6:	e00f      	b.n	8005708 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ee:	d10b      	bne.n	8005708 <vTaskStartScheduler+0xac>
	__asm volatile
 80056f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056f4:	f383 8811 	msr	BASEPRI, r3
 80056f8:	f3bf 8f6f 	isb	sy
 80056fc:	f3bf 8f4f 	dsb	sy
 8005700:	60fb      	str	r3, [r7, #12]
}
 8005702:	bf00      	nop
 8005704:	bf00      	nop
 8005706:	e7fd      	b.n	8005704 <vTaskStartScheduler+0xa8>
}
 8005708:	bf00      	nop
 800570a:	3718      	adds	r7, #24
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}
 8005710:	08008f84 	.word	0x08008f84
 8005714:	08005ac5 	.word	0x08005ac5
 8005718:	20000828 	.word	0x20000828
 800571c:	20000704 	.word	0x20000704
 8005720:	2000001c 	.word	0x2000001c
 8005724:	20000824 	.word	0x20000824
 8005728:	20000810 	.word	0x20000810
 800572c:	20000808 	.word	0x20000808

08005730 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005730:	b480      	push	{r7}
 8005732:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005734:	4b04      	ldr	r3, [pc, #16]	@ (8005748 <vTaskSuspendAll+0x18>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	3301      	adds	r3, #1
 800573a:	4a03      	ldr	r2, [pc, #12]	@ (8005748 <vTaskSuspendAll+0x18>)
 800573c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800573e:	bf00      	nop
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr
 8005748:	2000082c 	.word	0x2000082c

0800574c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005752:	2300      	movs	r3, #0
 8005754:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005756:	2300      	movs	r3, #0
 8005758:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800575a:	4b42      	ldr	r3, [pc, #264]	@ (8005864 <xTaskResumeAll+0x118>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d10b      	bne.n	800577a <xTaskResumeAll+0x2e>
	__asm volatile
 8005762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005766:	f383 8811 	msr	BASEPRI, r3
 800576a:	f3bf 8f6f 	isb	sy
 800576e:	f3bf 8f4f 	dsb	sy
 8005772:	603b      	str	r3, [r7, #0]
}
 8005774:	bf00      	nop
 8005776:	bf00      	nop
 8005778:	e7fd      	b.n	8005776 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800577a:	f000 fc15 	bl	8005fa8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800577e:	4b39      	ldr	r3, [pc, #228]	@ (8005864 <xTaskResumeAll+0x118>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	3b01      	subs	r3, #1
 8005784:	4a37      	ldr	r2, [pc, #220]	@ (8005864 <xTaskResumeAll+0x118>)
 8005786:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005788:	4b36      	ldr	r3, [pc, #216]	@ (8005864 <xTaskResumeAll+0x118>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d161      	bne.n	8005854 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005790:	4b35      	ldr	r3, [pc, #212]	@ (8005868 <xTaskResumeAll+0x11c>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d05d      	beq.n	8005854 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005798:	e02e      	b.n	80057f8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800579a:	4b34      	ldr	r3, [pc, #208]	@ (800586c <xTaskResumeAll+0x120>)
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	3318      	adds	r3, #24
 80057a6:	4618      	mov	r0, r3
 80057a8:	f7ff fd49 	bl	800523e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	3304      	adds	r3, #4
 80057b0:	4618      	mov	r0, r3
 80057b2:	f7ff fd44 	bl	800523e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ba:	2201      	movs	r2, #1
 80057bc:	409a      	lsls	r2, r3
 80057be:	4b2c      	ldr	r3, [pc, #176]	@ (8005870 <xTaskResumeAll+0x124>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	4a2a      	ldr	r2, [pc, #168]	@ (8005870 <xTaskResumeAll+0x124>)
 80057c6:	6013      	str	r3, [r2, #0]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057cc:	4613      	mov	r3, r2
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	4413      	add	r3, r2
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	4a27      	ldr	r2, [pc, #156]	@ (8005874 <xTaskResumeAll+0x128>)
 80057d6:	441a      	add	r2, r3
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	3304      	adds	r3, #4
 80057dc:	4619      	mov	r1, r3
 80057de:	4610      	mov	r0, r2
 80057e0:	f7ff fcd0 	bl	8005184 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057e8:	4b23      	ldr	r3, [pc, #140]	@ (8005878 <xTaskResumeAll+0x12c>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d302      	bcc.n	80057f8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80057f2:	4b22      	ldr	r3, [pc, #136]	@ (800587c <xTaskResumeAll+0x130>)
 80057f4:	2201      	movs	r2, #1
 80057f6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80057f8:	4b1c      	ldr	r3, [pc, #112]	@ (800586c <xTaskResumeAll+0x120>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d1cc      	bne.n	800579a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d001      	beq.n	800580a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005806:	f000 fa19 	bl	8005c3c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800580a:	4b1d      	ldr	r3, [pc, #116]	@ (8005880 <xTaskResumeAll+0x134>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d010      	beq.n	8005838 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005816:	f000 f837 	bl	8005888 <xTaskIncrementTick>
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d002      	beq.n	8005826 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005820:	4b16      	ldr	r3, [pc, #88]	@ (800587c <xTaskResumeAll+0x130>)
 8005822:	2201      	movs	r2, #1
 8005824:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	3b01      	subs	r3, #1
 800582a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d1f1      	bne.n	8005816 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005832:	4b13      	ldr	r3, [pc, #76]	@ (8005880 <xTaskResumeAll+0x134>)
 8005834:	2200      	movs	r2, #0
 8005836:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005838:	4b10      	ldr	r3, [pc, #64]	@ (800587c <xTaskResumeAll+0x130>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d009      	beq.n	8005854 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005840:	2301      	movs	r3, #1
 8005842:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005844:	4b0f      	ldr	r3, [pc, #60]	@ (8005884 <xTaskResumeAll+0x138>)
 8005846:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800584a:	601a      	str	r2, [r3, #0]
 800584c:	f3bf 8f4f 	dsb	sy
 8005850:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005854:	f000 fbda 	bl	800600c <vPortExitCritical>

	return xAlreadyYielded;
 8005858:	68bb      	ldr	r3, [r7, #8]
}
 800585a:	4618      	mov	r0, r3
 800585c:	3710      	adds	r7, #16
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	2000082c 	.word	0x2000082c
 8005868:	20000804 	.word	0x20000804
 800586c:	200007c4 	.word	0x200007c4
 8005870:	2000080c 	.word	0x2000080c
 8005874:	20000708 	.word	0x20000708
 8005878:	20000704 	.word	0x20000704
 800587c:	20000818 	.word	0x20000818
 8005880:	20000814 	.word	0x20000814
 8005884:	e000ed04 	.word	0xe000ed04

08005888 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b086      	sub	sp, #24
 800588c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800588e:	2300      	movs	r3, #0
 8005890:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005892:	4b4f      	ldr	r3, [pc, #316]	@ (80059d0 <xTaskIncrementTick+0x148>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	2b00      	cmp	r3, #0
 8005898:	f040 808f 	bne.w	80059ba <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800589c:	4b4d      	ldr	r3, [pc, #308]	@ (80059d4 <xTaskIncrementTick+0x14c>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	3301      	adds	r3, #1
 80058a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80058a4:	4a4b      	ldr	r2, [pc, #300]	@ (80059d4 <xTaskIncrementTick+0x14c>)
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d121      	bne.n	80058f4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80058b0:	4b49      	ldr	r3, [pc, #292]	@ (80059d8 <xTaskIncrementTick+0x150>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d00b      	beq.n	80058d2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80058ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058be:	f383 8811 	msr	BASEPRI, r3
 80058c2:	f3bf 8f6f 	isb	sy
 80058c6:	f3bf 8f4f 	dsb	sy
 80058ca:	603b      	str	r3, [r7, #0]
}
 80058cc:	bf00      	nop
 80058ce:	bf00      	nop
 80058d0:	e7fd      	b.n	80058ce <xTaskIncrementTick+0x46>
 80058d2:	4b41      	ldr	r3, [pc, #260]	@ (80059d8 <xTaskIncrementTick+0x150>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	60fb      	str	r3, [r7, #12]
 80058d8:	4b40      	ldr	r3, [pc, #256]	@ (80059dc <xTaskIncrementTick+0x154>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a3e      	ldr	r2, [pc, #248]	@ (80059d8 <xTaskIncrementTick+0x150>)
 80058de:	6013      	str	r3, [r2, #0]
 80058e0:	4a3e      	ldr	r2, [pc, #248]	@ (80059dc <xTaskIncrementTick+0x154>)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	6013      	str	r3, [r2, #0]
 80058e6:	4b3e      	ldr	r3, [pc, #248]	@ (80059e0 <xTaskIncrementTick+0x158>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	3301      	adds	r3, #1
 80058ec:	4a3c      	ldr	r2, [pc, #240]	@ (80059e0 <xTaskIncrementTick+0x158>)
 80058ee:	6013      	str	r3, [r2, #0]
 80058f0:	f000 f9a4 	bl	8005c3c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80058f4:	4b3b      	ldr	r3, [pc, #236]	@ (80059e4 <xTaskIncrementTick+0x15c>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	693a      	ldr	r2, [r7, #16]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d348      	bcc.n	8005990 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058fe:	4b36      	ldr	r3, [pc, #216]	@ (80059d8 <xTaskIncrementTick+0x150>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d104      	bne.n	8005912 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005908:	4b36      	ldr	r3, [pc, #216]	@ (80059e4 <xTaskIncrementTick+0x15c>)
 800590a:	f04f 32ff 	mov.w	r2, #4294967295
 800590e:	601a      	str	r2, [r3, #0]
					break;
 8005910:	e03e      	b.n	8005990 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005912:	4b31      	ldr	r3, [pc, #196]	@ (80059d8 <xTaskIncrementTick+0x150>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005922:	693a      	ldr	r2, [r7, #16]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	429a      	cmp	r2, r3
 8005928:	d203      	bcs.n	8005932 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800592a:	4a2e      	ldr	r2, [pc, #184]	@ (80059e4 <xTaskIncrementTick+0x15c>)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005930:	e02e      	b.n	8005990 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	3304      	adds	r3, #4
 8005936:	4618      	mov	r0, r3
 8005938:	f7ff fc81 	bl	800523e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005940:	2b00      	cmp	r3, #0
 8005942:	d004      	beq.n	800594e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	3318      	adds	r3, #24
 8005948:	4618      	mov	r0, r3
 800594a:	f7ff fc78 	bl	800523e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005952:	2201      	movs	r2, #1
 8005954:	409a      	lsls	r2, r3
 8005956:	4b24      	ldr	r3, [pc, #144]	@ (80059e8 <xTaskIncrementTick+0x160>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4313      	orrs	r3, r2
 800595c:	4a22      	ldr	r2, [pc, #136]	@ (80059e8 <xTaskIncrementTick+0x160>)
 800595e:	6013      	str	r3, [r2, #0]
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005964:	4613      	mov	r3, r2
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	4413      	add	r3, r2
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	4a1f      	ldr	r2, [pc, #124]	@ (80059ec <xTaskIncrementTick+0x164>)
 800596e:	441a      	add	r2, r3
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	3304      	adds	r3, #4
 8005974:	4619      	mov	r1, r3
 8005976:	4610      	mov	r0, r2
 8005978:	f7ff fc04 	bl	8005184 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005980:	4b1b      	ldr	r3, [pc, #108]	@ (80059f0 <xTaskIncrementTick+0x168>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005986:	429a      	cmp	r2, r3
 8005988:	d3b9      	bcc.n	80058fe <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800598a:	2301      	movs	r3, #1
 800598c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800598e:	e7b6      	b.n	80058fe <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005990:	4b17      	ldr	r3, [pc, #92]	@ (80059f0 <xTaskIncrementTick+0x168>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005996:	4915      	ldr	r1, [pc, #84]	@ (80059ec <xTaskIncrementTick+0x164>)
 8005998:	4613      	mov	r3, r2
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	4413      	add	r3, r2
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	440b      	add	r3, r1
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d901      	bls.n	80059ac <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80059a8:	2301      	movs	r3, #1
 80059aa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80059ac:	4b11      	ldr	r3, [pc, #68]	@ (80059f4 <xTaskIncrementTick+0x16c>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d007      	beq.n	80059c4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80059b4:	2301      	movs	r3, #1
 80059b6:	617b      	str	r3, [r7, #20]
 80059b8:	e004      	b.n	80059c4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80059ba:	4b0f      	ldr	r3, [pc, #60]	@ (80059f8 <xTaskIncrementTick+0x170>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	3301      	adds	r3, #1
 80059c0:	4a0d      	ldr	r2, [pc, #52]	@ (80059f8 <xTaskIncrementTick+0x170>)
 80059c2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80059c4:	697b      	ldr	r3, [r7, #20]
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3718      	adds	r7, #24
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	2000082c 	.word	0x2000082c
 80059d4:	20000808 	.word	0x20000808
 80059d8:	200007bc 	.word	0x200007bc
 80059dc:	200007c0 	.word	0x200007c0
 80059e0:	2000081c 	.word	0x2000081c
 80059e4:	20000824 	.word	0x20000824
 80059e8:	2000080c 	.word	0x2000080c
 80059ec:	20000708 	.word	0x20000708
 80059f0:	20000704 	.word	0x20000704
 80059f4:	20000818 	.word	0x20000818
 80059f8:	20000814 	.word	0x20000814

080059fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80059fc:	b480      	push	{r7}
 80059fe:	b087      	sub	sp, #28
 8005a00:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005a02:	4b2a      	ldr	r3, [pc, #168]	@ (8005aac <vTaskSwitchContext+0xb0>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d003      	beq.n	8005a12 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005a0a:	4b29      	ldr	r3, [pc, #164]	@ (8005ab0 <vTaskSwitchContext+0xb4>)
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005a10:	e045      	b.n	8005a9e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8005a12:	4b27      	ldr	r3, [pc, #156]	@ (8005ab0 <vTaskSwitchContext+0xb4>)
 8005a14:	2200      	movs	r2, #0
 8005a16:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a18:	4b26      	ldr	r3, [pc, #152]	@ (8005ab4 <vTaskSwitchContext+0xb8>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	fab3 f383 	clz	r3, r3
 8005a24:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005a26:	7afb      	ldrb	r3, [r7, #11]
 8005a28:	f1c3 031f 	rsb	r3, r3, #31
 8005a2c:	617b      	str	r3, [r7, #20]
 8005a2e:	4922      	ldr	r1, [pc, #136]	@ (8005ab8 <vTaskSwitchContext+0xbc>)
 8005a30:	697a      	ldr	r2, [r7, #20]
 8005a32:	4613      	mov	r3, r2
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	4413      	add	r3, r2
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	440b      	add	r3, r1
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d10b      	bne.n	8005a5a <vTaskSwitchContext+0x5e>
	__asm volatile
 8005a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a46:	f383 8811 	msr	BASEPRI, r3
 8005a4a:	f3bf 8f6f 	isb	sy
 8005a4e:	f3bf 8f4f 	dsb	sy
 8005a52:	607b      	str	r3, [r7, #4]
}
 8005a54:	bf00      	nop
 8005a56:	bf00      	nop
 8005a58:	e7fd      	b.n	8005a56 <vTaskSwitchContext+0x5a>
 8005a5a:	697a      	ldr	r2, [r7, #20]
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	4413      	add	r3, r2
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	4a14      	ldr	r2, [pc, #80]	@ (8005ab8 <vTaskSwitchContext+0xbc>)
 8005a66:	4413      	add	r3, r2
 8005a68:	613b      	str	r3, [r7, #16]
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	685a      	ldr	r2, [r3, #4]
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	605a      	str	r2, [r3, #4]
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	685a      	ldr	r2, [r3, #4]
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	3308      	adds	r3, #8
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d104      	bne.n	8005a8a <vTaskSwitchContext+0x8e>
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	685a      	ldr	r2, [r3, #4]
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	605a      	str	r2, [r3, #4]
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	4a0a      	ldr	r2, [pc, #40]	@ (8005abc <vTaskSwitchContext+0xc0>)
 8005a92:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005a94:	4b09      	ldr	r3, [pc, #36]	@ (8005abc <vTaskSwitchContext+0xc0>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	334c      	adds	r3, #76	@ 0x4c
 8005a9a:	4a09      	ldr	r2, [pc, #36]	@ (8005ac0 <vTaskSwitchContext+0xc4>)
 8005a9c:	6013      	str	r3, [r2, #0]
}
 8005a9e:	bf00      	nop
 8005aa0:	371c      	adds	r7, #28
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr
 8005aaa:	bf00      	nop
 8005aac:	2000082c 	.word	0x2000082c
 8005ab0:	20000818 	.word	0x20000818
 8005ab4:	2000080c 	.word	0x2000080c
 8005ab8:	20000708 	.word	0x20000708
 8005abc:	20000704 	.word	0x20000704
 8005ac0:	2000001c 	.word	0x2000001c

08005ac4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b082      	sub	sp, #8
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005acc:	f000 f852 	bl	8005b74 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005ad0:	4b06      	ldr	r3, [pc, #24]	@ (8005aec <prvIdleTask+0x28>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d9f9      	bls.n	8005acc <prvIdleTask+0x8>
			{
				taskYIELD();
 8005ad8:	4b05      	ldr	r3, [pc, #20]	@ (8005af0 <prvIdleTask+0x2c>)
 8005ada:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ade:	601a      	str	r2, [r3, #0]
 8005ae0:	f3bf 8f4f 	dsb	sy
 8005ae4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005ae8:	e7f0      	b.n	8005acc <prvIdleTask+0x8>
 8005aea:	bf00      	nop
 8005aec:	20000708 	.word	0x20000708
 8005af0:	e000ed04 	.word	0xe000ed04

08005af4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005afa:	2300      	movs	r3, #0
 8005afc:	607b      	str	r3, [r7, #4]
 8005afe:	e00c      	b.n	8005b1a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	4613      	mov	r3, r2
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	4413      	add	r3, r2
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	4a12      	ldr	r2, [pc, #72]	@ (8005b54 <prvInitialiseTaskLists+0x60>)
 8005b0c:	4413      	add	r3, r2
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f7ff fb0b 	bl	800512a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	3301      	adds	r3, #1
 8005b18:	607b      	str	r3, [r7, #4]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2b06      	cmp	r3, #6
 8005b1e:	d9ef      	bls.n	8005b00 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005b20:	480d      	ldr	r0, [pc, #52]	@ (8005b58 <prvInitialiseTaskLists+0x64>)
 8005b22:	f7ff fb02 	bl	800512a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005b26:	480d      	ldr	r0, [pc, #52]	@ (8005b5c <prvInitialiseTaskLists+0x68>)
 8005b28:	f7ff faff 	bl	800512a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005b2c:	480c      	ldr	r0, [pc, #48]	@ (8005b60 <prvInitialiseTaskLists+0x6c>)
 8005b2e:	f7ff fafc 	bl	800512a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005b32:	480c      	ldr	r0, [pc, #48]	@ (8005b64 <prvInitialiseTaskLists+0x70>)
 8005b34:	f7ff faf9 	bl	800512a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005b38:	480b      	ldr	r0, [pc, #44]	@ (8005b68 <prvInitialiseTaskLists+0x74>)
 8005b3a:	f7ff faf6 	bl	800512a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8005b6c <prvInitialiseTaskLists+0x78>)
 8005b40:	4a05      	ldr	r2, [pc, #20]	@ (8005b58 <prvInitialiseTaskLists+0x64>)
 8005b42:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005b44:	4b0a      	ldr	r3, [pc, #40]	@ (8005b70 <prvInitialiseTaskLists+0x7c>)
 8005b46:	4a05      	ldr	r2, [pc, #20]	@ (8005b5c <prvInitialiseTaskLists+0x68>)
 8005b48:	601a      	str	r2, [r3, #0]
}
 8005b4a:	bf00      	nop
 8005b4c:	3708      	adds	r7, #8
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	20000708 	.word	0x20000708
 8005b58:	20000794 	.word	0x20000794
 8005b5c:	200007a8 	.word	0x200007a8
 8005b60:	200007c4 	.word	0x200007c4
 8005b64:	200007d8 	.word	0x200007d8
 8005b68:	200007f0 	.word	0x200007f0
 8005b6c:	200007bc 	.word	0x200007bc
 8005b70:	200007c0 	.word	0x200007c0

08005b74 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b082      	sub	sp, #8
 8005b78:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b7a:	e019      	b.n	8005bb0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005b7c:	f000 fa14 	bl	8005fa8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b80:	4b10      	ldr	r3, [pc, #64]	@ (8005bc4 <prvCheckTasksWaitingTermination+0x50>)
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	3304      	adds	r3, #4
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f7ff fb56 	bl	800523e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005b92:	4b0d      	ldr	r3, [pc, #52]	@ (8005bc8 <prvCheckTasksWaitingTermination+0x54>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	3b01      	subs	r3, #1
 8005b98:	4a0b      	ldr	r2, [pc, #44]	@ (8005bc8 <prvCheckTasksWaitingTermination+0x54>)
 8005b9a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8005bcc <prvCheckTasksWaitingTermination+0x58>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	3b01      	subs	r3, #1
 8005ba2:	4a0a      	ldr	r2, [pc, #40]	@ (8005bcc <prvCheckTasksWaitingTermination+0x58>)
 8005ba4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005ba6:	f000 fa31 	bl	800600c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 f810 	bl	8005bd0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005bb0:	4b06      	ldr	r3, [pc, #24]	@ (8005bcc <prvCheckTasksWaitingTermination+0x58>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d1e1      	bne.n	8005b7c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005bb8:	bf00      	nop
 8005bba:	bf00      	nop
 8005bbc:	3708      	adds	r7, #8
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	200007d8 	.word	0x200007d8
 8005bc8:	20000804 	.word	0x20000804
 8005bcc:	200007ec 	.word	0x200007ec

08005bd0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b084      	sub	sp, #16
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	334c      	adds	r3, #76	@ 0x4c
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f001 fa2b 	bl	8007038 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d108      	bne.n	8005bfe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f000 fb87 	bl	8006304 <vPortFree>
				vPortFree( pxTCB );
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 fb84 	bl	8006304 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005bfc:	e019      	b.n	8005c32 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d103      	bne.n	8005c10 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f000 fb7b 	bl	8006304 <vPortFree>
	}
 8005c0e:	e010      	b.n	8005c32 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	d00b      	beq.n	8005c32 <prvDeleteTCB+0x62>
	__asm volatile
 8005c1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c1e:	f383 8811 	msr	BASEPRI, r3
 8005c22:	f3bf 8f6f 	isb	sy
 8005c26:	f3bf 8f4f 	dsb	sy
 8005c2a:	60fb      	str	r3, [r7, #12]
}
 8005c2c:	bf00      	nop
 8005c2e:	bf00      	nop
 8005c30:	e7fd      	b.n	8005c2e <prvDeleteTCB+0x5e>
	}
 8005c32:	bf00      	nop
 8005c34:	3710      	adds	r7, #16
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
	...

08005c3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c42:	4b0c      	ldr	r3, [pc, #48]	@ (8005c74 <prvResetNextTaskUnblockTime+0x38>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d104      	bne.n	8005c56 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8005c78 <prvResetNextTaskUnblockTime+0x3c>)
 8005c4e:	f04f 32ff 	mov.w	r2, #4294967295
 8005c52:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005c54:	e008      	b.n	8005c68 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c56:	4b07      	ldr	r3, [pc, #28]	@ (8005c74 <prvResetNextTaskUnblockTime+0x38>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	4a04      	ldr	r2, [pc, #16]	@ (8005c78 <prvResetNextTaskUnblockTime+0x3c>)
 8005c66:	6013      	str	r3, [r2, #0]
}
 8005c68:	bf00      	nop
 8005c6a:	370c      	adds	r7, #12
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr
 8005c74:	200007bc 	.word	0x200007bc
 8005c78:	20000824 	.word	0x20000824

08005c7c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b084      	sub	sp, #16
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005c86:	4b29      	ldr	r3, [pc, #164]	@ (8005d2c <prvAddCurrentTaskToDelayedList+0xb0>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c8c:	4b28      	ldr	r3, [pc, #160]	@ (8005d30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	3304      	adds	r3, #4
 8005c92:	4618      	mov	r0, r3
 8005c94:	f7ff fad3 	bl	800523e <uxListRemove>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d10b      	bne.n	8005cb6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005c9e:	4b24      	ldr	r3, [pc, #144]	@ (8005d30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8005caa:	43da      	mvns	r2, r3
 8005cac:	4b21      	ldr	r3, [pc, #132]	@ (8005d34 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	4a20      	ldr	r2, [pc, #128]	@ (8005d34 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005cb4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cbc:	d10a      	bne.n	8005cd4 <prvAddCurrentTaskToDelayedList+0x58>
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d007      	beq.n	8005cd4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005cc4:	4b1a      	ldr	r3, [pc, #104]	@ (8005d30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	3304      	adds	r3, #4
 8005cca:	4619      	mov	r1, r3
 8005ccc:	481a      	ldr	r0, [pc, #104]	@ (8005d38 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005cce:	f7ff fa59 	bl	8005184 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005cd2:	e026      	b.n	8005d22 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4413      	add	r3, r2
 8005cda:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005cdc:	4b14      	ldr	r3, [pc, #80]	@ (8005d30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	68ba      	ldr	r2, [r7, #8]
 8005ce2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005ce4:	68ba      	ldr	r2, [r7, #8]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d209      	bcs.n	8005d00 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005cec:	4b13      	ldr	r3, [pc, #76]	@ (8005d3c <prvAddCurrentTaskToDelayedList+0xc0>)
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	4b0f      	ldr	r3, [pc, #60]	@ (8005d30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	3304      	adds	r3, #4
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	4610      	mov	r0, r2
 8005cfa:	f7ff fa67 	bl	80051cc <vListInsert>
}
 8005cfe:	e010      	b.n	8005d22 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d00:	4b0f      	ldr	r3, [pc, #60]	@ (8005d40 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	4b0a      	ldr	r3, [pc, #40]	@ (8005d30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	3304      	adds	r3, #4
 8005d0a:	4619      	mov	r1, r3
 8005d0c:	4610      	mov	r0, r2
 8005d0e:	f7ff fa5d 	bl	80051cc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005d12:	4b0c      	ldr	r3, [pc, #48]	@ (8005d44 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	68ba      	ldr	r2, [r7, #8]
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d202      	bcs.n	8005d22 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005d1c:	4a09      	ldr	r2, [pc, #36]	@ (8005d44 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	6013      	str	r3, [r2, #0]
}
 8005d22:	bf00      	nop
 8005d24:	3710      	adds	r7, #16
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	20000808 	.word	0x20000808
 8005d30:	20000704 	.word	0x20000704
 8005d34:	2000080c 	.word	0x2000080c
 8005d38:	200007f0 	.word	0x200007f0
 8005d3c:	200007c0 	.word	0x200007c0
 8005d40:	200007bc 	.word	0x200007bc
 8005d44:	20000824 	.word	0x20000824

08005d48 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b085      	sub	sp, #20
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	60b9      	str	r1, [r7, #8]
 8005d52:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	3b04      	subs	r3, #4
 8005d58:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005d60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	3b04      	subs	r3, #4
 8005d66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	f023 0201 	bic.w	r2, r3, #1
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	3b04      	subs	r3, #4
 8005d76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005d78:	4a0c      	ldr	r2, [pc, #48]	@ (8005dac <pxPortInitialiseStack+0x64>)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	3b14      	subs	r3, #20
 8005d82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	3b04      	subs	r3, #4
 8005d8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f06f 0202 	mvn.w	r2, #2
 8005d96:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	3b20      	subs	r3, #32
 8005d9c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3714      	adds	r7, #20
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr
 8005dac:	08005db1 	.word	0x08005db1

08005db0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005db0:	b480      	push	{r7}
 8005db2:	b085      	sub	sp, #20
 8005db4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005db6:	2300      	movs	r3, #0
 8005db8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005dba:	4b13      	ldr	r3, [pc, #76]	@ (8005e08 <prvTaskExitError+0x58>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dc2:	d00b      	beq.n	8005ddc <prvTaskExitError+0x2c>
	__asm volatile
 8005dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dc8:	f383 8811 	msr	BASEPRI, r3
 8005dcc:	f3bf 8f6f 	isb	sy
 8005dd0:	f3bf 8f4f 	dsb	sy
 8005dd4:	60fb      	str	r3, [r7, #12]
}
 8005dd6:	bf00      	nop
 8005dd8:	bf00      	nop
 8005dda:	e7fd      	b.n	8005dd8 <prvTaskExitError+0x28>
	__asm volatile
 8005ddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005de0:	f383 8811 	msr	BASEPRI, r3
 8005de4:	f3bf 8f6f 	isb	sy
 8005de8:	f3bf 8f4f 	dsb	sy
 8005dec:	60bb      	str	r3, [r7, #8]
}
 8005dee:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005df0:	bf00      	nop
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d0fc      	beq.n	8005df2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005df8:	bf00      	nop
 8005dfa:	bf00      	nop
 8005dfc:	3714      	adds	r7, #20
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr
 8005e06:	bf00      	nop
 8005e08:	2000000c 	.word	0x2000000c
 8005e0c:	00000000 	.word	0x00000000

08005e10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005e10:	4b07      	ldr	r3, [pc, #28]	@ (8005e30 <pxCurrentTCBConst2>)
 8005e12:	6819      	ldr	r1, [r3, #0]
 8005e14:	6808      	ldr	r0, [r1, #0]
 8005e16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e1a:	f380 8809 	msr	PSP, r0
 8005e1e:	f3bf 8f6f 	isb	sy
 8005e22:	f04f 0000 	mov.w	r0, #0
 8005e26:	f380 8811 	msr	BASEPRI, r0
 8005e2a:	4770      	bx	lr
 8005e2c:	f3af 8000 	nop.w

08005e30 <pxCurrentTCBConst2>:
 8005e30:	20000704 	.word	0x20000704
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005e34:	bf00      	nop
 8005e36:	bf00      	nop

08005e38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005e38:	4808      	ldr	r0, [pc, #32]	@ (8005e5c <prvPortStartFirstTask+0x24>)
 8005e3a:	6800      	ldr	r0, [r0, #0]
 8005e3c:	6800      	ldr	r0, [r0, #0]
 8005e3e:	f380 8808 	msr	MSP, r0
 8005e42:	f04f 0000 	mov.w	r0, #0
 8005e46:	f380 8814 	msr	CONTROL, r0
 8005e4a:	b662      	cpsie	i
 8005e4c:	b661      	cpsie	f
 8005e4e:	f3bf 8f4f 	dsb	sy
 8005e52:	f3bf 8f6f 	isb	sy
 8005e56:	df00      	svc	0
 8005e58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005e5a:	bf00      	nop
 8005e5c:	e000ed08 	.word	0xe000ed08

08005e60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b086      	sub	sp, #24
 8005e64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005e66:	4b47      	ldr	r3, [pc, #284]	@ (8005f84 <xPortStartScheduler+0x124>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a47      	ldr	r2, [pc, #284]	@ (8005f88 <xPortStartScheduler+0x128>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d10b      	bne.n	8005e88 <xPortStartScheduler+0x28>
	__asm volatile
 8005e70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e74:	f383 8811 	msr	BASEPRI, r3
 8005e78:	f3bf 8f6f 	isb	sy
 8005e7c:	f3bf 8f4f 	dsb	sy
 8005e80:	613b      	str	r3, [r7, #16]
}
 8005e82:	bf00      	nop
 8005e84:	bf00      	nop
 8005e86:	e7fd      	b.n	8005e84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005e88:	4b3e      	ldr	r3, [pc, #248]	@ (8005f84 <xPortStartScheduler+0x124>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a3f      	ldr	r2, [pc, #252]	@ (8005f8c <xPortStartScheduler+0x12c>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d10b      	bne.n	8005eaa <xPortStartScheduler+0x4a>
	__asm volatile
 8005e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e96:	f383 8811 	msr	BASEPRI, r3
 8005e9a:	f3bf 8f6f 	isb	sy
 8005e9e:	f3bf 8f4f 	dsb	sy
 8005ea2:	60fb      	str	r3, [r7, #12]
}
 8005ea4:	bf00      	nop
 8005ea6:	bf00      	nop
 8005ea8:	e7fd      	b.n	8005ea6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005eaa:	4b39      	ldr	r3, [pc, #228]	@ (8005f90 <xPortStartScheduler+0x130>)
 8005eac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	22ff      	movs	r2, #255	@ 0xff
 8005eba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005ec4:	78fb      	ldrb	r3, [r7, #3]
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005ecc:	b2da      	uxtb	r2, r3
 8005ece:	4b31      	ldr	r3, [pc, #196]	@ (8005f94 <xPortStartScheduler+0x134>)
 8005ed0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005ed2:	4b31      	ldr	r3, [pc, #196]	@ (8005f98 <xPortStartScheduler+0x138>)
 8005ed4:	2207      	movs	r2, #7
 8005ed6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ed8:	e009      	b.n	8005eee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005eda:	4b2f      	ldr	r3, [pc, #188]	@ (8005f98 <xPortStartScheduler+0x138>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	3b01      	subs	r3, #1
 8005ee0:	4a2d      	ldr	r2, [pc, #180]	@ (8005f98 <xPortStartScheduler+0x138>)
 8005ee2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005ee4:	78fb      	ldrb	r3, [r7, #3]
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	005b      	lsls	r3, r3, #1
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005eee:	78fb      	ldrb	r3, [r7, #3]
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ef6:	2b80      	cmp	r3, #128	@ 0x80
 8005ef8:	d0ef      	beq.n	8005eda <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005efa:	4b27      	ldr	r3, [pc, #156]	@ (8005f98 <xPortStartScheduler+0x138>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f1c3 0307 	rsb	r3, r3, #7
 8005f02:	2b04      	cmp	r3, #4
 8005f04:	d00b      	beq.n	8005f1e <xPortStartScheduler+0xbe>
	__asm volatile
 8005f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f0a:	f383 8811 	msr	BASEPRI, r3
 8005f0e:	f3bf 8f6f 	isb	sy
 8005f12:	f3bf 8f4f 	dsb	sy
 8005f16:	60bb      	str	r3, [r7, #8]
}
 8005f18:	bf00      	nop
 8005f1a:	bf00      	nop
 8005f1c:	e7fd      	b.n	8005f1a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005f1e:	4b1e      	ldr	r3, [pc, #120]	@ (8005f98 <xPortStartScheduler+0x138>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	021b      	lsls	r3, r3, #8
 8005f24:	4a1c      	ldr	r2, [pc, #112]	@ (8005f98 <xPortStartScheduler+0x138>)
 8005f26:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005f28:	4b1b      	ldr	r3, [pc, #108]	@ (8005f98 <xPortStartScheduler+0x138>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005f30:	4a19      	ldr	r2, [pc, #100]	@ (8005f98 <xPortStartScheduler+0x138>)
 8005f32:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	b2da      	uxtb	r2, r3
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005f3c:	4b17      	ldr	r3, [pc, #92]	@ (8005f9c <xPortStartScheduler+0x13c>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a16      	ldr	r2, [pc, #88]	@ (8005f9c <xPortStartScheduler+0x13c>)
 8005f42:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005f46:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005f48:	4b14      	ldr	r3, [pc, #80]	@ (8005f9c <xPortStartScheduler+0x13c>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a13      	ldr	r2, [pc, #76]	@ (8005f9c <xPortStartScheduler+0x13c>)
 8005f4e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005f52:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005f54:	f000 f8da 	bl	800610c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005f58:	4b11      	ldr	r3, [pc, #68]	@ (8005fa0 <xPortStartScheduler+0x140>)
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005f5e:	f000 f8f9 	bl	8006154 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005f62:	4b10      	ldr	r3, [pc, #64]	@ (8005fa4 <xPortStartScheduler+0x144>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a0f      	ldr	r2, [pc, #60]	@ (8005fa4 <xPortStartScheduler+0x144>)
 8005f68:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005f6c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005f6e:	f7ff ff63 	bl	8005e38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005f72:	f7ff fd43 	bl	80059fc <vTaskSwitchContext>
	prvTaskExitError();
 8005f76:	f7ff ff1b 	bl	8005db0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005f7a:	2300      	movs	r3, #0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3718      	adds	r7, #24
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}
 8005f84:	e000ed00 	.word	0xe000ed00
 8005f88:	410fc271 	.word	0x410fc271
 8005f8c:	410fc270 	.word	0x410fc270
 8005f90:	e000e400 	.word	0xe000e400
 8005f94:	20000830 	.word	0x20000830
 8005f98:	20000834 	.word	0x20000834
 8005f9c:	e000ed20 	.word	0xe000ed20
 8005fa0:	2000000c 	.word	0x2000000c
 8005fa4:	e000ef34 	.word	0xe000ef34

08005fa8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
	__asm volatile
 8005fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fb2:	f383 8811 	msr	BASEPRI, r3
 8005fb6:	f3bf 8f6f 	isb	sy
 8005fba:	f3bf 8f4f 	dsb	sy
 8005fbe:	607b      	str	r3, [r7, #4]
}
 8005fc0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005fc2:	4b10      	ldr	r3, [pc, #64]	@ (8006004 <vPortEnterCritical+0x5c>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	4a0e      	ldr	r2, [pc, #56]	@ (8006004 <vPortEnterCritical+0x5c>)
 8005fca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005fcc:	4b0d      	ldr	r3, [pc, #52]	@ (8006004 <vPortEnterCritical+0x5c>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d110      	bne.n	8005ff6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8006008 <vPortEnterCritical+0x60>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d00b      	beq.n	8005ff6 <vPortEnterCritical+0x4e>
	__asm volatile
 8005fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fe2:	f383 8811 	msr	BASEPRI, r3
 8005fe6:	f3bf 8f6f 	isb	sy
 8005fea:	f3bf 8f4f 	dsb	sy
 8005fee:	603b      	str	r3, [r7, #0]
}
 8005ff0:	bf00      	nop
 8005ff2:	bf00      	nop
 8005ff4:	e7fd      	b.n	8005ff2 <vPortEnterCritical+0x4a>
	}
}
 8005ff6:	bf00      	nop
 8005ff8:	370c      	adds	r7, #12
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	2000000c 	.word	0x2000000c
 8006008:	e000ed04 	.word	0xe000ed04

0800600c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006012:	4b12      	ldr	r3, [pc, #72]	@ (800605c <vPortExitCritical+0x50>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d10b      	bne.n	8006032 <vPortExitCritical+0x26>
	__asm volatile
 800601a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800601e:	f383 8811 	msr	BASEPRI, r3
 8006022:	f3bf 8f6f 	isb	sy
 8006026:	f3bf 8f4f 	dsb	sy
 800602a:	607b      	str	r3, [r7, #4]
}
 800602c:	bf00      	nop
 800602e:	bf00      	nop
 8006030:	e7fd      	b.n	800602e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006032:	4b0a      	ldr	r3, [pc, #40]	@ (800605c <vPortExitCritical+0x50>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	3b01      	subs	r3, #1
 8006038:	4a08      	ldr	r2, [pc, #32]	@ (800605c <vPortExitCritical+0x50>)
 800603a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800603c:	4b07      	ldr	r3, [pc, #28]	@ (800605c <vPortExitCritical+0x50>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d105      	bne.n	8006050 <vPortExitCritical+0x44>
 8006044:	2300      	movs	r3, #0
 8006046:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800604e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006050:	bf00      	nop
 8006052:	370c      	adds	r7, #12
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr
 800605c:	2000000c 	.word	0x2000000c

08006060 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006060:	f3ef 8009 	mrs	r0, PSP
 8006064:	f3bf 8f6f 	isb	sy
 8006068:	4b15      	ldr	r3, [pc, #84]	@ (80060c0 <pxCurrentTCBConst>)
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	f01e 0f10 	tst.w	lr, #16
 8006070:	bf08      	it	eq
 8006072:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006076:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800607a:	6010      	str	r0, [r2, #0]
 800607c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006080:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006084:	f380 8811 	msr	BASEPRI, r0
 8006088:	f3bf 8f4f 	dsb	sy
 800608c:	f3bf 8f6f 	isb	sy
 8006090:	f7ff fcb4 	bl	80059fc <vTaskSwitchContext>
 8006094:	f04f 0000 	mov.w	r0, #0
 8006098:	f380 8811 	msr	BASEPRI, r0
 800609c:	bc09      	pop	{r0, r3}
 800609e:	6819      	ldr	r1, [r3, #0]
 80060a0:	6808      	ldr	r0, [r1, #0]
 80060a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060a6:	f01e 0f10 	tst.w	lr, #16
 80060aa:	bf08      	it	eq
 80060ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80060b0:	f380 8809 	msr	PSP, r0
 80060b4:	f3bf 8f6f 	isb	sy
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop
 80060bc:	f3af 8000 	nop.w

080060c0 <pxCurrentTCBConst>:
 80060c0:	20000704 	.word	0x20000704
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80060c4:	bf00      	nop
 80060c6:	bf00      	nop

080060c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
	__asm volatile
 80060ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060d2:	f383 8811 	msr	BASEPRI, r3
 80060d6:	f3bf 8f6f 	isb	sy
 80060da:	f3bf 8f4f 	dsb	sy
 80060de:	607b      	str	r3, [r7, #4]
}
 80060e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80060e2:	f7ff fbd1 	bl	8005888 <xTaskIncrementTick>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d003      	beq.n	80060f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80060ec:	4b06      	ldr	r3, [pc, #24]	@ (8006108 <SysTick_Handler+0x40>)
 80060ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060f2:	601a      	str	r2, [r3, #0]
 80060f4:	2300      	movs	r3, #0
 80060f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	f383 8811 	msr	BASEPRI, r3
}
 80060fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006100:	bf00      	nop
 8006102:	3708      	adds	r7, #8
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}
 8006108:	e000ed04 	.word	0xe000ed04

0800610c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800610c:	b480      	push	{r7}
 800610e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006110:	4b0b      	ldr	r3, [pc, #44]	@ (8006140 <vPortSetupTimerInterrupt+0x34>)
 8006112:	2200      	movs	r2, #0
 8006114:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006116:	4b0b      	ldr	r3, [pc, #44]	@ (8006144 <vPortSetupTimerInterrupt+0x38>)
 8006118:	2200      	movs	r2, #0
 800611a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800611c:	4b0a      	ldr	r3, [pc, #40]	@ (8006148 <vPortSetupTimerInterrupt+0x3c>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a0a      	ldr	r2, [pc, #40]	@ (800614c <vPortSetupTimerInterrupt+0x40>)
 8006122:	fba2 2303 	umull	r2, r3, r2, r3
 8006126:	099b      	lsrs	r3, r3, #6
 8006128:	4a09      	ldr	r2, [pc, #36]	@ (8006150 <vPortSetupTimerInterrupt+0x44>)
 800612a:	3b01      	subs	r3, #1
 800612c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800612e:	4b04      	ldr	r3, [pc, #16]	@ (8006140 <vPortSetupTimerInterrupt+0x34>)
 8006130:	2207      	movs	r2, #7
 8006132:	601a      	str	r2, [r3, #0]
}
 8006134:	bf00      	nop
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr
 800613e:	bf00      	nop
 8006140:	e000e010 	.word	0xe000e010
 8006144:	e000e018 	.word	0xe000e018
 8006148:	20000000 	.word	0x20000000
 800614c:	10624dd3 	.word	0x10624dd3
 8006150:	e000e014 	.word	0xe000e014

08006154 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006154:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006164 <vPortEnableVFP+0x10>
 8006158:	6801      	ldr	r1, [r0, #0]
 800615a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800615e:	6001      	str	r1, [r0, #0]
 8006160:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006162:	bf00      	nop
 8006164:	e000ed88 	.word	0xe000ed88

08006168 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b08a      	sub	sp, #40	@ 0x28
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006170:	2300      	movs	r3, #0
 8006172:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006174:	f7ff fadc 	bl	8005730 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006178:	4b5c      	ldr	r3, [pc, #368]	@ (80062ec <pvPortMalloc+0x184>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d101      	bne.n	8006184 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006180:	f000 f924 	bl	80063cc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006184:	4b5a      	ldr	r3, [pc, #360]	@ (80062f0 <pvPortMalloc+0x188>)
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4013      	ands	r3, r2
 800618c:	2b00      	cmp	r3, #0
 800618e:	f040 8095 	bne.w	80062bc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d01e      	beq.n	80061d6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006198:	2208      	movs	r2, #8
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4413      	add	r3, r2
 800619e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f003 0307 	and.w	r3, r3, #7
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d015      	beq.n	80061d6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f023 0307 	bic.w	r3, r3, #7
 80061b0:	3308      	adds	r3, #8
 80061b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f003 0307 	and.w	r3, r3, #7
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d00b      	beq.n	80061d6 <pvPortMalloc+0x6e>
	__asm volatile
 80061be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061c2:	f383 8811 	msr	BASEPRI, r3
 80061c6:	f3bf 8f6f 	isb	sy
 80061ca:	f3bf 8f4f 	dsb	sy
 80061ce:	617b      	str	r3, [r7, #20]
}
 80061d0:	bf00      	nop
 80061d2:	bf00      	nop
 80061d4:	e7fd      	b.n	80061d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d06f      	beq.n	80062bc <pvPortMalloc+0x154>
 80061dc:	4b45      	ldr	r3, [pc, #276]	@ (80062f4 <pvPortMalloc+0x18c>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d86a      	bhi.n	80062bc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80061e6:	4b44      	ldr	r3, [pc, #272]	@ (80062f8 <pvPortMalloc+0x190>)
 80061e8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80061ea:	4b43      	ldr	r3, [pc, #268]	@ (80062f8 <pvPortMalloc+0x190>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80061f0:	e004      	b.n	80061fc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80061f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80061f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80061fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	429a      	cmp	r2, r3
 8006204:	d903      	bls.n	800620e <pvPortMalloc+0xa6>
 8006206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d1f1      	bne.n	80061f2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800620e:	4b37      	ldr	r3, [pc, #220]	@ (80062ec <pvPortMalloc+0x184>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006214:	429a      	cmp	r2, r3
 8006216:	d051      	beq.n	80062bc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006218:	6a3b      	ldr	r3, [r7, #32]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2208      	movs	r2, #8
 800621e:	4413      	add	r3, r2
 8006220:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	6a3b      	ldr	r3, [r7, #32]
 8006228:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800622a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800622c:	685a      	ldr	r2, [r3, #4]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	1ad2      	subs	r2, r2, r3
 8006232:	2308      	movs	r3, #8
 8006234:	005b      	lsls	r3, r3, #1
 8006236:	429a      	cmp	r2, r3
 8006238:	d920      	bls.n	800627c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800623a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4413      	add	r3, r2
 8006240:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006242:	69bb      	ldr	r3, [r7, #24]
 8006244:	f003 0307 	and.w	r3, r3, #7
 8006248:	2b00      	cmp	r3, #0
 800624a:	d00b      	beq.n	8006264 <pvPortMalloc+0xfc>
	__asm volatile
 800624c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006250:	f383 8811 	msr	BASEPRI, r3
 8006254:	f3bf 8f6f 	isb	sy
 8006258:	f3bf 8f4f 	dsb	sy
 800625c:	613b      	str	r3, [r7, #16]
}
 800625e:	bf00      	nop
 8006260:	bf00      	nop
 8006262:	e7fd      	b.n	8006260 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006266:	685a      	ldr	r2, [r3, #4]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	1ad2      	subs	r2, r2, r3
 800626c:	69bb      	ldr	r3, [r7, #24]
 800626e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006276:	69b8      	ldr	r0, [r7, #24]
 8006278:	f000 f90a 	bl	8006490 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800627c:	4b1d      	ldr	r3, [pc, #116]	@ (80062f4 <pvPortMalloc+0x18c>)
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	1ad3      	subs	r3, r2, r3
 8006286:	4a1b      	ldr	r2, [pc, #108]	@ (80062f4 <pvPortMalloc+0x18c>)
 8006288:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800628a:	4b1a      	ldr	r3, [pc, #104]	@ (80062f4 <pvPortMalloc+0x18c>)
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	4b1b      	ldr	r3, [pc, #108]	@ (80062fc <pvPortMalloc+0x194>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	429a      	cmp	r2, r3
 8006294:	d203      	bcs.n	800629e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006296:	4b17      	ldr	r3, [pc, #92]	@ (80062f4 <pvPortMalloc+0x18c>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a18      	ldr	r2, [pc, #96]	@ (80062fc <pvPortMalloc+0x194>)
 800629c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800629e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a0:	685a      	ldr	r2, [r3, #4]
 80062a2:	4b13      	ldr	r3, [pc, #76]	@ (80062f0 <pvPortMalloc+0x188>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	431a      	orrs	r2, r3
 80062a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80062ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ae:	2200      	movs	r2, #0
 80062b0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80062b2:	4b13      	ldr	r3, [pc, #76]	@ (8006300 <pvPortMalloc+0x198>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	3301      	adds	r3, #1
 80062b8:	4a11      	ldr	r2, [pc, #68]	@ (8006300 <pvPortMalloc+0x198>)
 80062ba:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80062bc:	f7ff fa46 	bl	800574c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80062c0:	69fb      	ldr	r3, [r7, #28]
 80062c2:	f003 0307 	and.w	r3, r3, #7
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d00b      	beq.n	80062e2 <pvPortMalloc+0x17a>
	__asm volatile
 80062ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062ce:	f383 8811 	msr	BASEPRI, r3
 80062d2:	f3bf 8f6f 	isb	sy
 80062d6:	f3bf 8f4f 	dsb	sy
 80062da:	60fb      	str	r3, [r7, #12]
}
 80062dc:	bf00      	nop
 80062de:	bf00      	nop
 80062e0:	e7fd      	b.n	80062de <pvPortMalloc+0x176>
	return pvReturn;
 80062e2:	69fb      	ldr	r3, [r7, #28]
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3728      	adds	r7, #40	@ 0x28
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}
 80062ec:	20004440 	.word	0x20004440
 80062f0:	20004454 	.word	0x20004454
 80062f4:	20004444 	.word	0x20004444
 80062f8:	20004438 	.word	0x20004438
 80062fc:	20004448 	.word	0x20004448
 8006300:	2000444c 	.word	0x2000444c

08006304 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b086      	sub	sp, #24
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d04f      	beq.n	80063b6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006316:	2308      	movs	r3, #8
 8006318:	425b      	negs	r3, r3
 800631a:	697a      	ldr	r2, [r7, #20]
 800631c:	4413      	add	r3, r2
 800631e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	685a      	ldr	r2, [r3, #4]
 8006328:	4b25      	ldr	r3, [pc, #148]	@ (80063c0 <vPortFree+0xbc>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4013      	ands	r3, r2
 800632e:	2b00      	cmp	r3, #0
 8006330:	d10b      	bne.n	800634a <vPortFree+0x46>
	__asm volatile
 8006332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006336:	f383 8811 	msr	BASEPRI, r3
 800633a:	f3bf 8f6f 	isb	sy
 800633e:	f3bf 8f4f 	dsb	sy
 8006342:	60fb      	str	r3, [r7, #12]
}
 8006344:	bf00      	nop
 8006346:	bf00      	nop
 8006348:	e7fd      	b.n	8006346 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d00b      	beq.n	800636a <vPortFree+0x66>
	__asm volatile
 8006352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006356:	f383 8811 	msr	BASEPRI, r3
 800635a:	f3bf 8f6f 	isb	sy
 800635e:	f3bf 8f4f 	dsb	sy
 8006362:	60bb      	str	r3, [r7, #8]
}
 8006364:	bf00      	nop
 8006366:	bf00      	nop
 8006368:	e7fd      	b.n	8006366 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	685a      	ldr	r2, [r3, #4]
 800636e:	4b14      	ldr	r3, [pc, #80]	@ (80063c0 <vPortFree+0xbc>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4013      	ands	r3, r2
 8006374:	2b00      	cmp	r3, #0
 8006376:	d01e      	beq.n	80063b6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d11a      	bne.n	80063b6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	685a      	ldr	r2, [r3, #4]
 8006384:	4b0e      	ldr	r3, [pc, #56]	@ (80063c0 <vPortFree+0xbc>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	43db      	mvns	r3, r3
 800638a:	401a      	ands	r2, r3
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006390:	f7ff f9ce 	bl	8005730 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	685a      	ldr	r2, [r3, #4]
 8006398:	4b0a      	ldr	r3, [pc, #40]	@ (80063c4 <vPortFree+0xc0>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4413      	add	r3, r2
 800639e:	4a09      	ldr	r2, [pc, #36]	@ (80063c4 <vPortFree+0xc0>)
 80063a0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80063a2:	6938      	ldr	r0, [r7, #16]
 80063a4:	f000 f874 	bl	8006490 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80063a8:	4b07      	ldr	r3, [pc, #28]	@ (80063c8 <vPortFree+0xc4>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	3301      	adds	r3, #1
 80063ae:	4a06      	ldr	r2, [pc, #24]	@ (80063c8 <vPortFree+0xc4>)
 80063b0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80063b2:	f7ff f9cb 	bl	800574c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80063b6:	bf00      	nop
 80063b8:	3718      	adds	r7, #24
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	20004454 	.word	0x20004454
 80063c4:	20004444 	.word	0x20004444
 80063c8:	20004450 	.word	0x20004450

080063cc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80063cc:	b480      	push	{r7}
 80063ce:	b085      	sub	sp, #20
 80063d0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80063d2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80063d6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80063d8:	4b27      	ldr	r3, [pc, #156]	@ (8006478 <prvHeapInit+0xac>)
 80063da:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f003 0307 	and.w	r3, r3, #7
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d00c      	beq.n	8006400 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	3307      	adds	r3, #7
 80063ea:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f023 0307 	bic.w	r3, r3, #7
 80063f2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80063f4:	68ba      	ldr	r2, [r7, #8]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	4a1f      	ldr	r2, [pc, #124]	@ (8006478 <prvHeapInit+0xac>)
 80063fc:	4413      	add	r3, r2
 80063fe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006404:	4a1d      	ldr	r2, [pc, #116]	@ (800647c <prvHeapInit+0xb0>)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800640a:	4b1c      	ldr	r3, [pc, #112]	@ (800647c <prvHeapInit+0xb0>)
 800640c:	2200      	movs	r2, #0
 800640e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	68ba      	ldr	r2, [r7, #8]
 8006414:	4413      	add	r3, r2
 8006416:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006418:	2208      	movs	r2, #8
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	1a9b      	subs	r3, r3, r2
 800641e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f023 0307 	bic.w	r3, r3, #7
 8006426:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	4a15      	ldr	r2, [pc, #84]	@ (8006480 <prvHeapInit+0xb4>)
 800642c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800642e:	4b14      	ldr	r3, [pc, #80]	@ (8006480 <prvHeapInit+0xb4>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	2200      	movs	r2, #0
 8006434:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006436:	4b12      	ldr	r3, [pc, #72]	@ (8006480 <prvHeapInit+0xb4>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	2200      	movs	r2, #0
 800643c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	68fa      	ldr	r2, [r7, #12]
 8006446:	1ad2      	subs	r2, r2, r3
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800644c:	4b0c      	ldr	r3, [pc, #48]	@ (8006480 <prvHeapInit+0xb4>)
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	4a0a      	ldr	r2, [pc, #40]	@ (8006484 <prvHeapInit+0xb8>)
 800645a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	4a09      	ldr	r2, [pc, #36]	@ (8006488 <prvHeapInit+0xbc>)
 8006462:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006464:	4b09      	ldr	r3, [pc, #36]	@ (800648c <prvHeapInit+0xc0>)
 8006466:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800646a:	601a      	str	r2, [r3, #0]
}
 800646c:	bf00      	nop
 800646e:	3714      	adds	r7, #20
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr
 8006478:	20000838 	.word	0x20000838
 800647c:	20004438 	.word	0x20004438
 8006480:	20004440 	.word	0x20004440
 8006484:	20004448 	.word	0x20004448
 8006488:	20004444 	.word	0x20004444
 800648c:	20004454 	.word	0x20004454

08006490 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006490:	b480      	push	{r7}
 8006492:	b085      	sub	sp, #20
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006498:	4b28      	ldr	r3, [pc, #160]	@ (800653c <prvInsertBlockIntoFreeList+0xac>)
 800649a:	60fb      	str	r3, [r7, #12]
 800649c:	e002      	b.n	80064a4 <prvInsertBlockIntoFreeList+0x14>
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	60fb      	str	r3, [r7, #12]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d8f7      	bhi.n	800649e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	68ba      	ldr	r2, [r7, #8]
 80064b8:	4413      	add	r3, r2
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	429a      	cmp	r2, r3
 80064be:	d108      	bne.n	80064d2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	685a      	ldr	r2, [r3, #4]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	441a      	add	r2, r3
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	68ba      	ldr	r2, [r7, #8]
 80064dc:	441a      	add	r2, r3
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d118      	bne.n	8006518 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	4b15      	ldr	r3, [pc, #84]	@ (8006540 <prvInsertBlockIntoFreeList+0xb0>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d00d      	beq.n	800650e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	685a      	ldr	r2, [r3, #4]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	441a      	add	r2, r3
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	601a      	str	r2, [r3, #0]
 800650c:	e008      	b.n	8006520 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800650e:	4b0c      	ldr	r3, [pc, #48]	@ (8006540 <prvInsertBlockIntoFreeList+0xb0>)
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	601a      	str	r2, [r3, #0]
 8006516:	e003      	b.n	8006520 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	429a      	cmp	r2, r3
 8006526:	d002      	beq.n	800652e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800652e:	bf00      	nop
 8006530:	3714      	adds	r7, #20
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr
 800653a:	bf00      	nop
 800653c:	20004438 	.word	0x20004438
 8006540:	20004440 	.word	0x20004440

08006544 <__cvt>:
 8006544:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006548:	ec57 6b10 	vmov	r6, r7, d0
 800654c:	2f00      	cmp	r7, #0
 800654e:	460c      	mov	r4, r1
 8006550:	4619      	mov	r1, r3
 8006552:	463b      	mov	r3, r7
 8006554:	bfbb      	ittet	lt
 8006556:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800655a:	461f      	movlt	r7, r3
 800655c:	2300      	movge	r3, #0
 800655e:	232d      	movlt	r3, #45	@ 0x2d
 8006560:	700b      	strb	r3, [r1, #0]
 8006562:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006564:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006568:	4691      	mov	r9, r2
 800656a:	f023 0820 	bic.w	r8, r3, #32
 800656e:	bfbc      	itt	lt
 8006570:	4632      	movlt	r2, r6
 8006572:	4616      	movlt	r6, r2
 8006574:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006578:	d005      	beq.n	8006586 <__cvt+0x42>
 800657a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800657e:	d100      	bne.n	8006582 <__cvt+0x3e>
 8006580:	3401      	adds	r4, #1
 8006582:	2102      	movs	r1, #2
 8006584:	e000      	b.n	8006588 <__cvt+0x44>
 8006586:	2103      	movs	r1, #3
 8006588:	ab03      	add	r3, sp, #12
 800658a:	9301      	str	r3, [sp, #4]
 800658c:	ab02      	add	r3, sp, #8
 800658e:	9300      	str	r3, [sp, #0]
 8006590:	ec47 6b10 	vmov	d0, r6, r7
 8006594:	4653      	mov	r3, sl
 8006596:	4622      	mov	r2, r4
 8006598:	f000 fe9e 	bl	80072d8 <_dtoa_r>
 800659c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80065a0:	4605      	mov	r5, r0
 80065a2:	d119      	bne.n	80065d8 <__cvt+0x94>
 80065a4:	f019 0f01 	tst.w	r9, #1
 80065a8:	d00e      	beq.n	80065c8 <__cvt+0x84>
 80065aa:	eb00 0904 	add.w	r9, r0, r4
 80065ae:	2200      	movs	r2, #0
 80065b0:	2300      	movs	r3, #0
 80065b2:	4630      	mov	r0, r6
 80065b4:	4639      	mov	r1, r7
 80065b6:	f7fa fa87 	bl	8000ac8 <__aeabi_dcmpeq>
 80065ba:	b108      	cbz	r0, 80065c0 <__cvt+0x7c>
 80065bc:	f8cd 900c 	str.w	r9, [sp, #12]
 80065c0:	2230      	movs	r2, #48	@ 0x30
 80065c2:	9b03      	ldr	r3, [sp, #12]
 80065c4:	454b      	cmp	r3, r9
 80065c6:	d31e      	bcc.n	8006606 <__cvt+0xc2>
 80065c8:	9b03      	ldr	r3, [sp, #12]
 80065ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80065cc:	1b5b      	subs	r3, r3, r5
 80065ce:	4628      	mov	r0, r5
 80065d0:	6013      	str	r3, [r2, #0]
 80065d2:	b004      	add	sp, #16
 80065d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065d8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80065dc:	eb00 0904 	add.w	r9, r0, r4
 80065e0:	d1e5      	bne.n	80065ae <__cvt+0x6a>
 80065e2:	7803      	ldrb	r3, [r0, #0]
 80065e4:	2b30      	cmp	r3, #48	@ 0x30
 80065e6:	d10a      	bne.n	80065fe <__cvt+0xba>
 80065e8:	2200      	movs	r2, #0
 80065ea:	2300      	movs	r3, #0
 80065ec:	4630      	mov	r0, r6
 80065ee:	4639      	mov	r1, r7
 80065f0:	f7fa fa6a 	bl	8000ac8 <__aeabi_dcmpeq>
 80065f4:	b918      	cbnz	r0, 80065fe <__cvt+0xba>
 80065f6:	f1c4 0401 	rsb	r4, r4, #1
 80065fa:	f8ca 4000 	str.w	r4, [sl]
 80065fe:	f8da 3000 	ldr.w	r3, [sl]
 8006602:	4499      	add	r9, r3
 8006604:	e7d3      	b.n	80065ae <__cvt+0x6a>
 8006606:	1c59      	adds	r1, r3, #1
 8006608:	9103      	str	r1, [sp, #12]
 800660a:	701a      	strb	r2, [r3, #0]
 800660c:	e7d9      	b.n	80065c2 <__cvt+0x7e>

0800660e <__exponent>:
 800660e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006610:	2900      	cmp	r1, #0
 8006612:	bfba      	itte	lt
 8006614:	4249      	neglt	r1, r1
 8006616:	232d      	movlt	r3, #45	@ 0x2d
 8006618:	232b      	movge	r3, #43	@ 0x2b
 800661a:	2909      	cmp	r1, #9
 800661c:	7002      	strb	r2, [r0, #0]
 800661e:	7043      	strb	r3, [r0, #1]
 8006620:	dd29      	ble.n	8006676 <__exponent+0x68>
 8006622:	f10d 0307 	add.w	r3, sp, #7
 8006626:	461d      	mov	r5, r3
 8006628:	270a      	movs	r7, #10
 800662a:	461a      	mov	r2, r3
 800662c:	fbb1 f6f7 	udiv	r6, r1, r7
 8006630:	fb07 1416 	mls	r4, r7, r6, r1
 8006634:	3430      	adds	r4, #48	@ 0x30
 8006636:	f802 4c01 	strb.w	r4, [r2, #-1]
 800663a:	460c      	mov	r4, r1
 800663c:	2c63      	cmp	r4, #99	@ 0x63
 800663e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006642:	4631      	mov	r1, r6
 8006644:	dcf1      	bgt.n	800662a <__exponent+0x1c>
 8006646:	3130      	adds	r1, #48	@ 0x30
 8006648:	1e94      	subs	r4, r2, #2
 800664a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800664e:	1c41      	adds	r1, r0, #1
 8006650:	4623      	mov	r3, r4
 8006652:	42ab      	cmp	r3, r5
 8006654:	d30a      	bcc.n	800666c <__exponent+0x5e>
 8006656:	f10d 0309 	add.w	r3, sp, #9
 800665a:	1a9b      	subs	r3, r3, r2
 800665c:	42ac      	cmp	r4, r5
 800665e:	bf88      	it	hi
 8006660:	2300      	movhi	r3, #0
 8006662:	3302      	adds	r3, #2
 8006664:	4403      	add	r3, r0
 8006666:	1a18      	subs	r0, r3, r0
 8006668:	b003      	add	sp, #12
 800666a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800666c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006670:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006674:	e7ed      	b.n	8006652 <__exponent+0x44>
 8006676:	2330      	movs	r3, #48	@ 0x30
 8006678:	3130      	adds	r1, #48	@ 0x30
 800667a:	7083      	strb	r3, [r0, #2]
 800667c:	70c1      	strb	r1, [r0, #3]
 800667e:	1d03      	adds	r3, r0, #4
 8006680:	e7f1      	b.n	8006666 <__exponent+0x58>
	...

08006684 <_printf_float>:
 8006684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006688:	b08d      	sub	sp, #52	@ 0x34
 800668a:	460c      	mov	r4, r1
 800668c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006690:	4616      	mov	r6, r2
 8006692:	461f      	mov	r7, r3
 8006694:	4605      	mov	r5, r0
 8006696:	f000 fcbb 	bl	8007010 <_localeconv_r>
 800669a:	6803      	ldr	r3, [r0, #0]
 800669c:	9304      	str	r3, [sp, #16]
 800669e:	4618      	mov	r0, r3
 80066a0:	f7f9 fde6 	bl	8000270 <strlen>
 80066a4:	2300      	movs	r3, #0
 80066a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80066a8:	f8d8 3000 	ldr.w	r3, [r8]
 80066ac:	9005      	str	r0, [sp, #20]
 80066ae:	3307      	adds	r3, #7
 80066b0:	f023 0307 	bic.w	r3, r3, #7
 80066b4:	f103 0208 	add.w	r2, r3, #8
 80066b8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80066bc:	f8d4 b000 	ldr.w	fp, [r4]
 80066c0:	f8c8 2000 	str.w	r2, [r8]
 80066c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80066c8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80066cc:	9307      	str	r3, [sp, #28]
 80066ce:	f8cd 8018 	str.w	r8, [sp, #24]
 80066d2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80066d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066da:	4b9c      	ldr	r3, [pc, #624]	@ (800694c <_printf_float+0x2c8>)
 80066dc:	f04f 32ff 	mov.w	r2, #4294967295
 80066e0:	f7fa fa24 	bl	8000b2c <__aeabi_dcmpun>
 80066e4:	bb70      	cbnz	r0, 8006744 <_printf_float+0xc0>
 80066e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066ea:	4b98      	ldr	r3, [pc, #608]	@ (800694c <_printf_float+0x2c8>)
 80066ec:	f04f 32ff 	mov.w	r2, #4294967295
 80066f0:	f7fa f9fe 	bl	8000af0 <__aeabi_dcmple>
 80066f4:	bb30      	cbnz	r0, 8006744 <_printf_float+0xc0>
 80066f6:	2200      	movs	r2, #0
 80066f8:	2300      	movs	r3, #0
 80066fa:	4640      	mov	r0, r8
 80066fc:	4649      	mov	r1, r9
 80066fe:	f7fa f9ed 	bl	8000adc <__aeabi_dcmplt>
 8006702:	b110      	cbz	r0, 800670a <_printf_float+0x86>
 8006704:	232d      	movs	r3, #45	@ 0x2d
 8006706:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800670a:	4a91      	ldr	r2, [pc, #580]	@ (8006950 <_printf_float+0x2cc>)
 800670c:	4b91      	ldr	r3, [pc, #580]	@ (8006954 <_printf_float+0x2d0>)
 800670e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006712:	bf94      	ite	ls
 8006714:	4690      	movls	r8, r2
 8006716:	4698      	movhi	r8, r3
 8006718:	2303      	movs	r3, #3
 800671a:	6123      	str	r3, [r4, #16]
 800671c:	f02b 0304 	bic.w	r3, fp, #4
 8006720:	6023      	str	r3, [r4, #0]
 8006722:	f04f 0900 	mov.w	r9, #0
 8006726:	9700      	str	r7, [sp, #0]
 8006728:	4633      	mov	r3, r6
 800672a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800672c:	4621      	mov	r1, r4
 800672e:	4628      	mov	r0, r5
 8006730:	f000 f9d2 	bl	8006ad8 <_printf_common>
 8006734:	3001      	adds	r0, #1
 8006736:	f040 808d 	bne.w	8006854 <_printf_float+0x1d0>
 800673a:	f04f 30ff 	mov.w	r0, #4294967295
 800673e:	b00d      	add	sp, #52	@ 0x34
 8006740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006744:	4642      	mov	r2, r8
 8006746:	464b      	mov	r3, r9
 8006748:	4640      	mov	r0, r8
 800674a:	4649      	mov	r1, r9
 800674c:	f7fa f9ee 	bl	8000b2c <__aeabi_dcmpun>
 8006750:	b140      	cbz	r0, 8006764 <_printf_float+0xe0>
 8006752:	464b      	mov	r3, r9
 8006754:	2b00      	cmp	r3, #0
 8006756:	bfbc      	itt	lt
 8006758:	232d      	movlt	r3, #45	@ 0x2d
 800675a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800675e:	4a7e      	ldr	r2, [pc, #504]	@ (8006958 <_printf_float+0x2d4>)
 8006760:	4b7e      	ldr	r3, [pc, #504]	@ (800695c <_printf_float+0x2d8>)
 8006762:	e7d4      	b.n	800670e <_printf_float+0x8a>
 8006764:	6863      	ldr	r3, [r4, #4]
 8006766:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800676a:	9206      	str	r2, [sp, #24]
 800676c:	1c5a      	adds	r2, r3, #1
 800676e:	d13b      	bne.n	80067e8 <_printf_float+0x164>
 8006770:	2306      	movs	r3, #6
 8006772:	6063      	str	r3, [r4, #4]
 8006774:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006778:	2300      	movs	r3, #0
 800677a:	6022      	str	r2, [r4, #0]
 800677c:	9303      	str	r3, [sp, #12]
 800677e:	ab0a      	add	r3, sp, #40	@ 0x28
 8006780:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006784:	ab09      	add	r3, sp, #36	@ 0x24
 8006786:	9300      	str	r3, [sp, #0]
 8006788:	6861      	ldr	r1, [r4, #4]
 800678a:	ec49 8b10 	vmov	d0, r8, r9
 800678e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006792:	4628      	mov	r0, r5
 8006794:	f7ff fed6 	bl	8006544 <__cvt>
 8006798:	9b06      	ldr	r3, [sp, #24]
 800679a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800679c:	2b47      	cmp	r3, #71	@ 0x47
 800679e:	4680      	mov	r8, r0
 80067a0:	d129      	bne.n	80067f6 <_printf_float+0x172>
 80067a2:	1cc8      	adds	r0, r1, #3
 80067a4:	db02      	blt.n	80067ac <_printf_float+0x128>
 80067a6:	6863      	ldr	r3, [r4, #4]
 80067a8:	4299      	cmp	r1, r3
 80067aa:	dd41      	ble.n	8006830 <_printf_float+0x1ac>
 80067ac:	f1aa 0a02 	sub.w	sl, sl, #2
 80067b0:	fa5f fa8a 	uxtb.w	sl, sl
 80067b4:	3901      	subs	r1, #1
 80067b6:	4652      	mov	r2, sl
 80067b8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80067bc:	9109      	str	r1, [sp, #36]	@ 0x24
 80067be:	f7ff ff26 	bl	800660e <__exponent>
 80067c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80067c4:	1813      	adds	r3, r2, r0
 80067c6:	2a01      	cmp	r2, #1
 80067c8:	4681      	mov	r9, r0
 80067ca:	6123      	str	r3, [r4, #16]
 80067cc:	dc02      	bgt.n	80067d4 <_printf_float+0x150>
 80067ce:	6822      	ldr	r2, [r4, #0]
 80067d0:	07d2      	lsls	r2, r2, #31
 80067d2:	d501      	bpl.n	80067d8 <_printf_float+0x154>
 80067d4:	3301      	adds	r3, #1
 80067d6:	6123      	str	r3, [r4, #16]
 80067d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d0a2      	beq.n	8006726 <_printf_float+0xa2>
 80067e0:	232d      	movs	r3, #45	@ 0x2d
 80067e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067e6:	e79e      	b.n	8006726 <_printf_float+0xa2>
 80067e8:	9a06      	ldr	r2, [sp, #24]
 80067ea:	2a47      	cmp	r2, #71	@ 0x47
 80067ec:	d1c2      	bne.n	8006774 <_printf_float+0xf0>
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d1c0      	bne.n	8006774 <_printf_float+0xf0>
 80067f2:	2301      	movs	r3, #1
 80067f4:	e7bd      	b.n	8006772 <_printf_float+0xee>
 80067f6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80067fa:	d9db      	bls.n	80067b4 <_printf_float+0x130>
 80067fc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006800:	d118      	bne.n	8006834 <_printf_float+0x1b0>
 8006802:	2900      	cmp	r1, #0
 8006804:	6863      	ldr	r3, [r4, #4]
 8006806:	dd0b      	ble.n	8006820 <_printf_float+0x19c>
 8006808:	6121      	str	r1, [r4, #16]
 800680a:	b913      	cbnz	r3, 8006812 <_printf_float+0x18e>
 800680c:	6822      	ldr	r2, [r4, #0]
 800680e:	07d0      	lsls	r0, r2, #31
 8006810:	d502      	bpl.n	8006818 <_printf_float+0x194>
 8006812:	3301      	adds	r3, #1
 8006814:	440b      	add	r3, r1
 8006816:	6123      	str	r3, [r4, #16]
 8006818:	65a1      	str	r1, [r4, #88]	@ 0x58
 800681a:	f04f 0900 	mov.w	r9, #0
 800681e:	e7db      	b.n	80067d8 <_printf_float+0x154>
 8006820:	b913      	cbnz	r3, 8006828 <_printf_float+0x1a4>
 8006822:	6822      	ldr	r2, [r4, #0]
 8006824:	07d2      	lsls	r2, r2, #31
 8006826:	d501      	bpl.n	800682c <_printf_float+0x1a8>
 8006828:	3302      	adds	r3, #2
 800682a:	e7f4      	b.n	8006816 <_printf_float+0x192>
 800682c:	2301      	movs	r3, #1
 800682e:	e7f2      	b.n	8006816 <_printf_float+0x192>
 8006830:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006834:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006836:	4299      	cmp	r1, r3
 8006838:	db05      	blt.n	8006846 <_printf_float+0x1c2>
 800683a:	6823      	ldr	r3, [r4, #0]
 800683c:	6121      	str	r1, [r4, #16]
 800683e:	07d8      	lsls	r0, r3, #31
 8006840:	d5ea      	bpl.n	8006818 <_printf_float+0x194>
 8006842:	1c4b      	adds	r3, r1, #1
 8006844:	e7e7      	b.n	8006816 <_printf_float+0x192>
 8006846:	2900      	cmp	r1, #0
 8006848:	bfd4      	ite	le
 800684a:	f1c1 0202 	rsble	r2, r1, #2
 800684e:	2201      	movgt	r2, #1
 8006850:	4413      	add	r3, r2
 8006852:	e7e0      	b.n	8006816 <_printf_float+0x192>
 8006854:	6823      	ldr	r3, [r4, #0]
 8006856:	055a      	lsls	r2, r3, #21
 8006858:	d407      	bmi.n	800686a <_printf_float+0x1e6>
 800685a:	6923      	ldr	r3, [r4, #16]
 800685c:	4642      	mov	r2, r8
 800685e:	4631      	mov	r1, r6
 8006860:	4628      	mov	r0, r5
 8006862:	47b8      	blx	r7
 8006864:	3001      	adds	r0, #1
 8006866:	d12b      	bne.n	80068c0 <_printf_float+0x23c>
 8006868:	e767      	b.n	800673a <_printf_float+0xb6>
 800686a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800686e:	f240 80dd 	bls.w	8006a2c <_printf_float+0x3a8>
 8006872:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006876:	2200      	movs	r2, #0
 8006878:	2300      	movs	r3, #0
 800687a:	f7fa f925 	bl	8000ac8 <__aeabi_dcmpeq>
 800687e:	2800      	cmp	r0, #0
 8006880:	d033      	beq.n	80068ea <_printf_float+0x266>
 8006882:	4a37      	ldr	r2, [pc, #220]	@ (8006960 <_printf_float+0x2dc>)
 8006884:	2301      	movs	r3, #1
 8006886:	4631      	mov	r1, r6
 8006888:	4628      	mov	r0, r5
 800688a:	47b8      	blx	r7
 800688c:	3001      	adds	r0, #1
 800688e:	f43f af54 	beq.w	800673a <_printf_float+0xb6>
 8006892:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006896:	4543      	cmp	r3, r8
 8006898:	db02      	blt.n	80068a0 <_printf_float+0x21c>
 800689a:	6823      	ldr	r3, [r4, #0]
 800689c:	07d8      	lsls	r0, r3, #31
 800689e:	d50f      	bpl.n	80068c0 <_printf_float+0x23c>
 80068a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068a4:	4631      	mov	r1, r6
 80068a6:	4628      	mov	r0, r5
 80068a8:	47b8      	blx	r7
 80068aa:	3001      	adds	r0, #1
 80068ac:	f43f af45 	beq.w	800673a <_printf_float+0xb6>
 80068b0:	f04f 0900 	mov.w	r9, #0
 80068b4:	f108 38ff 	add.w	r8, r8, #4294967295
 80068b8:	f104 0a1a 	add.w	sl, r4, #26
 80068bc:	45c8      	cmp	r8, r9
 80068be:	dc09      	bgt.n	80068d4 <_printf_float+0x250>
 80068c0:	6823      	ldr	r3, [r4, #0]
 80068c2:	079b      	lsls	r3, r3, #30
 80068c4:	f100 8103 	bmi.w	8006ace <_printf_float+0x44a>
 80068c8:	68e0      	ldr	r0, [r4, #12]
 80068ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80068cc:	4298      	cmp	r0, r3
 80068ce:	bfb8      	it	lt
 80068d0:	4618      	movlt	r0, r3
 80068d2:	e734      	b.n	800673e <_printf_float+0xba>
 80068d4:	2301      	movs	r3, #1
 80068d6:	4652      	mov	r2, sl
 80068d8:	4631      	mov	r1, r6
 80068da:	4628      	mov	r0, r5
 80068dc:	47b8      	blx	r7
 80068de:	3001      	adds	r0, #1
 80068e0:	f43f af2b 	beq.w	800673a <_printf_float+0xb6>
 80068e4:	f109 0901 	add.w	r9, r9, #1
 80068e8:	e7e8      	b.n	80068bc <_printf_float+0x238>
 80068ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	dc39      	bgt.n	8006964 <_printf_float+0x2e0>
 80068f0:	4a1b      	ldr	r2, [pc, #108]	@ (8006960 <_printf_float+0x2dc>)
 80068f2:	2301      	movs	r3, #1
 80068f4:	4631      	mov	r1, r6
 80068f6:	4628      	mov	r0, r5
 80068f8:	47b8      	blx	r7
 80068fa:	3001      	adds	r0, #1
 80068fc:	f43f af1d 	beq.w	800673a <_printf_float+0xb6>
 8006900:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006904:	ea59 0303 	orrs.w	r3, r9, r3
 8006908:	d102      	bne.n	8006910 <_printf_float+0x28c>
 800690a:	6823      	ldr	r3, [r4, #0]
 800690c:	07d9      	lsls	r1, r3, #31
 800690e:	d5d7      	bpl.n	80068c0 <_printf_float+0x23c>
 8006910:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006914:	4631      	mov	r1, r6
 8006916:	4628      	mov	r0, r5
 8006918:	47b8      	blx	r7
 800691a:	3001      	adds	r0, #1
 800691c:	f43f af0d 	beq.w	800673a <_printf_float+0xb6>
 8006920:	f04f 0a00 	mov.w	sl, #0
 8006924:	f104 0b1a 	add.w	fp, r4, #26
 8006928:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800692a:	425b      	negs	r3, r3
 800692c:	4553      	cmp	r3, sl
 800692e:	dc01      	bgt.n	8006934 <_printf_float+0x2b0>
 8006930:	464b      	mov	r3, r9
 8006932:	e793      	b.n	800685c <_printf_float+0x1d8>
 8006934:	2301      	movs	r3, #1
 8006936:	465a      	mov	r2, fp
 8006938:	4631      	mov	r1, r6
 800693a:	4628      	mov	r0, r5
 800693c:	47b8      	blx	r7
 800693e:	3001      	adds	r0, #1
 8006940:	f43f aefb 	beq.w	800673a <_printf_float+0xb6>
 8006944:	f10a 0a01 	add.w	sl, sl, #1
 8006948:	e7ee      	b.n	8006928 <_printf_float+0x2a4>
 800694a:	bf00      	nop
 800694c:	7fefffff 	.word	0x7fefffff
 8006950:	08008fac 	.word	0x08008fac
 8006954:	08008fb0 	.word	0x08008fb0
 8006958:	08008fb4 	.word	0x08008fb4
 800695c:	08008fb8 	.word	0x08008fb8
 8006960:	08008fbc 	.word	0x08008fbc
 8006964:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006966:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800696a:	4553      	cmp	r3, sl
 800696c:	bfa8      	it	ge
 800696e:	4653      	movge	r3, sl
 8006970:	2b00      	cmp	r3, #0
 8006972:	4699      	mov	r9, r3
 8006974:	dc36      	bgt.n	80069e4 <_printf_float+0x360>
 8006976:	f04f 0b00 	mov.w	fp, #0
 800697a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800697e:	f104 021a 	add.w	r2, r4, #26
 8006982:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006984:	9306      	str	r3, [sp, #24]
 8006986:	eba3 0309 	sub.w	r3, r3, r9
 800698a:	455b      	cmp	r3, fp
 800698c:	dc31      	bgt.n	80069f2 <_printf_float+0x36e>
 800698e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006990:	459a      	cmp	sl, r3
 8006992:	dc3a      	bgt.n	8006a0a <_printf_float+0x386>
 8006994:	6823      	ldr	r3, [r4, #0]
 8006996:	07da      	lsls	r2, r3, #31
 8006998:	d437      	bmi.n	8006a0a <_printf_float+0x386>
 800699a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800699c:	ebaa 0903 	sub.w	r9, sl, r3
 80069a0:	9b06      	ldr	r3, [sp, #24]
 80069a2:	ebaa 0303 	sub.w	r3, sl, r3
 80069a6:	4599      	cmp	r9, r3
 80069a8:	bfa8      	it	ge
 80069aa:	4699      	movge	r9, r3
 80069ac:	f1b9 0f00 	cmp.w	r9, #0
 80069b0:	dc33      	bgt.n	8006a1a <_printf_float+0x396>
 80069b2:	f04f 0800 	mov.w	r8, #0
 80069b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069ba:	f104 0b1a 	add.w	fp, r4, #26
 80069be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069c0:	ebaa 0303 	sub.w	r3, sl, r3
 80069c4:	eba3 0309 	sub.w	r3, r3, r9
 80069c8:	4543      	cmp	r3, r8
 80069ca:	f77f af79 	ble.w	80068c0 <_printf_float+0x23c>
 80069ce:	2301      	movs	r3, #1
 80069d0:	465a      	mov	r2, fp
 80069d2:	4631      	mov	r1, r6
 80069d4:	4628      	mov	r0, r5
 80069d6:	47b8      	blx	r7
 80069d8:	3001      	adds	r0, #1
 80069da:	f43f aeae 	beq.w	800673a <_printf_float+0xb6>
 80069de:	f108 0801 	add.w	r8, r8, #1
 80069e2:	e7ec      	b.n	80069be <_printf_float+0x33a>
 80069e4:	4642      	mov	r2, r8
 80069e6:	4631      	mov	r1, r6
 80069e8:	4628      	mov	r0, r5
 80069ea:	47b8      	blx	r7
 80069ec:	3001      	adds	r0, #1
 80069ee:	d1c2      	bne.n	8006976 <_printf_float+0x2f2>
 80069f0:	e6a3      	b.n	800673a <_printf_float+0xb6>
 80069f2:	2301      	movs	r3, #1
 80069f4:	4631      	mov	r1, r6
 80069f6:	4628      	mov	r0, r5
 80069f8:	9206      	str	r2, [sp, #24]
 80069fa:	47b8      	blx	r7
 80069fc:	3001      	adds	r0, #1
 80069fe:	f43f ae9c 	beq.w	800673a <_printf_float+0xb6>
 8006a02:	9a06      	ldr	r2, [sp, #24]
 8006a04:	f10b 0b01 	add.w	fp, fp, #1
 8006a08:	e7bb      	b.n	8006982 <_printf_float+0x2fe>
 8006a0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a0e:	4631      	mov	r1, r6
 8006a10:	4628      	mov	r0, r5
 8006a12:	47b8      	blx	r7
 8006a14:	3001      	adds	r0, #1
 8006a16:	d1c0      	bne.n	800699a <_printf_float+0x316>
 8006a18:	e68f      	b.n	800673a <_printf_float+0xb6>
 8006a1a:	9a06      	ldr	r2, [sp, #24]
 8006a1c:	464b      	mov	r3, r9
 8006a1e:	4442      	add	r2, r8
 8006a20:	4631      	mov	r1, r6
 8006a22:	4628      	mov	r0, r5
 8006a24:	47b8      	blx	r7
 8006a26:	3001      	adds	r0, #1
 8006a28:	d1c3      	bne.n	80069b2 <_printf_float+0x32e>
 8006a2a:	e686      	b.n	800673a <_printf_float+0xb6>
 8006a2c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006a30:	f1ba 0f01 	cmp.w	sl, #1
 8006a34:	dc01      	bgt.n	8006a3a <_printf_float+0x3b6>
 8006a36:	07db      	lsls	r3, r3, #31
 8006a38:	d536      	bpl.n	8006aa8 <_printf_float+0x424>
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	4642      	mov	r2, r8
 8006a3e:	4631      	mov	r1, r6
 8006a40:	4628      	mov	r0, r5
 8006a42:	47b8      	blx	r7
 8006a44:	3001      	adds	r0, #1
 8006a46:	f43f ae78 	beq.w	800673a <_printf_float+0xb6>
 8006a4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a4e:	4631      	mov	r1, r6
 8006a50:	4628      	mov	r0, r5
 8006a52:	47b8      	blx	r7
 8006a54:	3001      	adds	r0, #1
 8006a56:	f43f ae70 	beq.w	800673a <_printf_float+0xb6>
 8006a5a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006a5e:	2200      	movs	r2, #0
 8006a60:	2300      	movs	r3, #0
 8006a62:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a66:	f7fa f82f 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a6a:	b9c0      	cbnz	r0, 8006a9e <_printf_float+0x41a>
 8006a6c:	4653      	mov	r3, sl
 8006a6e:	f108 0201 	add.w	r2, r8, #1
 8006a72:	4631      	mov	r1, r6
 8006a74:	4628      	mov	r0, r5
 8006a76:	47b8      	blx	r7
 8006a78:	3001      	adds	r0, #1
 8006a7a:	d10c      	bne.n	8006a96 <_printf_float+0x412>
 8006a7c:	e65d      	b.n	800673a <_printf_float+0xb6>
 8006a7e:	2301      	movs	r3, #1
 8006a80:	465a      	mov	r2, fp
 8006a82:	4631      	mov	r1, r6
 8006a84:	4628      	mov	r0, r5
 8006a86:	47b8      	blx	r7
 8006a88:	3001      	adds	r0, #1
 8006a8a:	f43f ae56 	beq.w	800673a <_printf_float+0xb6>
 8006a8e:	f108 0801 	add.w	r8, r8, #1
 8006a92:	45d0      	cmp	r8, sl
 8006a94:	dbf3      	blt.n	8006a7e <_printf_float+0x3fa>
 8006a96:	464b      	mov	r3, r9
 8006a98:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006a9c:	e6df      	b.n	800685e <_printf_float+0x1da>
 8006a9e:	f04f 0800 	mov.w	r8, #0
 8006aa2:	f104 0b1a 	add.w	fp, r4, #26
 8006aa6:	e7f4      	b.n	8006a92 <_printf_float+0x40e>
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	4642      	mov	r2, r8
 8006aac:	e7e1      	b.n	8006a72 <_printf_float+0x3ee>
 8006aae:	2301      	movs	r3, #1
 8006ab0:	464a      	mov	r2, r9
 8006ab2:	4631      	mov	r1, r6
 8006ab4:	4628      	mov	r0, r5
 8006ab6:	47b8      	blx	r7
 8006ab8:	3001      	adds	r0, #1
 8006aba:	f43f ae3e 	beq.w	800673a <_printf_float+0xb6>
 8006abe:	f108 0801 	add.w	r8, r8, #1
 8006ac2:	68e3      	ldr	r3, [r4, #12]
 8006ac4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006ac6:	1a5b      	subs	r3, r3, r1
 8006ac8:	4543      	cmp	r3, r8
 8006aca:	dcf0      	bgt.n	8006aae <_printf_float+0x42a>
 8006acc:	e6fc      	b.n	80068c8 <_printf_float+0x244>
 8006ace:	f04f 0800 	mov.w	r8, #0
 8006ad2:	f104 0919 	add.w	r9, r4, #25
 8006ad6:	e7f4      	b.n	8006ac2 <_printf_float+0x43e>

08006ad8 <_printf_common>:
 8006ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006adc:	4616      	mov	r6, r2
 8006ade:	4698      	mov	r8, r3
 8006ae0:	688a      	ldr	r2, [r1, #8]
 8006ae2:	690b      	ldr	r3, [r1, #16]
 8006ae4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	bfb8      	it	lt
 8006aec:	4613      	movlt	r3, r2
 8006aee:	6033      	str	r3, [r6, #0]
 8006af0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006af4:	4607      	mov	r7, r0
 8006af6:	460c      	mov	r4, r1
 8006af8:	b10a      	cbz	r2, 8006afe <_printf_common+0x26>
 8006afa:	3301      	adds	r3, #1
 8006afc:	6033      	str	r3, [r6, #0]
 8006afe:	6823      	ldr	r3, [r4, #0]
 8006b00:	0699      	lsls	r1, r3, #26
 8006b02:	bf42      	ittt	mi
 8006b04:	6833      	ldrmi	r3, [r6, #0]
 8006b06:	3302      	addmi	r3, #2
 8006b08:	6033      	strmi	r3, [r6, #0]
 8006b0a:	6825      	ldr	r5, [r4, #0]
 8006b0c:	f015 0506 	ands.w	r5, r5, #6
 8006b10:	d106      	bne.n	8006b20 <_printf_common+0x48>
 8006b12:	f104 0a19 	add.w	sl, r4, #25
 8006b16:	68e3      	ldr	r3, [r4, #12]
 8006b18:	6832      	ldr	r2, [r6, #0]
 8006b1a:	1a9b      	subs	r3, r3, r2
 8006b1c:	42ab      	cmp	r3, r5
 8006b1e:	dc26      	bgt.n	8006b6e <_printf_common+0x96>
 8006b20:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006b24:	6822      	ldr	r2, [r4, #0]
 8006b26:	3b00      	subs	r3, #0
 8006b28:	bf18      	it	ne
 8006b2a:	2301      	movne	r3, #1
 8006b2c:	0692      	lsls	r2, r2, #26
 8006b2e:	d42b      	bmi.n	8006b88 <_printf_common+0xb0>
 8006b30:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006b34:	4641      	mov	r1, r8
 8006b36:	4638      	mov	r0, r7
 8006b38:	47c8      	blx	r9
 8006b3a:	3001      	adds	r0, #1
 8006b3c:	d01e      	beq.n	8006b7c <_printf_common+0xa4>
 8006b3e:	6823      	ldr	r3, [r4, #0]
 8006b40:	6922      	ldr	r2, [r4, #16]
 8006b42:	f003 0306 	and.w	r3, r3, #6
 8006b46:	2b04      	cmp	r3, #4
 8006b48:	bf02      	ittt	eq
 8006b4a:	68e5      	ldreq	r5, [r4, #12]
 8006b4c:	6833      	ldreq	r3, [r6, #0]
 8006b4e:	1aed      	subeq	r5, r5, r3
 8006b50:	68a3      	ldr	r3, [r4, #8]
 8006b52:	bf0c      	ite	eq
 8006b54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b58:	2500      	movne	r5, #0
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	bfc4      	itt	gt
 8006b5e:	1a9b      	subgt	r3, r3, r2
 8006b60:	18ed      	addgt	r5, r5, r3
 8006b62:	2600      	movs	r6, #0
 8006b64:	341a      	adds	r4, #26
 8006b66:	42b5      	cmp	r5, r6
 8006b68:	d11a      	bne.n	8006ba0 <_printf_common+0xc8>
 8006b6a:	2000      	movs	r0, #0
 8006b6c:	e008      	b.n	8006b80 <_printf_common+0xa8>
 8006b6e:	2301      	movs	r3, #1
 8006b70:	4652      	mov	r2, sl
 8006b72:	4641      	mov	r1, r8
 8006b74:	4638      	mov	r0, r7
 8006b76:	47c8      	blx	r9
 8006b78:	3001      	adds	r0, #1
 8006b7a:	d103      	bne.n	8006b84 <_printf_common+0xac>
 8006b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b84:	3501      	adds	r5, #1
 8006b86:	e7c6      	b.n	8006b16 <_printf_common+0x3e>
 8006b88:	18e1      	adds	r1, r4, r3
 8006b8a:	1c5a      	adds	r2, r3, #1
 8006b8c:	2030      	movs	r0, #48	@ 0x30
 8006b8e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006b92:	4422      	add	r2, r4
 8006b94:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006b98:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006b9c:	3302      	adds	r3, #2
 8006b9e:	e7c7      	b.n	8006b30 <_printf_common+0x58>
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	4622      	mov	r2, r4
 8006ba4:	4641      	mov	r1, r8
 8006ba6:	4638      	mov	r0, r7
 8006ba8:	47c8      	blx	r9
 8006baa:	3001      	adds	r0, #1
 8006bac:	d0e6      	beq.n	8006b7c <_printf_common+0xa4>
 8006bae:	3601      	adds	r6, #1
 8006bb0:	e7d9      	b.n	8006b66 <_printf_common+0x8e>
	...

08006bb4 <_printf_i>:
 8006bb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006bb8:	7e0f      	ldrb	r7, [r1, #24]
 8006bba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006bbc:	2f78      	cmp	r7, #120	@ 0x78
 8006bbe:	4691      	mov	r9, r2
 8006bc0:	4680      	mov	r8, r0
 8006bc2:	460c      	mov	r4, r1
 8006bc4:	469a      	mov	sl, r3
 8006bc6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006bca:	d807      	bhi.n	8006bdc <_printf_i+0x28>
 8006bcc:	2f62      	cmp	r7, #98	@ 0x62
 8006bce:	d80a      	bhi.n	8006be6 <_printf_i+0x32>
 8006bd0:	2f00      	cmp	r7, #0
 8006bd2:	f000 80d2 	beq.w	8006d7a <_printf_i+0x1c6>
 8006bd6:	2f58      	cmp	r7, #88	@ 0x58
 8006bd8:	f000 80b9 	beq.w	8006d4e <_printf_i+0x19a>
 8006bdc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006be0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006be4:	e03a      	b.n	8006c5c <_printf_i+0xa8>
 8006be6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006bea:	2b15      	cmp	r3, #21
 8006bec:	d8f6      	bhi.n	8006bdc <_printf_i+0x28>
 8006bee:	a101      	add	r1, pc, #4	@ (adr r1, 8006bf4 <_printf_i+0x40>)
 8006bf0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006bf4:	08006c4d 	.word	0x08006c4d
 8006bf8:	08006c61 	.word	0x08006c61
 8006bfc:	08006bdd 	.word	0x08006bdd
 8006c00:	08006bdd 	.word	0x08006bdd
 8006c04:	08006bdd 	.word	0x08006bdd
 8006c08:	08006bdd 	.word	0x08006bdd
 8006c0c:	08006c61 	.word	0x08006c61
 8006c10:	08006bdd 	.word	0x08006bdd
 8006c14:	08006bdd 	.word	0x08006bdd
 8006c18:	08006bdd 	.word	0x08006bdd
 8006c1c:	08006bdd 	.word	0x08006bdd
 8006c20:	08006d61 	.word	0x08006d61
 8006c24:	08006c8b 	.word	0x08006c8b
 8006c28:	08006d1b 	.word	0x08006d1b
 8006c2c:	08006bdd 	.word	0x08006bdd
 8006c30:	08006bdd 	.word	0x08006bdd
 8006c34:	08006d83 	.word	0x08006d83
 8006c38:	08006bdd 	.word	0x08006bdd
 8006c3c:	08006c8b 	.word	0x08006c8b
 8006c40:	08006bdd 	.word	0x08006bdd
 8006c44:	08006bdd 	.word	0x08006bdd
 8006c48:	08006d23 	.word	0x08006d23
 8006c4c:	6833      	ldr	r3, [r6, #0]
 8006c4e:	1d1a      	adds	r2, r3, #4
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	6032      	str	r2, [r6, #0]
 8006c54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006c58:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e09d      	b.n	8006d9c <_printf_i+0x1e8>
 8006c60:	6833      	ldr	r3, [r6, #0]
 8006c62:	6820      	ldr	r0, [r4, #0]
 8006c64:	1d19      	adds	r1, r3, #4
 8006c66:	6031      	str	r1, [r6, #0]
 8006c68:	0606      	lsls	r6, r0, #24
 8006c6a:	d501      	bpl.n	8006c70 <_printf_i+0xbc>
 8006c6c:	681d      	ldr	r5, [r3, #0]
 8006c6e:	e003      	b.n	8006c78 <_printf_i+0xc4>
 8006c70:	0645      	lsls	r5, r0, #25
 8006c72:	d5fb      	bpl.n	8006c6c <_printf_i+0xb8>
 8006c74:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006c78:	2d00      	cmp	r5, #0
 8006c7a:	da03      	bge.n	8006c84 <_printf_i+0xd0>
 8006c7c:	232d      	movs	r3, #45	@ 0x2d
 8006c7e:	426d      	negs	r5, r5
 8006c80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c84:	4859      	ldr	r0, [pc, #356]	@ (8006dec <_printf_i+0x238>)
 8006c86:	230a      	movs	r3, #10
 8006c88:	e011      	b.n	8006cae <_printf_i+0xfa>
 8006c8a:	6821      	ldr	r1, [r4, #0]
 8006c8c:	6833      	ldr	r3, [r6, #0]
 8006c8e:	0608      	lsls	r0, r1, #24
 8006c90:	f853 5b04 	ldr.w	r5, [r3], #4
 8006c94:	d402      	bmi.n	8006c9c <_printf_i+0xe8>
 8006c96:	0649      	lsls	r1, r1, #25
 8006c98:	bf48      	it	mi
 8006c9a:	b2ad      	uxthmi	r5, r5
 8006c9c:	2f6f      	cmp	r7, #111	@ 0x6f
 8006c9e:	4853      	ldr	r0, [pc, #332]	@ (8006dec <_printf_i+0x238>)
 8006ca0:	6033      	str	r3, [r6, #0]
 8006ca2:	bf14      	ite	ne
 8006ca4:	230a      	movne	r3, #10
 8006ca6:	2308      	moveq	r3, #8
 8006ca8:	2100      	movs	r1, #0
 8006caa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006cae:	6866      	ldr	r6, [r4, #4]
 8006cb0:	60a6      	str	r6, [r4, #8]
 8006cb2:	2e00      	cmp	r6, #0
 8006cb4:	bfa2      	ittt	ge
 8006cb6:	6821      	ldrge	r1, [r4, #0]
 8006cb8:	f021 0104 	bicge.w	r1, r1, #4
 8006cbc:	6021      	strge	r1, [r4, #0]
 8006cbe:	b90d      	cbnz	r5, 8006cc4 <_printf_i+0x110>
 8006cc0:	2e00      	cmp	r6, #0
 8006cc2:	d04b      	beq.n	8006d5c <_printf_i+0x1a8>
 8006cc4:	4616      	mov	r6, r2
 8006cc6:	fbb5 f1f3 	udiv	r1, r5, r3
 8006cca:	fb03 5711 	mls	r7, r3, r1, r5
 8006cce:	5dc7      	ldrb	r7, [r0, r7]
 8006cd0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006cd4:	462f      	mov	r7, r5
 8006cd6:	42bb      	cmp	r3, r7
 8006cd8:	460d      	mov	r5, r1
 8006cda:	d9f4      	bls.n	8006cc6 <_printf_i+0x112>
 8006cdc:	2b08      	cmp	r3, #8
 8006cde:	d10b      	bne.n	8006cf8 <_printf_i+0x144>
 8006ce0:	6823      	ldr	r3, [r4, #0]
 8006ce2:	07df      	lsls	r7, r3, #31
 8006ce4:	d508      	bpl.n	8006cf8 <_printf_i+0x144>
 8006ce6:	6923      	ldr	r3, [r4, #16]
 8006ce8:	6861      	ldr	r1, [r4, #4]
 8006cea:	4299      	cmp	r1, r3
 8006cec:	bfde      	ittt	le
 8006cee:	2330      	movle	r3, #48	@ 0x30
 8006cf0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006cf4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006cf8:	1b92      	subs	r2, r2, r6
 8006cfa:	6122      	str	r2, [r4, #16]
 8006cfc:	f8cd a000 	str.w	sl, [sp]
 8006d00:	464b      	mov	r3, r9
 8006d02:	aa03      	add	r2, sp, #12
 8006d04:	4621      	mov	r1, r4
 8006d06:	4640      	mov	r0, r8
 8006d08:	f7ff fee6 	bl	8006ad8 <_printf_common>
 8006d0c:	3001      	adds	r0, #1
 8006d0e:	d14a      	bne.n	8006da6 <_printf_i+0x1f2>
 8006d10:	f04f 30ff 	mov.w	r0, #4294967295
 8006d14:	b004      	add	sp, #16
 8006d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d1a:	6823      	ldr	r3, [r4, #0]
 8006d1c:	f043 0320 	orr.w	r3, r3, #32
 8006d20:	6023      	str	r3, [r4, #0]
 8006d22:	4833      	ldr	r0, [pc, #204]	@ (8006df0 <_printf_i+0x23c>)
 8006d24:	2778      	movs	r7, #120	@ 0x78
 8006d26:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006d2a:	6823      	ldr	r3, [r4, #0]
 8006d2c:	6831      	ldr	r1, [r6, #0]
 8006d2e:	061f      	lsls	r7, r3, #24
 8006d30:	f851 5b04 	ldr.w	r5, [r1], #4
 8006d34:	d402      	bmi.n	8006d3c <_printf_i+0x188>
 8006d36:	065f      	lsls	r7, r3, #25
 8006d38:	bf48      	it	mi
 8006d3a:	b2ad      	uxthmi	r5, r5
 8006d3c:	6031      	str	r1, [r6, #0]
 8006d3e:	07d9      	lsls	r1, r3, #31
 8006d40:	bf44      	itt	mi
 8006d42:	f043 0320 	orrmi.w	r3, r3, #32
 8006d46:	6023      	strmi	r3, [r4, #0]
 8006d48:	b11d      	cbz	r5, 8006d52 <_printf_i+0x19e>
 8006d4a:	2310      	movs	r3, #16
 8006d4c:	e7ac      	b.n	8006ca8 <_printf_i+0xf4>
 8006d4e:	4827      	ldr	r0, [pc, #156]	@ (8006dec <_printf_i+0x238>)
 8006d50:	e7e9      	b.n	8006d26 <_printf_i+0x172>
 8006d52:	6823      	ldr	r3, [r4, #0]
 8006d54:	f023 0320 	bic.w	r3, r3, #32
 8006d58:	6023      	str	r3, [r4, #0]
 8006d5a:	e7f6      	b.n	8006d4a <_printf_i+0x196>
 8006d5c:	4616      	mov	r6, r2
 8006d5e:	e7bd      	b.n	8006cdc <_printf_i+0x128>
 8006d60:	6833      	ldr	r3, [r6, #0]
 8006d62:	6825      	ldr	r5, [r4, #0]
 8006d64:	6961      	ldr	r1, [r4, #20]
 8006d66:	1d18      	adds	r0, r3, #4
 8006d68:	6030      	str	r0, [r6, #0]
 8006d6a:	062e      	lsls	r6, r5, #24
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	d501      	bpl.n	8006d74 <_printf_i+0x1c0>
 8006d70:	6019      	str	r1, [r3, #0]
 8006d72:	e002      	b.n	8006d7a <_printf_i+0x1c6>
 8006d74:	0668      	lsls	r0, r5, #25
 8006d76:	d5fb      	bpl.n	8006d70 <_printf_i+0x1bc>
 8006d78:	8019      	strh	r1, [r3, #0]
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	6123      	str	r3, [r4, #16]
 8006d7e:	4616      	mov	r6, r2
 8006d80:	e7bc      	b.n	8006cfc <_printf_i+0x148>
 8006d82:	6833      	ldr	r3, [r6, #0]
 8006d84:	1d1a      	adds	r2, r3, #4
 8006d86:	6032      	str	r2, [r6, #0]
 8006d88:	681e      	ldr	r6, [r3, #0]
 8006d8a:	6862      	ldr	r2, [r4, #4]
 8006d8c:	2100      	movs	r1, #0
 8006d8e:	4630      	mov	r0, r6
 8006d90:	f7f9 fa1e 	bl	80001d0 <memchr>
 8006d94:	b108      	cbz	r0, 8006d9a <_printf_i+0x1e6>
 8006d96:	1b80      	subs	r0, r0, r6
 8006d98:	6060      	str	r0, [r4, #4]
 8006d9a:	6863      	ldr	r3, [r4, #4]
 8006d9c:	6123      	str	r3, [r4, #16]
 8006d9e:	2300      	movs	r3, #0
 8006da0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006da4:	e7aa      	b.n	8006cfc <_printf_i+0x148>
 8006da6:	6923      	ldr	r3, [r4, #16]
 8006da8:	4632      	mov	r2, r6
 8006daa:	4649      	mov	r1, r9
 8006dac:	4640      	mov	r0, r8
 8006dae:	47d0      	blx	sl
 8006db0:	3001      	adds	r0, #1
 8006db2:	d0ad      	beq.n	8006d10 <_printf_i+0x15c>
 8006db4:	6823      	ldr	r3, [r4, #0]
 8006db6:	079b      	lsls	r3, r3, #30
 8006db8:	d413      	bmi.n	8006de2 <_printf_i+0x22e>
 8006dba:	68e0      	ldr	r0, [r4, #12]
 8006dbc:	9b03      	ldr	r3, [sp, #12]
 8006dbe:	4298      	cmp	r0, r3
 8006dc0:	bfb8      	it	lt
 8006dc2:	4618      	movlt	r0, r3
 8006dc4:	e7a6      	b.n	8006d14 <_printf_i+0x160>
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	4632      	mov	r2, r6
 8006dca:	4649      	mov	r1, r9
 8006dcc:	4640      	mov	r0, r8
 8006dce:	47d0      	blx	sl
 8006dd0:	3001      	adds	r0, #1
 8006dd2:	d09d      	beq.n	8006d10 <_printf_i+0x15c>
 8006dd4:	3501      	adds	r5, #1
 8006dd6:	68e3      	ldr	r3, [r4, #12]
 8006dd8:	9903      	ldr	r1, [sp, #12]
 8006dda:	1a5b      	subs	r3, r3, r1
 8006ddc:	42ab      	cmp	r3, r5
 8006dde:	dcf2      	bgt.n	8006dc6 <_printf_i+0x212>
 8006de0:	e7eb      	b.n	8006dba <_printf_i+0x206>
 8006de2:	2500      	movs	r5, #0
 8006de4:	f104 0619 	add.w	r6, r4, #25
 8006de8:	e7f5      	b.n	8006dd6 <_printf_i+0x222>
 8006dea:	bf00      	nop
 8006dec:	08008fbe 	.word	0x08008fbe
 8006df0:	08008fcf 	.word	0x08008fcf

08006df4 <std>:
 8006df4:	2300      	movs	r3, #0
 8006df6:	b510      	push	{r4, lr}
 8006df8:	4604      	mov	r4, r0
 8006dfa:	e9c0 3300 	strd	r3, r3, [r0]
 8006dfe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e02:	6083      	str	r3, [r0, #8]
 8006e04:	8181      	strh	r1, [r0, #12]
 8006e06:	6643      	str	r3, [r0, #100]	@ 0x64
 8006e08:	81c2      	strh	r2, [r0, #14]
 8006e0a:	6183      	str	r3, [r0, #24]
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	2208      	movs	r2, #8
 8006e10:	305c      	adds	r0, #92	@ 0x5c
 8006e12:	f000 f8f4 	bl	8006ffe <memset>
 8006e16:	4b0d      	ldr	r3, [pc, #52]	@ (8006e4c <std+0x58>)
 8006e18:	6263      	str	r3, [r4, #36]	@ 0x24
 8006e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8006e50 <std+0x5c>)
 8006e1c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8006e54 <std+0x60>)
 8006e20:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006e22:	4b0d      	ldr	r3, [pc, #52]	@ (8006e58 <std+0x64>)
 8006e24:	6323      	str	r3, [r4, #48]	@ 0x30
 8006e26:	4b0d      	ldr	r3, [pc, #52]	@ (8006e5c <std+0x68>)
 8006e28:	6224      	str	r4, [r4, #32]
 8006e2a:	429c      	cmp	r4, r3
 8006e2c:	d006      	beq.n	8006e3c <std+0x48>
 8006e2e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006e32:	4294      	cmp	r4, r2
 8006e34:	d002      	beq.n	8006e3c <std+0x48>
 8006e36:	33d0      	adds	r3, #208	@ 0xd0
 8006e38:	429c      	cmp	r4, r3
 8006e3a:	d105      	bne.n	8006e48 <std+0x54>
 8006e3c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006e40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e44:	f000 b9ae 	b.w	80071a4 <__retarget_lock_init_recursive>
 8006e48:	bd10      	pop	{r4, pc}
 8006e4a:	bf00      	nop
 8006e4c:	08006f79 	.word	0x08006f79
 8006e50:	08006f9b 	.word	0x08006f9b
 8006e54:	08006fd3 	.word	0x08006fd3
 8006e58:	08006ff7 	.word	0x08006ff7
 8006e5c:	20004458 	.word	0x20004458

08006e60 <stdio_exit_handler>:
 8006e60:	4a02      	ldr	r2, [pc, #8]	@ (8006e6c <stdio_exit_handler+0xc>)
 8006e62:	4903      	ldr	r1, [pc, #12]	@ (8006e70 <stdio_exit_handler+0x10>)
 8006e64:	4803      	ldr	r0, [pc, #12]	@ (8006e74 <stdio_exit_handler+0x14>)
 8006e66:	f000 b869 	b.w	8006f3c <_fwalk_sglue>
 8006e6a:	bf00      	nop
 8006e6c:	20000010 	.word	0x20000010
 8006e70:	0800886d 	.word	0x0800886d
 8006e74:	20000020 	.word	0x20000020

08006e78 <cleanup_stdio>:
 8006e78:	6841      	ldr	r1, [r0, #4]
 8006e7a:	4b0c      	ldr	r3, [pc, #48]	@ (8006eac <cleanup_stdio+0x34>)
 8006e7c:	4299      	cmp	r1, r3
 8006e7e:	b510      	push	{r4, lr}
 8006e80:	4604      	mov	r4, r0
 8006e82:	d001      	beq.n	8006e88 <cleanup_stdio+0x10>
 8006e84:	f001 fcf2 	bl	800886c <_fflush_r>
 8006e88:	68a1      	ldr	r1, [r4, #8]
 8006e8a:	4b09      	ldr	r3, [pc, #36]	@ (8006eb0 <cleanup_stdio+0x38>)
 8006e8c:	4299      	cmp	r1, r3
 8006e8e:	d002      	beq.n	8006e96 <cleanup_stdio+0x1e>
 8006e90:	4620      	mov	r0, r4
 8006e92:	f001 fceb 	bl	800886c <_fflush_r>
 8006e96:	68e1      	ldr	r1, [r4, #12]
 8006e98:	4b06      	ldr	r3, [pc, #24]	@ (8006eb4 <cleanup_stdio+0x3c>)
 8006e9a:	4299      	cmp	r1, r3
 8006e9c:	d004      	beq.n	8006ea8 <cleanup_stdio+0x30>
 8006e9e:	4620      	mov	r0, r4
 8006ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ea4:	f001 bce2 	b.w	800886c <_fflush_r>
 8006ea8:	bd10      	pop	{r4, pc}
 8006eaa:	bf00      	nop
 8006eac:	20004458 	.word	0x20004458
 8006eb0:	200044c0 	.word	0x200044c0
 8006eb4:	20004528 	.word	0x20004528

08006eb8 <global_stdio_init.part.0>:
 8006eb8:	b510      	push	{r4, lr}
 8006eba:	4b0b      	ldr	r3, [pc, #44]	@ (8006ee8 <global_stdio_init.part.0+0x30>)
 8006ebc:	4c0b      	ldr	r4, [pc, #44]	@ (8006eec <global_stdio_init.part.0+0x34>)
 8006ebe:	4a0c      	ldr	r2, [pc, #48]	@ (8006ef0 <global_stdio_init.part.0+0x38>)
 8006ec0:	601a      	str	r2, [r3, #0]
 8006ec2:	4620      	mov	r0, r4
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	2104      	movs	r1, #4
 8006ec8:	f7ff ff94 	bl	8006df4 <std>
 8006ecc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	2109      	movs	r1, #9
 8006ed4:	f7ff ff8e 	bl	8006df4 <std>
 8006ed8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006edc:	2202      	movs	r2, #2
 8006ede:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ee2:	2112      	movs	r1, #18
 8006ee4:	f7ff bf86 	b.w	8006df4 <std>
 8006ee8:	20004590 	.word	0x20004590
 8006eec:	20004458 	.word	0x20004458
 8006ef0:	08006e61 	.word	0x08006e61

08006ef4 <__sfp_lock_acquire>:
 8006ef4:	4801      	ldr	r0, [pc, #4]	@ (8006efc <__sfp_lock_acquire+0x8>)
 8006ef6:	f000 b956 	b.w	80071a6 <__retarget_lock_acquire_recursive>
 8006efa:	bf00      	nop
 8006efc:	20004599 	.word	0x20004599

08006f00 <__sfp_lock_release>:
 8006f00:	4801      	ldr	r0, [pc, #4]	@ (8006f08 <__sfp_lock_release+0x8>)
 8006f02:	f000 b951 	b.w	80071a8 <__retarget_lock_release_recursive>
 8006f06:	bf00      	nop
 8006f08:	20004599 	.word	0x20004599

08006f0c <__sinit>:
 8006f0c:	b510      	push	{r4, lr}
 8006f0e:	4604      	mov	r4, r0
 8006f10:	f7ff fff0 	bl	8006ef4 <__sfp_lock_acquire>
 8006f14:	6a23      	ldr	r3, [r4, #32]
 8006f16:	b11b      	cbz	r3, 8006f20 <__sinit+0x14>
 8006f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f1c:	f7ff bff0 	b.w	8006f00 <__sfp_lock_release>
 8006f20:	4b04      	ldr	r3, [pc, #16]	@ (8006f34 <__sinit+0x28>)
 8006f22:	6223      	str	r3, [r4, #32]
 8006f24:	4b04      	ldr	r3, [pc, #16]	@ (8006f38 <__sinit+0x2c>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d1f5      	bne.n	8006f18 <__sinit+0xc>
 8006f2c:	f7ff ffc4 	bl	8006eb8 <global_stdio_init.part.0>
 8006f30:	e7f2      	b.n	8006f18 <__sinit+0xc>
 8006f32:	bf00      	nop
 8006f34:	08006e79 	.word	0x08006e79
 8006f38:	20004590 	.word	0x20004590

08006f3c <_fwalk_sglue>:
 8006f3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f40:	4607      	mov	r7, r0
 8006f42:	4688      	mov	r8, r1
 8006f44:	4614      	mov	r4, r2
 8006f46:	2600      	movs	r6, #0
 8006f48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f4c:	f1b9 0901 	subs.w	r9, r9, #1
 8006f50:	d505      	bpl.n	8006f5e <_fwalk_sglue+0x22>
 8006f52:	6824      	ldr	r4, [r4, #0]
 8006f54:	2c00      	cmp	r4, #0
 8006f56:	d1f7      	bne.n	8006f48 <_fwalk_sglue+0xc>
 8006f58:	4630      	mov	r0, r6
 8006f5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f5e:	89ab      	ldrh	r3, [r5, #12]
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d907      	bls.n	8006f74 <_fwalk_sglue+0x38>
 8006f64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f68:	3301      	adds	r3, #1
 8006f6a:	d003      	beq.n	8006f74 <_fwalk_sglue+0x38>
 8006f6c:	4629      	mov	r1, r5
 8006f6e:	4638      	mov	r0, r7
 8006f70:	47c0      	blx	r8
 8006f72:	4306      	orrs	r6, r0
 8006f74:	3568      	adds	r5, #104	@ 0x68
 8006f76:	e7e9      	b.n	8006f4c <_fwalk_sglue+0x10>

08006f78 <__sread>:
 8006f78:	b510      	push	{r4, lr}
 8006f7a:	460c      	mov	r4, r1
 8006f7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f80:	f000 f8c2 	bl	8007108 <_read_r>
 8006f84:	2800      	cmp	r0, #0
 8006f86:	bfab      	itete	ge
 8006f88:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006f8a:	89a3      	ldrhlt	r3, [r4, #12]
 8006f8c:	181b      	addge	r3, r3, r0
 8006f8e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006f92:	bfac      	ite	ge
 8006f94:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006f96:	81a3      	strhlt	r3, [r4, #12]
 8006f98:	bd10      	pop	{r4, pc}

08006f9a <__swrite>:
 8006f9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f9e:	461f      	mov	r7, r3
 8006fa0:	898b      	ldrh	r3, [r1, #12]
 8006fa2:	05db      	lsls	r3, r3, #23
 8006fa4:	4605      	mov	r5, r0
 8006fa6:	460c      	mov	r4, r1
 8006fa8:	4616      	mov	r6, r2
 8006faa:	d505      	bpl.n	8006fb8 <__swrite+0x1e>
 8006fac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fb0:	2302      	movs	r3, #2
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	f000 f896 	bl	80070e4 <_lseek_r>
 8006fb8:	89a3      	ldrh	r3, [r4, #12]
 8006fba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fbe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006fc2:	81a3      	strh	r3, [r4, #12]
 8006fc4:	4632      	mov	r2, r6
 8006fc6:	463b      	mov	r3, r7
 8006fc8:	4628      	mov	r0, r5
 8006fca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fce:	f000 b8ad 	b.w	800712c <_write_r>

08006fd2 <__sseek>:
 8006fd2:	b510      	push	{r4, lr}
 8006fd4:	460c      	mov	r4, r1
 8006fd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fda:	f000 f883 	bl	80070e4 <_lseek_r>
 8006fde:	1c43      	adds	r3, r0, #1
 8006fe0:	89a3      	ldrh	r3, [r4, #12]
 8006fe2:	bf15      	itete	ne
 8006fe4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006fe6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006fea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006fee:	81a3      	strheq	r3, [r4, #12]
 8006ff0:	bf18      	it	ne
 8006ff2:	81a3      	strhne	r3, [r4, #12]
 8006ff4:	bd10      	pop	{r4, pc}

08006ff6 <__sclose>:
 8006ff6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ffa:	f000 b80d 	b.w	8007018 <_close_r>

08006ffe <memset>:
 8006ffe:	4402      	add	r2, r0
 8007000:	4603      	mov	r3, r0
 8007002:	4293      	cmp	r3, r2
 8007004:	d100      	bne.n	8007008 <memset+0xa>
 8007006:	4770      	bx	lr
 8007008:	f803 1b01 	strb.w	r1, [r3], #1
 800700c:	e7f9      	b.n	8007002 <memset+0x4>
	...

08007010 <_localeconv_r>:
 8007010:	4800      	ldr	r0, [pc, #0]	@ (8007014 <_localeconv_r+0x4>)
 8007012:	4770      	bx	lr
 8007014:	2000015c 	.word	0x2000015c

08007018 <_close_r>:
 8007018:	b538      	push	{r3, r4, r5, lr}
 800701a:	4d06      	ldr	r5, [pc, #24]	@ (8007034 <_close_r+0x1c>)
 800701c:	2300      	movs	r3, #0
 800701e:	4604      	mov	r4, r0
 8007020:	4608      	mov	r0, r1
 8007022:	602b      	str	r3, [r5, #0]
 8007024:	f7fa fd8e 	bl	8001b44 <_close>
 8007028:	1c43      	adds	r3, r0, #1
 800702a:	d102      	bne.n	8007032 <_close_r+0x1a>
 800702c:	682b      	ldr	r3, [r5, #0]
 800702e:	b103      	cbz	r3, 8007032 <_close_r+0x1a>
 8007030:	6023      	str	r3, [r4, #0]
 8007032:	bd38      	pop	{r3, r4, r5, pc}
 8007034:	20004594 	.word	0x20004594

08007038 <_reclaim_reent>:
 8007038:	4b29      	ldr	r3, [pc, #164]	@ (80070e0 <_reclaim_reent+0xa8>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4283      	cmp	r3, r0
 800703e:	b570      	push	{r4, r5, r6, lr}
 8007040:	4604      	mov	r4, r0
 8007042:	d04b      	beq.n	80070dc <_reclaim_reent+0xa4>
 8007044:	69c3      	ldr	r3, [r0, #28]
 8007046:	b1ab      	cbz	r3, 8007074 <_reclaim_reent+0x3c>
 8007048:	68db      	ldr	r3, [r3, #12]
 800704a:	b16b      	cbz	r3, 8007068 <_reclaim_reent+0x30>
 800704c:	2500      	movs	r5, #0
 800704e:	69e3      	ldr	r3, [r4, #28]
 8007050:	68db      	ldr	r3, [r3, #12]
 8007052:	5959      	ldr	r1, [r3, r5]
 8007054:	2900      	cmp	r1, #0
 8007056:	d13b      	bne.n	80070d0 <_reclaim_reent+0x98>
 8007058:	3504      	adds	r5, #4
 800705a:	2d80      	cmp	r5, #128	@ 0x80
 800705c:	d1f7      	bne.n	800704e <_reclaim_reent+0x16>
 800705e:	69e3      	ldr	r3, [r4, #28]
 8007060:	4620      	mov	r0, r4
 8007062:	68d9      	ldr	r1, [r3, #12]
 8007064:	f000 fefc 	bl	8007e60 <_free_r>
 8007068:	69e3      	ldr	r3, [r4, #28]
 800706a:	6819      	ldr	r1, [r3, #0]
 800706c:	b111      	cbz	r1, 8007074 <_reclaim_reent+0x3c>
 800706e:	4620      	mov	r0, r4
 8007070:	f000 fef6 	bl	8007e60 <_free_r>
 8007074:	6961      	ldr	r1, [r4, #20]
 8007076:	b111      	cbz	r1, 800707e <_reclaim_reent+0x46>
 8007078:	4620      	mov	r0, r4
 800707a:	f000 fef1 	bl	8007e60 <_free_r>
 800707e:	69e1      	ldr	r1, [r4, #28]
 8007080:	b111      	cbz	r1, 8007088 <_reclaim_reent+0x50>
 8007082:	4620      	mov	r0, r4
 8007084:	f000 feec 	bl	8007e60 <_free_r>
 8007088:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800708a:	b111      	cbz	r1, 8007092 <_reclaim_reent+0x5a>
 800708c:	4620      	mov	r0, r4
 800708e:	f000 fee7 	bl	8007e60 <_free_r>
 8007092:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007094:	b111      	cbz	r1, 800709c <_reclaim_reent+0x64>
 8007096:	4620      	mov	r0, r4
 8007098:	f000 fee2 	bl	8007e60 <_free_r>
 800709c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800709e:	b111      	cbz	r1, 80070a6 <_reclaim_reent+0x6e>
 80070a0:	4620      	mov	r0, r4
 80070a2:	f000 fedd 	bl	8007e60 <_free_r>
 80070a6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80070a8:	b111      	cbz	r1, 80070b0 <_reclaim_reent+0x78>
 80070aa:	4620      	mov	r0, r4
 80070ac:	f000 fed8 	bl	8007e60 <_free_r>
 80070b0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80070b2:	b111      	cbz	r1, 80070ba <_reclaim_reent+0x82>
 80070b4:	4620      	mov	r0, r4
 80070b6:	f000 fed3 	bl	8007e60 <_free_r>
 80070ba:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80070bc:	b111      	cbz	r1, 80070c4 <_reclaim_reent+0x8c>
 80070be:	4620      	mov	r0, r4
 80070c0:	f000 fece 	bl	8007e60 <_free_r>
 80070c4:	6a23      	ldr	r3, [r4, #32]
 80070c6:	b14b      	cbz	r3, 80070dc <_reclaim_reent+0xa4>
 80070c8:	4620      	mov	r0, r4
 80070ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80070ce:	4718      	bx	r3
 80070d0:	680e      	ldr	r6, [r1, #0]
 80070d2:	4620      	mov	r0, r4
 80070d4:	f000 fec4 	bl	8007e60 <_free_r>
 80070d8:	4631      	mov	r1, r6
 80070da:	e7bb      	b.n	8007054 <_reclaim_reent+0x1c>
 80070dc:	bd70      	pop	{r4, r5, r6, pc}
 80070de:	bf00      	nop
 80070e0:	2000001c 	.word	0x2000001c

080070e4 <_lseek_r>:
 80070e4:	b538      	push	{r3, r4, r5, lr}
 80070e6:	4d07      	ldr	r5, [pc, #28]	@ (8007104 <_lseek_r+0x20>)
 80070e8:	4604      	mov	r4, r0
 80070ea:	4608      	mov	r0, r1
 80070ec:	4611      	mov	r1, r2
 80070ee:	2200      	movs	r2, #0
 80070f0:	602a      	str	r2, [r5, #0]
 80070f2:	461a      	mov	r2, r3
 80070f4:	f7fa fd4d 	bl	8001b92 <_lseek>
 80070f8:	1c43      	adds	r3, r0, #1
 80070fa:	d102      	bne.n	8007102 <_lseek_r+0x1e>
 80070fc:	682b      	ldr	r3, [r5, #0]
 80070fe:	b103      	cbz	r3, 8007102 <_lseek_r+0x1e>
 8007100:	6023      	str	r3, [r4, #0]
 8007102:	bd38      	pop	{r3, r4, r5, pc}
 8007104:	20004594 	.word	0x20004594

08007108 <_read_r>:
 8007108:	b538      	push	{r3, r4, r5, lr}
 800710a:	4d07      	ldr	r5, [pc, #28]	@ (8007128 <_read_r+0x20>)
 800710c:	4604      	mov	r4, r0
 800710e:	4608      	mov	r0, r1
 8007110:	4611      	mov	r1, r2
 8007112:	2200      	movs	r2, #0
 8007114:	602a      	str	r2, [r5, #0]
 8007116:	461a      	mov	r2, r3
 8007118:	f7fa fcdb 	bl	8001ad2 <_read>
 800711c:	1c43      	adds	r3, r0, #1
 800711e:	d102      	bne.n	8007126 <_read_r+0x1e>
 8007120:	682b      	ldr	r3, [r5, #0]
 8007122:	b103      	cbz	r3, 8007126 <_read_r+0x1e>
 8007124:	6023      	str	r3, [r4, #0]
 8007126:	bd38      	pop	{r3, r4, r5, pc}
 8007128:	20004594 	.word	0x20004594

0800712c <_write_r>:
 800712c:	b538      	push	{r3, r4, r5, lr}
 800712e:	4d07      	ldr	r5, [pc, #28]	@ (800714c <_write_r+0x20>)
 8007130:	4604      	mov	r4, r0
 8007132:	4608      	mov	r0, r1
 8007134:	4611      	mov	r1, r2
 8007136:	2200      	movs	r2, #0
 8007138:	602a      	str	r2, [r5, #0]
 800713a:	461a      	mov	r2, r3
 800713c:	f7fa fce6 	bl	8001b0c <_write>
 8007140:	1c43      	adds	r3, r0, #1
 8007142:	d102      	bne.n	800714a <_write_r+0x1e>
 8007144:	682b      	ldr	r3, [r5, #0]
 8007146:	b103      	cbz	r3, 800714a <_write_r+0x1e>
 8007148:	6023      	str	r3, [r4, #0]
 800714a:	bd38      	pop	{r3, r4, r5, pc}
 800714c:	20004594 	.word	0x20004594

08007150 <__errno>:
 8007150:	4b01      	ldr	r3, [pc, #4]	@ (8007158 <__errno+0x8>)
 8007152:	6818      	ldr	r0, [r3, #0]
 8007154:	4770      	bx	lr
 8007156:	bf00      	nop
 8007158:	2000001c 	.word	0x2000001c

0800715c <__libc_init_array>:
 800715c:	b570      	push	{r4, r5, r6, lr}
 800715e:	4d0d      	ldr	r5, [pc, #52]	@ (8007194 <__libc_init_array+0x38>)
 8007160:	4c0d      	ldr	r4, [pc, #52]	@ (8007198 <__libc_init_array+0x3c>)
 8007162:	1b64      	subs	r4, r4, r5
 8007164:	10a4      	asrs	r4, r4, #2
 8007166:	2600      	movs	r6, #0
 8007168:	42a6      	cmp	r6, r4
 800716a:	d109      	bne.n	8007180 <__libc_init_array+0x24>
 800716c:	4d0b      	ldr	r5, [pc, #44]	@ (800719c <__libc_init_array+0x40>)
 800716e:	4c0c      	ldr	r4, [pc, #48]	@ (80071a0 <__libc_init_array+0x44>)
 8007170:	f001 febc 	bl	8008eec <_init>
 8007174:	1b64      	subs	r4, r4, r5
 8007176:	10a4      	asrs	r4, r4, #2
 8007178:	2600      	movs	r6, #0
 800717a:	42a6      	cmp	r6, r4
 800717c:	d105      	bne.n	800718a <__libc_init_array+0x2e>
 800717e:	bd70      	pop	{r4, r5, r6, pc}
 8007180:	f855 3b04 	ldr.w	r3, [r5], #4
 8007184:	4798      	blx	r3
 8007186:	3601      	adds	r6, #1
 8007188:	e7ee      	b.n	8007168 <__libc_init_array+0xc>
 800718a:	f855 3b04 	ldr.w	r3, [r5], #4
 800718e:	4798      	blx	r3
 8007190:	3601      	adds	r6, #1
 8007192:	e7f2      	b.n	800717a <__libc_init_array+0x1e>
 8007194:	08009328 	.word	0x08009328
 8007198:	08009328 	.word	0x08009328
 800719c:	08009328 	.word	0x08009328
 80071a0:	0800932c 	.word	0x0800932c

080071a4 <__retarget_lock_init_recursive>:
 80071a4:	4770      	bx	lr

080071a6 <__retarget_lock_acquire_recursive>:
 80071a6:	4770      	bx	lr

080071a8 <__retarget_lock_release_recursive>:
 80071a8:	4770      	bx	lr

080071aa <memcpy>:
 80071aa:	440a      	add	r2, r1
 80071ac:	4291      	cmp	r1, r2
 80071ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80071b2:	d100      	bne.n	80071b6 <memcpy+0xc>
 80071b4:	4770      	bx	lr
 80071b6:	b510      	push	{r4, lr}
 80071b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071c0:	4291      	cmp	r1, r2
 80071c2:	d1f9      	bne.n	80071b8 <memcpy+0xe>
 80071c4:	bd10      	pop	{r4, pc}

080071c6 <quorem>:
 80071c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ca:	6903      	ldr	r3, [r0, #16]
 80071cc:	690c      	ldr	r4, [r1, #16]
 80071ce:	42a3      	cmp	r3, r4
 80071d0:	4607      	mov	r7, r0
 80071d2:	db7e      	blt.n	80072d2 <quorem+0x10c>
 80071d4:	3c01      	subs	r4, #1
 80071d6:	f101 0814 	add.w	r8, r1, #20
 80071da:	00a3      	lsls	r3, r4, #2
 80071dc:	f100 0514 	add.w	r5, r0, #20
 80071e0:	9300      	str	r3, [sp, #0]
 80071e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80071e6:	9301      	str	r3, [sp, #4]
 80071e8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80071ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80071f0:	3301      	adds	r3, #1
 80071f2:	429a      	cmp	r2, r3
 80071f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80071f8:	fbb2 f6f3 	udiv	r6, r2, r3
 80071fc:	d32e      	bcc.n	800725c <quorem+0x96>
 80071fe:	f04f 0a00 	mov.w	sl, #0
 8007202:	46c4      	mov	ip, r8
 8007204:	46ae      	mov	lr, r5
 8007206:	46d3      	mov	fp, sl
 8007208:	f85c 3b04 	ldr.w	r3, [ip], #4
 800720c:	b298      	uxth	r0, r3
 800720e:	fb06 a000 	mla	r0, r6, r0, sl
 8007212:	0c02      	lsrs	r2, r0, #16
 8007214:	0c1b      	lsrs	r3, r3, #16
 8007216:	fb06 2303 	mla	r3, r6, r3, r2
 800721a:	f8de 2000 	ldr.w	r2, [lr]
 800721e:	b280      	uxth	r0, r0
 8007220:	b292      	uxth	r2, r2
 8007222:	1a12      	subs	r2, r2, r0
 8007224:	445a      	add	r2, fp
 8007226:	f8de 0000 	ldr.w	r0, [lr]
 800722a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800722e:	b29b      	uxth	r3, r3
 8007230:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007234:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007238:	b292      	uxth	r2, r2
 800723a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800723e:	45e1      	cmp	r9, ip
 8007240:	f84e 2b04 	str.w	r2, [lr], #4
 8007244:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007248:	d2de      	bcs.n	8007208 <quorem+0x42>
 800724a:	9b00      	ldr	r3, [sp, #0]
 800724c:	58eb      	ldr	r3, [r5, r3]
 800724e:	b92b      	cbnz	r3, 800725c <quorem+0x96>
 8007250:	9b01      	ldr	r3, [sp, #4]
 8007252:	3b04      	subs	r3, #4
 8007254:	429d      	cmp	r5, r3
 8007256:	461a      	mov	r2, r3
 8007258:	d32f      	bcc.n	80072ba <quorem+0xf4>
 800725a:	613c      	str	r4, [r7, #16]
 800725c:	4638      	mov	r0, r7
 800725e:	f001 f979 	bl	8008554 <__mcmp>
 8007262:	2800      	cmp	r0, #0
 8007264:	db25      	blt.n	80072b2 <quorem+0xec>
 8007266:	4629      	mov	r1, r5
 8007268:	2000      	movs	r0, #0
 800726a:	f858 2b04 	ldr.w	r2, [r8], #4
 800726e:	f8d1 c000 	ldr.w	ip, [r1]
 8007272:	fa1f fe82 	uxth.w	lr, r2
 8007276:	fa1f f38c 	uxth.w	r3, ip
 800727a:	eba3 030e 	sub.w	r3, r3, lr
 800727e:	4403      	add	r3, r0
 8007280:	0c12      	lsrs	r2, r2, #16
 8007282:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007286:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800728a:	b29b      	uxth	r3, r3
 800728c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007290:	45c1      	cmp	r9, r8
 8007292:	f841 3b04 	str.w	r3, [r1], #4
 8007296:	ea4f 4022 	mov.w	r0, r2, asr #16
 800729a:	d2e6      	bcs.n	800726a <quorem+0xa4>
 800729c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80072a0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80072a4:	b922      	cbnz	r2, 80072b0 <quorem+0xea>
 80072a6:	3b04      	subs	r3, #4
 80072a8:	429d      	cmp	r5, r3
 80072aa:	461a      	mov	r2, r3
 80072ac:	d30b      	bcc.n	80072c6 <quorem+0x100>
 80072ae:	613c      	str	r4, [r7, #16]
 80072b0:	3601      	adds	r6, #1
 80072b2:	4630      	mov	r0, r6
 80072b4:	b003      	add	sp, #12
 80072b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072ba:	6812      	ldr	r2, [r2, #0]
 80072bc:	3b04      	subs	r3, #4
 80072be:	2a00      	cmp	r2, #0
 80072c0:	d1cb      	bne.n	800725a <quorem+0x94>
 80072c2:	3c01      	subs	r4, #1
 80072c4:	e7c6      	b.n	8007254 <quorem+0x8e>
 80072c6:	6812      	ldr	r2, [r2, #0]
 80072c8:	3b04      	subs	r3, #4
 80072ca:	2a00      	cmp	r2, #0
 80072cc:	d1ef      	bne.n	80072ae <quorem+0xe8>
 80072ce:	3c01      	subs	r4, #1
 80072d0:	e7ea      	b.n	80072a8 <quorem+0xe2>
 80072d2:	2000      	movs	r0, #0
 80072d4:	e7ee      	b.n	80072b4 <quorem+0xee>
	...

080072d8 <_dtoa_r>:
 80072d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072dc:	69c7      	ldr	r7, [r0, #28]
 80072de:	b099      	sub	sp, #100	@ 0x64
 80072e0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80072e4:	ec55 4b10 	vmov	r4, r5, d0
 80072e8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80072ea:	9109      	str	r1, [sp, #36]	@ 0x24
 80072ec:	4683      	mov	fp, r0
 80072ee:	920e      	str	r2, [sp, #56]	@ 0x38
 80072f0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80072f2:	b97f      	cbnz	r7, 8007314 <_dtoa_r+0x3c>
 80072f4:	2010      	movs	r0, #16
 80072f6:	f000 fdfd 	bl	8007ef4 <malloc>
 80072fa:	4602      	mov	r2, r0
 80072fc:	f8cb 001c 	str.w	r0, [fp, #28]
 8007300:	b920      	cbnz	r0, 800730c <_dtoa_r+0x34>
 8007302:	4ba7      	ldr	r3, [pc, #668]	@ (80075a0 <_dtoa_r+0x2c8>)
 8007304:	21ef      	movs	r1, #239	@ 0xef
 8007306:	48a7      	ldr	r0, [pc, #668]	@ (80075a4 <_dtoa_r+0x2cc>)
 8007308:	f001 fae8 	bl	80088dc <__assert_func>
 800730c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007310:	6007      	str	r7, [r0, #0]
 8007312:	60c7      	str	r7, [r0, #12]
 8007314:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007318:	6819      	ldr	r1, [r3, #0]
 800731a:	b159      	cbz	r1, 8007334 <_dtoa_r+0x5c>
 800731c:	685a      	ldr	r2, [r3, #4]
 800731e:	604a      	str	r2, [r1, #4]
 8007320:	2301      	movs	r3, #1
 8007322:	4093      	lsls	r3, r2
 8007324:	608b      	str	r3, [r1, #8]
 8007326:	4658      	mov	r0, fp
 8007328:	f000 feda 	bl	80080e0 <_Bfree>
 800732c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007330:	2200      	movs	r2, #0
 8007332:	601a      	str	r2, [r3, #0]
 8007334:	1e2b      	subs	r3, r5, #0
 8007336:	bfb9      	ittee	lt
 8007338:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800733c:	9303      	strlt	r3, [sp, #12]
 800733e:	2300      	movge	r3, #0
 8007340:	6033      	strge	r3, [r6, #0]
 8007342:	9f03      	ldr	r7, [sp, #12]
 8007344:	4b98      	ldr	r3, [pc, #608]	@ (80075a8 <_dtoa_r+0x2d0>)
 8007346:	bfbc      	itt	lt
 8007348:	2201      	movlt	r2, #1
 800734a:	6032      	strlt	r2, [r6, #0]
 800734c:	43bb      	bics	r3, r7
 800734e:	d112      	bne.n	8007376 <_dtoa_r+0x9e>
 8007350:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007352:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007356:	6013      	str	r3, [r2, #0]
 8007358:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800735c:	4323      	orrs	r3, r4
 800735e:	f000 854d 	beq.w	8007dfc <_dtoa_r+0xb24>
 8007362:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007364:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80075bc <_dtoa_r+0x2e4>
 8007368:	2b00      	cmp	r3, #0
 800736a:	f000 854f 	beq.w	8007e0c <_dtoa_r+0xb34>
 800736e:	f10a 0303 	add.w	r3, sl, #3
 8007372:	f000 bd49 	b.w	8007e08 <_dtoa_r+0xb30>
 8007376:	ed9d 7b02 	vldr	d7, [sp, #8]
 800737a:	2200      	movs	r2, #0
 800737c:	ec51 0b17 	vmov	r0, r1, d7
 8007380:	2300      	movs	r3, #0
 8007382:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007386:	f7f9 fb9f 	bl	8000ac8 <__aeabi_dcmpeq>
 800738a:	4680      	mov	r8, r0
 800738c:	b158      	cbz	r0, 80073a6 <_dtoa_r+0xce>
 800738e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007390:	2301      	movs	r3, #1
 8007392:	6013      	str	r3, [r2, #0]
 8007394:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007396:	b113      	cbz	r3, 800739e <_dtoa_r+0xc6>
 8007398:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800739a:	4b84      	ldr	r3, [pc, #528]	@ (80075ac <_dtoa_r+0x2d4>)
 800739c:	6013      	str	r3, [r2, #0]
 800739e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80075c0 <_dtoa_r+0x2e8>
 80073a2:	f000 bd33 	b.w	8007e0c <_dtoa_r+0xb34>
 80073a6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80073aa:	aa16      	add	r2, sp, #88	@ 0x58
 80073ac:	a917      	add	r1, sp, #92	@ 0x5c
 80073ae:	4658      	mov	r0, fp
 80073b0:	f001 f980 	bl	80086b4 <__d2b>
 80073b4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80073b8:	4681      	mov	r9, r0
 80073ba:	2e00      	cmp	r6, #0
 80073bc:	d077      	beq.n	80074ae <_dtoa_r+0x1d6>
 80073be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80073c0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80073c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80073c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80073cc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80073d0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80073d4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80073d8:	4619      	mov	r1, r3
 80073da:	2200      	movs	r2, #0
 80073dc:	4b74      	ldr	r3, [pc, #464]	@ (80075b0 <_dtoa_r+0x2d8>)
 80073de:	f7f8 ff53 	bl	8000288 <__aeabi_dsub>
 80073e2:	a369      	add	r3, pc, #420	@ (adr r3, 8007588 <_dtoa_r+0x2b0>)
 80073e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e8:	f7f9 f906 	bl	80005f8 <__aeabi_dmul>
 80073ec:	a368      	add	r3, pc, #416	@ (adr r3, 8007590 <_dtoa_r+0x2b8>)
 80073ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f2:	f7f8 ff4b 	bl	800028c <__adddf3>
 80073f6:	4604      	mov	r4, r0
 80073f8:	4630      	mov	r0, r6
 80073fa:	460d      	mov	r5, r1
 80073fc:	f7f9 f892 	bl	8000524 <__aeabi_i2d>
 8007400:	a365      	add	r3, pc, #404	@ (adr r3, 8007598 <_dtoa_r+0x2c0>)
 8007402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007406:	f7f9 f8f7 	bl	80005f8 <__aeabi_dmul>
 800740a:	4602      	mov	r2, r0
 800740c:	460b      	mov	r3, r1
 800740e:	4620      	mov	r0, r4
 8007410:	4629      	mov	r1, r5
 8007412:	f7f8 ff3b 	bl	800028c <__adddf3>
 8007416:	4604      	mov	r4, r0
 8007418:	460d      	mov	r5, r1
 800741a:	f7f9 fb9d 	bl	8000b58 <__aeabi_d2iz>
 800741e:	2200      	movs	r2, #0
 8007420:	4607      	mov	r7, r0
 8007422:	2300      	movs	r3, #0
 8007424:	4620      	mov	r0, r4
 8007426:	4629      	mov	r1, r5
 8007428:	f7f9 fb58 	bl	8000adc <__aeabi_dcmplt>
 800742c:	b140      	cbz	r0, 8007440 <_dtoa_r+0x168>
 800742e:	4638      	mov	r0, r7
 8007430:	f7f9 f878 	bl	8000524 <__aeabi_i2d>
 8007434:	4622      	mov	r2, r4
 8007436:	462b      	mov	r3, r5
 8007438:	f7f9 fb46 	bl	8000ac8 <__aeabi_dcmpeq>
 800743c:	b900      	cbnz	r0, 8007440 <_dtoa_r+0x168>
 800743e:	3f01      	subs	r7, #1
 8007440:	2f16      	cmp	r7, #22
 8007442:	d851      	bhi.n	80074e8 <_dtoa_r+0x210>
 8007444:	4b5b      	ldr	r3, [pc, #364]	@ (80075b4 <_dtoa_r+0x2dc>)
 8007446:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800744a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800744e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007452:	f7f9 fb43 	bl	8000adc <__aeabi_dcmplt>
 8007456:	2800      	cmp	r0, #0
 8007458:	d048      	beq.n	80074ec <_dtoa_r+0x214>
 800745a:	3f01      	subs	r7, #1
 800745c:	2300      	movs	r3, #0
 800745e:	9312      	str	r3, [sp, #72]	@ 0x48
 8007460:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007462:	1b9b      	subs	r3, r3, r6
 8007464:	1e5a      	subs	r2, r3, #1
 8007466:	bf44      	itt	mi
 8007468:	f1c3 0801 	rsbmi	r8, r3, #1
 800746c:	2300      	movmi	r3, #0
 800746e:	9208      	str	r2, [sp, #32]
 8007470:	bf54      	ite	pl
 8007472:	f04f 0800 	movpl.w	r8, #0
 8007476:	9308      	strmi	r3, [sp, #32]
 8007478:	2f00      	cmp	r7, #0
 800747a:	db39      	blt.n	80074f0 <_dtoa_r+0x218>
 800747c:	9b08      	ldr	r3, [sp, #32]
 800747e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007480:	443b      	add	r3, r7
 8007482:	9308      	str	r3, [sp, #32]
 8007484:	2300      	movs	r3, #0
 8007486:	930a      	str	r3, [sp, #40]	@ 0x28
 8007488:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800748a:	2b09      	cmp	r3, #9
 800748c:	d864      	bhi.n	8007558 <_dtoa_r+0x280>
 800748e:	2b05      	cmp	r3, #5
 8007490:	bfc4      	itt	gt
 8007492:	3b04      	subgt	r3, #4
 8007494:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007496:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007498:	f1a3 0302 	sub.w	r3, r3, #2
 800749c:	bfcc      	ite	gt
 800749e:	2400      	movgt	r4, #0
 80074a0:	2401      	movle	r4, #1
 80074a2:	2b03      	cmp	r3, #3
 80074a4:	d863      	bhi.n	800756e <_dtoa_r+0x296>
 80074a6:	e8df f003 	tbb	[pc, r3]
 80074aa:	372a      	.short	0x372a
 80074ac:	5535      	.short	0x5535
 80074ae:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80074b2:	441e      	add	r6, r3
 80074b4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80074b8:	2b20      	cmp	r3, #32
 80074ba:	bfc1      	itttt	gt
 80074bc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80074c0:	409f      	lslgt	r7, r3
 80074c2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80074c6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80074ca:	bfd6      	itet	le
 80074cc:	f1c3 0320 	rsble	r3, r3, #32
 80074d0:	ea47 0003 	orrgt.w	r0, r7, r3
 80074d4:	fa04 f003 	lslle.w	r0, r4, r3
 80074d8:	f7f9 f814 	bl	8000504 <__aeabi_ui2d>
 80074dc:	2201      	movs	r2, #1
 80074de:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80074e2:	3e01      	subs	r6, #1
 80074e4:	9214      	str	r2, [sp, #80]	@ 0x50
 80074e6:	e777      	b.n	80073d8 <_dtoa_r+0x100>
 80074e8:	2301      	movs	r3, #1
 80074ea:	e7b8      	b.n	800745e <_dtoa_r+0x186>
 80074ec:	9012      	str	r0, [sp, #72]	@ 0x48
 80074ee:	e7b7      	b.n	8007460 <_dtoa_r+0x188>
 80074f0:	427b      	negs	r3, r7
 80074f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80074f4:	2300      	movs	r3, #0
 80074f6:	eba8 0807 	sub.w	r8, r8, r7
 80074fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80074fc:	e7c4      	b.n	8007488 <_dtoa_r+0x1b0>
 80074fe:	2300      	movs	r3, #0
 8007500:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007502:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007504:	2b00      	cmp	r3, #0
 8007506:	dc35      	bgt.n	8007574 <_dtoa_r+0x29c>
 8007508:	2301      	movs	r3, #1
 800750a:	9300      	str	r3, [sp, #0]
 800750c:	9307      	str	r3, [sp, #28]
 800750e:	461a      	mov	r2, r3
 8007510:	920e      	str	r2, [sp, #56]	@ 0x38
 8007512:	e00b      	b.n	800752c <_dtoa_r+0x254>
 8007514:	2301      	movs	r3, #1
 8007516:	e7f3      	b.n	8007500 <_dtoa_r+0x228>
 8007518:	2300      	movs	r3, #0
 800751a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800751c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800751e:	18fb      	adds	r3, r7, r3
 8007520:	9300      	str	r3, [sp, #0]
 8007522:	3301      	adds	r3, #1
 8007524:	2b01      	cmp	r3, #1
 8007526:	9307      	str	r3, [sp, #28]
 8007528:	bfb8      	it	lt
 800752a:	2301      	movlt	r3, #1
 800752c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007530:	2100      	movs	r1, #0
 8007532:	2204      	movs	r2, #4
 8007534:	f102 0514 	add.w	r5, r2, #20
 8007538:	429d      	cmp	r5, r3
 800753a:	d91f      	bls.n	800757c <_dtoa_r+0x2a4>
 800753c:	6041      	str	r1, [r0, #4]
 800753e:	4658      	mov	r0, fp
 8007540:	f000 fd8e 	bl	8008060 <_Balloc>
 8007544:	4682      	mov	sl, r0
 8007546:	2800      	cmp	r0, #0
 8007548:	d13c      	bne.n	80075c4 <_dtoa_r+0x2ec>
 800754a:	4b1b      	ldr	r3, [pc, #108]	@ (80075b8 <_dtoa_r+0x2e0>)
 800754c:	4602      	mov	r2, r0
 800754e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007552:	e6d8      	b.n	8007306 <_dtoa_r+0x2e>
 8007554:	2301      	movs	r3, #1
 8007556:	e7e0      	b.n	800751a <_dtoa_r+0x242>
 8007558:	2401      	movs	r4, #1
 800755a:	2300      	movs	r3, #0
 800755c:	9309      	str	r3, [sp, #36]	@ 0x24
 800755e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007560:	f04f 33ff 	mov.w	r3, #4294967295
 8007564:	9300      	str	r3, [sp, #0]
 8007566:	9307      	str	r3, [sp, #28]
 8007568:	2200      	movs	r2, #0
 800756a:	2312      	movs	r3, #18
 800756c:	e7d0      	b.n	8007510 <_dtoa_r+0x238>
 800756e:	2301      	movs	r3, #1
 8007570:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007572:	e7f5      	b.n	8007560 <_dtoa_r+0x288>
 8007574:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007576:	9300      	str	r3, [sp, #0]
 8007578:	9307      	str	r3, [sp, #28]
 800757a:	e7d7      	b.n	800752c <_dtoa_r+0x254>
 800757c:	3101      	adds	r1, #1
 800757e:	0052      	lsls	r2, r2, #1
 8007580:	e7d8      	b.n	8007534 <_dtoa_r+0x25c>
 8007582:	bf00      	nop
 8007584:	f3af 8000 	nop.w
 8007588:	636f4361 	.word	0x636f4361
 800758c:	3fd287a7 	.word	0x3fd287a7
 8007590:	8b60c8b3 	.word	0x8b60c8b3
 8007594:	3fc68a28 	.word	0x3fc68a28
 8007598:	509f79fb 	.word	0x509f79fb
 800759c:	3fd34413 	.word	0x3fd34413
 80075a0:	08008fed 	.word	0x08008fed
 80075a4:	08009004 	.word	0x08009004
 80075a8:	7ff00000 	.word	0x7ff00000
 80075ac:	08008fbd 	.word	0x08008fbd
 80075b0:	3ff80000 	.word	0x3ff80000
 80075b4:	08009100 	.word	0x08009100
 80075b8:	0800905c 	.word	0x0800905c
 80075bc:	08008fe9 	.word	0x08008fe9
 80075c0:	08008fbc 	.word	0x08008fbc
 80075c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80075c8:	6018      	str	r0, [r3, #0]
 80075ca:	9b07      	ldr	r3, [sp, #28]
 80075cc:	2b0e      	cmp	r3, #14
 80075ce:	f200 80a4 	bhi.w	800771a <_dtoa_r+0x442>
 80075d2:	2c00      	cmp	r4, #0
 80075d4:	f000 80a1 	beq.w	800771a <_dtoa_r+0x442>
 80075d8:	2f00      	cmp	r7, #0
 80075da:	dd33      	ble.n	8007644 <_dtoa_r+0x36c>
 80075dc:	4bad      	ldr	r3, [pc, #692]	@ (8007894 <_dtoa_r+0x5bc>)
 80075de:	f007 020f 	and.w	r2, r7, #15
 80075e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075e6:	ed93 7b00 	vldr	d7, [r3]
 80075ea:	05f8      	lsls	r0, r7, #23
 80075ec:	ed8d 7b04 	vstr	d7, [sp, #16]
 80075f0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80075f4:	d516      	bpl.n	8007624 <_dtoa_r+0x34c>
 80075f6:	4ba8      	ldr	r3, [pc, #672]	@ (8007898 <_dtoa_r+0x5c0>)
 80075f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80075fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007600:	f7f9 f924 	bl	800084c <__aeabi_ddiv>
 8007604:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007608:	f004 040f 	and.w	r4, r4, #15
 800760c:	2603      	movs	r6, #3
 800760e:	4da2      	ldr	r5, [pc, #648]	@ (8007898 <_dtoa_r+0x5c0>)
 8007610:	b954      	cbnz	r4, 8007628 <_dtoa_r+0x350>
 8007612:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007616:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800761a:	f7f9 f917 	bl	800084c <__aeabi_ddiv>
 800761e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007622:	e028      	b.n	8007676 <_dtoa_r+0x39e>
 8007624:	2602      	movs	r6, #2
 8007626:	e7f2      	b.n	800760e <_dtoa_r+0x336>
 8007628:	07e1      	lsls	r1, r4, #31
 800762a:	d508      	bpl.n	800763e <_dtoa_r+0x366>
 800762c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007630:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007634:	f7f8 ffe0 	bl	80005f8 <__aeabi_dmul>
 8007638:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800763c:	3601      	adds	r6, #1
 800763e:	1064      	asrs	r4, r4, #1
 8007640:	3508      	adds	r5, #8
 8007642:	e7e5      	b.n	8007610 <_dtoa_r+0x338>
 8007644:	f000 80d2 	beq.w	80077ec <_dtoa_r+0x514>
 8007648:	427c      	negs	r4, r7
 800764a:	4b92      	ldr	r3, [pc, #584]	@ (8007894 <_dtoa_r+0x5bc>)
 800764c:	4d92      	ldr	r5, [pc, #584]	@ (8007898 <_dtoa_r+0x5c0>)
 800764e:	f004 020f 	and.w	r2, r4, #15
 8007652:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800765a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800765e:	f7f8 ffcb 	bl	80005f8 <__aeabi_dmul>
 8007662:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007666:	1124      	asrs	r4, r4, #4
 8007668:	2300      	movs	r3, #0
 800766a:	2602      	movs	r6, #2
 800766c:	2c00      	cmp	r4, #0
 800766e:	f040 80b2 	bne.w	80077d6 <_dtoa_r+0x4fe>
 8007672:	2b00      	cmp	r3, #0
 8007674:	d1d3      	bne.n	800761e <_dtoa_r+0x346>
 8007676:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007678:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800767c:	2b00      	cmp	r3, #0
 800767e:	f000 80b7 	beq.w	80077f0 <_dtoa_r+0x518>
 8007682:	4b86      	ldr	r3, [pc, #536]	@ (800789c <_dtoa_r+0x5c4>)
 8007684:	2200      	movs	r2, #0
 8007686:	4620      	mov	r0, r4
 8007688:	4629      	mov	r1, r5
 800768a:	f7f9 fa27 	bl	8000adc <__aeabi_dcmplt>
 800768e:	2800      	cmp	r0, #0
 8007690:	f000 80ae 	beq.w	80077f0 <_dtoa_r+0x518>
 8007694:	9b07      	ldr	r3, [sp, #28]
 8007696:	2b00      	cmp	r3, #0
 8007698:	f000 80aa 	beq.w	80077f0 <_dtoa_r+0x518>
 800769c:	9b00      	ldr	r3, [sp, #0]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	dd37      	ble.n	8007712 <_dtoa_r+0x43a>
 80076a2:	1e7b      	subs	r3, r7, #1
 80076a4:	9304      	str	r3, [sp, #16]
 80076a6:	4620      	mov	r0, r4
 80076a8:	4b7d      	ldr	r3, [pc, #500]	@ (80078a0 <_dtoa_r+0x5c8>)
 80076aa:	2200      	movs	r2, #0
 80076ac:	4629      	mov	r1, r5
 80076ae:	f7f8 ffa3 	bl	80005f8 <__aeabi_dmul>
 80076b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076b6:	9c00      	ldr	r4, [sp, #0]
 80076b8:	3601      	adds	r6, #1
 80076ba:	4630      	mov	r0, r6
 80076bc:	f7f8 ff32 	bl	8000524 <__aeabi_i2d>
 80076c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80076c4:	f7f8 ff98 	bl	80005f8 <__aeabi_dmul>
 80076c8:	4b76      	ldr	r3, [pc, #472]	@ (80078a4 <_dtoa_r+0x5cc>)
 80076ca:	2200      	movs	r2, #0
 80076cc:	f7f8 fdde 	bl	800028c <__adddf3>
 80076d0:	4605      	mov	r5, r0
 80076d2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80076d6:	2c00      	cmp	r4, #0
 80076d8:	f040 808d 	bne.w	80077f6 <_dtoa_r+0x51e>
 80076dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076e0:	4b71      	ldr	r3, [pc, #452]	@ (80078a8 <_dtoa_r+0x5d0>)
 80076e2:	2200      	movs	r2, #0
 80076e4:	f7f8 fdd0 	bl	8000288 <__aeabi_dsub>
 80076e8:	4602      	mov	r2, r0
 80076ea:	460b      	mov	r3, r1
 80076ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80076f0:	462a      	mov	r2, r5
 80076f2:	4633      	mov	r3, r6
 80076f4:	f7f9 fa10 	bl	8000b18 <__aeabi_dcmpgt>
 80076f8:	2800      	cmp	r0, #0
 80076fa:	f040 828b 	bne.w	8007c14 <_dtoa_r+0x93c>
 80076fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007702:	462a      	mov	r2, r5
 8007704:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007708:	f7f9 f9e8 	bl	8000adc <__aeabi_dcmplt>
 800770c:	2800      	cmp	r0, #0
 800770e:	f040 8128 	bne.w	8007962 <_dtoa_r+0x68a>
 8007712:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007716:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800771a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800771c:	2b00      	cmp	r3, #0
 800771e:	f2c0 815a 	blt.w	80079d6 <_dtoa_r+0x6fe>
 8007722:	2f0e      	cmp	r7, #14
 8007724:	f300 8157 	bgt.w	80079d6 <_dtoa_r+0x6fe>
 8007728:	4b5a      	ldr	r3, [pc, #360]	@ (8007894 <_dtoa_r+0x5bc>)
 800772a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800772e:	ed93 7b00 	vldr	d7, [r3]
 8007732:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007734:	2b00      	cmp	r3, #0
 8007736:	ed8d 7b00 	vstr	d7, [sp]
 800773a:	da03      	bge.n	8007744 <_dtoa_r+0x46c>
 800773c:	9b07      	ldr	r3, [sp, #28]
 800773e:	2b00      	cmp	r3, #0
 8007740:	f340 8101 	ble.w	8007946 <_dtoa_r+0x66e>
 8007744:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007748:	4656      	mov	r6, sl
 800774a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800774e:	4620      	mov	r0, r4
 8007750:	4629      	mov	r1, r5
 8007752:	f7f9 f87b 	bl	800084c <__aeabi_ddiv>
 8007756:	f7f9 f9ff 	bl	8000b58 <__aeabi_d2iz>
 800775a:	4680      	mov	r8, r0
 800775c:	f7f8 fee2 	bl	8000524 <__aeabi_i2d>
 8007760:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007764:	f7f8 ff48 	bl	80005f8 <__aeabi_dmul>
 8007768:	4602      	mov	r2, r0
 800776a:	460b      	mov	r3, r1
 800776c:	4620      	mov	r0, r4
 800776e:	4629      	mov	r1, r5
 8007770:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007774:	f7f8 fd88 	bl	8000288 <__aeabi_dsub>
 8007778:	f806 4b01 	strb.w	r4, [r6], #1
 800777c:	9d07      	ldr	r5, [sp, #28]
 800777e:	eba6 040a 	sub.w	r4, r6, sl
 8007782:	42a5      	cmp	r5, r4
 8007784:	4602      	mov	r2, r0
 8007786:	460b      	mov	r3, r1
 8007788:	f040 8117 	bne.w	80079ba <_dtoa_r+0x6e2>
 800778c:	f7f8 fd7e 	bl	800028c <__adddf3>
 8007790:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007794:	4604      	mov	r4, r0
 8007796:	460d      	mov	r5, r1
 8007798:	f7f9 f9be 	bl	8000b18 <__aeabi_dcmpgt>
 800779c:	2800      	cmp	r0, #0
 800779e:	f040 80f9 	bne.w	8007994 <_dtoa_r+0x6bc>
 80077a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80077a6:	4620      	mov	r0, r4
 80077a8:	4629      	mov	r1, r5
 80077aa:	f7f9 f98d 	bl	8000ac8 <__aeabi_dcmpeq>
 80077ae:	b118      	cbz	r0, 80077b8 <_dtoa_r+0x4e0>
 80077b0:	f018 0f01 	tst.w	r8, #1
 80077b4:	f040 80ee 	bne.w	8007994 <_dtoa_r+0x6bc>
 80077b8:	4649      	mov	r1, r9
 80077ba:	4658      	mov	r0, fp
 80077bc:	f000 fc90 	bl	80080e0 <_Bfree>
 80077c0:	2300      	movs	r3, #0
 80077c2:	7033      	strb	r3, [r6, #0]
 80077c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80077c6:	3701      	adds	r7, #1
 80077c8:	601f      	str	r7, [r3, #0]
 80077ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	f000 831d 	beq.w	8007e0c <_dtoa_r+0xb34>
 80077d2:	601e      	str	r6, [r3, #0]
 80077d4:	e31a      	b.n	8007e0c <_dtoa_r+0xb34>
 80077d6:	07e2      	lsls	r2, r4, #31
 80077d8:	d505      	bpl.n	80077e6 <_dtoa_r+0x50e>
 80077da:	e9d5 2300 	ldrd	r2, r3, [r5]
 80077de:	f7f8 ff0b 	bl	80005f8 <__aeabi_dmul>
 80077e2:	3601      	adds	r6, #1
 80077e4:	2301      	movs	r3, #1
 80077e6:	1064      	asrs	r4, r4, #1
 80077e8:	3508      	adds	r5, #8
 80077ea:	e73f      	b.n	800766c <_dtoa_r+0x394>
 80077ec:	2602      	movs	r6, #2
 80077ee:	e742      	b.n	8007676 <_dtoa_r+0x39e>
 80077f0:	9c07      	ldr	r4, [sp, #28]
 80077f2:	9704      	str	r7, [sp, #16]
 80077f4:	e761      	b.n	80076ba <_dtoa_r+0x3e2>
 80077f6:	4b27      	ldr	r3, [pc, #156]	@ (8007894 <_dtoa_r+0x5bc>)
 80077f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80077fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80077fe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007802:	4454      	add	r4, sl
 8007804:	2900      	cmp	r1, #0
 8007806:	d053      	beq.n	80078b0 <_dtoa_r+0x5d8>
 8007808:	4928      	ldr	r1, [pc, #160]	@ (80078ac <_dtoa_r+0x5d4>)
 800780a:	2000      	movs	r0, #0
 800780c:	f7f9 f81e 	bl	800084c <__aeabi_ddiv>
 8007810:	4633      	mov	r3, r6
 8007812:	462a      	mov	r2, r5
 8007814:	f7f8 fd38 	bl	8000288 <__aeabi_dsub>
 8007818:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800781c:	4656      	mov	r6, sl
 800781e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007822:	f7f9 f999 	bl	8000b58 <__aeabi_d2iz>
 8007826:	4605      	mov	r5, r0
 8007828:	f7f8 fe7c 	bl	8000524 <__aeabi_i2d>
 800782c:	4602      	mov	r2, r0
 800782e:	460b      	mov	r3, r1
 8007830:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007834:	f7f8 fd28 	bl	8000288 <__aeabi_dsub>
 8007838:	3530      	adds	r5, #48	@ 0x30
 800783a:	4602      	mov	r2, r0
 800783c:	460b      	mov	r3, r1
 800783e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007842:	f806 5b01 	strb.w	r5, [r6], #1
 8007846:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800784a:	f7f9 f947 	bl	8000adc <__aeabi_dcmplt>
 800784e:	2800      	cmp	r0, #0
 8007850:	d171      	bne.n	8007936 <_dtoa_r+0x65e>
 8007852:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007856:	4911      	ldr	r1, [pc, #68]	@ (800789c <_dtoa_r+0x5c4>)
 8007858:	2000      	movs	r0, #0
 800785a:	f7f8 fd15 	bl	8000288 <__aeabi_dsub>
 800785e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007862:	f7f9 f93b 	bl	8000adc <__aeabi_dcmplt>
 8007866:	2800      	cmp	r0, #0
 8007868:	f040 8095 	bne.w	8007996 <_dtoa_r+0x6be>
 800786c:	42a6      	cmp	r6, r4
 800786e:	f43f af50 	beq.w	8007712 <_dtoa_r+0x43a>
 8007872:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007876:	4b0a      	ldr	r3, [pc, #40]	@ (80078a0 <_dtoa_r+0x5c8>)
 8007878:	2200      	movs	r2, #0
 800787a:	f7f8 febd 	bl	80005f8 <__aeabi_dmul>
 800787e:	4b08      	ldr	r3, [pc, #32]	@ (80078a0 <_dtoa_r+0x5c8>)
 8007880:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007884:	2200      	movs	r2, #0
 8007886:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800788a:	f7f8 feb5 	bl	80005f8 <__aeabi_dmul>
 800788e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007892:	e7c4      	b.n	800781e <_dtoa_r+0x546>
 8007894:	08009100 	.word	0x08009100
 8007898:	080090d8 	.word	0x080090d8
 800789c:	3ff00000 	.word	0x3ff00000
 80078a0:	40240000 	.word	0x40240000
 80078a4:	401c0000 	.word	0x401c0000
 80078a8:	40140000 	.word	0x40140000
 80078ac:	3fe00000 	.word	0x3fe00000
 80078b0:	4631      	mov	r1, r6
 80078b2:	4628      	mov	r0, r5
 80078b4:	f7f8 fea0 	bl	80005f8 <__aeabi_dmul>
 80078b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80078bc:	9415      	str	r4, [sp, #84]	@ 0x54
 80078be:	4656      	mov	r6, sl
 80078c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078c4:	f7f9 f948 	bl	8000b58 <__aeabi_d2iz>
 80078c8:	4605      	mov	r5, r0
 80078ca:	f7f8 fe2b 	bl	8000524 <__aeabi_i2d>
 80078ce:	4602      	mov	r2, r0
 80078d0:	460b      	mov	r3, r1
 80078d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078d6:	f7f8 fcd7 	bl	8000288 <__aeabi_dsub>
 80078da:	3530      	adds	r5, #48	@ 0x30
 80078dc:	f806 5b01 	strb.w	r5, [r6], #1
 80078e0:	4602      	mov	r2, r0
 80078e2:	460b      	mov	r3, r1
 80078e4:	42a6      	cmp	r6, r4
 80078e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80078ea:	f04f 0200 	mov.w	r2, #0
 80078ee:	d124      	bne.n	800793a <_dtoa_r+0x662>
 80078f0:	4bac      	ldr	r3, [pc, #688]	@ (8007ba4 <_dtoa_r+0x8cc>)
 80078f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80078f6:	f7f8 fcc9 	bl	800028c <__adddf3>
 80078fa:	4602      	mov	r2, r0
 80078fc:	460b      	mov	r3, r1
 80078fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007902:	f7f9 f909 	bl	8000b18 <__aeabi_dcmpgt>
 8007906:	2800      	cmp	r0, #0
 8007908:	d145      	bne.n	8007996 <_dtoa_r+0x6be>
 800790a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800790e:	49a5      	ldr	r1, [pc, #660]	@ (8007ba4 <_dtoa_r+0x8cc>)
 8007910:	2000      	movs	r0, #0
 8007912:	f7f8 fcb9 	bl	8000288 <__aeabi_dsub>
 8007916:	4602      	mov	r2, r0
 8007918:	460b      	mov	r3, r1
 800791a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800791e:	f7f9 f8dd 	bl	8000adc <__aeabi_dcmplt>
 8007922:	2800      	cmp	r0, #0
 8007924:	f43f aef5 	beq.w	8007712 <_dtoa_r+0x43a>
 8007928:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800792a:	1e73      	subs	r3, r6, #1
 800792c:	9315      	str	r3, [sp, #84]	@ 0x54
 800792e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007932:	2b30      	cmp	r3, #48	@ 0x30
 8007934:	d0f8      	beq.n	8007928 <_dtoa_r+0x650>
 8007936:	9f04      	ldr	r7, [sp, #16]
 8007938:	e73e      	b.n	80077b8 <_dtoa_r+0x4e0>
 800793a:	4b9b      	ldr	r3, [pc, #620]	@ (8007ba8 <_dtoa_r+0x8d0>)
 800793c:	f7f8 fe5c 	bl	80005f8 <__aeabi_dmul>
 8007940:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007944:	e7bc      	b.n	80078c0 <_dtoa_r+0x5e8>
 8007946:	d10c      	bne.n	8007962 <_dtoa_r+0x68a>
 8007948:	4b98      	ldr	r3, [pc, #608]	@ (8007bac <_dtoa_r+0x8d4>)
 800794a:	2200      	movs	r2, #0
 800794c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007950:	f7f8 fe52 	bl	80005f8 <__aeabi_dmul>
 8007954:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007958:	f7f9 f8d4 	bl	8000b04 <__aeabi_dcmpge>
 800795c:	2800      	cmp	r0, #0
 800795e:	f000 8157 	beq.w	8007c10 <_dtoa_r+0x938>
 8007962:	2400      	movs	r4, #0
 8007964:	4625      	mov	r5, r4
 8007966:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007968:	43db      	mvns	r3, r3
 800796a:	9304      	str	r3, [sp, #16]
 800796c:	4656      	mov	r6, sl
 800796e:	2700      	movs	r7, #0
 8007970:	4621      	mov	r1, r4
 8007972:	4658      	mov	r0, fp
 8007974:	f000 fbb4 	bl	80080e0 <_Bfree>
 8007978:	2d00      	cmp	r5, #0
 800797a:	d0dc      	beq.n	8007936 <_dtoa_r+0x65e>
 800797c:	b12f      	cbz	r7, 800798a <_dtoa_r+0x6b2>
 800797e:	42af      	cmp	r7, r5
 8007980:	d003      	beq.n	800798a <_dtoa_r+0x6b2>
 8007982:	4639      	mov	r1, r7
 8007984:	4658      	mov	r0, fp
 8007986:	f000 fbab 	bl	80080e0 <_Bfree>
 800798a:	4629      	mov	r1, r5
 800798c:	4658      	mov	r0, fp
 800798e:	f000 fba7 	bl	80080e0 <_Bfree>
 8007992:	e7d0      	b.n	8007936 <_dtoa_r+0x65e>
 8007994:	9704      	str	r7, [sp, #16]
 8007996:	4633      	mov	r3, r6
 8007998:	461e      	mov	r6, r3
 800799a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800799e:	2a39      	cmp	r2, #57	@ 0x39
 80079a0:	d107      	bne.n	80079b2 <_dtoa_r+0x6da>
 80079a2:	459a      	cmp	sl, r3
 80079a4:	d1f8      	bne.n	8007998 <_dtoa_r+0x6c0>
 80079a6:	9a04      	ldr	r2, [sp, #16]
 80079a8:	3201      	adds	r2, #1
 80079aa:	9204      	str	r2, [sp, #16]
 80079ac:	2230      	movs	r2, #48	@ 0x30
 80079ae:	f88a 2000 	strb.w	r2, [sl]
 80079b2:	781a      	ldrb	r2, [r3, #0]
 80079b4:	3201      	adds	r2, #1
 80079b6:	701a      	strb	r2, [r3, #0]
 80079b8:	e7bd      	b.n	8007936 <_dtoa_r+0x65e>
 80079ba:	4b7b      	ldr	r3, [pc, #492]	@ (8007ba8 <_dtoa_r+0x8d0>)
 80079bc:	2200      	movs	r2, #0
 80079be:	f7f8 fe1b 	bl	80005f8 <__aeabi_dmul>
 80079c2:	2200      	movs	r2, #0
 80079c4:	2300      	movs	r3, #0
 80079c6:	4604      	mov	r4, r0
 80079c8:	460d      	mov	r5, r1
 80079ca:	f7f9 f87d 	bl	8000ac8 <__aeabi_dcmpeq>
 80079ce:	2800      	cmp	r0, #0
 80079d0:	f43f aebb 	beq.w	800774a <_dtoa_r+0x472>
 80079d4:	e6f0      	b.n	80077b8 <_dtoa_r+0x4e0>
 80079d6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80079d8:	2a00      	cmp	r2, #0
 80079da:	f000 80db 	beq.w	8007b94 <_dtoa_r+0x8bc>
 80079de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80079e0:	2a01      	cmp	r2, #1
 80079e2:	f300 80bf 	bgt.w	8007b64 <_dtoa_r+0x88c>
 80079e6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80079e8:	2a00      	cmp	r2, #0
 80079ea:	f000 80b7 	beq.w	8007b5c <_dtoa_r+0x884>
 80079ee:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80079f2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80079f4:	4646      	mov	r6, r8
 80079f6:	9a08      	ldr	r2, [sp, #32]
 80079f8:	2101      	movs	r1, #1
 80079fa:	441a      	add	r2, r3
 80079fc:	4658      	mov	r0, fp
 80079fe:	4498      	add	r8, r3
 8007a00:	9208      	str	r2, [sp, #32]
 8007a02:	f000 fc21 	bl	8008248 <__i2b>
 8007a06:	4605      	mov	r5, r0
 8007a08:	b15e      	cbz	r6, 8007a22 <_dtoa_r+0x74a>
 8007a0a:	9b08      	ldr	r3, [sp, #32]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	dd08      	ble.n	8007a22 <_dtoa_r+0x74a>
 8007a10:	42b3      	cmp	r3, r6
 8007a12:	9a08      	ldr	r2, [sp, #32]
 8007a14:	bfa8      	it	ge
 8007a16:	4633      	movge	r3, r6
 8007a18:	eba8 0803 	sub.w	r8, r8, r3
 8007a1c:	1af6      	subs	r6, r6, r3
 8007a1e:	1ad3      	subs	r3, r2, r3
 8007a20:	9308      	str	r3, [sp, #32]
 8007a22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a24:	b1f3      	cbz	r3, 8007a64 <_dtoa_r+0x78c>
 8007a26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	f000 80b7 	beq.w	8007b9c <_dtoa_r+0x8c4>
 8007a2e:	b18c      	cbz	r4, 8007a54 <_dtoa_r+0x77c>
 8007a30:	4629      	mov	r1, r5
 8007a32:	4622      	mov	r2, r4
 8007a34:	4658      	mov	r0, fp
 8007a36:	f000 fcc7 	bl	80083c8 <__pow5mult>
 8007a3a:	464a      	mov	r2, r9
 8007a3c:	4601      	mov	r1, r0
 8007a3e:	4605      	mov	r5, r0
 8007a40:	4658      	mov	r0, fp
 8007a42:	f000 fc17 	bl	8008274 <__multiply>
 8007a46:	4649      	mov	r1, r9
 8007a48:	9004      	str	r0, [sp, #16]
 8007a4a:	4658      	mov	r0, fp
 8007a4c:	f000 fb48 	bl	80080e0 <_Bfree>
 8007a50:	9b04      	ldr	r3, [sp, #16]
 8007a52:	4699      	mov	r9, r3
 8007a54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a56:	1b1a      	subs	r2, r3, r4
 8007a58:	d004      	beq.n	8007a64 <_dtoa_r+0x78c>
 8007a5a:	4649      	mov	r1, r9
 8007a5c:	4658      	mov	r0, fp
 8007a5e:	f000 fcb3 	bl	80083c8 <__pow5mult>
 8007a62:	4681      	mov	r9, r0
 8007a64:	2101      	movs	r1, #1
 8007a66:	4658      	mov	r0, fp
 8007a68:	f000 fbee 	bl	8008248 <__i2b>
 8007a6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a6e:	4604      	mov	r4, r0
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	f000 81cf 	beq.w	8007e14 <_dtoa_r+0xb3c>
 8007a76:	461a      	mov	r2, r3
 8007a78:	4601      	mov	r1, r0
 8007a7a:	4658      	mov	r0, fp
 8007a7c:	f000 fca4 	bl	80083c8 <__pow5mult>
 8007a80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a82:	2b01      	cmp	r3, #1
 8007a84:	4604      	mov	r4, r0
 8007a86:	f300 8095 	bgt.w	8007bb4 <_dtoa_r+0x8dc>
 8007a8a:	9b02      	ldr	r3, [sp, #8]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	f040 8087 	bne.w	8007ba0 <_dtoa_r+0x8c8>
 8007a92:	9b03      	ldr	r3, [sp, #12]
 8007a94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	f040 8089 	bne.w	8007bb0 <_dtoa_r+0x8d8>
 8007a9e:	9b03      	ldr	r3, [sp, #12]
 8007aa0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007aa4:	0d1b      	lsrs	r3, r3, #20
 8007aa6:	051b      	lsls	r3, r3, #20
 8007aa8:	b12b      	cbz	r3, 8007ab6 <_dtoa_r+0x7de>
 8007aaa:	9b08      	ldr	r3, [sp, #32]
 8007aac:	3301      	adds	r3, #1
 8007aae:	9308      	str	r3, [sp, #32]
 8007ab0:	f108 0801 	add.w	r8, r8, #1
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ab8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	f000 81b0 	beq.w	8007e20 <_dtoa_r+0xb48>
 8007ac0:	6923      	ldr	r3, [r4, #16]
 8007ac2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007ac6:	6918      	ldr	r0, [r3, #16]
 8007ac8:	f000 fb72 	bl	80081b0 <__hi0bits>
 8007acc:	f1c0 0020 	rsb	r0, r0, #32
 8007ad0:	9b08      	ldr	r3, [sp, #32]
 8007ad2:	4418      	add	r0, r3
 8007ad4:	f010 001f 	ands.w	r0, r0, #31
 8007ad8:	d077      	beq.n	8007bca <_dtoa_r+0x8f2>
 8007ada:	f1c0 0320 	rsb	r3, r0, #32
 8007ade:	2b04      	cmp	r3, #4
 8007ae0:	dd6b      	ble.n	8007bba <_dtoa_r+0x8e2>
 8007ae2:	9b08      	ldr	r3, [sp, #32]
 8007ae4:	f1c0 001c 	rsb	r0, r0, #28
 8007ae8:	4403      	add	r3, r0
 8007aea:	4480      	add	r8, r0
 8007aec:	4406      	add	r6, r0
 8007aee:	9308      	str	r3, [sp, #32]
 8007af0:	f1b8 0f00 	cmp.w	r8, #0
 8007af4:	dd05      	ble.n	8007b02 <_dtoa_r+0x82a>
 8007af6:	4649      	mov	r1, r9
 8007af8:	4642      	mov	r2, r8
 8007afa:	4658      	mov	r0, fp
 8007afc:	f000 fcbe 	bl	800847c <__lshift>
 8007b00:	4681      	mov	r9, r0
 8007b02:	9b08      	ldr	r3, [sp, #32]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	dd05      	ble.n	8007b14 <_dtoa_r+0x83c>
 8007b08:	4621      	mov	r1, r4
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	4658      	mov	r0, fp
 8007b0e:	f000 fcb5 	bl	800847c <__lshift>
 8007b12:	4604      	mov	r4, r0
 8007b14:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d059      	beq.n	8007bce <_dtoa_r+0x8f6>
 8007b1a:	4621      	mov	r1, r4
 8007b1c:	4648      	mov	r0, r9
 8007b1e:	f000 fd19 	bl	8008554 <__mcmp>
 8007b22:	2800      	cmp	r0, #0
 8007b24:	da53      	bge.n	8007bce <_dtoa_r+0x8f6>
 8007b26:	1e7b      	subs	r3, r7, #1
 8007b28:	9304      	str	r3, [sp, #16]
 8007b2a:	4649      	mov	r1, r9
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	220a      	movs	r2, #10
 8007b30:	4658      	mov	r0, fp
 8007b32:	f000 faf7 	bl	8008124 <__multadd>
 8007b36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b38:	4681      	mov	r9, r0
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	f000 8172 	beq.w	8007e24 <_dtoa_r+0xb4c>
 8007b40:	2300      	movs	r3, #0
 8007b42:	4629      	mov	r1, r5
 8007b44:	220a      	movs	r2, #10
 8007b46:	4658      	mov	r0, fp
 8007b48:	f000 faec 	bl	8008124 <__multadd>
 8007b4c:	9b00      	ldr	r3, [sp, #0]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	4605      	mov	r5, r0
 8007b52:	dc67      	bgt.n	8007c24 <_dtoa_r+0x94c>
 8007b54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b56:	2b02      	cmp	r3, #2
 8007b58:	dc41      	bgt.n	8007bde <_dtoa_r+0x906>
 8007b5a:	e063      	b.n	8007c24 <_dtoa_r+0x94c>
 8007b5c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007b5e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007b62:	e746      	b.n	80079f2 <_dtoa_r+0x71a>
 8007b64:	9b07      	ldr	r3, [sp, #28]
 8007b66:	1e5c      	subs	r4, r3, #1
 8007b68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b6a:	42a3      	cmp	r3, r4
 8007b6c:	bfbf      	itttt	lt
 8007b6e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007b70:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007b72:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007b74:	1ae3      	sublt	r3, r4, r3
 8007b76:	bfb4      	ite	lt
 8007b78:	18d2      	addlt	r2, r2, r3
 8007b7a:	1b1c      	subge	r4, r3, r4
 8007b7c:	9b07      	ldr	r3, [sp, #28]
 8007b7e:	bfbc      	itt	lt
 8007b80:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007b82:	2400      	movlt	r4, #0
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	bfb5      	itete	lt
 8007b88:	eba8 0603 	sublt.w	r6, r8, r3
 8007b8c:	9b07      	ldrge	r3, [sp, #28]
 8007b8e:	2300      	movlt	r3, #0
 8007b90:	4646      	movge	r6, r8
 8007b92:	e730      	b.n	80079f6 <_dtoa_r+0x71e>
 8007b94:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007b96:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007b98:	4646      	mov	r6, r8
 8007b9a:	e735      	b.n	8007a08 <_dtoa_r+0x730>
 8007b9c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007b9e:	e75c      	b.n	8007a5a <_dtoa_r+0x782>
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	e788      	b.n	8007ab6 <_dtoa_r+0x7de>
 8007ba4:	3fe00000 	.word	0x3fe00000
 8007ba8:	40240000 	.word	0x40240000
 8007bac:	40140000 	.word	0x40140000
 8007bb0:	9b02      	ldr	r3, [sp, #8]
 8007bb2:	e780      	b.n	8007ab6 <_dtoa_r+0x7de>
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007bb8:	e782      	b.n	8007ac0 <_dtoa_r+0x7e8>
 8007bba:	d099      	beq.n	8007af0 <_dtoa_r+0x818>
 8007bbc:	9a08      	ldr	r2, [sp, #32]
 8007bbe:	331c      	adds	r3, #28
 8007bc0:	441a      	add	r2, r3
 8007bc2:	4498      	add	r8, r3
 8007bc4:	441e      	add	r6, r3
 8007bc6:	9208      	str	r2, [sp, #32]
 8007bc8:	e792      	b.n	8007af0 <_dtoa_r+0x818>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	e7f6      	b.n	8007bbc <_dtoa_r+0x8e4>
 8007bce:	9b07      	ldr	r3, [sp, #28]
 8007bd0:	9704      	str	r7, [sp, #16]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	dc20      	bgt.n	8007c18 <_dtoa_r+0x940>
 8007bd6:	9300      	str	r3, [sp, #0]
 8007bd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bda:	2b02      	cmp	r3, #2
 8007bdc:	dd1e      	ble.n	8007c1c <_dtoa_r+0x944>
 8007bde:	9b00      	ldr	r3, [sp, #0]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	f47f aec0 	bne.w	8007966 <_dtoa_r+0x68e>
 8007be6:	4621      	mov	r1, r4
 8007be8:	2205      	movs	r2, #5
 8007bea:	4658      	mov	r0, fp
 8007bec:	f000 fa9a 	bl	8008124 <__multadd>
 8007bf0:	4601      	mov	r1, r0
 8007bf2:	4604      	mov	r4, r0
 8007bf4:	4648      	mov	r0, r9
 8007bf6:	f000 fcad 	bl	8008554 <__mcmp>
 8007bfa:	2800      	cmp	r0, #0
 8007bfc:	f77f aeb3 	ble.w	8007966 <_dtoa_r+0x68e>
 8007c00:	4656      	mov	r6, sl
 8007c02:	2331      	movs	r3, #49	@ 0x31
 8007c04:	f806 3b01 	strb.w	r3, [r6], #1
 8007c08:	9b04      	ldr	r3, [sp, #16]
 8007c0a:	3301      	adds	r3, #1
 8007c0c:	9304      	str	r3, [sp, #16]
 8007c0e:	e6ae      	b.n	800796e <_dtoa_r+0x696>
 8007c10:	9c07      	ldr	r4, [sp, #28]
 8007c12:	9704      	str	r7, [sp, #16]
 8007c14:	4625      	mov	r5, r4
 8007c16:	e7f3      	b.n	8007c00 <_dtoa_r+0x928>
 8007c18:	9b07      	ldr	r3, [sp, #28]
 8007c1a:	9300      	str	r3, [sp, #0]
 8007c1c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	f000 8104 	beq.w	8007e2c <_dtoa_r+0xb54>
 8007c24:	2e00      	cmp	r6, #0
 8007c26:	dd05      	ble.n	8007c34 <_dtoa_r+0x95c>
 8007c28:	4629      	mov	r1, r5
 8007c2a:	4632      	mov	r2, r6
 8007c2c:	4658      	mov	r0, fp
 8007c2e:	f000 fc25 	bl	800847c <__lshift>
 8007c32:	4605      	mov	r5, r0
 8007c34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d05a      	beq.n	8007cf0 <_dtoa_r+0xa18>
 8007c3a:	6869      	ldr	r1, [r5, #4]
 8007c3c:	4658      	mov	r0, fp
 8007c3e:	f000 fa0f 	bl	8008060 <_Balloc>
 8007c42:	4606      	mov	r6, r0
 8007c44:	b928      	cbnz	r0, 8007c52 <_dtoa_r+0x97a>
 8007c46:	4b84      	ldr	r3, [pc, #528]	@ (8007e58 <_dtoa_r+0xb80>)
 8007c48:	4602      	mov	r2, r0
 8007c4a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007c4e:	f7ff bb5a 	b.w	8007306 <_dtoa_r+0x2e>
 8007c52:	692a      	ldr	r2, [r5, #16]
 8007c54:	3202      	adds	r2, #2
 8007c56:	0092      	lsls	r2, r2, #2
 8007c58:	f105 010c 	add.w	r1, r5, #12
 8007c5c:	300c      	adds	r0, #12
 8007c5e:	f7ff faa4 	bl	80071aa <memcpy>
 8007c62:	2201      	movs	r2, #1
 8007c64:	4631      	mov	r1, r6
 8007c66:	4658      	mov	r0, fp
 8007c68:	f000 fc08 	bl	800847c <__lshift>
 8007c6c:	f10a 0301 	add.w	r3, sl, #1
 8007c70:	9307      	str	r3, [sp, #28]
 8007c72:	9b00      	ldr	r3, [sp, #0]
 8007c74:	4453      	add	r3, sl
 8007c76:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c78:	9b02      	ldr	r3, [sp, #8]
 8007c7a:	f003 0301 	and.w	r3, r3, #1
 8007c7e:	462f      	mov	r7, r5
 8007c80:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c82:	4605      	mov	r5, r0
 8007c84:	9b07      	ldr	r3, [sp, #28]
 8007c86:	4621      	mov	r1, r4
 8007c88:	3b01      	subs	r3, #1
 8007c8a:	4648      	mov	r0, r9
 8007c8c:	9300      	str	r3, [sp, #0]
 8007c8e:	f7ff fa9a 	bl	80071c6 <quorem>
 8007c92:	4639      	mov	r1, r7
 8007c94:	9002      	str	r0, [sp, #8]
 8007c96:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007c9a:	4648      	mov	r0, r9
 8007c9c:	f000 fc5a 	bl	8008554 <__mcmp>
 8007ca0:	462a      	mov	r2, r5
 8007ca2:	9008      	str	r0, [sp, #32]
 8007ca4:	4621      	mov	r1, r4
 8007ca6:	4658      	mov	r0, fp
 8007ca8:	f000 fc70 	bl	800858c <__mdiff>
 8007cac:	68c2      	ldr	r2, [r0, #12]
 8007cae:	4606      	mov	r6, r0
 8007cb0:	bb02      	cbnz	r2, 8007cf4 <_dtoa_r+0xa1c>
 8007cb2:	4601      	mov	r1, r0
 8007cb4:	4648      	mov	r0, r9
 8007cb6:	f000 fc4d 	bl	8008554 <__mcmp>
 8007cba:	4602      	mov	r2, r0
 8007cbc:	4631      	mov	r1, r6
 8007cbe:	4658      	mov	r0, fp
 8007cc0:	920e      	str	r2, [sp, #56]	@ 0x38
 8007cc2:	f000 fa0d 	bl	80080e0 <_Bfree>
 8007cc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cc8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007cca:	9e07      	ldr	r6, [sp, #28]
 8007ccc:	ea43 0102 	orr.w	r1, r3, r2
 8007cd0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007cd2:	4319      	orrs	r1, r3
 8007cd4:	d110      	bne.n	8007cf8 <_dtoa_r+0xa20>
 8007cd6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007cda:	d029      	beq.n	8007d30 <_dtoa_r+0xa58>
 8007cdc:	9b08      	ldr	r3, [sp, #32]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	dd02      	ble.n	8007ce8 <_dtoa_r+0xa10>
 8007ce2:	9b02      	ldr	r3, [sp, #8]
 8007ce4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007ce8:	9b00      	ldr	r3, [sp, #0]
 8007cea:	f883 8000 	strb.w	r8, [r3]
 8007cee:	e63f      	b.n	8007970 <_dtoa_r+0x698>
 8007cf0:	4628      	mov	r0, r5
 8007cf2:	e7bb      	b.n	8007c6c <_dtoa_r+0x994>
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	e7e1      	b.n	8007cbc <_dtoa_r+0x9e4>
 8007cf8:	9b08      	ldr	r3, [sp, #32]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	db04      	blt.n	8007d08 <_dtoa_r+0xa30>
 8007cfe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007d00:	430b      	orrs	r3, r1
 8007d02:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007d04:	430b      	orrs	r3, r1
 8007d06:	d120      	bne.n	8007d4a <_dtoa_r+0xa72>
 8007d08:	2a00      	cmp	r2, #0
 8007d0a:	dded      	ble.n	8007ce8 <_dtoa_r+0xa10>
 8007d0c:	4649      	mov	r1, r9
 8007d0e:	2201      	movs	r2, #1
 8007d10:	4658      	mov	r0, fp
 8007d12:	f000 fbb3 	bl	800847c <__lshift>
 8007d16:	4621      	mov	r1, r4
 8007d18:	4681      	mov	r9, r0
 8007d1a:	f000 fc1b 	bl	8008554 <__mcmp>
 8007d1e:	2800      	cmp	r0, #0
 8007d20:	dc03      	bgt.n	8007d2a <_dtoa_r+0xa52>
 8007d22:	d1e1      	bne.n	8007ce8 <_dtoa_r+0xa10>
 8007d24:	f018 0f01 	tst.w	r8, #1
 8007d28:	d0de      	beq.n	8007ce8 <_dtoa_r+0xa10>
 8007d2a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007d2e:	d1d8      	bne.n	8007ce2 <_dtoa_r+0xa0a>
 8007d30:	9a00      	ldr	r2, [sp, #0]
 8007d32:	2339      	movs	r3, #57	@ 0x39
 8007d34:	7013      	strb	r3, [r2, #0]
 8007d36:	4633      	mov	r3, r6
 8007d38:	461e      	mov	r6, r3
 8007d3a:	3b01      	subs	r3, #1
 8007d3c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007d40:	2a39      	cmp	r2, #57	@ 0x39
 8007d42:	d052      	beq.n	8007dea <_dtoa_r+0xb12>
 8007d44:	3201      	adds	r2, #1
 8007d46:	701a      	strb	r2, [r3, #0]
 8007d48:	e612      	b.n	8007970 <_dtoa_r+0x698>
 8007d4a:	2a00      	cmp	r2, #0
 8007d4c:	dd07      	ble.n	8007d5e <_dtoa_r+0xa86>
 8007d4e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007d52:	d0ed      	beq.n	8007d30 <_dtoa_r+0xa58>
 8007d54:	9a00      	ldr	r2, [sp, #0]
 8007d56:	f108 0301 	add.w	r3, r8, #1
 8007d5a:	7013      	strb	r3, [r2, #0]
 8007d5c:	e608      	b.n	8007970 <_dtoa_r+0x698>
 8007d5e:	9b07      	ldr	r3, [sp, #28]
 8007d60:	9a07      	ldr	r2, [sp, #28]
 8007d62:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007d66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d028      	beq.n	8007dbe <_dtoa_r+0xae6>
 8007d6c:	4649      	mov	r1, r9
 8007d6e:	2300      	movs	r3, #0
 8007d70:	220a      	movs	r2, #10
 8007d72:	4658      	mov	r0, fp
 8007d74:	f000 f9d6 	bl	8008124 <__multadd>
 8007d78:	42af      	cmp	r7, r5
 8007d7a:	4681      	mov	r9, r0
 8007d7c:	f04f 0300 	mov.w	r3, #0
 8007d80:	f04f 020a 	mov.w	r2, #10
 8007d84:	4639      	mov	r1, r7
 8007d86:	4658      	mov	r0, fp
 8007d88:	d107      	bne.n	8007d9a <_dtoa_r+0xac2>
 8007d8a:	f000 f9cb 	bl	8008124 <__multadd>
 8007d8e:	4607      	mov	r7, r0
 8007d90:	4605      	mov	r5, r0
 8007d92:	9b07      	ldr	r3, [sp, #28]
 8007d94:	3301      	adds	r3, #1
 8007d96:	9307      	str	r3, [sp, #28]
 8007d98:	e774      	b.n	8007c84 <_dtoa_r+0x9ac>
 8007d9a:	f000 f9c3 	bl	8008124 <__multadd>
 8007d9e:	4629      	mov	r1, r5
 8007da0:	4607      	mov	r7, r0
 8007da2:	2300      	movs	r3, #0
 8007da4:	220a      	movs	r2, #10
 8007da6:	4658      	mov	r0, fp
 8007da8:	f000 f9bc 	bl	8008124 <__multadd>
 8007dac:	4605      	mov	r5, r0
 8007dae:	e7f0      	b.n	8007d92 <_dtoa_r+0xaba>
 8007db0:	9b00      	ldr	r3, [sp, #0]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	bfcc      	ite	gt
 8007db6:	461e      	movgt	r6, r3
 8007db8:	2601      	movle	r6, #1
 8007dba:	4456      	add	r6, sl
 8007dbc:	2700      	movs	r7, #0
 8007dbe:	4649      	mov	r1, r9
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	4658      	mov	r0, fp
 8007dc4:	f000 fb5a 	bl	800847c <__lshift>
 8007dc8:	4621      	mov	r1, r4
 8007dca:	4681      	mov	r9, r0
 8007dcc:	f000 fbc2 	bl	8008554 <__mcmp>
 8007dd0:	2800      	cmp	r0, #0
 8007dd2:	dcb0      	bgt.n	8007d36 <_dtoa_r+0xa5e>
 8007dd4:	d102      	bne.n	8007ddc <_dtoa_r+0xb04>
 8007dd6:	f018 0f01 	tst.w	r8, #1
 8007dda:	d1ac      	bne.n	8007d36 <_dtoa_r+0xa5e>
 8007ddc:	4633      	mov	r3, r6
 8007dde:	461e      	mov	r6, r3
 8007de0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007de4:	2a30      	cmp	r2, #48	@ 0x30
 8007de6:	d0fa      	beq.n	8007dde <_dtoa_r+0xb06>
 8007de8:	e5c2      	b.n	8007970 <_dtoa_r+0x698>
 8007dea:	459a      	cmp	sl, r3
 8007dec:	d1a4      	bne.n	8007d38 <_dtoa_r+0xa60>
 8007dee:	9b04      	ldr	r3, [sp, #16]
 8007df0:	3301      	adds	r3, #1
 8007df2:	9304      	str	r3, [sp, #16]
 8007df4:	2331      	movs	r3, #49	@ 0x31
 8007df6:	f88a 3000 	strb.w	r3, [sl]
 8007dfa:	e5b9      	b.n	8007970 <_dtoa_r+0x698>
 8007dfc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007dfe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007e5c <_dtoa_r+0xb84>
 8007e02:	b11b      	cbz	r3, 8007e0c <_dtoa_r+0xb34>
 8007e04:	f10a 0308 	add.w	r3, sl, #8
 8007e08:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007e0a:	6013      	str	r3, [r2, #0]
 8007e0c:	4650      	mov	r0, sl
 8007e0e:	b019      	add	sp, #100	@ 0x64
 8007e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	f77f ae37 	ble.w	8007a8a <_dtoa_r+0x7b2>
 8007e1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e20:	2001      	movs	r0, #1
 8007e22:	e655      	b.n	8007ad0 <_dtoa_r+0x7f8>
 8007e24:	9b00      	ldr	r3, [sp, #0]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	f77f aed6 	ble.w	8007bd8 <_dtoa_r+0x900>
 8007e2c:	4656      	mov	r6, sl
 8007e2e:	4621      	mov	r1, r4
 8007e30:	4648      	mov	r0, r9
 8007e32:	f7ff f9c8 	bl	80071c6 <quorem>
 8007e36:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007e3a:	f806 8b01 	strb.w	r8, [r6], #1
 8007e3e:	9b00      	ldr	r3, [sp, #0]
 8007e40:	eba6 020a 	sub.w	r2, r6, sl
 8007e44:	4293      	cmp	r3, r2
 8007e46:	ddb3      	ble.n	8007db0 <_dtoa_r+0xad8>
 8007e48:	4649      	mov	r1, r9
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	220a      	movs	r2, #10
 8007e4e:	4658      	mov	r0, fp
 8007e50:	f000 f968 	bl	8008124 <__multadd>
 8007e54:	4681      	mov	r9, r0
 8007e56:	e7ea      	b.n	8007e2e <_dtoa_r+0xb56>
 8007e58:	0800905c 	.word	0x0800905c
 8007e5c:	08008fe0 	.word	0x08008fe0

08007e60 <_free_r>:
 8007e60:	b538      	push	{r3, r4, r5, lr}
 8007e62:	4605      	mov	r5, r0
 8007e64:	2900      	cmp	r1, #0
 8007e66:	d041      	beq.n	8007eec <_free_r+0x8c>
 8007e68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e6c:	1f0c      	subs	r4, r1, #4
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	bfb8      	it	lt
 8007e72:	18e4      	addlt	r4, r4, r3
 8007e74:	f000 f8e8 	bl	8008048 <__malloc_lock>
 8007e78:	4a1d      	ldr	r2, [pc, #116]	@ (8007ef0 <_free_r+0x90>)
 8007e7a:	6813      	ldr	r3, [r2, #0]
 8007e7c:	b933      	cbnz	r3, 8007e8c <_free_r+0x2c>
 8007e7e:	6063      	str	r3, [r4, #4]
 8007e80:	6014      	str	r4, [r2, #0]
 8007e82:	4628      	mov	r0, r5
 8007e84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e88:	f000 b8e4 	b.w	8008054 <__malloc_unlock>
 8007e8c:	42a3      	cmp	r3, r4
 8007e8e:	d908      	bls.n	8007ea2 <_free_r+0x42>
 8007e90:	6820      	ldr	r0, [r4, #0]
 8007e92:	1821      	adds	r1, r4, r0
 8007e94:	428b      	cmp	r3, r1
 8007e96:	bf01      	itttt	eq
 8007e98:	6819      	ldreq	r1, [r3, #0]
 8007e9a:	685b      	ldreq	r3, [r3, #4]
 8007e9c:	1809      	addeq	r1, r1, r0
 8007e9e:	6021      	streq	r1, [r4, #0]
 8007ea0:	e7ed      	b.n	8007e7e <_free_r+0x1e>
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	b10b      	cbz	r3, 8007eac <_free_r+0x4c>
 8007ea8:	42a3      	cmp	r3, r4
 8007eaa:	d9fa      	bls.n	8007ea2 <_free_r+0x42>
 8007eac:	6811      	ldr	r1, [r2, #0]
 8007eae:	1850      	adds	r0, r2, r1
 8007eb0:	42a0      	cmp	r0, r4
 8007eb2:	d10b      	bne.n	8007ecc <_free_r+0x6c>
 8007eb4:	6820      	ldr	r0, [r4, #0]
 8007eb6:	4401      	add	r1, r0
 8007eb8:	1850      	adds	r0, r2, r1
 8007eba:	4283      	cmp	r3, r0
 8007ebc:	6011      	str	r1, [r2, #0]
 8007ebe:	d1e0      	bne.n	8007e82 <_free_r+0x22>
 8007ec0:	6818      	ldr	r0, [r3, #0]
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	6053      	str	r3, [r2, #4]
 8007ec6:	4408      	add	r0, r1
 8007ec8:	6010      	str	r0, [r2, #0]
 8007eca:	e7da      	b.n	8007e82 <_free_r+0x22>
 8007ecc:	d902      	bls.n	8007ed4 <_free_r+0x74>
 8007ece:	230c      	movs	r3, #12
 8007ed0:	602b      	str	r3, [r5, #0]
 8007ed2:	e7d6      	b.n	8007e82 <_free_r+0x22>
 8007ed4:	6820      	ldr	r0, [r4, #0]
 8007ed6:	1821      	adds	r1, r4, r0
 8007ed8:	428b      	cmp	r3, r1
 8007eda:	bf04      	itt	eq
 8007edc:	6819      	ldreq	r1, [r3, #0]
 8007ede:	685b      	ldreq	r3, [r3, #4]
 8007ee0:	6063      	str	r3, [r4, #4]
 8007ee2:	bf04      	itt	eq
 8007ee4:	1809      	addeq	r1, r1, r0
 8007ee6:	6021      	streq	r1, [r4, #0]
 8007ee8:	6054      	str	r4, [r2, #4]
 8007eea:	e7ca      	b.n	8007e82 <_free_r+0x22>
 8007eec:	bd38      	pop	{r3, r4, r5, pc}
 8007eee:	bf00      	nop
 8007ef0:	200045a0 	.word	0x200045a0

08007ef4 <malloc>:
 8007ef4:	4b02      	ldr	r3, [pc, #8]	@ (8007f00 <malloc+0xc>)
 8007ef6:	4601      	mov	r1, r0
 8007ef8:	6818      	ldr	r0, [r3, #0]
 8007efa:	f000 b825 	b.w	8007f48 <_malloc_r>
 8007efe:	bf00      	nop
 8007f00:	2000001c 	.word	0x2000001c

08007f04 <sbrk_aligned>:
 8007f04:	b570      	push	{r4, r5, r6, lr}
 8007f06:	4e0f      	ldr	r6, [pc, #60]	@ (8007f44 <sbrk_aligned+0x40>)
 8007f08:	460c      	mov	r4, r1
 8007f0a:	6831      	ldr	r1, [r6, #0]
 8007f0c:	4605      	mov	r5, r0
 8007f0e:	b911      	cbnz	r1, 8007f16 <sbrk_aligned+0x12>
 8007f10:	f000 fcd4 	bl	80088bc <_sbrk_r>
 8007f14:	6030      	str	r0, [r6, #0]
 8007f16:	4621      	mov	r1, r4
 8007f18:	4628      	mov	r0, r5
 8007f1a:	f000 fccf 	bl	80088bc <_sbrk_r>
 8007f1e:	1c43      	adds	r3, r0, #1
 8007f20:	d103      	bne.n	8007f2a <sbrk_aligned+0x26>
 8007f22:	f04f 34ff 	mov.w	r4, #4294967295
 8007f26:	4620      	mov	r0, r4
 8007f28:	bd70      	pop	{r4, r5, r6, pc}
 8007f2a:	1cc4      	adds	r4, r0, #3
 8007f2c:	f024 0403 	bic.w	r4, r4, #3
 8007f30:	42a0      	cmp	r0, r4
 8007f32:	d0f8      	beq.n	8007f26 <sbrk_aligned+0x22>
 8007f34:	1a21      	subs	r1, r4, r0
 8007f36:	4628      	mov	r0, r5
 8007f38:	f000 fcc0 	bl	80088bc <_sbrk_r>
 8007f3c:	3001      	adds	r0, #1
 8007f3e:	d1f2      	bne.n	8007f26 <sbrk_aligned+0x22>
 8007f40:	e7ef      	b.n	8007f22 <sbrk_aligned+0x1e>
 8007f42:	bf00      	nop
 8007f44:	2000459c 	.word	0x2000459c

08007f48 <_malloc_r>:
 8007f48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f4c:	1ccd      	adds	r5, r1, #3
 8007f4e:	f025 0503 	bic.w	r5, r5, #3
 8007f52:	3508      	adds	r5, #8
 8007f54:	2d0c      	cmp	r5, #12
 8007f56:	bf38      	it	cc
 8007f58:	250c      	movcc	r5, #12
 8007f5a:	2d00      	cmp	r5, #0
 8007f5c:	4606      	mov	r6, r0
 8007f5e:	db01      	blt.n	8007f64 <_malloc_r+0x1c>
 8007f60:	42a9      	cmp	r1, r5
 8007f62:	d904      	bls.n	8007f6e <_malloc_r+0x26>
 8007f64:	230c      	movs	r3, #12
 8007f66:	6033      	str	r3, [r6, #0]
 8007f68:	2000      	movs	r0, #0
 8007f6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008044 <_malloc_r+0xfc>
 8007f72:	f000 f869 	bl	8008048 <__malloc_lock>
 8007f76:	f8d8 3000 	ldr.w	r3, [r8]
 8007f7a:	461c      	mov	r4, r3
 8007f7c:	bb44      	cbnz	r4, 8007fd0 <_malloc_r+0x88>
 8007f7e:	4629      	mov	r1, r5
 8007f80:	4630      	mov	r0, r6
 8007f82:	f7ff ffbf 	bl	8007f04 <sbrk_aligned>
 8007f86:	1c43      	adds	r3, r0, #1
 8007f88:	4604      	mov	r4, r0
 8007f8a:	d158      	bne.n	800803e <_malloc_r+0xf6>
 8007f8c:	f8d8 4000 	ldr.w	r4, [r8]
 8007f90:	4627      	mov	r7, r4
 8007f92:	2f00      	cmp	r7, #0
 8007f94:	d143      	bne.n	800801e <_malloc_r+0xd6>
 8007f96:	2c00      	cmp	r4, #0
 8007f98:	d04b      	beq.n	8008032 <_malloc_r+0xea>
 8007f9a:	6823      	ldr	r3, [r4, #0]
 8007f9c:	4639      	mov	r1, r7
 8007f9e:	4630      	mov	r0, r6
 8007fa0:	eb04 0903 	add.w	r9, r4, r3
 8007fa4:	f000 fc8a 	bl	80088bc <_sbrk_r>
 8007fa8:	4581      	cmp	r9, r0
 8007faa:	d142      	bne.n	8008032 <_malloc_r+0xea>
 8007fac:	6821      	ldr	r1, [r4, #0]
 8007fae:	1a6d      	subs	r5, r5, r1
 8007fb0:	4629      	mov	r1, r5
 8007fb2:	4630      	mov	r0, r6
 8007fb4:	f7ff ffa6 	bl	8007f04 <sbrk_aligned>
 8007fb8:	3001      	adds	r0, #1
 8007fba:	d03a      	beq.n	8008032 <_malloc_r+0xea>
 8007fbc:	6823      	ldr	r3, [r4, #0]
 8007fbe:	442b      	add	r3, r5
 8007fc0:	6023      	str	r3, [r4, #0]
 8007fc2:	f8d8 3000 	ldr.w	r3, [r8]
 8007fc6:	685a      	ldr	r2, [r3, #4]
 8007fc8:	bb62      	cbnz	r2, 8008024 <_malloc_r+0xdc>
 8007fca:	f8c8 7000 	str.w	r7, [r8]
 8007fce:	e00f      	b.n	8007ff0 <_malloc_r+0xa8>
 8007fd0:	6822      	ldr	r2, [r4, #0]
 8007fd2:	1b52      	subs	r2, r2, r5
 8007fd4:	d420      	bmi.n	8008018 <_malloc_r+0xd0>
 8007fd6:	2a0b      	cmp	r2, #11
 8007fd8:	d917      	bls.n	800800a <_malloc_r+0xc2>
 8007fda:	1961      	adds	r1, r4, r5
 8007fdc:	42a3      	cmp	r3, r4
 8007fde:	6025      	str	r5, [r4, #0]
 8007fe0:	bf18      	it	ne
 8007fe2:	6059      	strne	r1, [r3, #4]
 8007fe4:	6863      	ldr	r3, [r4, #4]
 8007fe6:	bf08      	it	eq
 8007fe8:	f8c8 1000 	streq.w	r1, [r8]
 8007fec:	5162      	str	r2, [r4, r5]
 8007fee:	604b      	str	r3, [r1, #4]
 8007ff0:	4630      	mov	r0, r6
 8007ff2:	f000 f82f 	bl	8008054 <__malloc_unlock>
 8007ff6:	f104 000b 	add.w	r0, r4, #11
 8007ffa:	1d23      	adds	r3, r4, #4
 8007ffc:	f020 0007 	bic.w	r0, r0, #7
 8008000:	1ac2      	subs	r2, r0, r3
 8008002:	bf1c      	itt	ne
 8008004:	1a1b      	subne	r3, r3, r0
 8008006:	50a3      	strne	r3, [r4, r2]
 8008008:	e7af      	b.n	8007f6a <_malloc_r+0x22>
 800800a:	6862      	ldr	r2, [r4, #4]
 800800c:	42a3      	cmp	r3, r4
 800800e:	bf0c      	ite	eq
 8008010:	f8c8 2000 	streq.w	r2, [r8]
 8008014:	605a      	strne	r2, [r3, #4]
 8008016:	e7eb      	b.n	8007ff0 <_malloc_r+0xa8>
 8008018:	4623      	mov	r3, r4
 800801a:	6864      	ldr	r4, [r4, #4]
 800801c:	e7ae      	b.n	8007f7c <_malloc_r+0x34>
 800801e:	463c      	mov	r4, r7
 8008020:	687f      	ldr	r7, [r7, #4]
 8008022:	e7b6      	b.n	8007f92 <_malloc_r+0x4a>
 8008024:	461a      	mov	r2, r3
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	42a3      	cmp	r3, r4
 800802a:	d1fb      	bne.n	8008024 <_malloc_r+0xdc>
 800802c:	2300      	movs	r3, #0
 800802e:	6053      	str	r3, [r2, #4]
 8008030:	e7de      	b.n	8007ff0 <_malloc_r+0xa8>
 8008032:	230c      	movs	r3, #12
 8008034:	6033      	str	r3, [r6, #0]
 8008036:	4630      	mov	r0, r6
 8008038:	f000 f80c 	bl	8008054 <__malloc_unlock>
 800803c:	e794      	b.n	8007f68 <_malloc_r+0x20>
 800803e:	6005      	str	r5, [r0, #0]
 8008040:	e7d6      	b.n	8007ff0 <_malloc_r+0xa8>
 8008042:	bf00      	nop
 8008044:	200045a0 	.word	0x200045a0

08008048 <__malloc_lock>:
 8008048:	4801      	ldr	r0, [pc, #4]	@ (8008050 <__malloc_lock+0x8>)
 800804a:	f7ff b8ac 	b.w	80071a6 <__retarget_lock_acquire_recursive>
 800804e:	bf00      	nop
 8008050:	20004598 	.word	0x20004598

08008054 <__malloc_unlock>:
 8008054:	4801      	ldr	r0, [pc, #4]	@ (800805c <__malloc_unlock+0x8>)
 8008056:	f7ff b8a7 	b.w	80071a8 <__retarget_lock_release_recursive>
 800805a:	bf00      	nop
 800805c:	20004598 	.word	0x20004598

08008060 <_Balloc>:
 8008060:	b570      	push	{r4, r5, r6, lr}
 8008062:	69c6      	ldr	r6, [r0, #28]
 8008064:	4604      	mov	r4, r0
 8008066:	460d      	mov	r5, r1
 8008068:	b976      	cbnz	r6, 8008088 <_Balloc+0x28>
 800806a:	2010      	movs	r0, #16
 800806c:	f7ff ff42 	bl	8007ef4 <malloc>
 8008070:	4602      	mov	r2, r0
 8008072:	61e0      	str	r0, [r4, #28]
 8008074:	b920      	cbnz	r0, 8008080 <_Balloc+0x20>
 8008076:	4b18      	ldr	r3, [pc, #96]	@ (80080d8 <_Balloc+0x78>)
 8008078:	4818      	ldr	r0, [pc, #96]	@ (80080dc <_Balloc+0x7c>)
 800807a:	216b      	movs	r1, #107	@ 0x6b
 800807c:	f000 fc2e 	bl	80088dc <__assert_func>
 8008080:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008084:	6006      	str	r6, [r0, #0]
 8008086:	60c6      	str	r6, [r0, #12]
 8008088:	69e6      	ldr	r6, [r4, #28]
 800808a:	68f3      	ldr	r3, [r6, #12]
 800808c:	b183      	cbz	r3, 80080b0 <_Balloc+0x50>
 800808e:	69e3      	ldr	r3, [r4, #28]
 8008090:	68db      	ldr	r3, [r3, #12]
 8008092:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008096:	b9b8      	cbnz	r0, 80080c8 <_Balloc+0x68>
 8008098:	2101      	movs	r1, #1
 800809a:	fa01 f605 	lsl.w	r6, r1, r5
 800809e:	1d72      	adds	r2, r6, #5
 80080a0:	0092      	lsls	r2, r2, #2
 80080a2:	4620      	mov	r0, r4
 80080a4:	f000 fc38 	bl	8008918 <_calloc_r>
 80080a8:	b160      	cbz	r0, 80080c4 <_Balloc+0x64>
 80080aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80080ae:	e00e      	b.n	80080ce <_Balloc+0x6e>
 80080b0:	2221      	movs	r2, #33	@ 0x21
 80080b2:	2104      	movs	r1, #4
 80080b4:	4620      	mov	r0, r4
 80080b6:	f000 fc2f 	bl	8008918 <_calloc_r>
 80080ba:	69e3      	ldr	r3, [r4, #28]
 80080bc:	60f0      	str	r0, [r6, #12]
 80080be:	68db      	ldr	r3, [r3, #12]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d1e4      	bne.n	800808e <_Balloc+0x2e>
 80080c4:	2000      	movs	r0, #0
 80080c6:	bd70      	pop	{r4, r5, r6, pc}
 80080c8:	6802      	ldr	r2, [r0, #0]
 80080ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80080ce:	2300      	movs	r3, #0
 80080d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80080d4:	e7f7      	b.n	80080c6 <_Balloc+0x66>
 80080d6:	bf00      	nop
 80080d8:	08008fed 	.word	0x08008fed
 80080dc:	0800906d 	.word	0x0800906d

080080e0 <_Bfree>:
 80080e0:	b570      	push	{r4, r5, r6, lr}
 80080e2:	69c6      	ldr	r6, [r0, #28]
 80080e4:	4605      	mov	r5, r0
 80080e6:	460c      	mov	r4, r1
 80080e8:	b976      	cbnz	r6, 8008108 <_Bfree+0x28>
 80080ea:	2010      	movs	r0, #16
 80080ec:	f7ff ff02 	bl	8007ef4 <malloc>
 80080f0:	4602      	mov	r2, r0
 80080f2:	61e8      	str	r0, [r5, #28]
 80080f4:	b920      	cbnz	r0, 8008100 <_Bfree+0x20>
 80080f6:	4b09      	ldr	r3, [pc, #36]	@ (800811c <_Bfree+0x3c>)
 80080f8:	4809      	ldr	r0, [pc, #36]	@ (8008120 <_Bfree+0x40>)
 80080fa:	218f      	movs	r1, #143	@ 0x8f
 80080fc:	f000 fbee 	bl	80088dc <__assert_func>
 8008100:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008104:	6006      	str	r6, [r0, #0]
 8008106:	60c6      	str	r6, [r0, #12]
 8008108:	b13c      	cbz	r4, 800811a <_Bfree+0x3a>
 800810a:	69eb      	ldr	r3, [r5, #28]
 800810c:	6862      	ldr	r2, [r4, #4]
 800810e:	68db      	ldr	r3, [r3, #12]
 8008110:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008114:	6021      	str	r1, [r4, #0]
 8008116:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800811a:	bd70      	pop	{r4, r5, r6, pc}
 800811c:	08008fed 	.word	0x08008fed
 8008120:	0800906d 	.word	0x0800906d

08008124 <__multadd>:
 8008124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008128:	690d      	ldr	r5, [r1, #16]
 800812a:	4607      	mov	r7, r0
 800812c:	460c      	mov	r4, r1
 800812e:	461e      	mov	r6, r3
 8008130:	f101 0c14 	add.w	ip, r1, #20
 8008134:	2000      	movs	r0, #0
 8008136:	f8dc 3000 	ldr.w	r3, [ip]
 800813a:	b299      	uxth	r1, r3
 800813c:	fb02 6101 	mla	r1, r2, r1, r6
 8008140:	0c1e      	lsrs	r6, r3, #16
 8008142:	0c0b      	lsrs	r3, r1, #16
 8008144:	fb02 3306 	mla	r3, r2, r6, r3
 8008148:	b289      	uxth	r1, r1
 800814a:	3001      	adds	r0, #1
 800814c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008150:	4285      	cmp	r5, r0
 8008152:	f84c 1b04 	str.w	r1, [ip], #4
 8008156:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800815a:	dcec      	bgt.n	8008136 <__multadd+0x12>
 800815c:	b30e      	cbz	r6, 80081a2 <__multadd+0x7e>
 800815e:	68a3      	ldr	r3, [r4, #8]
 8008160:	42ab      	cmp	r3, r5
 8008162:	dc19      	bgt.n	8008198 <__multadd+0x74>
 8008164:	6861      	ldr	r1, [r4, #4]
 8008166:	4638      	mov	r0, r7
 8008168:	3101      	adds	r1, #1
 800816a:	f7ff ff79 	bl	8008060 <_Balloc>
 800816e:	4680      	mov	r8, r0
 8008170:	b928      	cbnz	r0, 800817e <__multadd+0x5a>
 8008172:	4602      	mov	r2, r0
 8008174:	4b0c      	ldr	r3, [pc, #48]	@ (80081a8 <__multadd+0x84>)
 8008176:	480d      	ldr	r0, [pc, #52]	@ (80081ac <__multadd+0x88>)
 8008178:	21ba      	movs	r1, #186	@ 0xba
 800817a:	f000 fbaf 	bl	80088dc <__assert_func>
 800817e:	6922      	ldr	r2, [r4, #16]
 8008180:	3202      	adds	r2, #2
 8008182:	f104 010c 	add.w	r1, r4, #12
 8008186:	0092      	lsls	r2, r2, #2
 8008188:	300c      	adds	r0, #12
 800818a:	f7ff f80e 	bl	80071aa <memcpy>
 800818e:	4621      	mov	r1, r4
 8008190:	4638      	mov	r0, r7
 8008192:	f7ff ffa5 	bl	80080e0 <_Bfree>
 8008196:	4644      	mov	r4, r8
 8008198:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800819c:	3501      	adds	r5, #1
 800819e:	615e      	str	r6, [r3, #20]
 80081a0:	6125      	str	r5, [r4, #16]
 80081a2:	4620      	mov	r0, r4
 80081a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081a8:	0800905c 	.word	0x0800905c
 80081ac:	0800906d 	.word	0x0800906d

080081b0 <__hi0bits>:
 80081b0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80081b4:	4603      	mov	r3, r0
 80081b6:	bf36      	itet	cc
 80081b8:	0403      	lslcc	r3, r0, #16
 80081ba:	2000      	movcs	r0, #0
 80081bc:	2010      	movcc	r0, #16
 80081be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80081c2:	bf3c      	itt	cc
 80081c4:	021b      	lslcc	r3, r3, #8
 80081c6:	3008      	addcc	r0, #8
 80081c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80081cc:	bf3c      	itt	cc
 80081ce:	011b      	lslcc	r3, r3, #4
 80081d0:	3004      	addcc	r0, #4
 80081d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081d6:	bf3c      	itt	cc
 80081d8:	009b      	lslcc	r3, r3, #2
 80081da:	3002      	addcc	r0, #2
 80081dc:	2b00      	cmp	r3, #0
 80081de:	db05      	blt.n	80081ec <__hi0bits+0x3c>
 80081e0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80081e4:	f100 0001 	add.w	r0, r0, #1
 80081e8:	bf08      	it	eq
 80081ea:	2020      	moveq	r0, #32
 80081ec:	4770      	bx	lr

080081ee <__lo0bits>:
 80081ee:	6803      	ldr	r3, [r0, #0]
 80081f0:	4602      	mov	r2, r0
 80081f2:	f013 0007 	ands.w	r0, r3, #7
 80081f6:	d00b      	beq.n	8008210 <__lo0bits+0x22>
 80081f8:	07d9      	lsls	r1, r3, #31
 80081fa:	d421      	bmi.n	8008240 <__lo0bits+0x52>
 80081fc:	0798      	lsls	r0, r3, #30
 80081fe:	bf49      	itett	mi
 8008200:	085b      	lsrmi	r3, r3, #1
 8008202:	089b      	lsrpl	r3, r3, #2
 8008204:	2001      	movmi	r0, #1
 8008206:	6013      	strmi	r3, [r2, #0]
 8008208:	bf5c      	itt	pl
 800820a:	6013      	strpl	r3, [r2, #0]
 800820c:	2002      	movpl	r0, #2
 800820e:	4770      	bx	lr
 8008210:	b299      	uxth	r1, r3
 8008212:	b909      	cbnz	r1, 8008218 <__lo0bits+0x2a>
 8008214:	0c1b      	lsrs	r3, r3, #16
 8008216:	2010      	movs	r0, #16
 8008218:	b2d9      	uxtb	r1, r3
 800821a:	b909      	cbnz	r1, 8008220 <__lo0bits+0x32>
 800821c:	3008      	adds	r0, #8
 800821e:	0a1b      	lsrs	r3, r3, #8
 8008220:	0719      	lsls	r1, r3, #28
 8008222:	bf04      	itt	eq
 8008224:	091b      	lsreq	r3, r3, #4
 8008226:	3004      	addeq	r0, #4
 8008228:	0799      	lsls	r1, r3, #30
 800822a:	bf04      	itt	eq
 800822c:	089b      	lsreq	r3, r3, #2
 800822e:	3002      	addeq	r0, #2
 8008230:	07d9      	lsls	r1, r3, #31
 8008232:	d403      	bmi.n	800823c <__lo0bits+0x4e>
 8008234:	085b      	lsrs	r3, r3, #1
 8008236:	f100 0001 	add.w	r0, r0, #1
 800823a:	d003      	beq.n	8008244 <__lo0bits+0x56>
 800823c:	6013      	str	r3, [r2, #0]
 800823e:	4770      	bx	lr
 8008240:	2000      	movs	r0, #0
 8008242:	4770      	bx	lr
 8008244:	2020      	movs	r0, #32
 8008246:	4770      	bx	lr

08008248 <__i2b>:
 8008248:	b510      	push	{r4, lr}
 800824a:	460c      	mov	r4, r1
 800824c:	2101      	movs	r1, #1
 800824e:	f7ff ff07 	bl	8008060 <_Balloc>
 8008252:	4602      	mov	r2, r0
 8008254:	b928      	cbnz	r0, 8008262 <__i2b+0x1a>
 8008256:	4b05      	ldr	r3, [pc, #20]	@ (800826c <__i2b+0x24>)
 8008258:	4805      	ldr	r0, [pc, #20]	@ (8008270 <__i2b+0x28>)
 800825a:	f240 1145 	movw	r1, #325	@ 0x145
 800825e:	f000 fb3d 	bl	80088dc <__assert_func>
 8008262:	2301      	movs	r3, #1
 8008264:	6144      	str	r4, [r0, #20]
 8008266:	6103      	str	r3, [r0, #16]
 8008268:	bd10      	pop	{r4, pc}
 800826a:	bf00      	nop
 800826c:	0800905c 	.word	0x0800905c
 8008270:	0800906d 	.word	0x0800906d

08008274 <__multiply>:
 8008274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008278:	4614      	mov	r4, r2
 800827a:	690a      	ldr	r2, [r1, #16]
 800827c:	6923      	ldr	r3, [r4, #16]
 800827e:	429a      	cmp	r2, r3
 8008280:	bfa8      	it	ge
 8008282:	4623      	movge	r3, r4
 8008284:	460f      	mov	r7, r1
 8008286:	bfa4      	itt	ge
 8008288:	460c      	movge	r4, r1
 800828a:	461f      	movge	r7, r3
 800828c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008290:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008294:	68a3      	ldr	r3, [r4, #8]
 8008296:	6861      	ldr	r1, [r4, #4]
 8008298:	eb0a 0609 	add.w	r6, sl, r9
 800829c:	42b3      	cmp	r3, r6
 800829e:	b085      	sub	sp, #20
 80082a0:	bfb8      	it	lt
 80082a2:	3101      	addlt	r1, #1
 80082a4:	f7ff fedc 	bl	8008060 <_Balloc>
 80082a8:	b930      	cbnz	r0, 80082b8 <__multiply+0x44>
 80082aa:	4602      	mov	r2, r0
 80082ac:	4b44      	ldr	r3, [pc, #272]	@ (80083c0 <__multiply+0x14c>)
 80082ae:	4845      	ldr	r0, [pc, #276]	@ (80083c4 <__multiply+0x150>)
 80082b0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80082b4:	f000 fb12 	bl	80088dc <__assert_func>
 80082b8:	f100 0514 	add.w	r5, r0, #20
 80082bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80082c0:	462b      	mov	r3, r5
 80082c2:	2200      	movs	r2, #0
 80082c4:	4543      	cmp	r3, r8
 80082c6:	d321      	bcc.n	800830c <__multiply+0x98>
 80082c8:	f107 0114 	add.w	r1, r7, #20
 80082cc:	f104 0214 	add.w	r2, r4, #20
 80082d0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80082d4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80082d8:	9302      	str	r3, [sp, #8]
 80082da:	1b13      	subs	r3, r2, r4
 80082dc:	3b15      	subs	r3, #21
 80082de:	f023 0303 	bic.w	r3, r3, #3
 80082e2:	3304      	adds	r3, #4
 80082e4:	f104 0715 	add.w	r7, r4, #21
 80082e8:	42ba      	cmp	r2, r7
 80082ea:	bf38      	it	cc
 80082ec:	2304      	movcc	r3, #4
 80082ee:	9301      	str	r3, [sp, #4]
 80082f0:	9b02      	ldr	r3, [sp, #8]
 80082f2:	9103      	str	r1, [sp, #12]
 80082f4:	428b      	cmp	r3, r1
 80082f6:	d80c      	bhi.n	8008312 <__multiply+0x9e>
 80082f8:	2e00      	cmp	r6, #0
 80082fa:	dd03      	ble.n	8008304 <__multiply+0x90>
 80082fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008300:	2b00      	cmp	r3, #0
 8008302:	d05b      	beq.n	80083bc <__multiply+0x148>
 8008304:	6106      	str	r6, [r0, #16]
 8008306:	b005      	add	sp, #20
 8008308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800830c:	f843 2b04 	str.w	r2, [r3], #4
 8008310:	e7d8      	b.n	80082c4 <__multiply+0x50>
 8008312:	f8b1 a000 	ldrh.w	sl, [r1]
 8008316:	f1ba 0f00 	cmp.w	sl, #0
 800831a:	d024      	beq.n	8008366 <__multiply+0xf2>
 800831c:	f104 0e14 	add.w	lr, r4, #20
 8008320:	46a9      	mov	r9, r5
 8008322:	f04f 0c00 	mov.w	ip, #0
 8008326:	f85e 7b04 	ldr.w	r7, [lr], #4
 800832a:	f8d9 3000 	ldr.w	r3, [r9]
 800832e:	fa1f fb87 	uxth.w	fp, r7
 8008332:	b29b      	uxth	r3, r3
 8008334:	fb0a 330b 	mla	r3, sl, fp, r3
 8008338:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800833c:	f8d9 7000 	ldr.w	r7, [r9]
 8008340:	4463      	add	r3, ip
 8008342:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008346:	fb0a c70b 	mla	r7, sl, fp, ip
 800834a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800834e:	b29b      	uxth	r3, r3
 8008350:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008354:	4572      	cmp	r2, lr
 8008356:	f849 3b04 	str.w	r3, [r9], #4
 800835a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800835e:	d8e2      	bhi.n	8008326 <__multiply+0xb2>
 8008360:	9b01      	ldr	r3, [sp, #4]
 8008362:	f845 c003 	str.w	ip, [r5, r3]
 8008366:	9b03      	ldr	r3, [sp, #12]
 8008368:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800836c:	3104      	adds	r1, #4
 800836e:	f1b9 0f00 	cmp.w	r9, #0
 8008372:	d021      	beq.n	80083b8 <__multiply+0x144>
 8008374:	682b      	ldr	r3, [r5, #0]
 8008376:	f104 0c14 	add.w	ip, r4, #20
 800837a:	46ae      	mov	lr, r5
 800837c:	f04f 0a00 	mov.w	sl, #0
 8008380:	f8bc b000 	ldrh.w	fp, [ip]
 8008384:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008388:	fb09 770b 	mla	r7, r9, fp, r7
 800838c:	4457      	add	r7, sl
 800838e:	b29b      	uxth	r3, r3
 8008390:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008394:	f84e 3b04 	str.w	r3, [lr], #4
 8008398:	f85c 3b04 	ldr.w	r3, [ip], #4
 800839c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80083a0:	f8be 3000 	ldrh.w	r3, [lr]
 80083a4:	fb09 330a 	mla	r3, r9, sl, r3
 80083a8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80083ac:	4562      	cmp	r2, ip
 80083ae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80083b2:	d8e5      	bhi.n	8008380 <__multiply+0x10c>
 80083b4:	9f01      	ldr	r7, [sp, #4]
 80083b6:	51eb      	str	r3, [r5, r7]
 80083b8:	3504      	adds	r5, #4
 80083ba:	e799      	b.n	80082f0 <__multiply+0x7c>
 80083bc:	3e01      	subs	r6, #1
 80083be:	e79b      	b.n	80082f8 <__multiply+0x84>
 80083c0:	0800905c 	.word	0x0800905c
 80083c4:	0800906d 	.word	0x0800906d

080083c8 <__pow5mult>:
 80083c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083cc:	4615      	mov	r5, r2
 80083ce:	f012 0203 	ands.w	r2, r2, #3
 80083d2:	4607      	mov	r7, r0
 80083d4:	460e      	mov	r6, r1
 80083d6:	d007      	beq.n	80083e8 <__pow5mult+0x20>
 80083d8:	4c25      	ldr	r4, [pc, #148]	@ (8008470 <__pow5mult+0xa8>)
 80083da:	3a01      	subs	r2, #1
 80083dc:	2300      	movs	r3, #0
 80083de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80083e2:	f7ff fe9f 	bl	8008124 <__multadd>
 80083e6:	4606      	mov	r6, r0
 80083e8:	10ad      	asrs	r5, r5, #2
 80083ea:	d03d      	beq.n	8008468 <__pow5mult+0xa0>
 80083ec:	69fc      	ldr	r4, [r7, #28]
 80083ee:	b97c      	cbnz	r4, 8008410 <__pow5mult+0x48>
 80083f0:	2010      	movs	r0, #16
 80083f2:	f7ff fd7f 	bl	8007ef4 <malloc>
 80083f6:	4602      	mov	r2, r0
 80083f8:	61f8      	str	r0, [r7, #28]
 80083fa:	b928      	cbnz	r0, 8008408 <__pow5mult+0x40>
 80083fc:	4b1d      	ldr	r3, [pc, #116]	@ (8008474 <__pow5mult+0xac>)
 80083fe:	481e      	ldr	r0, [pc, #120]	@ (8008478 <__pow5mult+0xb0>)
 8008400:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008404:	f000 fa6a 	bl	80088dc <__assert_func>
 8008408:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800840c:	6004      	str	r4, [r0, #0]
 800840e:	60c4      	str	r4, [r0, #12]
 8008410:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008414:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008418:	b94c      	cbnz	r4, 800842e <__pow5mult+0x66>
 800841a:	f240 2171 	movw	r1, #625	@ 0x271
 800841e:	4638      	mov	r0, r7
 8008420:	f7ff ff12 	bl	8008248 <__i2b>
 8008424:	2300      	movs	r3, #0
 8008426:	f8c8 0008 	str.w	r0, [r8, #8]
 800842a:	4604      	mov	r4, r0
 800842c:	6003      	str	r3, [r0, #0]
 800842e:	f04f 0900 	mov.w	r9, #0
 8008432:	07eb      	lsls	r3, r5, #31
 8008434:	d50a      	bpl.n	800844c <__pow5mult+0x84>
 8008436:	4631      	mov	r1, r6
 8008438:	4622      	mov	r2, r4
 800843a:	4638      	mov	r0, r7
 800843c:	f7ff ff1a 	bl	8008274 <__multiply>
 8008440:	4631      	mov	r1, r6
 8008442:	4680      	mov	r8, r0
 8008444:	4638      	mov	r0, r7
 8008446:	f7ff fe4b 	bl	80080e0 <_Bfree>
 800844a:	4646      	mov	r6, r8
 800844c:	106d      	asrs	r5, r5, #1
 800844e:	d00b      	beq.n	8008468 <__pow5mult+0xa0>
 8008450:	6820      	ldr	r0, [r4, #0]
 8008452:	b938      	cbnz	r0, 8008464 <__pow5mult+0x9c>
 8008454:	4622      	mov	r2, r4
 8008456:	4621      	mov	r1, r4
 8008458:	4638      	mov	r0, r7
 800845a:	f7ff ff0b 	bl	8008274 <__multiply>
 800845e:	6020      	str	r0, [r4, #0]
 8008460:	f8c0 9000 	str.w	r9, [r0]
 8008464:	4604      	mov	r4, r0
 8008466:	e7e4      	b.n	8008432 <__pow5mult+0x6a>
 8008468:	4630      	mov	r0, r6
 800846a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800846e:	bf00      	nop
 8008470:	080090c8 	.word	0x080090c8
 8008474:	08008fed 	.word	0x08008fed
 8008478:	0800906d 	.word	0x0800906d

0800847c <__lshift>:
 800847c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008480:	460c      	mov	r4, r1
 8008482:	6849      	ldr	r1, [r1, #4]
 8008484:	6923      	ldr	r3, [r4, #16]
 8008486:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800848a:	68a3      	ldr	r3, [r4, #8]
 800848c:	4607      	mov	r7, r0
 800848e:	4691      	mov	r9, r2
 8008490:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008494:	f108 0601 	add.w	r6, r8, #1
 8008498:	42b3      	cmp	r3, r6
 800849a:	db0b      	blt.n	80084b4 <__lshift+0x38>
 800849c:	4638      	mov	r0, r7
 800849e:	f7ff fddf 	bl	8008060 <_Balloc>
 80084a2:	4605      	mov	r5, r0
 80084a4:	b948      	cbnz	r0, 80084ba <__lshift+0x3e>
 80084a6:	4602      	mov	r2, r0
 80084a8:	4b28      	ldr	r3, [pc, #160]	@ (800854c <__lshift+0xd0>)
 80084aa:	4829      	ldr	r0, [pc, #164]	@ (8008550 <__lshift+0xd4>)
 80084ac:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80084b0:	f000 fa14 	bl	80088dc <__assert_func>
 80084b4:	3101      	adds	r1, #1
 80084b6:	005b      	lsls	r3, r3, #1
 80084b8:	e7ee      	b.n	8008498 <__lshift+0x1c>
 80084ba:	2300      	movs	r3, #0
 80084bc:	f100 0114 	add.w	r1, r0, #20
 80084c0:	f100 0210 	add.w	r2, r0, #16
 80084c4:	4618      	mov	r0, r3
 80084c6:	4553      	cmp	r3, sl
 80084c8:	db33      	blt.n	8008532 <__lshift+0xb6>
 80084ca:	6920      	ldr	r0, [r4, #16]
 80084cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80084d0:	f104 0314 	add.w	r3, r4, #20
 80084d4:	f019 091f 	ands.w	r9, r9, #31
 80084d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80084dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80084e0:	d02b      	beq.n	800853a <__lshift+0xbe>
 80084e2:	f1c9 0e20 	rsb	lr, r9, #32
 80084e6:	468a      	mov	sl, r1
 80084e8:	2200      	movs	r2, #0
 80084ea:	6818      	ldr	r0, [r3, #0]
 80084ec:	fa00 f009 	lsl.w	r0, r0, r9
 80084f0:	4310      	orrs	r0, r2
 80084f2:	f84a 0b04 	str.w	r0, [sl], #4
 80084f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80084fa:	459c      	cmp	ip, r3
 80084fc:	fa22 f20e 	lsr.w	r2, r2, lr
 8008500:	d8f3      	bhi.n	80084ea <__lshift+0x6e>
 8008502:	ebac 0304 	sub.w	r3, ip, r4
 8008506:	3b15      	subs	r3, #21
 8008508:	f023 0303 	bic.w	r3, r3, #3
 800850c:	3304      	adds	r3, #4
 800850e:	f104 0015 	add.w	r0, r4, #21
 8008512:	4584      	cmp	ip, r0
 8008514:	bf38      	it	cc
 8008516:	2304      	movcc	r3, #4
 8008518:	50ca      	str	r2, [r1, r3]
 800851a:	b10a      	cbz	r2, 8008520 <__lshift+0xa4>
 800851c:	f108 0602 	add.w	r6, r8, #2
 8008520:	3e01      	subs	r6, #1
 8008522:	4638      	mov	r0, r7
 8008524:	612e      	str	r6, [r5, #16]
 8008526:	4621      	mov	r1, r4
 8008528:	f7ff fdda 	bl	80080e0 <_Bfree>
 800852c:	4628      	mov	r0, r5
 800852e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008532:	f842 0f04 	str.w	r0, [r2, #4]!
 8008536:	3301      	adds	r3, #1
 8008538:	e7c5      	b.n	80084c6 <__lshift+0x4a>
 800853a:	3904      	subs	r1, #4
 800853c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008540:	f841 2f04 	str.w	r2, [r1, #4]!
 8008544:	459c      	cmp	ip, r3
 8008546:	d8f9      	bhi.n	800853c <__lshift+0xc0>
 8008548:	e7ea      	b.n	8008520 <__lshift+0xa4>
 800854a:	bf00      	nop
 800854c:	0800905c 	.word	0x0800905c
 8008550:	0800906d 	.word	0x0800906d

08008554 <__mcmp>:
 8008554:	690a      	ldr	r2, [r1, #16]
 8008556:	4603      	mov	r3, r0
 8008558:	6900      	ldr	r0, [r0, #16]
 800855a:	1a80      	subs	r0, r0, r2
 800855c:	b530      	push	{r4, r5, lr}
 800855e:	d10e      	bne.n	800857e <__mcmp+0x2a>
 8008560:	3314      	adds	r3, #20
 8008562:	3114      	adds	r1, #20
 8008564:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008568:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800856c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008570:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008574:	4295      	cmp	r5, r2
 8008576:	d003      	beq.n	8008580 <__mcmp+0x2c>
 8008578:	d205      	bcs.n	8008586 <__mcmp+0x32>
 800857a:	f04f 30ff 	mov.w	r0, #4294967295
 800857e:	bd30      	pop	{r4, r5, pc}
 8008580:	42a3      	cmp	r3, r4
 8008582:	d3f3      	bcc.n	800856c <__mcmp+0x18>
 8008584:	e7fb      	b.n	800857e <__mcmp+0x2a>
 8008586:	2001      	movs	r0, #1
 8008588:	e7f9      	b.n	800857e <__mcmp+0x2a>
	...

0800858c <__mdiff>:
 800858c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008590:	4689      	mov	r9, r1
 8008592:	4606      	mov	r6, r0
 8008594:	4611      	mov	r1, r2
 8008596:	4648      	mov	r0, r9
 8008598:	4614      	mov	r4, r2
 800859a:	f7ff ffdb 	bl	8008554 <__mcmp>
 800859e:	1e05      	subs	r5, r0, #0
 80085a0:	d112      	bne.n	80085c8 <__mdiff+0x3c>
 80085a2:	4629      	mov	r1, r5
 80085a4:	4630      	mov	r0, r6
 80085a6:	f7ff fd5b 	bl	8008060 <_Balloc>
 80085aa:	4602      	mov	r2, r0
 80085ac:	b928      	cbnz	r0, 80085ba <__mdiff+0x2e>
 80085ae:	4b3f      	ldr	r3, [pc, #252]	@ (80086ac <__mdiff+0x120>)
 80085b0:	f240 2137 	movw	r1, #567	@ 0x237
 80085b4:	483e      	ldr	r0, [pc, #248]	@ (80086b0 <__mdiff+0x124>)
 80085b6:	f000 f991 	bl	80088dc <__assert_func>
 80085ba:	2301      	movs	r3, #1
 80085bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80085c0:	4610      	mov	r0, r2
 80085c2:	b003      	add	sp, #12
 80085c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085c8:	bfbc      	itt	lt
 80085ca:	464b      	movlt	r3, r9
 80085cc:	46a1      	movlt	r9, r4
 80085ce:	4630      	mov	r0, r6
 80085d0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80085d4:	bfba      	itte	lt
 80085d6:	461c      	movlt	r4, r3
 80085d8:	2501      	movlt	r5, #1
 80085da:	2500      	movge	r5, #0
 80085dc:	f7ff fd40 	bl	8008060 <_Balloc>
 80085e0:	4602      	mov	r2, r0
 80085e2:	b918      	cbnz	r0, 80085ec <__mdiff+0x60>
 80085e4:	4b31      	ldr	r3, [pc, #196]	@ (80086ac <__mdiff+0x120>)
 80085e6:	f240 2145 	movw	r1, #581	@ 0x245
 80085ea:	e7e3      	b.n	80085b4 <__mdiff+0x28>
 80085ec:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80085f0:	6926      	ldr	r6, [r4, #16]
 80085f2:	60c5      	str	r5, [r0, #12]
 80085f4:	f109 0310 	add.w	r3, r9, #16
 80085f8:	f109 0514 	add.w	r5, r9, #20
 80085fc:	f104 0e14 	add.w	lr, r4, #20
 8008600:	f100 0b14 	add.w	fp, r0, #20
 8008604:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008608:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800860c:	9301      	str	r3, [sp, #4]
 800860e:	46d9      	mov	r9, fp
 8008610:	f04f 0c00 	mov.w	ip, #0
 8008614:	9b01      	ldr	r3, [sp, #4]
 8008616:	f85e 0b04 	ldr.w	r0, [lr], #4
 800861a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800861e:	9301      	str	r3, [sp, #4]
 8008620:	fa1f f38a 	uxth.w	r3, sl
 8008624:	4619      	mov	r1, r3
 8008626:	b283      	uxth	r3, r0
 8008628:	1acb      	subs	r3, r1, r3
 800862a:	0c00      	lsrs	r0, r0, #16
 800862c:	4463      	add	r3, ip
 800862e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008632:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008636:	b29b      	uxth	r3, r3
 8008638:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800863c:	4576      	cmp	r6, lr
 800863e:	f849 3b04 	str.w	r3, [r9], #4
 8008642:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008646:	d8e5      	bhi.n	8008614 <__mdiff+0x88>
 8008648:	1b33      	subs	r3, r6, r4
 800864a:	3b15      	subs	r3, #21
 800864c:	f023 0303 	bic.w	r3, r3, #3
 8008650:	3415      	adds	r4, #21
 8008652:	3304      	adds	r3, #4
 8008654:	42a6      	cmp	r6, r4
 8008656:	bf38      	it	cc
 8008658:	2304      	movcc	r3, #4
 800865a:	441d      	add	r5, r3
 800865c:	445b      	add	r3, fp
 800865e:	461e      	mov	r6, r3
 8008660:	462c      	mov	r4, r5
 8008662:	4544      	cmp	r4, r8
 8008664:	d30e      	bcc.n	8008684 <__mdiff+0xf8>
 8008666:	f108 0103 	add.w	r1, r8, #3
 800866a:	1b49      	subs	r1, r1, r5
 800866c:	f021 0103 	bic.w	r1, r1, #3
 8008670:	3d03      	subs	r5, #3
 8008672:	45a8      	cmp	r8, r5
 8008674:	bf38      	it	cc
 8008676:	2100      	movcc	r1, #0
 8008678:	440b      	add	r3, r1
 800867a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800867e:	b191      	cbz	r1, 80086a6 <__mdiff+0x11a>
 8008680:	6117      	str	r7, [r2, #16]
 8008682:	e79d      	b.n	80085c0 <__mdiff+0x34>
 8008684:	f854 1b04 	ldr.w	r1, [r4], #4
 8008688:	46e6      	mov	lr, ip
 800868a:	0c08      	lsrs	r0, r1, #16
 800868c:	fa1c fc81 	uxtah	ip, ip, r1
 8008690:	4471      	add	r1, lr
 8008692:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008696:	b289      	uxth	r1, r1
 8008698:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800869c:	f846 1b04 	str.w	r1, [r6], #4
 80086a0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80086a4:	e7dd      	b.n	8008662 <__mdiff+0xd6>
 80086a6:	3f01      	subs	r7, #1
 80086a8:	e7e7      	b.n	800867a <__mdiff+0xee>
 80086aa:	bf00      	nop
 80086ac:	0800905c 	.word	0x0800905c
 80086b0:	0800906d 	.word	0x0800906d

080086b4 <__d2b>:
 80086b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80086b8:	460f      	mov	r7, r1
 80086ba:	2101      	movs	r1, #1
 80086bc:	ec59 8b10 	vmov	r8, r9, d0
 80086c0:	4616      	mov	r6, r2
 80086c2:	f7ff fccd 	bl	8008060 <_Balloc>
 80086c6:	4604      	mov	r4, r0
 80086c8:	b930      	cbnz	r0, 80086d8 <__d2b+0x24>
 80086ca:	4602      	mov	r2, r0
 80086cc:	4b23      	ldr	r3, [pc, #140]	@ (800875c <__d2b+0xa8>)
 80086ce:	4824      	ldr	r0, [pc, #144]	@ (8008760 <__d2b+0xac>)
 80086d0:	f240 310f 	movw	r1, #783	@ 0x30f
 80086d4:	f000 f902 	bl	80088dc <__assert_func>
 80086d8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80086dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80086e0:	b10d      	cbz	r5, 80086e6 <__d2b+0x32>
 80086e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80086e6:	9301      	str	r3, [sp, #4]
 80086e8:	f1b8 0300 	subs.w	r3, r8, #0
 80086ec:	d023      	beq.n	8008736 <__d2b+0x82>
 80086ee:	4668      	mov	r0, sp
 80086f0:	9300      	str	r3, [sp, #0]
 80086f2:	f7ff fd7c 	bl	80081ee <__lo0bits>
 80086f6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80086fa:	b1d0      	cbz	r0, 8008732 <__d2b+0x7e>
 80086fc:	f1c0 0320 	rsb	r3, r0, #32
 8008700:	fa02 f303 	lsl.w	r3, r2, r3
 8008704:	430b      	orrs	r3, r1
 8008706:	40c2      	lsrs	r2, r0
 8008708:	6163      	str	r3, [r4, #20]
 800870a:	9201      	str	r2, [sp, #4]
 800870c:	9b01      	ldr	r3, [sp, #4]
 800870e:	61a3      	str	r3, [r4, #24]
 8008710:	2b00      	cmp	r3, #0
 8008712:	bf0c      	ite	eq
 8008714:	2201      	moveq	r2, #1
 8008716:	2202      	movne	r2, #2
 8008718:	6122      	str	r2, [r4, #16]
 800871a:	b1a5      	cbz	r5, 8008746 <__d2b+0x92>
 800871c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008720:	4405      	add	r5, r0
 8008722:	603d      	str	r5, [r7, #0]
 8008724:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008728:	6030      	str	r0, [r6, #0]
 800872a:	4620      	mov	r0, r4
 800872c:	b003      	add	sp, #12
 800872e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008732:	6161      	str	r1, [r4, #20]
 8008734:	e7ea      	b.n	800870c <__d2b+0x58>
 8008736:	a801      	add	r0, sp, #4
 8008738:	f7ff fd59 	bl	80081ee <__lo0bits>
 800873c:	9b01      	ldr	r3, [sp, #4]
 800873e:	6163      	str	r3, [r4, #20]
 8008740:	3020      	adds	r0, #32
 8008742:	2201      	movs	r2, #1
 8008744:	e7e8      	b.n	8008718 <__d2b+0x64>
 8008746:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800874a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800874e:	6038      	str	r0, [r7, #0]
 8008750:	6918      	ldr	r0, [r3, #16]
 8008752:	f7ff fd2d 	bl	80081b0 <__hi0bits>
 8008756:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800875a:	e7e5      	b.n	8008728 <__d2b+0x74>
 800875c:	0800905c 	.word	0x0800905c
 8008760:	0800906d 	.word	0x0800906d

08008764 <__sflush_r>:
 8008764:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800876c:	0716      	lsls	r6, r2, #28
 800876e:	4605      	mov	r5, r0
 8008770:	460c      	mov	r4, r1
 8008772:	d454      	bmi.n	800881e <__sflush_r+0xba>
 8008774:	684b      	ldr	r3, [r1, #4]
 8008776:	2b00      	cmp	r3, #0
 8008778:	dc02      	bgt.n	8008780 <__sflush_r+0x1c>
 800877a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800877c:	2b00      	cmp	r3, #0
 800877e:	dd48      	ble.n	8008812 <__sflush_r+0xae>
 8008780:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008782:	2e00      	cmp	r6, #0
 8008784:	d045      	beq.n	8008812 <__sflush_r+0xae>
 8008786:	2300      	movs	r3, #0
 8008788:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800878c:	682f      	ldr	r7, [r5, #0]
 800878e:	6a21      	ldr	r1, [r4, #32]
 8008790:	602b      	str	r3, [r5, #0]
 8008792:	d030      	beq.n	80087f6 <__sflush_r+0x92>
 8008794:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008796:	89a3      	ldrh	r3, [r4, #12]
 8008798:	0759      	lsls	r1, r3, #29
 800879a:	d505      	bpl.n	80087a8 <__sflush_r+0x44>
 800879c:	6863      	ldr	r3, [r4, #4]
 800879e:	1ad2      	subs	r2, r2, r3
 80087a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80087a2:	b10b      	cbz	r3, 80087a8 <__sflush_r+0x44>
 80087a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80087a6:	1ad2      	subs	r2, r2, r3
 80087a8:	2300      	movs	r3, #0
 80087aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80087ac:	6a21      	ldr	r1, [r4, #32]
 80087ae:	4628      	mov	r0, r5
 80087b0:	47b0      	blx	r6
 80087b2:	1c43      	adds	r3, r0, #1
 80087b4:	89a3      	ldrh	r3, [r4, #12]
 80087b6:	d106      	bne.n	80087c6 <__sflush_r+0x62>
 80087b8:	6829      	ldr	r1, [r5, #0]
 80087ba:	291d      	cmp	r1, #29
 80087bc:	d82b      	bhi.n	8008816 <__sflush_r+0xb2>
 80087be:	4a2a      	ldr	r2, [pc, #168]	@ (8008868 <__sflush_r+0x104>)
 80087c0:	410a      	asrs	r2, r1
 80087c2:	07d6      	lsls	r6, r2, #31
 80087c4:	d427      	bmi.n	8008816 <__sflush_r+0xb2>
 80087c6:	2200      	movs	r2, #0
 80087c8:	6062      	str	r2, [r4, #4]
 80087ca:	04d9      	lsls	r1, r3, #19
 80087cc:	6922      	ldr	r2, [r4, #16]
 80087ce:	6022      	str	r2, [r4, #0]
 80087d0:	d504      	bpl.n	80087dc <__sflush_r+0x78>
 80087d2:	1c42      	adds	r2, r0, #1
 80087d4:	d101      	bne.n	80087da <__sflush_r+0x76>
 80087d6:	682b      	ldr	r3, [r5, #0]
 80087d8:	b903      	cbnz	r3, 80087dc <__sflush_r+0x78>
 80087da:	6560      	str	r0, [r4, #84]	@ 0x54
 80087dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80087de:	602f      	str	r7, [r5, #0]
 80087e0:	b1b9      	cbz	r1, 8008812 <__sflush_r+0xae>
 80087e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80087e6:	4299      	cmp	r1, r3
 80087e8:	d002      	beq.n	80087f0 <__sflush_r+0x8c>
 80087ea:	4628      	mov	r0, r5
 80087ec:	f7ff fb38 	bl	8007e60 <_free_r>
 80087f0:	2300      	movs	r3, #0
 80087f2:	6363      	str	r3, [r4, #52]	@ 0x34
 80087f4:	e00d      	b.n	8008812 <__sflush_r+0xae>
 80087f6:	2301      	movs	r3, #1
 80087f8:	4628      	mov	r0, r5
 80087fa:	47b0      	blx	r6
 80087fc:	4602      	mov	r2, r0
 80087fe:	1c50      	adds	r0, r2, #1
 8008800:	d1c9      	bne.n	8008796 <__sflush_r+0x32>
 8008802:	682b      	ldr	r3, [r5, #0]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d0c6      	beq.n	8008796 <__sflush_r+0x32>
 8008808:	2b1d      	cmp	r3, #29
 800880a:	d001      	beq.n	8008810 <__sflush_r+0xac>
 800880c:	2b16      	cmp	r3, #22
 800880e:	d11e      	bne.n	800884e <__sflush_r+0xea>
 8008810:	602f      	str	r7, [r5, #0]
 8008812:	2000      	movs	r0, #0
 8008814:	e022      	b.n	800885c <__sflush_r+0xf8>
 8008816:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800881a:	b21b      	sxth	r3, r3
 800881c:	e01b      	b.n	8008856 <__sflush_r+0xf2>
 800881e:	690f      	ldr	r7, [r1, #16]
 8008820:	2f00      	cmp	r7, #0
 8008822:	d0f6      	beq.n	8008812 <__sflush_r+0xae>
 8008824:	0793      	lsls	r3, r2, #30
 8008826:	680e      	ldr	r6, [r1, #0]
 8008828:	bf08      	it	eq
 800882a:	694b      	ldreq	r3, [r1, #20]
 800882c:	600f      	str	r7, [r1, #0]
 800882e:	bf18      	it	ne
 8008830:	2300      	movne	r3, #0
 8008832:	eba6 0807 	sub.w	r8, r6, r7
 8008836:	608b      	str	r3, [r1, #8]
 8008838:	f1b8 0f00 	cmp.w	r8, #0
 800883c:	dde9      	ble.n	8008812 <__sflush_r+0xae>
 800883e:	6a21      	ldr	r1, [r4, #32]
 8008840:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008842:	4643      	mov	r3, r8
 8008844:	463a      	mov	r2, r7
 8008846:	4628      	mov	r0, r5
 8008848:	47b0      	blx	r6
 800884a:	2800      	cmp	r0, #0
 800884c:	dc08      	bgt.n	8008860 <__sflush_r+0xfc>
 800884e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008852:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008856:	81a3      	strh	r3, [r4, #12]
 8008858:	f04f 30ff 	mov.w	r0, #4294967295
 800885c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008860:	4407      	add	r7, r0
 8008862:	eba8 0800 	sub.w	r8, r8, r0
 8008866:	e7e7      	b.n	8008838 <__sflush_r+0xd4>
 8008868:	dfbffffe 	.word	0xdfbffffe

0800886c <_fflush_r>:
 800886c:	b538      	push	{r3, r4, r5, lr}
 800886e:	690b      	ldr	r3, [r1, #16]
 8008870:	4605      	mov	r5, r0
 8008872:	460c      	mov	r4, r1
 8008874:	b913      	cbnz	r3, 800887c <_fflush_r+0x10>
 8008876:	2500      	movs	r5, #0
 8008878:	4628      	mov	r0, r5
 800887a:	bd38      	pop	{r3, r4, r5, pc}
 800887c:	b118      	cbz	r0, 8008886 <_fflush_r+0x1a>
 800887e:	6a03      	ldr	r3, [r0, #32]
 8008880:	b90b      	cbnz	r3, 8008886 <_fflush_r+0x1a>
 8008882:	f7fe fb43 	bl	8006f0c <__sinit>
 8008886:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d0f3      	beq.n	8008876 <_fflush_r+0xa>
 800888e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008890:	07d0      	lsls	r0, r2, #31
 8008892:	d404      	bmi.n	800889e <_fflush_r+0x32>
 8008894:	0599      	lsls	r1, r3, #22
 8008896:	d402      	bmi.n	800889e <_fflush_r+0x32>
 8008898:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800889a:	f7fe fc84 	bl	80071a6 <__retarget_lock_acquire_recursive>
 800889e:	4628      	mov	r0, r5
 80088a0:	4621      	mov	r1, r4
 80088a2:	f7ff ff5f 	bl	8008764 <__sflush_r>
 80088a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80088a8:	07da      	lsls	r2, r3, #31
 80088aa:	4605      	mov	r5, r0
 80088ac:	d4e4      	bmi.n	8008878 <_fflush_r+0xc>
 80088ae:	89a3      	ldrh	r3, [r4, #12]
 80088b0:	059b      	lsls	r3, r3, #22
 80088b2:	d4e1      	bmi.n	8008878 <_fflush_r+0xc>
 80088b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80088b6:	f7fe fc77 	bl	80071a8 <__retarget_lock_release_recursive>
 80088ba:	e7dd      	b.n	8008878 <_fflush_r+0xc>

080088bc <_sbrk_r>:
 80088bc:	b538      	push	{r3, r4, r5, lr}
 80088be:	4d06      	ldr	r5, [pc, #24]	@ (80088d8 <_sbrk_r+0x1c>)
 80088c0:	2300      	movs	r3, #0
 80088c2:	4604      	mov	r4, r0
 80088c4:	4608      	mov	r0, r1
 80088c6:	602b      	str	r3, [r5, #0]
 80088c8:	f7f9 f970 	bl	8001bac <_sbrk>
 80088cc:	1c43      	adds	r3, r0, #1
 80088ce:	d102      	bne.n	80088d6 <_sbrk_r+0x1a>
 80088d0:	682b      	ldr	r3, [r5, #0]
 80088d2:	b103      	cbz	r3, 80088d6 <_sbrk_r+0x1a>
 80088d4:	6023      	str	r3, [r4, #0]
 80088d6:	bd38      	pop	{r3, r4, r5, pc}
 80088d8:	20004594 	.word	0x20004594

080088dc <__assert_func>:
 80088dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80088de:	4614      	mov	r4, r2
 80088e0:	461a      	mov	r2, r3
 80088e2:	4b09      	ldr	r3, [pc, #36]	@ (8008908 <__assert_func+0x2c>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	4605      	mov	r5, r0
 80088e8:	68d8      	ldr	r0, [r3, #12]
 80088ea:	b954      	cbnz	r4, 8008902 <__assert_func+0x26>
 80088ec:	4b07      	ldr	r3, [pc, #28]	@ (800890c <__assert_func+0x30>)
 80088ee:	461c      	mov	r4, r3
 80088f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80088f4:	9100      	str	r1, [sp, #0]
 80088f6:	462b      	mov	r3, r5
 80088f8:	4905      	ldr	r1, [pc, #20]	@ (8008910 <__assert_func+0x34>)
 80088fa:	f000 f841 	bl	8008980 <fiprintf>
 80088fe:	f000 f851 	bl	80089a4 <abort>
 8008902:	4b04      	ldr	r3, [pc, #16]	@ (8008914 <__assert_func+0x38>)
 8008904:	e7f4      	b.n	80088f0 <__assert_func+0x14>
 8008906:	bf00      	nop
 8008908:	2000001c 	.word	0x2000001c
 800890c:	0800920d 	.word	0x0800920d
 8008910:	080091df 	.word	0x080091df
 8008914:	080091d2 	.word	0x080091d2

08008918 <_calloc_r>:
 8008918:	b570      	push	{r4, r5, r6, lr}
 800891a:	fba1 5402 	umull	r5, r4, r1, r2
 800891e:	b93c      	cbnz	r4, 8008930 <_calloc_r+0x18>
 8008920:	4629      	mov	r1, r5
 8008922:	f7ff fb11 	bl	8007f48 <_malloc_r>
 8008926:	4606      	mov	r6, r0
 8008928:	b928      	cbnz	r0, 8008936 <_calloc_r+0x1e>
 800892a:	2600      	movs	r6, #0
 800892c:	4630      	mov	r0, r6
 800892e:	bd70      	pop	{r4, r5, r6, pc}
 8008930:	220c      	movs	r2, #12
 8008932:	6002      	str	r2, [r0, #0]
 8008934:	e7f9      	b.n	800892a <_calloc_r+0x12>
 8008936:	462a      	mov	r2, r5
 8008938:	4621      	mov	r1, r4
 800893a:	f7fe fb60 	bl	8006ffe <memset>
 800893e:	e7f5      	b.n	800892c <_calloc_r+0x14>

08008940 <__ascii_mbtowc>:
 8008940:	b082      	sub	sp, #8
 8008942:	b901      	cbnz	r1, 8008946 <__ascii_mbtowc+0x6>
 8008944:	a901      	add	r1, sp, #4
 8008946:	b142      	cbz	r2, 800895a <__ascii_mbtowc+0x1a>
 8008948:	b14b      	cbz	r3, 800895e <__ascii_mbtowc+0x1e>
 800894a:	7813      	ldrb	r3, [r2, #0]
 800894c:	600b      	str	r3, [r1, #0]
 800894e:	7812      	ldrb	r2, [r2, #0]
 8008950:	1e10      	subs	r0, r2, #0
 8008952:	bf18      	it	ne
 8008954:	2001      	movne	r0, #1
 8008956:	b002      	add	sp, #8
 8008958:	4770      	bx	lr
 800895a:	4610      	mov	r0, r2
 800895c:	e7fb      	b.n	8008956 <__ascii_mbtowc+0x16>
 800895e:	f06f 0001 	mvn.w	r0, #1
 8008962:	e7f8      	b.n	8008956 <__ascii_mbtowc+0x16>

08008964 <__ascii_wctomb>:
 8008964:	4603      	mov	r3, r0
 8008966:	4608      	mov	r0, r1
 8008968:	b141      	cbz	r1, 800897c <__ascii_wctomb+0x18>
 800896a:	2aff      	cmp	r2, #255	@ 0xff
 800896c:	d904      	bls.n	8008978 <__ascii_wctomb+0x14>
 800896e:	228a      	movs	r2, #138	@ 0x8a
 8008970:	601a      	str	r2, [r3, #0]
 8008972:	f04f 30ff 	mov.w	r0, #4294967295
 8008976:	4770      	bx	lr
 8008978:	700a      	strb	r2, [r1, #0]
 800897a:	2001      	movs	r0, #1
 800897c:	4770      	bx	lr
	...

08008980 <fiprintf>:
 8008980:	b40e      	push	{r1, r2, r3}
 8008982:	b503      	push	{r0, r1, lr}
 8008984:	4601      	mov	r1, r0
 8008986:	ab03      	add	r3, sp, #12
 8008988:	4805      	ldr	r0, [pc, #20]	@ (80089a0 <fiprintf+0x20>)
 800898a:	f853 2b04 	ldr.w	r2, [r3], #4
 800898e:	6800      	ldr	r0, [r0, #0]
 8008990:	9301      	str	r3, [sp, #4]
 8008992:	f000 f837 	bl	8008a04 <_vfiprintf_r>
 8008996:	b002      	add	sp, #8
 8008998:	f85d eb04 	ldr.w	lr, [sp], #4
 800899c:	b003      	add	sp, #12
 800899e:	4770      	bx	lr
 80089a0:	2000001c 	.word	0x2000001c

080089a4 <abort>:
 80089a4:	b508      	push	{r3, lr}
 80089a6:	2006      	movs	r0, #6
 80089a8:	f000 fa00 	bl	8008dac <raise>
 80089ac:	2001      	movs	r0, #1
 80089ae:	f7f9 f885 	bl	8001abc <_exit>

080089b2 <__sfputc_r>:
 80089b2:	6893      	ldr	r3, [r2, #8]
 80089b4:	3b01      	subs	r3, #1
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	b410      	push	{r4}
 80089ba:	6093      	str	r3, [r2, #8]
 80089bc:	da08      	bge.n	80089d0 <__sfputc_r+0x1e>
 80089be:	6994      	ldr	r4, [r2, #24]
 80089c0:	42a3      	cmp	r3, r4
 80089c2:	db01      	blt.n	80089c8 <__sfputc_r+0x16>
 80089c4:	290a      	cmp	r1, #10
 80089c6:	d103      	bne.n	80089d0 <__sfputc_r+0x1e>
 80089c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089cc:	f000 b932 	b.w	8008c34 <__swbuf_r>
 80089d0:	6813      	ldr	r3, [r2, #0]
 80089d2:	1c58      	adds	r0, r3, #1
 80089d4:	6010      	str	r0, [r2, #0]
 80089d6:	7019      	strb	r1, [r3, #0]
 80089d8:	4608      	mov	r0, r1
 80089da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089de:	4770      	bx	lr

080089e0 <__sfputs_r>:
 80089e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089e2:	4606      	mov	r6, r0
 80089e4:	460f      	mov	r7, r1
 80089e6:	4614      	mov	r4, r2
 80089e8:	18d5      	adds	r5, r2, r3
 80089ea:	42ac      	cmp	r4, r5
 80089ec:	d101      	bne.n	80089f2 <__sfputs_r+0x12>
 80089ee:	2000      	movs	r0, #0
 80089f0:	e007      	b.n	8008a02 <__sfputs_r+0x22>
 80089f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089f6:	463a      	mov	r2, r7
 80089f8:	4630      	mov	r0, r6
 80089fa:	f7ff ffda 	bl	80089b2 <__sfputc_r>
 80089fe:	1c43      	adds	r3, r0, #1
 8008a00:	d1f3      	bne.n	80089ea <__sfputs_r+0xa>
 8008a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008a04 <_vfiprintf_r>:
 8008a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a08:	460d      	mov	r5, r1
 8008a0a:	b09d      	sub	sp, #116	@ 0x74
 8008a0c:	4614      	mov	r4, r2
 8008a0e:	4698      	mov	r8, r3
 8008a10:	4606      	mov	r6, r0
 8008a12:	b118      	cbz	r0, 8008a1c <_vfiprintf_r+0x18>
 8008a14:	6a03      	ldr	r3, [r0, #32]
 8008a16:	b90b      	cbnz	r3, 8008a1c <_vfiprintf_r+0x18>
 8008a18:	f7fe fa78 	bl	8006f0c <__sinit>
 8008a1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a1e:	07d9      	lsls	r1, r3, #31
 8008a20:	d405      	bmi.n	8008a2e <_vfiprintf_r+0x2a>
 8008a22:	89ab      	ldrh	r3, [r5, #12]
 8008a24:	059a      	lsls	r2, r3, #22
 8008a26:	d402      	bmi.n	8008a2e <_vfiprintf_r+0x2a>
 8008a28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a2a:	f7fe fbbc 	bl	80071a6 <__retarget_lock_acquire_recursive>
 8008a2e:	89ab      	ldrh	r3, [r5, #12]
 8008a30:	071b      	lsls	r3, r3, #28
 8008a32:	d501      	bpl.n	8008a38 <_vfiprintf_r+0x34>
 8008a34:	692b      	ldr	r3, [r5, #16]
 8008a36:	b99b      	cbnz	r3, 8008a60 <_vfiprintf_r+0x5c>
 8008a38:	4629      	mov	r1, r5
 8008a3a:	4630      	mov	r0, r6
 8008a3c:	f000 f938 	bl	8008cb0 <__swsetup_r>
 8008a40:	b170      	cbz	r0, 8008a60 <_vfiprintf_r+0x5c>
 8008a42:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a44:	07dc      	lsls	r4, r3, #31
 8008a46:	d504      	bpl.n	8008a52 <_vfiprintf_r+0x4e>
 8008a48:	f04f 30ff 	mov.w	r0, #4294967295
 8008a4c:	b01d      	add	sp, #116	@ 0x74
 8008a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a52:	89ab      	ldrh	r3, [r5, #12]
 8008a54:	0598      	lsls	r0, r3, #22
 8008a56:	d4f7      	bmi.n	8008a48 <_vfiprintf_r+0x44>
 8008a58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a5a:	f7fe fba5 	bl	80071a8 <__retarget_lock_release_recursive>
 8008a5e:	e7f3      	b.n	8008a48 <_vfiprintf_r+0x44>
 8008a60:	2300      	movs	r3, #0
 8008a62:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a64:	2320      	movs	r3, #32
 8008a66:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008a6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a6e:	2330      	movs	r3, #48	@ 0x30
 8008a70:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008c20 <_vfiprintf_r+0x21c>
 8008a74:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008a78:	f04f 0901 	mov.w	r9, #1
 8008a7c:	4623      	mov	r3, r4
 8008a7e:	469a      	mov	sl, r3
 8008a80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a84:	b10a      	cbz	r2, 8008a8a <_vfiprintf_r+0x86>
 8008a86:	2a25      	cmp	r2, #37	@ 0x25
 8008a88:	d1f9      	bne.n	8008a7e <_vfiprintf_r+0x7a>
 8008a8a:	ebba 0b04 	subs.w	fp, sl, r4
 8008a8e:	d00b      	beq.n	8008aa8 <_vfiprintf_r+0xa4>
 8008a90:	465b      	mov	r3, fp
 8008a92:	4622      	mov	r2, r4
 8008a94:	4629      	mov	r1, r5
 8008a96:	4630      	mov	r0, r6
 8008a98:	f7ff ffa2 	bl	80089e0 <__sfputs_r>
 8008a9c:	3001      	adds	r0, #1
 8008a9e:	f000 80a7 	beq.w	8008bf0 <_vfiprintf_r+0x1ec>
 8008aa2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008aa4:	445a      	add	r2, fp
 8008aa6:	9209      	str	r2, [sp, #36]	@ 0x24
 8008aa8:	f89a 3000 	ldrb.w	r3, [sl]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	f000 809f 	beq.w	8008bf0 <_vfiprintf_r+0x1ec>
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8008ab8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008abc:	f10a 0a01 	add.w	sl, sl, #1
 8008ac0:	9304      	str	r3, [sp, #16]
 8008ac2:	9307      	str	r3, [sp, #28]
 8008ac4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008ac8:	931a      	str	r3, [sp, #104]	@ 0x68
 8008aca:	4654      	mov	r4, sl
 8008acc:	2205      	movs	r2, #5
 8008ace:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ad2:	4853      	ldr	r0, [pc, #332]	@ (8008c20 <_vfiprintf_r+0x21c>)
 8008ad4:	f7f7 fb7c 	bl	80001d0 <memchr>
 8008ad8:	9a04      	ldr	r2, [sp, #16]
 8008ada:	b9d8      	cbnz	r0, 8008b14 <_vfiprintf_r+0x110>
 8008adc:	06d1      	lsls	r1, r2, #27
 8008ade:	bf44      	itt	mi
 8008ae0:	2320      	movmi	r3, #32
 8008ae2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ae6:	0713      	lsls	r3, r2, #28
 8008ae8:	bf44      	itt	mi
 8008aea:	232b      	movmi	r3, #43	@ 0x2b
 8008aec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008af0:	f89a 3000 	ldrb.w	r3, [sl]
 8008af4:	2b2a      	cmp	r3, #42	@ 0x2a
 8008af6:	d015      	beq.n	8008b24 <_vfiprintf_r+0x120>
 8008af8:	9a07      	ldr	r2, [sp, #28]
 8008afa:	4654      	mov	r4, sl
 8008afc:	2000      	movs	r0, #0
 8008afe:	f04f 0c0a 	mov.w	ip, #10
 8008b02:	4621      	mov	r1, r4
 8008b04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b08:	3b30      	subs	r3, #48	@ 0x30
 8008b0a:	2b09      	cmp	r3, #9
 8008b0c:	d94b      	bls.n	8008ba6 <_vfiprintf_r+0x1a2>
 8008b0e:	b1b0      	cbz	r0, 8008b3e <_vfiprintf_r+0x13a>
 8008b10:	9207      	str	r2, [sp, #28]
 8008b12:	e014      	b.n	8008b3e <_vfiprintf_r+0x13a>
 8008b14:	eba0 0308 	sub.w	r3, r0, r8
 8008b18:	fa09 f303 	lsl.w	r3, r9, r3
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	9304      	str	r3, [sp, #16]
 8008b20:	46a2      	mov	sl, r4
 8008b22:	e7d2      	b.n	8008aca <_vfiprintf_r+0xc6>
 8008b24:	9b03      	ldr	r3, [sp, #12]
 8008b26:	1d19      	adds	r1, r3, #4
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	9103      	str	r1, [sp, #12]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	bfbb      	ittet	lt
 8008b30:	425b      	neglt	r3, r3
 8008b32:	f042 0202 	orrlt.w	r2, r2, #2
 8008b36:	9307      	strge	r3, [sp, #28]
 8008b38:	9307      	strlt	r3, [sp, #28]
 8008b3a:	bfb8      	it	lt
 8008b3c:	9204      	strlt	r2, [sp, #16]
 8008b3e:	7823      	ldrb	r3, [r4, #0]
 8008b40:	2b2e      	cmp	r3, #46	@ 0x2e
 8008b42:	d10a      	bne.n	8008b5a <_vfiprintf_r+0x156>
 8008b44:	7863      	ldrb	r3, [r4, #1]
 8008b46:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b48:	d132      	bne.n	8008bb0 <_vfiprintf_r+0x1ac>
 8008b4a:	9b03      	ldr	r3, [sp, #12]
 8008b4c:	1d1a      	adds	r2, r3, #4
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	9203      	str	r2, [sp, #12]
 8008b52:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008b56:	3402      	adds	r4, #2
 8008b58:	9305      	str	r3, [sp, #20]
 8008b5a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008c30 <_vfiprintf_r+0x22c>
 8008b5e:	7821      	ldrb	r1, [r4, #0]
 8008b60:	2203      	movs	r2, #3
 8008b62:	4650      	mov	r0, sl
 8008b64:	f7f7 fb34 	bl	80001d0 <memchr>
 8008b68:	b138      	cbz	r0, 8008b7a <_vfiprintf_r+0x176>
 8008b6a:	9b04      	ldr	r3, [sp, #16]
 8008b6c:	eba0 000a 	sub.w	r0, r0, sl
 8008b70:	2240      	movs	r2, #64	@ 0x40
 8008b72:	4082      	lsls	r2, r0
 8008b74:	4313      	orrs	r3, r2
 8008b76:	3401      	adds	r4, #1
 8008b78:	9304      	str	r3, [sp, #16]
 8008b7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b7e:	4829      	ldr	r0, [pc, #164]	@ (8008c24 <_vfiprintf_r+0x220>)
 8008b80:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008b84:	2206      	movs	r2, #6
 8008b86:	f7f7 fb23 	bl	80001d0 <memchr>
 8008b8a:	2800      	cmp	r0, #0
 8008b8c:	d03f      	beq.n	8008c0e <_vfiprintf_r+0x20a>
 8008b8e:	4b26      	ldr	r3, [pc, #152]	@ (8008c28 <_vfiprintf_r+0x224>)
 8008b90:	bb1b      	cbnz	r3, 8008bda <_vfiprintf_r+0x1d6>
 8008b92:	9b03      	ldr	r3, [sp, #12]
 8008b94:	3307      	adds	r3, #7
 8008b96:	f023 0307 	bic.w	r3, r3, #7
 8008b9a:	3308      	adds	r3, #8
 8008b9c:	9303      	str	r3, [sp, #12]
 8008b9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ba0:	443b      	add	r3, r7
 8008ba2:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ba4:	e76a      	b.n	8008a7c <_vfiprintf_r+0x78>
 8008ba6:	fb0c 3202 	mla	r2, ip, r2, r3
 8008baa:	460c      	mov	r4, r1
 8008bac:	2001      	movs	r0, #1
 8008bae:	e7a8      	b.n	8008b02 <_vfiprintf_r+0xfe>
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	3401      	adds	r4, #1
 8008bb4:	9305      	str	r3, [sp, #20]
 8008bb6:	4619      	mov	r1, r3
 8008bb8:	f04f 0c0a 	mov.w	ip, #10
 8008bbc:	4620      	mov	r0, r4
 8008bbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bc2:	3a30      	subs	r2, #48	@ 0x30
 8008bc4:	2a09      	cmp	r2, #9
 8008bc6:	d903      	bls.n	8008bd0 <_vfiprintf_r+0x1cc>
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d0c6      	beq.n	8008b5a <_vfiprintf_r+0x156>
 8008bcc:	9105      	str	r1, [sp, #20]
 8008bce:	e7c4      	b.n	8008b5a <_vfiprintf_r+0x156>
 8008bd0:	fb0c 2101 	mla	r1, ip, r1, r2
 8008bd4:	4604      	mov	r4, r0
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	e7f0      	b.n	8008bbc <_vfiprintf_r+0x1b8>
 8008bda:	ab03      	add	r3, sp, #12
 8008bdc:	9300      	str	r3, [sp, #0]
 8008bde:	462a      	mov	r2, r5
 8008be0:	4b12      	ldr	r3, [pc, #72]	@ (8008c2c <_vfiprintf_r+0x228>)
 8008be2:	a904      	add	r1, sp, #16
 8008be4:	4630      	mov	r0, r6
 8008be6:	f7fd fd4d 	bl	8006684 <_printf_float>
 8008bea:	4607      	mov	r7, r0
 8008bec:	1c78      	adds	r0, r7, #1
 8008bee:	d1d6      	bne.n	8008b9e <_vfiprintf_r+0x19a>
 8008bf0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008bf2:	07d9      	lsls	r1, r3, #31
 8008bf4:	d405      	bmi.n	8008c02 <_vfiprintf_r+0x1fe>
 8008bf6:	89ab      	ldrh	r3, [r5, #12]
 8008bf8:	059a      	lsls	r2, r3, #22
 8008bfa:	d402      	bmi.n	8008c02 <_vfiprintf_r+0x1fe>
 8008bfc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008bfe:	f7fe fad3 	bl	80071a8 <__retarget_lock_release_recursive>
 8008c02:	89ab      	ldrh	r3, [r5, #12]
 8008c04:	065b      	lsls	r3, r3, #25
 8008c06:	f53f af1f 	bmi.w	8008a48 <_vfiprintf_r+0x44>
 8008c0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008c0c:	e71e      	b.n	8008a4c <_vfiprintf_r+0x48>
 8008c0e:	ab03      	add	r3, sp, #12
 8008c10:	9300      	str	r3, [sp, #0]
 8008c12:	462a      	mov	r2, r5
 8008c14:	4b05      	ldr	r3, [pc, #20]	@ (8008c2c <_vfiprintf_r+0x228>)
 8008c16:	a904      	add	r1, sp, #16
 8008c18:	4630      	mov	r0, r6
 8008c1a:	f7fd ffcb 	bl	8006bb4 <_printf_i>
 8008c1e:	e7e4      	b.n	8008bea <_vfiprintf_r+0x1e6>
 8008c20:	0800930f 	.word	0x0800930f
 8008c24:	08009319 	.word	0x08009319
 8008c28:	08006685 	.word	0x08006685
 8008c2c:	080089e1 	.word	0x080089e1
 8008c30:	08009315 	.word	0x08009315

08008c34 <__swbuf_r>:
 8008c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c36:	460e      	mov	r6, r1
 8008c38:	4614      	mov	r4, r2
 8008c3a:	4605      	mov	r5, r0
 8008c3c:	b118      	cbz	r0, 8008c46 <__swbuf_r+0x12>
 8008c3e:	6a03      	ldr	r3, [r0, #32]
 8008c40:	b90b      	cbnz	r3, 8008c46 <__swbuf_r+0x12>
 8008c42:	f7fe f963 	bl	8006f0c <__sinit>
 8008c46:	69a3      	ldr	r3, [r4, #24]
 8008c48:	60a3      	str	r3, [r4, #8]
 8008c4a:	89a3      	ldrh	r3, [r4, #12]
 8008c4c:	071a      	lsls	r2, r3, #28
 8008c4e:	d501      	bpl.n	8008c54 <__swbuf_r+0x20>
 8008c50:	6923      	ldr	r3, [r4, #16]
 8008c52:	b943      	cbnz	r3, 8008c66 <__swbuf_r+0x32>
 8008c54:	4621      	mov	r1, r4
 8008c56:	4628      	mov	r0, r5
 8008c58:	f000 f82a 	bl	8008cb0 <__swsetup_r>
 8008c5c:	b118      	cbz	r0, 8008c66 <__swbuf_r+0x32>
 8008c5e:	f04f 37ff 	mov.w	r7, #4294967295
 8008c62:	4638      	mov	r0, r7
 8008c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c66:	6823      	ldr	r3, [r4, #0]
 8008c68:	6922      	ldr	r2, [r4, #16]
 8008c6a:	1a98      	subs	r0, r3, r2
 8008c6c:	6963      	ldr	r3, [r4, #20]
 8008c6e:	b2f6      	uxtb	r6, r6
 8008c70:	4283      	cmp	r3, r0
 8008c72:	4637      	mov	r7, r6
 8008c74:	dc05      	bgt.n	8008c82 <__swbuf_r+0x4e>
 8008c76:	4621      	mov	r1, r4
 8008c78:	4628      	mov	r0, r5
 8008c7a:	f7ff fdf7 	bl	800886c <_fflush_r>
 8008c7e:	2800      	cmp	r0, #0
 8008c80:	d1ed      	bne.n	8008c5e <__swbuf_r+0x2a>
 8008c82:	68a3      	ldr	r3, [r4, #8]
 8008c84:	3b01      	subs	r3, #1
 8008c86:	60a3      	str	r3, [r4, #8]
 8008c88:	6823      	ldr	r3, [r4, #0]
 8008c8a:	1c5a      	adds	r2, r3, #1
 8008c8c:	6022      	str	r2, [r4, #0]
 8008c8e:	701e      	strb	r6, [r3, #0]
 8008c90:	6962      	ldr	r2, [r4, #20]
 8008c92:	1c43      	adds	r3, r0, #1
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d004      	beq.n	8008ca2 <__swbuf_r+0x6e>
 8008c98:	89a3      	ldrh	r3, [r4, #12]
 8008c9a:	07db      	lsls	r3, r3, #31
 8008c9c:	d5e1      	bpl.n	8008c62 <__swbuf_r+0x2e>
 8008c9e:	2e0a      	cmp	r6, #10
 8008ca0:	d1df      	bne.n	8008c62 <__swbuf_r+0x2e>
 8008ca2:	4621      	mov	r1, r4
 8008ca4:	4628      	mov	r0, r5
 8008ca6:	f7ff fde1 	bl	800886c <_fflush_r>
 8008caa:	2800      	cmp	r0, #0
 8008cac:	d0d9      	beq.n	8008c62 <__swbuf_r+0x2e>
 8008cae:	e7d6      	b.n	8008c5e <__swbuf_r+0x2a>

08008cb0 <__swsetup_r>:
 8008cb0:	b538      	push	{r3, r4, r5, lr}
 8008cb2:	4b29      	ldr	r3, [pc, #164]	@ (8008d58 <__swsetup_r+0xa8>)
 8008cb4:	4605      	mov	r5, r0
 8008cb6:	6818      	ldr	r0, [r3, #0]
 8008cb8:	460c      	mov	r4, r1
 8008cba:	b118      	cbz	r0, 8008cc4 <__swsetup_r+0x14>
 8008cbc:	6a03      	ldr	r3, [r0, #32]
 8008cbe:	b90b      	cbnz	r3, 8008cc4 <__swsetup_r+0x14>
 8008cc0:	f7fe f924 	bl	8006f0c <__sinit>
 8008cc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cc8:	0719      	lsls	r1, r3, #28
 8008cca:	d422      	bmi.n	8008d12 <__swsetup_r+0x62>
 8008ccc:	06da      	lsls	r2, r3, #27
 8008cce:	d407      	bmi.n	8008ce0 <__swsetup_r+0x30>
 8008cd0:	2209      	movs	r2, #9
 8008cd2:	602a      	str	r2, [r5, #0]
 8008cd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008cd8:	81a3      	strh	r3, [r4, #12]
 8008cda:	f04f 30ff 	mov.w	r0, #4294967295
 8008cde:	e033      	b.n	8008d48 <__swsetup_r+0x98>
 8008ce0:	0758      	lsls	r0, r3, #29
 8008ce2:	d512      	bpl.n	8008d0a <__swsetup_r+0x5a>
 8008ce4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008ce6:	b141      	cbz	r1, 8008cfa <__swsetup_r+0x4a>
 8008ce8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008cec:	4299      	cmp	r1, r3
 8008cee:	d002      	beq.n	8008cf6 <__swsetup_r+0x46>
 8008cf0:	4628      	mov	r0, r5
 8008cf2:	f7ff f8b5 	bl	8007e60 <_free_r>
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	6363      	str	r3, [r4, #52]	@ 0x34
 8008cfa:	89a3      	ldrh	r3, [r4, #12]
 8008cfc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008d00:	81a3      	strh	r3, [r4, #12]
 8008d02:	2300      	movs	r3, #0
 8008d04:	6063      	str	r3, [r4, #4]
 8008d06:	6923      	ldr	r3, [r4, #16]
 8008d08:	6023      	str	r3, [r4, #0]
 8008d0a:	89a3      	ldrh	r3, [r4, #12]
 8008d0c:	f043 0308 	orr.w	r3, r3, #8
 8008d10:	81a3      	strh	r3, [r4, #12]
 8008d12:	6923      	ldr	r3, [r4, #16]
 8008d14:	b94b      	cbnz	r3, 8008d2a <__swsetup_r+0x7a>
 8008d16:	89a3      	ldrh	r3, [r4, #12]
 8008d18:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008d1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d20:	d003      	beq.n	8008d2a <__swsetup_r+0x7a>
 8008d22:	4621      	mov	r1, r4
 8008d24:	4628      	mov	r0, r5
 8008d26:	f000 f883 	bl	8008e30 <__smakebuf_r>
 8008d2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d2e:	f013 0201 	ands.w	r2, r3, #1
 8008d32:	d00a      	beq.n	8008d4a <__swsetup_r+0x9a>
 8008d34:	2200      	movs	r2, #0
 8008d36:	60a2      	str	r2, [r4, #8]
 8008d38:	6962      	ldr	r2, [r4, #20]
 8008d3a:	4252      	negs	r2, r2
 8008d3c:	61a2      	str	r2, [r4, #24]
 8008d3e:	6922      	ldr	r2, [r4, #16]
 8008d40:	b942      	cbnz	r2, 8008d54 <__swsetup_r+0xa4>
 8008d42:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008d46:	d1c5      	bne.n	8008cd4 <__swsetup_r+0x24>
 8008d48:	bd38      	pop	{r3, r4, r5, pc}
 8008d4a:	0799      	lsls	r1, r3, #30
 8008d4c:	bf58      	it	pl
 8008d4e:	6962      	ldrpl	r2, [r4, #20]
 8008d50:	60a2      	str	r2, [r4, #8]
 8008d52:	e7f4      	b.n	8008d3e <__swsetup_r+0x8e>
 8008d54:	2000      	movs	r0, #0
 8008d56:	e7f7      	b.n	8008d48 <__swsetup_r+0x98>
 8008d58:	2000001c 	.word	0x2000001c

08008d5c <_raise_r>:
 8008d5c:	291f      	cmp	r1, #31
 8008d5e:	b538      	push	{r3, r4, r5, lr}
 8008d60:	4605      	mov	r5, r0
 8008d62:	460c      	mov	r4, r1
 8008d64:	d904      	bls.n	8008d70 <_raise_r+0x14>
 8008d66:	2316      	movs	r3, #22
 8008d68:	6003      	str	r3, [r0, #0]
 8008d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8008d6e:	bd38      	pop	{r3, r4, r5, pc}
 8008d70:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008d72:	b112      	cbz	r2, 8008d7a <_raise_r+0x1e>
 8008d74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008d78:	b94b      	cbnz	r3, 8008d8e <_raise_r+0x32>
 8008d7a:	4628      	mov	r0, r5
 8008d7c:	f000 f830 	bl	8008de0 <_getpid_r>
 8008d80:	4622      	mov	r2, r4
 8008d82:	4601      	mov	r1, r0
 8008d84:	4628      	mov	r0, r5
 8008d86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d8a:	f000 b817 	b.w	8008dbc <_kill_r>
 8008d8e:	2b01      	cmp	r3, #1
 8008d90:	d00a      	beq.n	8008da8 <_raise_r+0x4c>
 8008d92:	1c59      	adds	r1, r3, #1
 8008d94:	d103      	bne.n	8008d9e <_raise_r+0x42>
 8008d96:	2316      	movs	r3, #22
 8008d98:	6003      	str	r3, [r0, #0]
 8008d9a:	2001      	movs	r0, #1
 8008d9c:	e7e7      	b.n	8008d6e <_raise_r+0x12>
 8008d9e:	2100      	movs	r1, #0
 8008da0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008da4:	4620      	mov	r0, r4
 8008da6:	4798      	blx	r3
 8008da8:	2000      	movs	r0, #0
 8008daa:	e7e0      	b.n	8008d6e <_raise_r+0x12>

08008dac <raise>:
 8008dac:	4b02      	ldr	r3, [pc, #8]	@ (8008db8 <raise+0xc>)
 8008dae:	4601      	mov	r1, r0
 8008db0:	6818      	ldr	r0, [r3, #0]
 8008db2:	f7ff bfd3 	b.w	8008d5c <_raise_r>
 8008db6:	bf00      	nop
 8008db8:	2000001c 	.word	0x2000001c

08008dbc <_kill_r>:
 8008dbc:	b538      	push	{r3, r4, r5, lr}
 8008dbe:	4d07      	ldr	r5, [pc, #28]	@ (8008ddc <_kill_r+0x20>)
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	4604      	mov	r4, r0
 8008dc4:	4608      	mov	r0, r1
 8008dc6:	4611      	mov	r1, r2
 8008dc8:	602b      	str	r3, [r5, #0]
 8008dca:	f7f8 fe67 	bl	8001a9c <_kill>
 8008dce:	1c43      	adds	r3, r0, #1
 8008dd0:	d102      	bne.n	8008dd8 <_kill_r+0x1c>
 8008dd2:	682b      	ldr	r3, [r5, #0]
 8008dd4:	b103      	cbz	r3, 8008dd8 <_kill_r+0x1c>
 8008dd6:	6023      	str	r3, [r4, #0]
 8008dd8:	bd38      	pop	{r3, r4, r5, pc}
 8008dda:	bf00      	nop
 8008ddc:	20004594 	.word	0x20004594

08008de0 <_getpid_r>:
 8008de0:	f7f8 be54 	b.w	8001a8c <_getpid>

08008de4 <__swhatbuf_r>:
 8008de4:	b570      	push	{r4, r5, r6, lr}
 8008de6:	460c      	mov	r4, r1
 8008de8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dec:	2900      	cmp	r1, #0
 8008dee:	b096      	sub	sp, #88	@ 0x58
 8008df0:	4615      	mov	r5, r2
 8008df2:	461e      	mov	r6, r3
 8008df4:	da0d      	bge.n	8008e12 <__swhatbuf_r+0x2e>
 8008df6:	89a3      	ldrh	r3, [r4, #12]
 8008df8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008dfc:	f04f 0100 	mov.w	r1, #0
 8008e00:	bf14      	ite	ne
 8008e02:	2340      	movne	r3, #64	@ 0x40
 8008e04:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008e08:	2000      	movs	r0, #0
 8008e0a:	6031      	str	r1, [r6, #0]
 8008e0c:	602b      	str	r3, [r5, #0]
 8008e0e:	b016      	add	sp, #88	@ 0x58
 8008e10:	bd70      	pop	{r4, r5, r6, pc}
 8008e12:	466a      	mov	r2, sp
 8008e14:	f000 f848 	bl	8008ea8 <_fstat_r>
 8008e18:	2800      	cmp	r0, #0
 8008e1a:	dbec      	blt.n	8008df6 <__swhatbuf_r+0x12>
 8008e1c:	9901      	ldr	r1, [sp, #4]
 8008e1e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008e22:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008e26:	4259      	negs	r1, r3
 8008e28:	4159      	adcs	r1, r3
 8008e2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008e2e:	e7eb      	b.n	8008e08 <__swhatbuf_r+0x24>

08008e30 <__smakebuf_r>:
 8008e30:	898b      	ldrh	r3, [r1, #12]
 8008e32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e34:	079d      	lsls	r5, r3, #30
 8008e36:	4606      	mov	r6, r0
 8008e38:	460c      	mov	r4, r1
 8008e3a:	d507      	bpl.n	8008e4c <__smakebuf_r+0x1c>
 8008e3c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008e40:	6023      	str	r3, [r4, #0]
 8008e42:	6123      	str	r3, [r4, #16]
 8008e44:	2301      	movs	r3, #1
 8008e46:	6163      	str	r3, [r4, #20]
 8008e48:	b003      	add	sp, #12
 8008e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e4c:	ab01      	add	r3, sp, #4
 8008e4e:	466a      	mov	r2, sp
 8008e50:	f7ff ffc8 	bl	8008de4 <__swhatbuf_r>
 8008e54:	9f00      	ldr	r7, [sp, #0]
 8008e56:	4605      	mov	r5, r0
 8008e58:	4639      	mov	r1, r7
 8008e5a:	4630      	mov	r0, r6
 8008e5c:	f7ff f874 	bl	8007f48 <_malloc_r>
 8008e60:	b948      	cbnz	r0, 8008e76 <__smakebuf_r+0x46>
 8008e62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e66:	059a      	lsls	r2, r3, #22
 8008e68:	d4ee      	bmi.n	8008e48 <__smakebuf_r+0x18>
 8008e6a:	f023 0303 	bic.w	r3, r3, #3
 8008e6e:	f043 0302 	orr.w	r3, r3, #2
 8008e72:	81a3      	strh	r3, [r4, #12]
 8008e74:	e7e2      	b.n	8008e3c <__smakebuf_r+0xc>
 8008e76:	89a3      	ldrh	r3, [r4, #12]
 8008e78:	6020      	str	r0, [r4, #0]
 8008e7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e7e:	81a3      	strh	r3, [r4, #12]
 8008e80:	9b01      	ldr	r3, [sp, #4]
 8008e82:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008e86:	b15b      	cbz	r3, 8008ea0 <__smakebuf_r+0x70>
 8008e88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e8c:	4630      	mov	r0, r6
 8008e8e:	f000 f81d 	bl	8008ecc <_isatty_r>
 8008e92:	b128      	cbz	r0, 8008ea0 <__smakebuf_r+0x70>
 8008e94:	89a3      	ldrh	r3, [r4, #12]
 8008e96:	f023 0303 	bic.w	r3, r3, #3
 8008e9a:	f043 0301 	orr.w	r3, r3, #1
 8008e9e:	81a3      	strh	r3, [r4, #12]
 8008ea0:	89a3      	ldrh	r3, [r4, #12]
 8008ea2:	431d      	orrs	r5, r3
 8008ea4:	81a5      	strh	r5, [r4, #12]
 8008ea6:	e7cf      	b.n	8008e48 <__smakebuf_r+0x18>

08008ea8 <_fstat_r>:
 8008ea8:	b538      	push	{r3, r4, r5, lr}
 8008eaa:	4d07      	ldr	r5, [pc, #28]	@ (8008ec8 <_fstat_r+0x20>)
 8008eac:	2300      	movs	r3, #0
 8008eae:	4604      	mov	r4, r0
 8008eb0:	4608      	mov	r0, r1
 8008eb2:	4611      	mov	r1, r2
 8008eb4:	602b      	str	r3, [r5, #0]
 8008eb6:	f7f8 fe51 	bl	8001b5c <_fstat>
 8008eba:	1c43      	adds	r3, r0, #1
 8008ebc:	d102      	bne.n	8008ec4 <_fstat_r+0x1c>
 8008ebe:	682b      	ldr	r3, [r5, #0]
 8008ec0:	b103      	cbz	r3, 8008ec4 <_fstat_r+0x1c>
 8008ec2:	6023      	str	r3, [r4, #0]
 8008ec4:	bd38      	pop	{r3, r4, r5, pc}
 8008ec6:	bf00      	nop
 8008ec8:	20004594 	.word	0x20004594

08008ecc <_isatty_r>:
 8008ecc:	b538      	push	{r3, r4, r5, lr}
 8008ece:	4d06      	ldr	r5, [pc, #24]	@ (8008ee8 <_isatty_r+0x1c>)
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	4604      	mov	r4, r0
 8008ed4:	4608      	mov	r0, r1
 8008ed6:	602b      	str	r3, [r5, #0]
 8008ed8:	f7f8 fe50 	bl	8001b7c <_isatty>
 8008edc:	1c43      	adds	r3, r0, #1
 8008ede:	d102      	bne.n	8008ee6 <_isatty_r+0x1a>
 8008ee0:	682b      	ldr	r3, [r5, #0]
 8008ee2:	b103      	cbz	r3, 8008ee6 <_isatty_r+0x1a>
 8008ee4:	6023      	str	r3, [r4, #0]
 8008ee6:	bd38      	pop	{r3, r4, r5, pc}
 8008ee8:	20004594 	.word	0x20004594

08008eec <_init>:
 8008eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eee:	bf00      	nop
 8008ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ef2:	bc08      	pop	{r3}
 8008ef4:	469e      	mov	lr, r3
 8008ef6:	4770      	bx	lr

08008ef8 <_fini>:
 8008ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008efa:	bf00      	nop
 8008efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008efe:	bc08      	pop	{r3}
 8008f00:	469e      	mov	lr, r3
 8008f02:	4770      	bx	lr
