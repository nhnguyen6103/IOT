
IOT2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a414  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cc8  0800a5a8  0800a5a8  0000b5a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b270  0800b270  0000d1e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b270  0800b270  0000c270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b278  0800b278  0000d1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b278  0800b278  0000c278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b27c  0800b27c  0000c27c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  0800b280  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d1e4  2**0
                  CONTENTS
 10 .bss          00004da0  200001e4  200001e4  0000d1e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004f84  20004f84  0000d1e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d1e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019774  00000000  00000000  0000d214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c9d  00000000  00000000  00026988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017e8  00000000  00000000  0002a628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000247c9  00000000  00000000  0002be10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c979  00000000  00000000  000505d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc17a  00000000  00000000  0006cf52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001490cc  2**0
                  CONTENTS, READONLY
 20 .debug_rnglists 00001285  00000000  00000000  0014910f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007488  00000000  00000000  0014a394  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000040  00000000  00000000  0015181c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a58c 	.word	0x0800a58c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800a58c 	.word	0x0800a58c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	4a07      	ldr	r2, [pc, #28]	@ (8000f64 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f48:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	4a06      	ldr	r2, [pc, #24]	@ (8000f68 <vApplicationGetIdleTaskMemory+0x30>)
 8000f4e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2280      	movs	r2, #128	@ 0x80
 8000f54:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f56:	bf00      	nop
 8000f58:	3714      	adds	r7, #20
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	20000200 	.word	0x20000200
 8000f68:	200002a0 	.word	0x200002a0
 8000f6c:	00000000 	.word	0x00000000

08000f70 <GetTemperature>:
void StartTask01(void const * argument);
void StartTask02(void const * argument);
void StartTask03(void const * argument);

/* USER CODE BEGIN PFP */
float GetTemperature(void) {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
    uint16_t value;
    float voltage;
    float temperature;

    HAL_ADC_Start(&hadc1);
 8000f76:	4834      	ldr	r0, [pc, #208]	@ (8001048 <GetTemperature+0xd8>)
 8000f78:	f001 fcb0 	bl	80028dc <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 8000f7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f80:	4831      	ldr	r0, [pc, #196]	@ (8001048 <GetTemperature+0xd8>)
 8000f82:	f001 fdb0 	bl	8002ae6 <HAL_ADC_PollForConversion>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d145      	bne.n	8001018 <GetTemperature+0xa8>
        value = HAL_ADC_GetValue(&hadc1);
 8000f8c:	482e      	ldr	r0, [pc, #184]	@ (8001048 <GetTemperature+0xd8>)
 8000f8e:	f001 ff45 	bl	8002e1c <HAL_ADC_GetValue>
 8000f92:	4603      	mov	r3, r0
 8000f94:	817b      	strh	r3, [r7, #10]
        voltage = ((float)value / 4095.0) * 5.0;
 8000f96:	897b      	ldrh	r3, [r7, #10]
 8000f98:	ee07 3a90 	vmov	s15, r3
 8000f9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fa0:	ee17 0a90 	vmov	r0, s15
 8000fa4:	f7ff fad0 	bl	8000548 <__aeabi_f2d>
 8000fa8:	a321      	add	r3, pc, #132	@ (adr r3, 8001030 <GetTemperature+0xc0>)
 8000faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fae:	f7ff fc4d 	bl	800084c <__aeabi_ddiv>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	4610      	mov	r0, r2
 8000fb8:	4619      	mov	r1, r3
 8000fba:	f04f 0200 	mov.w	r2, #0
 8000fbe:	4b23      	ldr	r3, [pc, #140]	@ (800104c <GetTemperature+0xdc>)
 8000fc0:	f7ff fb1a 	bl	80005f8 <__aeabi_dmul>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	4610      	mov	r0, r2
 8000fca:	4619      	mov	r1, r3
 8000fcc:	f7ff fdec 	bl	8000ba8 <__aeabi_d2f>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	607b      	str	r3, [r7, #4]
        temperature = ((voltage - 0.76) / 0.025) + 25;
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f7ff fab7 	bl	8000548 <__aeabi_f2d>
 8000fda:	a317      	add	r3, pc, #92	@ (adr r3, 8001038 <GetTemperature+0xc8>)
 8000fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe0:	f7ff f952 	bl	8000288 <__aeabi_dsub>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	460b      	mov	r3, r1
 8000fe8:	4610      	mov	r0, r2
 8000fea:	4619      	mov	r1, r3
 8000fec:	a314      	add	r3, pc, #80	@ (adr r3, 8001040 <GetTemperature+0xd0>)
 8000fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff2:	f7ff fc2b 	bl	800084c <__aeabi_ddiv>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	4610      	mov	r0, r2
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	f04f 0200 	mov.w	r2, #0
 8001002:	4b13      	ldr	r3, [pc, #76]	@ (8001050 <GetTemperature+0xe0>)
 8001004:	f7ff f942 	bl	800028c <__adddf3>
 8001008:	4602      	mov	r2, r0
 800100a:	460b      	mov	r3, r1
 800100c:	4610      	mov	r0, r2
 800100e:	4619      	mov	r1, r3
 8001010:	f7ff fdca 	bl	8000ba8 <__aeabi_d2f>
 8001014:	4603      	mov	r3, r0
 8001016:	60fb      	str	r3, [r7, #12]
    }
    HAL_ADC_Stop(&hadc1);
 8001018:	480b      	ldr	r0, [pc, #44]	@ (8001048 <GetTemperature+0xd8>)
 800101a:	f001 fd31 	bl	8002a80 <HAL_ADC_Stop>

    return temperature;
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	ee07 3a90 	vmov	s15, r3
}
 8001024:	eeb0 0a67 	vmov.f32	s0, s15
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	00000000 	.word	0x00000000
 8001034:	40affe00 	.word	0x40affe00
 8001038:	851eb852 	.word	0x851eb852
 800103c:	3fe851eb 	.word	0x3fe851eb
 8001040:	9999999a 	.word	0x9999999a
 8001044:	3f999999 	.word	0x3f999999
 8001048:	200004a0 	.word	0x200004a0
 800104c:	40140000 	.word	0x40140000
 8001050:	40390000 	.word	0x40390000

08001054 <WriteTemperatureToEEPROM>:

void WriteTemperatureToEEPROM(float temperature) {
 8001054:	b580      	push	{r7, lr}
 8001056:	b08a      	sub	sp, #40	@ 0x28
 8001058:	af04      	add	r7, sp, #16
 800105a:	ed87 0a01 	vstr	s0, [r7, #4]
    uint8_t data[4];
    uint32_t eepromAddress = 0xA0;
 800105e:	23a0      	movs	r3, #160	@ 0xa0
 8001060:	617b      	str	r3, [r7, #20]
    uint16_t memAddress = 0x0000;
 8001062:	2300      	movs	r3, #0
 8001064:	827b      	strh	r3, [r7, #18]

    memcpy(data, &temperature, sizeof(float));
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	60fb      	str	r3, [r7, #12]

    HAL_I2C_Mem_Write(&hi2c2, eepromAddress, memAddress, I2C_MEMADD_SIZE_16BIT, data, sizeof(data), HAL_MAX_DELAY);
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	b299      	uxth	r1, r3
 800106e:	8a7a      	ldrh	r2, [r7, #18]
 8001070:	f04f 33ff 	mov.w	r3, #4294967295
 8001074:	9302      	str	r3, [sp, #8]
 8001076:	2304      	movs	r3, #4
 8001078:	9301      	str	r3, [sp, #4]
 800107a:	f107 030c 	add.w	r3, r7, #12
 800107e:	9300      	str	r3, [sp, #0]
 8001080:	2310      	movs	r3, #16
 8001082:	4805      	ldr	r0, [pc, #20]	@ (8001098 <WriteTemperatureToEEPROM+0x44>)
 8001084:	f003 f918 	bl	80042b8 <HAL_I2C_Mem_Write>
    HAL_Delay(10);
 8001088:	200a      	movs	r0, #10
 800108a:	f001 fbbf 	bl	800280c <HAL_Delay>
}
 800108e:	bf00      	nop
 8001090:	3718      	adds	r7, #24
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	2000055c 	.word	0x2000055c

0800109c <ReadTemperatureFromEEPROM>:

float ReadTemperatureFromEEPROM(void) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b088      	sub	sp, #32
 80010a0:	af04      	add	r7, sp, #16
    uint8_t data[4];
    float temperature;
    uint32_t eepromAddress = 0xA1;
 80010a2:	23a1      	movs	r3, #161	@ 0xa1
 80010a4:	60fb      	str	r3, [r7, #12]
    uint16_t memAddress = 0x0000;
 80010a6:	2300      	movs	r3, #0
 80010a8:	817b      	strh	r3, [r7, #10]

    if (HAL_I2C_Mem_Read(&hi2c2, eepromAddress, memAddress, I2C_MEMADD_SIZE_16BIT, data, sizeof(data), HAL_MAX_DELAY) == HAL_OK) {
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	b299      	uxth	r1, r3
 80010ae:	897a      	ldrh	r2, [r7, #10]
 80010b0:	f04f 33ff 	mov.w	r3, #4294967295
 80010b4:	9302      	str	r3, [sp, #8]
 80010b6:	2304      	movs	r3, #4
 80010b8:	9301      	str	r3, [sp, #4]
 80010ba:	1d3b      	adds	r3, r7, #4
 80010bc:	9300      	str	r3, [sp, #0]
 80010be:	2310      	movs	r3, #16
 80010c0:	4809      	ldr	r0, [pc, #36]	@ (80010e8 <ReadTemperatureFromEEPROM+0x4c>)
 80010c2:	f003 f9f3 	bl	80044ac <HAL_I2C_Mem_Read>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d102      	bne.n	80010d2 <ReadTemperatureFromEEPROM+0x36>
        memcpy(&temperature, data, sizeof(float));
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	603b      	str	r3, [r7, #0]
 80010d0:	e001      	b.n	80010d6 <ReadTemperatureFromEEPROM+0x3a>
    } else {
        temperature = -1;
 80010d2:	4b06      	ldr	r3, [pc, #24]	@ (80010ec <ReadTemperatureFromEEPROM+0x50>)
 80010d4:	603b      	str	r3, [r7, #0]
    }

    return temperature;
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	ee07 3a90 	vmov	s15, r3
}
 80010dc:	eeb0 0a67 	vmov.f32	s0, s15
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	2000055c 	.word	0x2000055c
 80010ec:	bf800000 	.word	0xbf800000

080010f0 <ST7789_WriteFloat>:

void ST7789_WriteFloat(uint16_t x, uint16_t y, float num, FontDef font, uint16_t color, uint16_t bgcolor)
{
 80010f0:	b590      	push	{r4, r7, lr}
 80010f2:	b097      	sub	sp, #92	@ 0x5c
 80010f4:	af04      	add	r7, sp, #16
 80010f6:	4604      	mov	r4, r0
 80010f8:	4608      	mov	r0, r1
 80010fa:	ed87 0a02 	vstr	s0, [r7, #8]
 80010fe:	4639      	mov	r1, r7
 8001100:	e881 000c 	stmia.w	r1, {r2, r3}
 8001104:	4623      	mov	r3, r4
 8001106:	81fb      	strh	r3, [r7, #14]
 8001108:	4603      	mov	r3, r0
 800110a:	81bb      	strh	r3, [r7, #12]
    int int_part = (int)num;
 800110c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001110:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001114:	ee17 3a90 	vmov	r3, s15
 8001118:	637b      	str	r3, [r7, #52]	@ 0x34
    int dec_part = (int)((num - int_part) * 100);
 800111a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800111c:	ee07 3a90 	vmov	s15, r3
 8001120:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001124:	ed97 7a02 	vldr	s14, [r7, #8]
 8001128:	ee77 7a67 	vsub.f32	s15, s14, s15
 800112c:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001278 <ST7789_WriteFloat+0x188>
 8001130:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001134:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001138:	ee17 3a90 	vmov	r3, s15
 800113c:	633b      	str	r3, [r7, #48]	@ 0x30

    char buffer[20];

    int i = 0;
 800113e:	2300      	movs	r3, #0
 8001140:	647b      	str	r3, [r7, #68]	@ 0x44
    if (int_part == 0) {
 8001142:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001144:	2b00      	cmp	r3, #0
 8001146:	d108      	bne.n	800115a <ST7789_WriteFloat+0x6a>
        buffer[i++] = '0';
 8001148:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800114a:	1c5a      	adds	r2, r3, #1
 800114c:	647a      	str	r2, [r7, #68]	@ 0x44
 800114e:	3348      	adds	r3, #72	@ 0x48
 8001150:	443b      	add	r3, r7
 8001152:	2230      	movs	r2, #48	@ 0x30
 8001154:	f803 2c2c 	strb.w	r2, [r3, #-44]
 8001158:	e03b      	b.n	80011d2 <ST7789_WriteFloat+0xe2>
    } else {
        int n = int_part;
 800115a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800115c:	643b      	str	r3, [r7, #64]	@ 0x40
        char temp[10];
        int j = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	63fb      	str	r3, [r7, #60]	@ 0x3c
        while (n > 0) {
 8001162:	e01d      	b.n	80011a0 <ST7789_WriteFloat+0xb0>
            temp[j++] = (n % 10) + '0';
 8001164:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001166:	4b45      	ldr	r3, [pc, #276]	@ (800127c <ST7789_WriteFloat+0x18c>)
 8001168:	fb83 1302 	smull	r1, r3, r3, r2
 800116c:	1099      	asrs	r1, r3, #2
 800116e:	17d3      	asrs	r3, r2, #31
 8001170:	1ac9      	subs	r1, r1, r3
 8001172:	460b      	mov	r3, r1
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	440b      	add	r3, r1
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	1ad1      	subs	r1, r2, r3
 800117c:	b2ca      	uxtb	r2, r1
 800117e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001180:	1c59      	adds	r1, r3, #1
 8001182:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8001184:	3230      	adds	r2, #48	@ 0x30
 8001186:	b2d2      	uxtb	r2, r2
 8001188:	3348      	adds	r3, #72	@ 0x48
 800118a:	443b      	add	r3, r7
 800118c:	f803 2c38 	strb.w	r2, [r3, #-56]
            n /= 10;
 8001190:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001192:	4a3a      	ldr	r2, [pc, #232]	@ (800127c <ST7789_WriteFloat+0x18c>)
 8001194:	fb82 1203 	smull	r1, r2, r2, r3
 8001198:	1092      	asrs	r2, r2, #2
 800119a:	17db      	asrs	r3, r3, #31
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	643b      	str	r3, [r7, #64]	@ 0x40
        while (n > 0) {
 80011a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	dcde      	bgt.n	8001164 <ST7789_WriteFloat+0x74>
        }
        for (int k = j - 1; k >= 0; k--) {
 80011a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80011a8:	3b01      	subs	r3, #1
 80011aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80011ac:	e00e      	b.n	80011cc <ST7789_WriteFloat+0xdc>
            buffer[i++] = temp[k];
 80011ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011b0:	1c5a      	adds	r2, r3, #1
 80011b2:	647a      	str	r2, [r7, #68]	@ 0x44
 80011b4:	f107 0110 	add.w	r1, r7, #16
 80011b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80011ba:	440a      	add	r2, r1
 80011bc:	7812      	ldrb	r2, [r2, #0]
 80011be:	3348      	adds	r3, #72	@ 0x48
 80011c0:	443b      	add	r3, r7
 80011c2:	f803 2c2c 	strb.w	r2, [r3, #-44]
        for (int k = j - 1; k >= 0; k--) {
 80011c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80011c8:	3b01      	subs	r3, #1
 80011ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 80011cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	daed      	bge.n	80011ae <ST7789_WriteFloat+0xbe>
        }
    }

    buffer[i++] = '.';
 80011d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011d4:	1c5a      	adds	r2, r3, #1
 80011d6:	647a      	str	r2, [r7, #68]	@ 0x44
 80011d8:	3348      	adds	r3, #72	@ 0x48
 80011da:	443b      	add	r3, r7
 80011dc:	222e      	movs	r2, #46	@ 0x2e
 80011de:	f803 2c2c 	strb.w	r2, [r3, #-44]

    if (dec_part < 10) {
 80011e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011e4:	2b09      	cmp	r3, #9
 80011e6:	dc07      	bgt.n	80011f8 <ST7789_WriteFloat+0x108>
        buffer[i++] = '0';
 80011e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011ea:	1c5a      	adds	r2, r3, #1
 80011ec:	647a      	str	r2, [r7, #68]	@ 0x44
 80011ee:	3348      	adds	r3, #72	@ 0x48
 80011f0:	443b      	add	r3, r7
 80011f2:	2230      	movs	r2, #48	@ 0x30
 80011f4:	f803 2c2c 	strb.w	r2, [r3, #-44]
    }
    buffer[i++] = (dec_part / 10) + '0';
 80011f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011fa:	4a20      	ldr	r2, [pc, #128]	@ (800127c <ST7789_WriteFloat+0x18c>)
 80011fc:	fb82 1203 	smull	r1, r2, r2, r3
 8001200:	1092      	asrs	r2, r2, #2
 8001202:	17db      	asrs	r3, r3, #31
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	b2da      	uxtb	r2, r3
 8001208:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800120a:	1c59      	adds	r1, r3, #1
 800120c:	6479      	str	r1, [r7, #68]	@ 0x44
 800120e:	3230      	adds	r2, #48	@ 0x30
 8001210:	b2d2      	uxtb	r2, r2
 8001212:	3348      	adds	r3, #72	@ 0x48
 8001214:	443b      	add	r3, r7
 8001216:	f803 2c2c 	strb.w	r2, [r3, #-44]
    buffer[i++] = (dec_part % 10) + '0';
 800121a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800121c:	4b17      	ldr	r3, [pc, #92]	@ (800127c <ST7789_WriteFloat+0x18c>)
 800121e:	fb83 1302 	smull	r1, r3, r3, r2
 8001222:	1099      	asrs	r1, r3, #2
 8001224:	17d3      	asrs	r3, r2, #31
 8001226:	1ac9      	subs	r1, r1, r3
 8001228:	460b      	mov	r3, r1
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	440b      	add	r3, r1
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	1ad1      	subs	r1, r2, r3
 8001232:	b2ca      	uxtb	r2, r1
 8001234:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001236:	1c59      	adds	r1, r3, #1
 8001238:	6479      	str	r1, [r7, #68]	@ 0x44
 800123a:	3230      	adds	r2, #48	@ 0x30
 800123c:	b2d2      	uxtb	r2, r2
 800123e:	3348      	adds	r3, #72	@ 0x48
 8001240:	443b      	add	r3, r7
 8001242:	f803 2c2c 	strb.w	r2, [r3, #-44]
    buffer[i] = '\0';
 8001246:	f107 021c 	add.w	r2, r7, #28
 800124a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800124c:	4413      	add	r3, r2
 800124e:	2200      	movs	r2, #0
 8001250:	701a      	strb	r2, [r3, #0]

    ST7789_WriteString(x, y, buffer, font, color, bgcolor);
 8001252:	f107 021c 	add.w	r2, r7, #28
 8001256:	89b9      	ldrh	r1, [r7, #12]
 8001258:	89f8      	ldrh	r0, [r7, #14]
 800125a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800125e:	9302      	str	r3, [sp, #8]
 8001260:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8001264:	9301      	str	r3, [sp, #4]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	9300      	str	r3, [sp, #0]
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	f000 fe52 	bl	8001f14 <ST7789_WriteString>
}
 8001270:	bf00      	nop
 8001272:	374c      	adds	r7, #76	@ 0x4c
 8001274:	46bd      	mov	sp, r7
 8001276:	bd90      	pop	{r4, r7, pc}
 8001278:	42c80000 	.word	0x42c80000
 800127c:	66666667 	.word	0x66666667

08001280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001280:	b5b0      	push	{r4, r5, r7, lr}
 8001282:	b096      	sub	sp, #88	@ 0x58
 8001284:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001286:	f001 fa7f 	bl	8002788 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800128a:	f000 f853 	bl	8001334 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800128e:	f000 f9df 	bl	8001650 <MX_GPIO_Init>
  MX_DMA_Init();
 8001292:	f000 f997 	bl	80015c4 <MX_DMA_Init>
  MX_ADC1_Init();
 8001296:	f000 f8ab 	bl	80013f0 <MX_ADC1_Init>
  MX_SPI1_Init();
 800129a:	f000 f95d 	bl	8001558 <MX_SPI1_Init>
  MX_DAC_Init();
 800129e:	f000 f8f9 	bl	8001494 <MX_DAC_Init>
  MX_I2C2_Init();
 80012a2:	f000 f92b 	bl	80014fc <MX_I2C2_Init>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task01 */
  osThreadDef(Task01, StartTask01, osPriorityNormal, 0, 128);
 80012a6:	4b1d      	ldr	r3, [pc, #116]	@ (800131c <main+0x9c>)
 80012a8:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80012ac:	461d      	mov	r5, r3
 80012ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task01Handle = osThreadCreate(osThread(Task01), NULL);
 80012ba:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80012be:	2100      	movs	r1, #0
 80012c0:	4618      	mov	r0, r3
 80012c2:	f005 fa20 	bl	8006706 <osThreadCreate>
 80012c6:	4603      	mov	r3, r0
 80012c8:	4a15      	ldr	r2, [pc, #84]	@ (8001320 <main+0xa0>)
 80012ca:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task02 */
  osThreadDef(Task02, StartTask02, osPriorityNormal, 0, 128);
 80012cc:	4b15      	ldr	r3, [pc, #84]	@ (8001324 <main+0xa4>)
 80012ce:	f107 0420 	add.w	r4, r7, #32
 80012d2:	461d      	mov	r5, r3
 80012d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task02Handle = osThreadCreate(osThread(Task02), NULL);
 80012e0:	f107 0320 	add.w	r3, r7, #32
 80012e4:	2100      	movs	r1, #0
 80012e6:	4618      	mov	r0, r3
 80012e8:	f005 fa0d 	bl	8006706 <osThreadCreate>
 80012ec:	4603      	mov	r3, r0
 80012ee:	4a0e      	ldr	r2, [pc, #56]	@ (8001328 <main+0xa8>)
 80012f0:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task03 */
  osThreadDef(Task03, StartTask03, osPriorityNormal, 0, 128);
 80012f2:	4b0e      	ldr	r3, [pc, #56]	@ (800132c <main+0xac>)
 80012f4:	1d3c      	adds	r4, r7, #4
 80012f6:	461d      	mov	r5, r3
 80012f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001300:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task03Handle = osThreadCreate(osThread(Task03), NULL);
 8001304:	1d3b      	adds	r3, r7, #4
 8001306:	2100      	movs	r1, #0
 8001308:	4618      	mov	r0, r3
 800130a:	f005 f9fc 	bl	8006706 <osThreadCreate>
 800130e:	4603      	mov	r3, r0
 8001310:	4a07      	ldr	r2, [pc, #28]	@ (8001330 <main+0xb0>)
 8001312:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001314:	f005 f9f0 	bl	80066f8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001318:	bf00      	nop
 800131a:	e7fd      	b.n	8001318 <main+0x98>
 800131c:	0800a5b0 	.word	0x0800a5b0
 8001320:	20000728 	.word	0x20000728
 8001324:	0800a5d4 	.word	0x0800a5d4
 8001328:	2000072c 	.word	0x2000072c
 800132c:	0800a5f8 	.word	0x0800a5f8
 8001330:	20000730 	.word	0x20000730

08001334 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b094      	sub	sp, #80	@ 0x50
 8001338:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800133a:	f107 0320 	add.w	r3, r7, #32
 800133e:	2230      	movs	r2, #48	@ 0x30
 8001340:	2100      	movs	r1, #0
 8001342:	4618      	mov	r0, r3
 8001344:	f007 f9ab 	bl	800869e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001348:	f107 030c 	add.w	r3, r7, #12
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001358:	2300      	movs	r3, #0
 800135a:	60bb      	str	r3, [r7, #8]
 800135c:	4b22      	ldr	r3, [pc, #136]	@ (80013e8 <SystemClock_Config+0xb4>)
 800135e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001360:	4a21      	ldr	r2, [pc, #132]	@ (80013e8 <SystemClock_Config+0xb4>)
 8001362:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001366:	6413      	str	r3, [r2, #64]	@ 0x40
 8001368:	4b1f      	ldr	r3, [pc, #124]	@ (80013e8 <SystemClock_Config+0xb4>)
 800136a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001370:	60bb      	str	r3, [r7, #8]
 8001372:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001374:	2300      	movs	r3, #0
 8001376:	607b      	str	r3, [r7, #4]
 8001378:	4b1c      	ldr	r3, [pc, #112]	@ (80013ec <SystemClock_Config+0xb8>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a1b      	ldr	r2, [pc, #108]	@ (80013ec <SystemClock_Config+0xb8>)
 800137e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001382:	6013      	str	r3, [r2, #0]
 8001384:	4b19      	ldr	r3, [pc, #100]	@ (80013ec <SystemClock_Config+0xb8>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800138c:	607b      	str	r3, [r7, #4]
 800138e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001390:	2302      	movs	r3, #2
 8001392:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001394:	2301      	movs	r3, #1
 8001396:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001398:	2310      	movs	r3, #16
 800139a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800139c:	2300      	movs	r3, #0
 800139e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013a0:	f107 0320 	add.w	r3, r7, #32
 80013a4:	4618      	mov	r0, r3
 80013a6:	f003 fe67 	bl	8005078 <HAL_RCC_OscConfig>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80013b0:	f000 fae8 	bl	8001984 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013b4:	230f      	movs	r3, #15
 80013b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80013b8:	2300      	movs	r3, #0
 80013ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013c0:	2300      	movs	r3, #0
 80013c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013c4:	2300      	movs	r3, #0
 80013c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013c8:	f107 030c 	add.w	r3, r7, #12
 80013cc:	2100      	movs	r1, #0
 80013ce:	4618      	mov	r0, r3
 80013d0:	f004 f8ca 	bl	8005568 <HAL_RCC_ClockConfig>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80013da:	f000 fad3 	bl	8001984 <Error_Handler>
  }
}
 80013de:	bf00      	nop
 80013e0:	3750      	adds	r7, #80	@ 0x50
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40007000 	.word	0x40007000

080013f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013f6:	463b      	mov	r3, r7
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001402:	4b21      	ldr	r3, [pc, #132]	@ (8001488 <MX_ADC1_Init+0x98>)
 8001404:	4a21      	ldr	r2, [pc, #132]	@ (800148c <MX_ADC1_Init+0x9c>)
 8001406:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001408:	4b1f      	ldr	r3, [pc, #124]	@ (8001488 <MX_ADC1_Init+0x98>)
 800140a:	2200      	movs	r2, #0
 800140c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800140e:	4b1e      	ldr	r3, [pc, #120]	@ (8001488 <MX_ADC1_Init+0x98>)
 8001410:	2200      	movs	r2, #0
 8001412:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001414:	4b1c      	ldr	r3, [pc, #112]	@ (8001488 <MX_ADC1_Init+0x98>)
 8001416:	2200      	movs	r2, #0
 8001418:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800141a:	4b1b      	ldr	r3, [pc, #108]	@ (8001488 <MX_ADC1_Init+0x98>)
 800141c:	2200      	movs	r2, #0
 800141e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001420:	4b19      	ldr	r3, [pc, #100]	@ (8001488 <MX_ADC1_Init+0x98>)
 8001422:	2200      	movs	r2, #0
 8001424:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001428:	4b17      	ldr	r3, [pc, #92]	@ (8001488 <MX_ADC1_Init+0x98>)
 800142a:	2200      	movs	r2, #0
 800142c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800142e:	4b16      	ldr	r3, [pc, #88]	@ (8001488 <MX_ADC1_Init+0x98>)
 8001430:	4a17      	ldr	r2, [pc, #92]	@ (8001490 <MX_ADC1_Init+0xa0>)
 8001432:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001434:	4b14      	ldr	r3, [pc, #80]	@ (8001488 <MX_ADC1_Init+0x98>)
 8001436:	2200      	movs	r2, #0
 8001438:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800143a:	4b13      	ldr	r3, [pc, #76]	@ (8001488 <MX_ADC1_Init+0x98>)
 800143c:	2201      	movs	r2, #1
 800143e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001440:	4b11      	ldr	r3, [pc, #68]	@ (8001488 <MX_ADC1_Init+0x98>)
 8001442:	2201      	movs	r2, #1
 8001444:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001448:	4b0f      	ldr	r3, [pc, #60]	@ (8001488 <MX_ADC1_Init+0x98>)
 800144a:	2201      	movs	r2, #1
 800144c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800144e:	480e      	ldr	r0, [pc, #56]	@ (8001488 <MX_ADC1_Init+0x98>)
 8001450:	f001 fa00 	bl	8002854 <HAL_ADC_Init>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800145a:	f000 fa93 	bl	8001984 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800145e:	2310      	movs	r3, #16
 8001460:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001462:	2301      	movs	r3, #1
 8001464:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001466:	2300      	movs	r3, #0
 8001468:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800146a:	463b      	mov	r3, r7
 800146c:	4619      	mov	r1, r3
 800146e:	4806      	ldr	r0, [pc, #24]	@ (8001488 <MX_ADC1_Init+0x98>)
 8001470:	f001 fd00 	bl	8002e74 <HAL_ADC_ConfigChannel>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800147a:	f000 fa83 	bl	8001984 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800147e:	bf00      	nop
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	200004a0 	.word	0x200004a0
 800148c:	40012000 	.word	0x40012000
 8001490:	0f000001 	.word	0x0f000001

08001494 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800149a:	463b      	mov	r3, r7
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80014a2:	4b14      	ldr	r3, [pc, #80]	@ (80014f4 <MX_DAC_Init+0x60>)
 80014a4:	4a14      	ldr	r2, [pc, #80]	@ (80014f8 <MX_DAC_Init+0x64>)
 80014a6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80014a8:	4812      	ldr	r0, [pc, #72]	@ (80014f4 <MX_DAC_Init+0x60>)
 80014aa:	f001 ffed 	bl	8003488 <HAL_DAC_Init>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80014b4:	f000 fa66 	bl	8001984 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80014b8:	2300      	movs	r3, #0
 80014ba:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80014bc:	2300      	movs	r3, #0
 80014be:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80014c0:	463b      	mov	r3, r7
 80014c2:	2200      	movs	r2, #0
 80014c4:	4619      	mov	r1, r3
 80014c6:	480b      	ldr	r0, [pc, #44]	@ (80014f4 <MX_DAC_Init+0x60>)
 80014c8:	f002 f800 	bl	80034cc <HAL_DAC_ConfigChannel>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80014d2:	f000 fa57 	bl	8001984 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80014d6:	463b      	mov	r3, r7
 80014d8:	2210      	movs	r2, #16
 80014da:	4619      	mov	r1, r3
 80014dc:	4805      	ldr	r0, [pc, #20]	@ (80014f4 <MX_DAC_Init+0x60>)
 80014de:	f001 fff5 	bl	80034cc <HAL_DAC_ConfigChannel>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_DAC_Init+0x58>
  {
    Error_Handler();
 80014e8:	f000 fa4c 	bl	8001984 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80014ec:	bf00      	nop
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	20000548 	.word	0x20000548
 80014f8:	40007400 	.word	0x40007400

080014fc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001500:	4b12      	ldr	r3, [pc, #72]	@ (800154c <MX_I2C2_Init+0x50>)
 8001502:	4a13      	ldr	r2, [pc, #76]	@ (8001550 <MX_I2C2_Init+0x54>)
 8001504:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001506:	4b11      	ldr	r3, [pc, #68]	@ (800154c <MX_I2C2_Init+0x50>)
 8001508:	4a12      	ldr	r2, [pc, #72]	@ (8001554 <MX_I2C2_Init+0x58>)
 800150a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800150c:	4b0f      	ldr	r3, [pc, #60]	@ (800154c <MX_I2C2_Init+0x50>)
 800150e:	2200      	movs	r2, #0
 8001510:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001512:	4b0e      	ldr	r3, [pc, #56]	@ (800154c <MX_I2C2_Init+0x50>)
 8001514:	2200      	movs	r2, #0
 8001516:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001518:	4b0c      	ldr	r3, [pc, #48]	@ (800154c <MX_I2C2_Init+0x50>)
 800151a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800151e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001520:	4b0a      	ldr	r3, [pc, #40]	@ (800154c <MX_I2C2_Init+0x50>)
 8001522:	2200      	movs	r2, #0
 8001524:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001526:	4b09      	ldr	r3, [pc, #36]	@ (800154c <MX_I2C2_Init+0x50>)
 8001528:	2200      	movs	r2, #0
 800152a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800152c:	4b07      	ldr	r3, [pc, #28]	@ (800154c <MX_I2C2_Init+0x50>)
 800152e:	2200      	movs	r2, #0
 8001530:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001532:	4b06      	ldr	r3, [pc, #24]	@ (800154c <MX_I2C2_Init+0x50>)
 8001534:	2200      	movs	r2, #0
 8001536:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001538:	4804      	ldr	r0, [pc, #16]	@ (800154c <MX_I2C2_Init+0x50>)
 800153a:	f002 fd79 	bl	8004030 <HAL_I2C_Init>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001544:	f000 fa1e 	bl	8001984 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001548:	bf00      	nop
 800154a:	bd80      	pop	{r7, pc}
 800154c:	2000055c 	.word	0x2000055c
 8001550:	40005800 	.word	0x40005800
 8001554:	000186a0 	.word	0x000186a0

08001558 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800155c:	4b17      	ldr	r3, [pc, #92]	@ (80015bc <MX_SPI1_Init+0x64>)
 800155e:	4a18      	ldr	r2, [pc, #96]	@ (80015c0 <MX_SPI1_Init+0x68>)
 8001560:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001562:	4b16      	ldr	r3, [pc, #88]	@ (80015bc <MX_SPI1_Init+0x64>)
 8001564:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001568:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800156a:	4b14      	ldr	r3, [pc, #80]	@ (80015bc <MX_SPI1_Init+0x64>)
 800156c:	2200      	movs	r2, #0
 800156e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001570:	4b12      	ldr	r3, [pc, #72]	@ (80015bc <MX_SPI1_Init+0x64>)
 8001572:	2200      	movs	r2, #0
 8001574:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001576:	4b11      	ldr	r3, [pc, #68]	@ (80015bc <MX_SPI1_Init+0x64>)
 8001578:	2200      	movs	r2, #0
 800157a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800157c:	4b0f      	ldr	r3, [pc, #60]	@ (80015bc <MX_SPI1_Init+0x64>)
 800157e:	2200      	movs	r2, #0
 8001580:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001582:	4b0e      	ldr	r3, [pc, #56]	@ (80015bc <MX_SPI1_Init+0x64>)
 8001584:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001588:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800158a:	4b0c      	ldr	r3, [pc, #48]	@ (80015bc <MX_SPI1_Init+0x64>)
 800158c:	2200      	movs	r2, #0
 800158e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001590:	4b0a      	ldr	r3, [pc, #40]	@ (80015bc <MX_SPI1_Init+0x64>)
 8001592:	2200      	movs	r2, #0
 8001594:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001596:	4b09      	ldr	r3, [pc, #36]	@ (80015bc <MX_SPI1_Init+0x64>)
 8001598:	2200      	movs	r2, #0
 800159a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800159c:	4b07      	ldr	r3, [pc, #28]	@ (80015bc <MX_SPI1_Init+0x64>)
 800159e:	2200      	movs	r2, #0
 80015a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80015a2:	4b06      	ldr	r3, [pc, #24]	@ (80015bc <MX_SPI1_Init+0x64>)
 80015a4:	220a      	movs	r2, #10
 80015a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015a8:	4804      	ldr	r0, [pc, #16]	@ (80015bc <MX_SPI1_Init+0x64>)
 80015aa:	f004 f9ef 	bl	800598c <HAL_SPI_Init>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80015b4:	f000 f9e6 	bl	8001984 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015b8:	bf00      	nop
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	20000670 	.word	0x20000670
 80015c0:	40013000 	.word	0x40013000

080015c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	607b      	str	r3, [r7, #4]
 80015ce:	4b1f      	ldr	r3, [pc, #124]	@ (800164c <MX_DMA_Init+0x88>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d2:	4a1e      	ldr	r2, [pc, #120]	@ (800164c <MX_DMA_Init+0x88>)
 80015d4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80015d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015da:	4b1c      	ldr	r3, [pc, #112]	@ (800164c <MX_DMA_Init+0x88>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015e2:	607b      	str	r3, [r7, #4]
 80015e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	603b      	str	r3, [r7, #0]
 80015ea:	4b18      	ldr	r3, [pc, #96]	@ (800164c <MX_DMA_Init+0x88>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ee:	4a17      	ldr	r2, [pc, #92]	@ (800164c <MX_DMA_Init+0x88>)
 80015f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80015f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015f6:	4b15      	ldr	r3, [pc, #84]	@ (800164c <MX_DMA_Init+0x88>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015fe:	603b      	str	r3, [r7, #0]
 8001600:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001602:	2200      	movs	r2, #0
 8001604:	2105      	movs	r1, #5
 8001606:	200d      	movs	r0, #13
 8001608:	f001 ff14 	bl	8003434 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800160c:	200d      	movs	r0, #13
 800160e:	f001 ff2d 	bl	800346c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8001612:	2200      	movs	r2, #0
 8001614:	2105      	movs	r1, #5
 8001616:	202f      	movs	r0, #47	@ 0x2f
 8001618:	f001 ff0c 	bl	8003434 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800161c:	202f      	movs	r0, #47	@ 0x2f
 800161e:	f001 ff25 	bl	800346c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001622:	2200      	movs	r2, #0
 8001624:	2105      	movs	r1, #5
 8001626:	2038      	movs	r0, #56	@ 0x38
 8001628:	f001 ff04 	bl	8003434 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800162c:	2038      	movs	r0, #56	@ 0x38
 800162e:	f001 ff1d 	bl	800346c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8001632:	2200      	movs	r2, #0
 8001634:	2105      	movs	r1, #5
 8001636:	203b      	movs	r0, #59	@ 0x3b
 8001638:	f001 fefc 	bl	8003434 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800163c:	203b      	movs	r0, #59	@ 0x3b
 800163e:	f001 ff15 	bl	800346c <HAL_NVIC_EnableIRQ>

}
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40023800 	.word	0x40023800

08001650 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b088      	sub	sp, #32
 8001654:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001656:	f107 030c 	add.w	r3, r7, #12
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	605a      	str	r2, [r3, #4]
 8001660:	609a      	str	r2, [r3, #8]
 8001662:	60da      	str	r2, [r3, #12]
 8001664:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	60bb      	str	r3, [r7, #8]
 800166a:	4b3a      	ldr	r3, [pc, #232]	@ (8001754 <MX_GPIO_Init+0x104>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166e:	4a39      	ldr	r2, [pc, #228]	@ (8001754 <MX_GPIO_Init+0x104>)
 8001670:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001674:	6313      	str	r3, [r2, #48]	@ 0x30
 8001676:	4b37      	ldr	r3, [pc, #220]	@ (8001754 <MX_GPIO_Init+0x104>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800167e:	60bb      	str	r3, [r7, #8]
 8001680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	607b      	str	r3, [r7, #4]
 8001686:	4b33      	ldr	r3, [pc, #204]	@ (8001754 <MX_GPIO_Init+0x104>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168a:	4a32      	ldr	r2, [pc, #200]	@ (8001754 <MX_GPIO_Init+0x104>)
 800168c:	f043 0301 	orr.w	r3, r3, #1
 8001690:	6313      	str	r3, [r2, #48]	@ 0x30
 8001692:	4b30      	ldr	r3, [pc, #192]	@ (8001754 <MX_GPIO_Init+0x104>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	607b      	str	r3, [r7, #4]
 800169c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	603b      	str	r3, [r7, #0]
 80016a2:	4b2c      	ldr	r3, [pc, #176]	@ (8001754 <MX_GPIO_Init+0x104>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a6:	4a2b      	ldr	r2, [pc, #172]	@ (8001754 <MX_GPIO_Init+0x104>)
 80016a8:	f043 0302 	orr.w	r3, r3, #2
 80016ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ae:	4b29      	ldr	r3, [pc, #164]	@ (8001754 <MX_GPIO_Init+0x104>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	603b      	str	r3, [r7, #0]
 80016b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 80016ba:	2200      	movs	r2, #0
 80016bc:	f241 1187 	movw	r1, #4487	@ 0x1187
 80016c0:	4825      	ldr	r0, [pc, #148]	@ (8001758 <MX_GPIO_Init+0x108>)
 80016c2:	f002 fc81 	bl	8003fc8 <HAL_GPIO_WritePin>
                          |LCD_CS_Pin|LCD_RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_PA9_GPIO_Port, LCD_PA9_Pin, GPIO_PIN_RESET);
 80016c6:	2200      	movs	r2, #0
 80016c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016cc:	4823      	ldr	r0, [pc, #140]	@ (800175c <MX_GPIO_Init+0x10c>)
 80016ce:	f002 fc7b 	bl	8003fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80016d2:	2201      	movs	r2, #1
 80016d4:	2140      	movs	r1, #64	@ 0x40
 80016d6:	4820      	ldr	r0, [pc, #128]	@ (8001758 <MX_GPIO_Init+0x108>)
 80016d8:	f002 fc76 	bl	8003fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80016dc:	2302      	movs	r3, #2
 80016de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016e0:	2300      	movs	r3, #0
 80016e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016e4:	2301      	movs	r3, #1
 80016e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e8:	f107 030c 	add.w	r3, r7, #12
 80016ec:	4619      	mov	r1, r3
 80016ee:	481b      	ldr	r0, [pc, #108]	@ (800175c <MX_GPIO_Init+0x10c>)
 80016f0:	f002 fab6 	bl	8003c60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12
                           PB6 LCD_CS_Pin LCD_RS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 80016f4:	f241 13c7 	movw	r3, #4551	@ 0x11c7
 80016f8:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_6|LCD_CS_Pin|LCD_RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fa:	2301      	movs	r3, #1
 80016fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001702:	2300      	movs	r3, #0
 8001704:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001706:	f107 030c 	add.w	r3, r7, #12
 800170a:	4619      	mov	r1, r3
 800170c:	4812      	ldr	r0, [pc, #72]	@ (8001758 <MX_GPIO_Init+0x108>)
 800170e:	f002 faa7 	bl	8003c60 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_PA9_Pin */
  GPIO_InitStruct.Pin = LCD_PA9_Pin;
 8001712:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001716:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001718:	2301      	movs	r3, #1
 800171a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171c:	2300      	movs	r3, #0
 800171e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001720:	2300      	movs	r3, #0
 8001722:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_PA9_GPIO_Port, &GPIO_InitStruct);
 8001724:	f107 030c 	add.w	r3, r7, #12
 8001728:	4619      	mov	r1, r3
 800172a:	480c      	ldr	r0, [pc, #48]	@ (800175c <MX_GPIO_Init+0x10c>)
 800172c:	f002 fa98 	bl	8003c60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001730:	2310      	movs	r3, #16
 8001732:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001734:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001738:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173a:	2300      	movs	r3, #0
 800173c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800173e:	f107 030c 	add.w	r3, r7, #12
 8001742:	4619      	mov	r1, r3
 8001744:	4804      	ldr	r0, [pc, #16]	@ (8001758 <MX_GPIO_Init+0x108>)
 8001746:	f002 fa8b 	bl	8003c60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800174a:	bf00      	nop
 800174c:	3720      	adds	r7, #32
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40023800 	.word	0x40023800
 8001758:	40020400 	.word	0x40020400
 800175c:	40020000 	.word	0x40020000

08001760 <StartTask01>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask01 */
void StartTask01(void const * argument)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
    while (1) {
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 8001768:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800176c:	4804      	ldr	r0, [pc, #16]	@ (8001780 <StartTask01+0x20>)
 800176e:	f002 fc44 	bl	8003ffa <HAL_GPIO_TogglePin>
        osDelay(1000);
 8001772:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001776:	f005 f812 	bl	800679e <osDelay>
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 800177a:	bf00      	nop
 800177c:	e7f4      	b.n	8001768 <StartTask01+0x8>
 800177e:	bf00      	nop
 8001780:	40020400 	.word	0x40020400

08001784 <StartTask02>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	/* Infinite loop */

    while (1) {
        float temperature = GetTemperature();
 800178c:	f7ff fbf0 	bl	8000f70 <GetTemperature>
 8001790:	ed87 0a03 	vstr	s0, [r7, #12]
        WriteTemperatureToEEPROM(temperature);
 8001794:	ed97 0a03 	vldr	s0, [r7, #12]
 8001798:	f7ff fc5c 	bl	8001054 <WriteTemperatureToEEPROM>

        osDelay(5000);
 800179c:	f241 3088 	movw	r0, #5000	@ 0x1388
 80017a0:	f004 fffd 	bl	800679e <osDelay>
    while (1) {
 80017a4:	bf00      	nop
 80017a6:	e7f1      	b.n	800178c <StartTask02+0x8>

080017a8 <StartTask03>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b08a      	sub	sp, #40	@ 0x28
 80017ac:	af04      	add	r7, sp, #16
 80017ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
	/* Infinite loop */
	uint8_t SW_State = GPIO_PIN_SET;
 80017b0:	2301      	movs	r3, #1
 80017b2:	75bb      	strb	r3, [r7, #22]
	uint8_t SW_LastState = GPIO_PIN_SET;
 80017b4:	2301      	movs	r3, #1
 80017b6:	75fb      	strb	r3, [r7, #23]
	ST7789_Init();
 80017b8:	f000 fa08 	bl	8001bcc <ST7789_Init>
	ST7789_WriteString(30, 40,"Press the button to update", Font_7x10, WHITE, BLACK);
 80017bc:	4b5c      	ldr	r3, [pc, #368]	@ (8001930 <StartTask03+0x188>)
 80017be:	2200      	movs	r2, #0
 80017c0:	9202      	str	r2, [sp, #8]
 80017c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017c6:	9201      	str	r2, [sp, #4]
 80017c8:	685a      	ldr	r2, [r3, #4]
 80017ca:	9200      	str	r2, [sp, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a59      	ldr	r2, [pc, #356]	@ (8001934 <StartTask03+0x18c>)
 80017d0:	2128      	movs	r1, #40	@ 0x28
 80017d2:	201e      	movs	r0, #30
 80017d4:	f000 fb9e 	bl	8001f14 <ST7789_WriteString>
	ST7789_WriteString(60, 50,"the temperature", Font_7x10, WHITE, BLACK);
 80017d8:	4b55      	ldr	r3, [pc, #340]	@ (8001930 <StartTask03+0x188>)
 80017da:	2200      	movs	r2, #0
 80017dc:	9202      	str	r2, [sp, #8]
 80017de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017e2:	9201      	str	r2, [sp, #4]
 80017e4:	685a      	ldr	r2, [r3, #4]
 80017e6:	9200      	str	r2, [sp, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a53      	ldr	r2, [pc, #332]	@ (8001938 <StartTask03+0x190>)
 80017ec:	2132      	movs	r1, #50	@ 0x32
 80017ee:	203c      	movs	r0, #60	@ 0x3c
 80017f0:	f000 fb90 	bl	8001f14 <ST7789_WriteString>
    ST7789_WriteString(70, 90,"TEAM AGIS", Font_7x10, WHITE, BLACK);
 80017f4:	4b4e      	ldr	r3, [pc, #312]	@ (8001930 <StartTask03+0x188>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	9202      	str	r2, [sp, #8]
 80017fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017fe:	9201      	str	r2, [sp, #4]
 8001800:	685a      	ldr	r2, [r3, #4]
 8001802:	9200      	str	r2, [sp, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a4d      	ldr	r2, [pc, #308]	@ (800193c <StartTask03+0x194>)
 8001808:	215a      	movs	r1, #90	@ 0x5a
 800180a:	2046      	movs	r0, #70	@ 0x46
 800180c:	f000 fb82 	bl	8001f14 <ST7789_WriteString>
    ST7789_WriteString(10, 110,"21200014    NGUYEN HOANG NGUYEN", Font_7x10, WHITE, BLACK);
 8001810:	4b47      	ldr	r3, [pc, #284]	@ (8001930 <StartTask03+0x188>)
 8001812:	2200      	movs	r2, #0
 8001814:	9202      	str	r2, [sp, #8]
 8001816:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800181a:	9201      	str	r2, [sp, #4]
 800181c:	685a      	ldr	r2, [r3, #4]
 800181e:	9200      	str	r2, [sp, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a47      	ldr	r2, [pc, #284]	@ (8001940 <StartTask03+0x198>)
 8001824:	216e      	movs	r1, #110	@ 0x6e
 8001826:	200a      	movs	r0, #10
 8001828:	f000 fb74 	bl	8001f14 <ST7789_WriteString>
    ST7789_WriteString(10, 130,"21200065    TRAN ANH DUNG", Font_7x10, WHITE, BLACK);
 800182c:	4b40      	ldr	r3, [pc, #256]	@ (8001930 <StartTask03+0x188>)
 800182e:	2200      	movs	r2, #0
 8001830:	9202      	str	r2, [sp, #8]
 8001832:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001836:	9201      	str	r2, [sp, #4]
 8001838:	685a      	ldr	r2, [r3, #4]
 800183a:	9200      	str	r2, [sp, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a41      	ldr	r2, [pc, #260]	@ (8001944 <StartTask03+0x19c>)
 8001840:	2182      	movs	r1, #130	@ 0x82
 8001842:	200a      	movs	r0, #10
 8001844:	f000 fb66 	bl	8001f14 <ST7789_WriteString>
    ST7789_WriteString(10, 150,"21200241    NGUYEN DANG TRI", Font_7x10, WHITE, BLACK);
 8001848:	4b39      	ldr	r3, [pc, #228]	@ (8001930 <StartTask03+0x188>)
 800184a:	2200      	movs	r2, #0
 800184c:	9202      	str	r2, [sp, #8]
 800184e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001852:	9201      	str	r2, [sp, #4]
 8001854:	685a      	ldr	r2, [r3, #4]
 8001856:	9200      	str	r2, [sp, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a3b      	ldr	r2, [pc, #236]	@ (8001948 <StartTask03+0x1a0>)
 800185c:	2196      	movs	r1, #150	@ 0x96
 800185e:	200a      	movs	r0, #10
 8001860:	f000 fb58 	bl	8001f14 <ST7789_WriteString>
    ST7789_WriteString(10, 170,"21200247    TRAN QUOC TRUNG", Font_7x10, WHITE, BLACK);
 8001864:	4b32      	ldr	r3, [pc, #200]	@ (8001930 <StartTask03+0x188>)
 8001866:	2200      	movs	r2, #0
 8001868:	9202      	str	r2, [sp, #8]
 800186a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800186e:	9201      	str	r2, [sp, #4]
 8001870:	685a      	ldr	r2, [r3, #4]
 8001872:	9200      	str	r2, [sp, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a35      	ldr	r2, [pc, #212]	@ (800194c <StartTask03+0x1a4>)
 8001878:	21aa      	movs	r1, #170	@ 0xaa
 800187a:	200a      	movs	r0, #10
 800187c:	f000 fb4a 	bl	8001f14 <ST7789_WriteString>
	    // Infinite loop to update temperature display
	    while (1)
	    {
	        SW_State = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
 8001880:	2102      	movs	r1, #2
 8001882:	4833      	ldr	r0, [pc, #204]	@ (8001950 <StartTask03+0x1a8>)
 8001884:	f002 fb88 	bl	8003f98 <HAL_GPIO_ReadPin>
 8001888:	4603      	mov	r3, r0
 800188a:	75bb      	strb	r3, [r7, #22]
	        if (SW_State != SW_LastState)
 800188c:	7dba      	ldrb	r2, [r7, #22]
 800188e:	7dfb      	ldrb	r3, [r7, #23]
 8001890:	429a      	cmp	r2, r3
 8001892:	d048      	beq.n	8001926 <StartTask03+0x17e>
	        {
	            if (SW_State == GPIO_PIN_SET)
 8001894:	7dbb      	ldrb	r3, [r7, #22]
 8001896:	2b01      	cmp	r3, #1
 8001898:	d143      	bne.n	8001922 <StartTask03+0x17a>
	            {
	                if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET)
 800189a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800189e:	482d      	ldr	r0, [pc, #180]	@ (8001954 <StartTask03+0x1ac>)
 80018a0:	f002 fb7a 	bl	8003f98 <HAL_GPIO_ReadPin>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d138      	bne.n	800191c <StartTask03+0x174>
	                {

	                    ST7789_Fill(10, 10, 240, 10, BLACK);
 80018aa:	2300      	movs	r3, #0
 80018ac:	9300      	str	r3, [sp, #0]
 80018ae:	230a      	movs	r3, #10
 80018b0:	22f0      	movs	r2, #240	@ 0xf0
 80018b2:	210a      	movs	r1, #10
 80018b4:	200a      	movs	r0, #10
 80018b6:	f000 fa61 	bl	8001d7c <ST7789_Fill>

	                    float temperature = GetTemperature();
 80018ba:	f7ff fb59 	bl	8000f70 <GetTemperature>
 80018be:	ed87 0a04 	vstr	s0, [r7, #16]
	                    float readTemperature = ReadTemperatureFromEEPROM();
 80018c2:	f7ff fbeb 	bl	800109c <ReadTemperatureFromEEPROM>
 80018c6:	ed87 0a03 	vstr	s0, [r7, #12]
	                    ST7789_WriteString(10, 10,"Temperature: ", Font_7x10, WHITE, BLACK);
 80018ca:	4b19      	ldr	r3, [pc, #100]	@ (8001930 <StartTask03+0x188>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	9202      	str	r2, [sp, #8]
 80018d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018d4:	9201      	str	r2, [sp, #4]
 80018d6:	685a      	ldr	r2, [r3, #4]
 80018d8:	9200      	str	r2, [sp, #0]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a1e      	ldr	r2, [pc, #120]	@ (8001958 <StartTask03+0x1b0>)
 80018de:	210a      	movs	r1, #10
 80018e0:	200a      	movs	r0, #10
 80018e2:	f000 fb17 	bl	8001f14 <ST7789_WriteString>
	                    ST7789_WriteFloat(100, 10, temperature, Font_7x10, WHITE, BLACK);
 80018e6:	4b12      	ldr	r3, [pc, #72]	@ (8001930 <StartTask03+0x188>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	9201      	str	r2, [sp, #4]
 80018ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018f0:	9200      	str	r2, [sp, #0]
 80018f2:	cb0c      	ldmia	r3, {r2, r3}
 80018f4:	ed97 0a04 	vldr	s0, [r7, #16]
 80018f8:	210a      	movs	r1, #10
 80018fa:	2064      	movs	r0, #100	@ 0x64
 80018fc:	f7ff fbf8 	bl	80010f0 <ST7789_WriteFloat>
	                    ST7789_WriteString(150, 10, "*C", Font_7x10, WHITE, BLACK);
 8001900:	4b0b      	ldr	r3, [pc, #44]	@ (8001930 <StartTask03+0x188>)
 8001902:	2200      	movs	r2, #0
 8001904:	9202      	str	r2, [sp, #8]
 8001906:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800190a:	9201      	str	r2, [sp, #4]
 800190c:	685a      	ldr	r2, [r3, #4]
 800190e:	9200      	str	r2, [sp, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a12      	ldr	r2, [pc, #72]	@ (800195c <StartTask03+0x1b4>)
 8001914:	210a      	movs	r1, #10
 8001916:	2096      	movs	r0, #150	@ 0x96
 8001918:	f000 fafc 	bl	8001f14 <ST7789_WriteString>
	                }
	                osDelay(50);
 800191c:	2032      	movs	r0, #50	@ 0x32
 800191e:	f004 ff3e 	bl	800679e <osDelay>
	            }
	            SW_LastState = SW_State;
 8001922:	7dbb      	ldrb	r3, [r7, #22]
 8001924:	75fb      	strb	r3, [r7, #23]
	        }
	        osDelay(10);
 8001926:	200a      	movs	r0, #10
 8001928:	f004 ff39 	bl	800679e <osDelay>
	        SW_State = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
 800192c:	e7a8      	b.n	8001880 <StartTask03+0xd8>
 800192e:	bf00      	nop
 8001930:	20000000 	.word	0x20000000
 8001934:	0800a614 	.word	0x0800a614
 8001938:	0800a630 	.word	0x0800a630
 800193c:	0800a640 	.word	0x0800a640
 8001940:	0800a64c 	.word	0x0800a64c
 8001944:	0800a66c 	.word	0x0800a66c
 8001948:	0800a688 	.word	0x0800a688
 800194c:	0800a6a4 	.word	0x0800a6a4
 8001950:	40020000 	.word	0x40020000
 8001954:	40020400 	.word	0x40020400
 8001958:	0800a6c0 	.word	0x0800a6c0
 800195c:	0800a6d0 	.word	0x0800a6d0

08001960 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a04      	ldr	r2, [pc, #16]	@ (8001980 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d101      	bne.n	8001976 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001972:	f000 ff2b 	bl	80027cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001976:	bf00      	nop
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40010000 	.word	0x40010000

08001984 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001988:	b672      	cpsid	i
}
 800198a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800198c:	bf00      	nop
 800198e:	e7fd      	b.n	800198c <Error_Handler+0x8>

08001990 <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 800199a:	2200      	movs	r2, #0
 800199c:	2180      	movs	r1, #128	@ 0x80
 800199e:	480c      	ldr	r0, [pc, #48]	@ (80019d0 <ST7789_WriteCommand+0x40>)
 80019a0:	f002 fb12 	bl	8003fc8 <HAL_GPIO_WritePin>
	ST7789_DC_Clr();
 80019a4:	2200      	movs	r2, #0
 80019a6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019aa:	4809      	ldr	r0, [pc, #36]	@ (80019d0 <ST7789_WriteCommand+0x40>)
 80019ac:	f002 fb0c 	bl	8003fc8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80019b0:	1df9      	adds	r1, r7, #7
 80019b2:	f04f 33ff 	mov.w	r3, #4294967295
 80019b6:	2201      	movs	r2, #1
 80019b8:	4806      	ldr	r0, [pc, #24]	@ (80019d4 <ST7789_WriteCommand+0x44>)
 80019ba:	f004 f870 	bl	8005a9e <HAL_SPI_Transmit>
	ST7789_UnSelect();
 80019be:	2201      	movs	r2, #1
 80019c0:	2180      	movs	r1, #128	@ 0x80
 80019c2:	4803      	ldr	r0, [pc, #12]	@ (80019d0 <ST7789_WriteCommand+0x40>)
 80019c4:	f002 fb00 	bl	8003fc8 <HAL_GPIO_WritePin>
}
 80019c8:	bf00      	nop
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	40020400 	.word	0x40020400
 80019d4:	20000670 	.word	0x20000670

080019d8 <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 80019e2:	2200      	movs	r2, #0
 80019e4:	2180      	movs	r1, #128	@ 0x80
 80019e6:	4820      	ldr	r0, [pc, #128]	@ (8001a68 <ST7789_WriteData+0x90>)
 80019e8:	f002 faee 	bl	8003fc8 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 80019ec:	2201      	movs	r2, #1
 80019ee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019f2:	481d      	ldr	r0, [pc, #116]	@ (8001a68 <ST7789_WriteData+0x90>)
 80019f4:	f002 fae8 	bl	8003fc8 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 80019f8:	e02a      	b.n	8001a50 <ST7789_WriteData+0x78>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a00:	4293      	cmp	r3, r2
 8001a02:	bf28      	it	cs
 8001a04:	4613      	movcs	r3, r2
 8001a06:	81fb      	strh	r3, [r7, #14]
		#ifdef USE_DMA
			if (DMA_MIN_SIZE <= buff_size)
 8001a08:	4b18      	ldr	r3, [pc, #96]	@ (8001a6c <ST7789_WriteData+0x94>)
 8001a0a:	881b      	ldrh	r3, [r3, #0]
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d30e      	bcc.n	8001a32 <ST7789_WriteData+0x5a>
			{
				HAL_SPI_Transmit_DMA(&ST7789_SPI_PORT, buff, chunk_size);
 8001a14:	89fb      	ldrh	r3, [r7, #14]
 8001a16:	461a      	mov	r2, r3
 8001a18:	6879      	ldr	r1, [r7, #4]
 8001a1a:	4815      	ldr	r0, [pc, #84]	@ (8001a70 <ST7789_WriteData+0x98>)
 8001a1c:	f004 f984 	bl	8005d28 <HAL_SPI_Transmit_DMA>
				while (ST7789_SPI_PORT.hdmatx->State != HAL_DMA_STATE_READY)
 8001a20:	bf00      	nop
 8001a22:	4b13      	ldr	r3, [pc, #76]	@ (8001a70 <ST7789_WriteData+0x98>)
 8001a24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a26:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d1f8      	bne.n	8001a22 <ST7789_WriteData+0x4a>
 8001a30:	e006      	b.n	8001a40 <ST7789_WriteData+0x68>
				{}
			}
			else
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8001a32:	89fa      	ldrh	r2, [r7, #14]
 8001a34:	f04f 33ff 	mov.w	r3, #4294967295
 8001a38:	6879      	ldr	r1, [r7, #4]
 8001a3a:	480d      	ldr	r0, [pc, #52]	@ (8001a70 <ST7789_WriteData+0x98>)
 8001a3c:	f004 f82f 	bl	8005a9e <HAL_SPI_Transmit>
		#else
			HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
		#endif
		buff += chunk_size;
 8001a40:	89fb      	ldrh	r3, [r7, #14]
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	4413      	add	r3, r2
 8001a46:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8001a48:	89fb      	ldrh	r3, [r7, #14]
 8001a4a:	683a      	ldr	r2, [r7, #0]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d1d1      	bne.n	80019fa <ST7789_WriteData+0x22>
	}

	ST7789_UnSelect();
 8001a56:	2201      	movs	r2, #1
 8001a58:	2180      	movs	r1, #128	@ 0x80
 8001a5a:	4803      	ldr	r0, [pc, #12]	@ (8001a68 <ST7789_WriteData+0x90>)
 8001a5c:	f002 fab4 	bl	8003fc8 <HAL_GPIO_WritePin>
}
 8001a60:	bf00      	nop
 8001a62:	3710      	adds	r7, #16
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40020400 	.word	0x40020400
 8001a6c:	20000008 	.word	0x20000008
 8001a70:	20000670 	.word	0x20000670

08001a74 <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8001a7e:	2200      	movs	r2, #0
 8001a80:	2180      	movs	r1, #128	@ 0x80
 8001a82:	480c      	ldr	r0, [pc, #48]	@ (8001ab4 <ST7789_WriteSmallData+0x40>)
 8001a84:	f002 faa0 	bl	8003fc8 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 8001a88:	2201      	movs	r2, #1
 8001a8a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a8e:	4809      	ldr	r0, [pc, #36]	@ (8001ab4 <ST7789_WriteSmallData+0x40>)
 8001a90:	f002 fa9a 	bl	8003fc8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 8001a94:	1df9      	adds	r1, r7, #7
 8001a96:	f04f 33ff 	mov.w	r3, #4294967295
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	4806      	ldr	r0, [pc, #24]	@ (8001ab8 <ST7789_WriteSmallData+0x44>)
 8001a9e:	f003 fffe 	bl	8005a9e <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	2180      	movs	r1, #128	@ 0x80
 8001aa6:	4803      	ldr	r0, [pc, #12]	@ (8001ab4 <ST7789_WriteSmallData+0x40>)
 8001aa8:	f002 fa8e 	bl	8003fc8 <HAL_GPIO_WritePin>
}
 8001aac:	bf00      	nop
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40020400 	.word	0x40020400
 8001ab8:	20000670 	.word	0x20000670

08001abc <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 8001ac6:	2036      	movs	r0, #54	@ 0x36
 8001ac8:	f7ff ff62 	bl	8001990 <ST7789_WriteCommand>
	switch (m) {
 8001acc:	79fb      	ldrb	r3, [r7, #7]
 8001ace:	2b03      	cmp	r3, #3
 8001ad0:	d81a      	bhi.n	8001b08 <ST7789_SetRotation+0x4c>
 8001ad2:	a201      	add	r2, pc, #4	@ (adr r2, 8001ad8 <ST7789_SetRotation+0x1c>)
 8001ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ad8:	08001ae9 	.word	0x08001ae9
 8001adc:	08001af1 	.word	0x08001af1
 8001ae0:	08001af9 	.word	0x08001af9
 8001ae4:	08001b01 	.word	0x08001b01
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8001ae8:	20c0      	movs	r0, #192	@ 0xc0
 8001aea:	f7ff ffc3 	bl	8001a74 <ST7789_WriteSmallData>
		break;
 8001aee:	e00c      	b.n	8001b0a <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8001af0:	20a0      	movs	r0, #160	@ 0xa0
 8001af2:	f7ff ffbf 	bl	8001a74 <ST7789_WriteSmallData>
		break;
 8001af6:	e008      	b.n	8001b0a <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 8001af8:	2000      	movs	r0, #0
 8001afa:	f7ff ffbb 	bl	8001a74 <ST7789_WriteSmallData>
		break;
 8001afe:	e004      	b.n	8001b0a <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8001b00:	2060      	movs	r0, #96	@ 0x60
 8001b02:	f7ff ffb7 	bl	8001a74 <ST7789_WriteSmallData>
		break;
 8001b06:	e000      	b.n	8001b0a <ST7789_SetRotation+0x4e>
	default:
		break;
 8001b08:	bf00      	nop
	}
}
 8001b0a:	bf00      	nop
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop

08001b14 <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8001b14:	b590      	push	{r4, r7, lr}
 8001b16:	b087      	sub	sp, #28
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4604      	mov	r4, r0
 8001b1c:	4608      	mov	r0, r1
 8001b1e:	4611      	mov	r1, r2
 8001b20:	461a      	mov	r2, r3
 8001b22:	4623      	mov	r3, r4
 8001b24:	80fb      	strh	r3, [r7, #6]
 8001b26:	4603      	mov	r3, r0
 8001b28:	80bb      	strh	r3, [r7, #4]
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	807b      	strh	r3, [r7, #2]
 8001b2e:	4613      	mov	r3, r2
 8001b30:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8001b32:	2200      	movs	r2, #0
 8001b34:	2180      	movs	r1, #128	@ 0x80
 8001b36:	4824      	ldr	r0, [pc, #144]	@ (8001bc8 <ST7789_SetAddressWindow+0xb4>)
 8001b38:	f002 fa46 	bl	8003fc8 <HAL_GPIO_WritePin>
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 8001b3c:	88fb      	ldrh	r3, [r7, #6]
 8001b3e:	82fb      	strh	r3, [r7, #22]
 8001b40:	887b      	ldrh	r3, [r7, #2]
 8001b42:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 8001b44:	88bb      	ldrh	r3, [r7, #4]
 8001b46:	827b      	strh	r3, [r7, #18]
 8001b48:	883b      	ldrh	r3, [r7, #0]
 8001b4a:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 8001b4c:	202a      	movs	r0, #42	@ 0x2a
 8001b4e:	f7ff ff1f 	bl	8001990 <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 8001b52:	8afb      	ldrh	r3, [r7, #22]
 8001b54:	0a1b      	lsrs	r3, r3, #8
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	733b      	strb	r3, [r7, #12]
 8001b5c:	8afb      	ldrh	r3, [r7, #22]
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	737b      	strb	r3, [r7, #13]
 8001b62:	8abb      	ldrh	r3, [r7, #20]
 8001b64:	0a1b      	lsrs	r3, r3, #8
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	73bb      	strb	r3, [r7, #14]
 8001b6c:	8abb      	ldrh	r3, [r7, #20]
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 8001b72:	f107 030c 	add.w	r3, r7, #12
 8001b76:	2104      	movs	r1, #4
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff ff2d 	bl	80019d8 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 8001b7e:	202b      	movs	r0, #43	@ 0x2b
 8001b80:	f7ff ff06 	bl	8001990 <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 8001b84:	8a7b      	ldrh	r3, [r7, #18]
 8001b86:	0a1b      	lsrs	r3, r3, #8
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	723b      	strb	r3, [r7, #8]
 8001b8e:	8a7b      	ldrh	r3, [r7, #18]
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	727b      	strb	r3, [r7, #9]
 8001b94:	8a3b      	ldrh	r3, [r7, #16]
 8001b96:	0a1b      	lsrs	r3, r3, #8
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	72bb      	strb	r3, [r7, #10]
 8001b9e:	8a3b      	ldrh	r3, [r7, #16]
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 8001ba4:	f107 0308 	add.w	r3, r7, #8
 8001ba8:	2104      	movs	r1, #4
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff ff14 	bl	80019d8 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8001bb0:	202c      	movs	r0, #44	@ 0x2c
 8001bb2:	f7ff feed 	bl	8001990 <ST7789_WriteCommand>
	ST7789_UnSelect();
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	2180      	movs	r1, #128	@ 0x80
 8001bba:	4803      	ldr	r0, [pc, #12]	@ (8001bc8 <ST7789_SetAddressWindow+0xb4>)
 8001bbc:	f002 fa04 	bl	8003fc8 <HAL_GPIO_WritePin>
}
 8001bc0:	bf00      	nop
 8001bc2:	371c      	adds	r7, #28
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd90      	pop	{r4, r7, pc}
 8001bc8:	40020400 	.word	0x40020400

08001bcc <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 8001bcc:	b590      	push	{r4, r7, lr}
 8001bce:	b08b      	sub	sp, #44	@ 0x2c
 8001bd0:	af00      	add	r7, sp, #0
	#ifdef USE_DMA
		memset(disp_buf, 0, sizeof(disp_buf));
 8001bd2:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	484a      	ldr	r0, [pc, #296]	@ (8001d04 <ST7789_Init+0x138>)
 8001bda:	f006 fd60 	bl	800869e <memset>
	#endif
	HAL_Delay(10);
 8001bde:	200a      	movs	r0, #10
 8001be0:	f000 fe14 	bl	800280c <HAL_Delay>
    ST7789_RST_Clr();
 8001be4:	2200      	movs	r2, #0
 8001be6:	2104      	movs	r1, #4
 8001be8:	4847      	ldr	r0, [pc, #284]	@ (8001d08 <ST7789_Init+0x13c>)
 8001bea:	f002 f9ed 	bl	8003fc8 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001bee:	200a      	movs	r0, #10
 8001bf0:	f000 fe0c 	bl	800280c <HAL_Delay>
    ST7789_RST_Set();
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	2104      	movs	r1, #4
 8001bf8:	4843      	ldr	r0, [pc, #268]	@ (8001d08 <ST7789_Init+0x13c>)
 8001bfa:	f002 f9e5 	bl	8003fc8 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8001bfe:	2014      	movs	r0, #20
 8001c00:	f000 fe04 	bl	800280c <HAL_Delay>

    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 8001c04:	203a      	movs	r0, #58	@ 0x3a
 8001c06:	f7ff fec3 	bl	8001990 <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 8001c0a:	2055      	movs	r0, #85	@ 0x55
 8001c0c:	f7ff ff32 	bl	8001a74 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 8001c10:	20b2      	movs	r0, #178	@ 0xb2
 8001c12:	f7ff febd 	bl	8001990 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 8001c16:	4a3d      	ldr	r2, [pc, #244]	@ (8001d0c <ST7789_Init+0x140>)
 8001c18:	f107 0320 	add.w	r3, r7, #32
 8001c1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c20:	6018      	str	r0, [r3, #0]
 8001c22:	3304      	adds	r3, #4
 8001c24:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 8001c26:	f107 0320 	add.w	r3, r7, #32
 8001c2a:	2105      	movs	r1, #5
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff fed3 	bl	80019d8 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 8001c32:	2002      	movs	r0, #2
 8001c34:	f7ff ff42 	bl	8001abc <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 8001c38:	20b7      	movs	r0, #183	@ 0xb7
 8001c3a:	f7ff fea9 	bl	8001990 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 8001c3e:	2035      	movs	r0, #53	@ 0x35
 8001c40:	f7ff ff18 	bl	8001a74 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 8001c44:	20bb      	movs	r0, #187	@ 0xbb
 8001c46:	f7ff fea3 	bl	8001990 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 8001c4a:	2019      	movs	r0, #25
 8001c4c:	f7ff ff12 	bl	8001a74 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 8001c50:	20c0      	movs	r0, #192	@ 0xc0
 8001c52:	f7ff fe9d 	bl	8001990 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 8001c56:	202c      	movs	r0, #44	@ 0x2c
 8001c58:	f7ff ff0c 	bl	8001a74 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 8001c5c:	20c2      	movs	r0, #194	@ 0xc2
 8001c5e:	f7ff fe97 	bl	8001990 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 8001c62:	2001      	movs	r0, #1
 8001c64:	f7ff ff06 	bl	8001a74 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 8001c68:	20c3      	movs	r0, #195	@ 0xc3
 8001c6a:	f7ff fe91 	bl	8001990 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 8001c6e:	2012      	movs	r0, #18
 8001c70:	f7ff ff00 	bl	8001a74 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 8001c74:	20c4      	movs	r0, #196	@ 0xc4
 8001c76:	f7ff fe8b 	bl	8001990 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 8001c7a:	2020      	movs	r0, #32
 8001c7c:	f7ff fefa 	bl	8001a74 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 8001c80:	20c6      	movs	r0, #198	@ 0xc6
 8001c82:	f7ff fe85 	bl	8001990 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 8001c86:	200f      	movs	r0, #15
 8001c88:	f7ff fef4 	bl	8001a74 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 8001c8c:	20d0      	movs	r0, #208	@ 0xd0
 8001c8e:	f7ff fe7f 	bl	8001990 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 8001c92:	20a4      	movs	r0, #164	@ 0xa4
 8001c94:	f7ff feee 	bl	8001a74 <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 8001c98:	20a1      	movs	r0, #161	@ 0xa1
 8001c9a:	f7ff feeb 	bl	8001a74 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 8001c9e:	20e0      	movs	r0, #224	@ 0xe0
 8001ca0:	f7ff fe76 	bl	8001990 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8001ca4:	4b1a      	ldr	r3, [pc, #104]	@ (8001d10 <ST7789_Init+0x144>)
 8001ca6:	f107 0410 	add.w	r4, r7, #16
 8001caa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cac:	c407      	stmia	r4!, {r0, r1, r2}
 8001cae:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8001cb0:	f107 0310 	add.w	r3, r7, #16
 8001cb4:	210e      	movs	r1, #14
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7ff fe8e 	bl	80019d8 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 8001cbc:	20e1      	movs	r0, #225	@ 0xe1
 8001cbe:	f7ff fe67 	bl	8001990 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 8001cc2:	4b14      	ldr	r3, [pc, #80]	@ (8001d14 <ST7789_Init+0x148>)
 8001cc4:	463c      	mov	r4, r7
 8001cc6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cc8:	c407      	stmia	r4!, {r0, r1, r2}
 8001cca:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8001ccc:	463b      	mov	r3, r7
 8001cce:	210e      	movs	r1, #14
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff fe81 	bl	80019d8 <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 8001cd6:	2021      	movs	r0, #33	@ 0x21
 8001cd8:	f7ff fe5a 	bl	8001990 <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 8001cdc:	2011      	movs	r0, #17
 8001cde:	f7ff fe57 	bl	8001990 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 8001ce2:	2013      	movs	r0, #19
 8001ce4:	f7ff fe54 	bl	8001990 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on	
 8001ce8:	2029      	movs	r0, #41	@ 0x29
 8001cea:	f7ff fe51 	bl	8001990 <ST7789_WriteCommand>

	HAL_Delay(50);
 8001cee:	2032      	movs	r0, #50	@ 0x32
 8001cf0:	f000 fd8c 	bl	800280c <HAL_Delay>
	ST7789_Fill_Color(BLACK);				//	Fill with Black.
 8001cf4:	2000      	movs	r0, #0
 8001cf6:	f000 f80f 	bl	8001d18 <ST7789_Fill_Color>
}
 8001cfa:	bf00      	nop
 8001cfc:	372c      	adds	r7, #44	@ 0x2c
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd90      	pop	{r4, r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20000734 	.word	0x20000734
 8001d08:	40020400 	.word	0x40020400
 8001d0c:	0800a6d4 	.word	0x0800a6d4
 8001d10:	0800a6dc 	.word	0x0800a6dc
 8001d14:	0800a6ec 	.word	0x0800a6ec

08001d18 <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	4603      	mov	r3, r0
 8001d20:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 8001d22:	23ef      	movs	r3, #239	@ 0xef
 8001d24:	22ef      	movs	r2, #239	@ 0xef
 8001d26:	2100      	movs	r1, #0
 8001d28:	2000      	movs	r0, #0
 8001d2a:	f7ff fef3 	bl	8001b14 <ST7789_SetAddressWindow>
	ST7789_Select();
 8001d2e:	2200      	movs	r2, #0
 8001d30:	2180      	movs	r1, #128	@ 0x80
 8001d32:	4810      	ldr	r0, [pc, #64]	@ (8001d74 <ST7789_Fill_Color+0x5c>)
 8001d34:	f002 f948 	bl	8003fc8 <HAL_GPIO_WritePin>

	#ifdef USE_DMA
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 8001d38:	2300      	movs	r3, #0
 8001d3a:	81fb      	strh	r3, [r7, #14]
 8001d3c:	e00e      	b.n	8001d5c <ST7789_Fill_Color+0x44>
		{
			memset(disp_buf, color, sizeof(disp_buf));
 8001d3e:	88fb      	ldrh	r3, [r7, #6]
 8001d40:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 8001d44:	4619      	mov	r1, r3
 8001d46:	480c      	ldr	r0, [pc, #48]	@ (8001d78 <ST7789_Fill_Color+0x60>)
 8001d48:	f006 fca9 	bl	800869e <memset>
			ST7789_WriteData(disp_buf, sizeof(disp_buf));
 8001d4c:	f44f 6116 	mov.w	r1, #2400	@ 0x960
 8001d50:	4809      	ldr	r0, [pc, #36]	@ (8001d78 <ST7789_Fill_Color+0x60>)
 8001d52:	f7ff fe41 	bl	80019d8 <ST7789_WriteData>
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 8001d56:	89fb      	ldrh	r3, [r7, #14]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	81fb      	strh	r3, [r7, #14]
 8001d5c:	89fb      	ldrh	r3, [r7, #14]
 8001d5e:	2b2f      	cmp	r3, #47	@ 0x2f
 8001d60:	d9ed      	bls.n	8001d3e <ST7789_Fill_Color+0x26>
				for (j = 0; j < ST7789_HEIGHT; j++) {
					uint8_t data[] = {color >> 8, color & 0xFF};
					ST7789_WriteData(data, sizeof(data));
				}
	#endif
	ST7789_UnSelect();
 8001d62:	2201      	movs	r2, #1
 8001d64:	2180      	movs	r1, #128	@ 0x80
 8001d66:	4803      	ldr	r0, [pc, #12]	@ (8001d74 <ST7789_Fill_Color+0x5c>)
 8001d68:	f002 f92e 	bl	8003fc8 <HAL_GPIO_WritePin>
}
 8001d6c:	bf00      	nop
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40020400 	.word	0x40020400
 8001d78:	20000734 	.word	0x20000734

08001d7c <ST7789_Fill>:
 * @param xEnd&yEnd -> coordinate of the end point
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color)
{
 8001d7c:	b590      	push	{r4, r7, lr}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	4604      	mov	r4, r0
 8001d84:	4608      	mov	r0, r1
 8001d86:	4611      	mov	r1, r2
 8001d88:	461a      	mov	r2, r3
 8001d8a:	4623      	mov	r3, r4
 8001d8c:	80fb      	strh	r3, [r7, #6]
 8001d8e:	4603      	mov	r3, r0
 8001d90:	80bb      	strh	r3, [r7, #4]
 8001d92:	460b      	mov	r3, r1
 8001d94:	807b      	strh	r3, [r7, #2]
 8001d96:	4613      	mov	r3, r2
 8001d98:	803b      	strh	r3, [r7, #0]
	if ((xEnd < 0) || (xEnd >= ST7789_WIDTH) ||
 8001d9a:	887b      	ldrh	r3, [r7, #2]
 8001d9c:	2bef      	cmp	r3, #239	@ 0xef
 8001d9e:	d835      	bhi.n	8001e0c <ST7789_Fill+0x90>
		 (yEnd < 0) || (yEnd >= ST7789_HEIGHT))	return;
 8001da0:	883b      	ldrh	r3, [r7, #0]
 8001da2:	2bef      	cmp	r3, #239	@ 0xef
 8001da4:	d832      	bhi.n	8001e0c <ST7789_Fill+0x90>
	ST7789_Select();
 8001da6:	2200      	movs	r2, #0
 8001da8:	2180      	movs	r1, #128	@ 0x80
 8001daa:	481a      	ldr	r0, [pc, #104]	@ (8001e14 <ST7789_Fill+0x98>)
 8001dac:	f002 f90c 	bl	8003fc8 <HAL_GPIO_WritePin>
	uint16_t i, j;
	ST7789_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 8001db0:	883b      	ldrh	r3, [r7, #0]
 8001db2:	887a      	ldrh	r2, [r7, #2]
 8001db4:	88b9      	ldrh	r1, [r7, #4]
 8001db6:	88f8      	ldrh	r0, [r7, #6]
 8001db8:	f7ff feac 	bl	8001b14 <ST7789_SetAddressWindow>
	for (i = ySta; i <= yEnd; i++)
 8001dbc:	88bb      	ldrh	r3, [r7, #4]
 8001dbe:	81fb      	strh	r3, [r7, #14]
 8001dc0:	e01a      	b.n	8001df8 <ST7789_Fill+0x7c>
		for (j = xSta; j <= xEnd; j++) {
 8001dc2:	88fb      	ldrh	r3, [r7, #6]
 8001dc4:	81bb      	strh	r3, [r7, #12]
 8001dc6:	e010      	b.n	8001dea <ST7789_Fill+0x6e>
			uint8_t data[] = {color >> 8, color & 0xFF};
 8001dc8:	8c3b      	ldrh	r3, [r7, #32]
 8001dca:	0a1b      	lsrs	r3, r3, #8
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	723b      	strb	r3, [r7, #8]
 8001dd2:	8c3b      	ldrh	r3, [r7, #32]
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	727b      	strb	r3, [r7, #9]
			ST7789_WriteData(data, sizeof(data));
 8001dd8:	f107 0308 	add.w	r3, r7, #8
 8001ddc:	2102      	movs	r1, #2
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff fdfa 	bl	80019d8 <ST7789_WriteData>
		for (j = xSta; j <= xEnd; j++) {
 8001de4:	89bb      	ldrh	r3, [r7, #12]
 8001de6:	3301      	adds	r3, #1
 8001de8:	81bb      	strh	r3, [r7, #12]
 8001dea:	89ba      	ldrh	r2, [r7, #12]
 8001dec:	887b      	ldrh	r3, [r7, #2]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d9ea      	bls.n	8001dc8 <ST7789_Fill+0x4c>
	for (i = ySta; i <= yEnd; i++)
 8001df2:	89fb      	ldrh	r3, [r7, #14]
 8001df4:	3301      	adds	r3, #1
 8001df6:	81fb      	strh	r3, [r7, #14]
 8001df8:	89fa      	ldrh	r2, [r7, #14]
 8001dfa:	883b      	ldrh	r3, [r7, #0]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d9e0      	bls.n	8001dc2 <ST7789_Fill+0x46>
		}
	ST7789_UnSelect();
 8001e00:	2201      	movs	r2, #1
 8001e02:	2180      	movs	r1, #128	@ 0x80
 8001e04:	4803      	ldr	r0, [pc, #12]	@ (8001e14 <ST7789_Fill+0x98>)
 8001e06:	f002 f8df 	bl	8003fc8 <HAL_GPIO_WritePin>
 8001e0a:	e000      	b.n	8001e0e <ST7789_Fill+0x92>
		 (yEnd < 0) || (yEnd >= ST7789_HEIGHT))	return;
 8001e0c:	bf00      	nop
}
 8001e0e:	3714      	adds	r7, #20
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd90      	pop	{r4, r7, pc}
 8001e14:	40020400 	.word	0x40020400

08001e18 <ST7789_WriteChar>:
 * @param color -> color of the char
 * @param bgcolor -> background color of the char
 * @return  none
 */
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8001e18:	b082      	sub	sp, #8
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b088      	sub	sp, #32
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e22:	4603      	mov	r3, r0
 8001e24:	80fb      	strh	r3, [r7, #6]
 8001e26:	460b      	mov	r3, r1
 8001e28:	80bb      	strh	r3, [r7, #4]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;
	ST7789_Select();
 8001e2e:	2200      	movs	r2, #0
 8001e30:	2180      	movs	r1, #128	@ 0x80
 8001e32:	4837      	ldr	r0, [pc, #220]	@ (8001f10 <ST7789_WriteChar+0xf8>)
 8001e34:	f002 f8c8 	bl	8003fc8 <HAL_GPIO_WritePin>
	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 8001e38:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	88fb      	ldrh	r3, [r7, #6]
 8001e40:	4413      	add	r3, r2
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	3b01      	subs	r3, #1
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	88bb      	ldrh	r3, [r7, #4]
 8001e50:	440b      	add	r3, r1
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	3b01      	subs	r3, #1
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	88b9      	ldrh	r1, [r7, #4]
 8001e5a:	88f8      	ldrh	r0, [r7, #6]
 8001e5c:	f7ff fe5a 	bl	8001b14 <ST7789_SetAddressWindow>

	for (i = 0; i < font.height; i++) {
 8001e60:	2300      	movs	r3, #0
 8001e62:	61fb      	str	r3, [r7, #28]
 8001e64:	e041      	b.n	8001eea <ST7789_WriteChar+0xd2>
		b = font.data[(ch - 32) * font.height + i];
 8001e66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001e68:	78fb      	ldrb	r3, [r7, #3]
 8001e6a:	3b20      	subs	r3, #32
 8001e6c:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8001e70:	fb01 f303 	mul.w	r3, r1, r3
 8001e74:	4619      	mov	r1, r3
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	440b      	add	r3, r1
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	4413      	add	r3, r2
 8001e7e:	881b      	ldrh	r3, [r3, #0]
 8001e80:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font.width; j++) {
 8001e82:	2300      	movs	r3, #0
 8001e84:	61bb      	str	r3, [r7, #24]
 8001e86:	e027      	b.n	8001ed8 <ST7789_WriteChar+0xc0>
			if ((b << j) & 0x8000) {
 8001e88:	697a      	ldr	r2, [r7, #20]
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d00e      	beq.n	8001eb6 <ST7789_WriteChar+0x9e>
				uint8_t data[] = {color >> 8, color & 0xFF};
 8001e98:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001e9a:	0a1b      	lsrs	r3, r3, #8
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	743b      	strb	r3, [r7, #16]
 8001ea2:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	747b      	strb	r3, [r7, #17]
				ST7789_WriteData(data, sizeof(data));
 8001ea8:	f107 0310 	add.w	r3, r7, #16
 8001eac:	2102      	movs	r1, #2
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff fd92 	bl	80019d8 <ST7789_WriteData>
 8001eb4:	e00d      	b.n	8001ed2 <ST7789_WriteChar+0xba>
			}
			else {
				uint8_t data[] = {bgcolor >> 8, bgcolor & 0xFF};
 8001eb6:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001eb8:	0a1b      	lsrs	r3, r3, #8
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	733b      	strb	r3, [r7, #12]
 8001ec0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	737b      	strb	r3, [r7, #13]
				ST7789_WriteData(data, sizeof(data));
 8001ec6:	f107 030c 	add.w	r3, r7, #12
 8001eca:	2102      	movs	r1, #2
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff fd83 	bl	80019d8 <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	61bb      	str	r3, [r7, #24]
 8001ed8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001edc:	461a      	mov	r2, r3
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d3d1      	bcc.n	8001e88 <ST7789_WriteChar+0x70>
	for (i = 0; i < font.height; i++) {
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	61fb      	str	r3, [r7, #28]
 8001eea:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001eee:	461a      	mov	r2, r3
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d3b7      	bcc.n	8001e66 <ST7789_WriteChar+0x4e>
			}
		}
	}
	ST7789_UnSelect();
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	2180      	movs	r1, #128	@ 0x80
 8001efa:	4805      	ldr	r0, [pc, #20]	@ (8001f10 <ST7789_WriteChar+0xf8>)
 8001efc:	f002 f864 	bl	8003fc8 <HAL_GPIO_WritePin>
}
 8001f00:	bf00      	nop
 8001f02:	3720      	adds	r7, #32
 8001f04:	46bd      	mov	sp, r7
 8001f06:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001f0a:	b002      	add	sp, #8
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	40020400 	.word	0x40020400

08001f14 <ST7789_WriteString>:
 * @param color -> color of the string
 * @param bgcolor -> background color of the string
 * @return  none
 */
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8001f14:	b082      	sub	sp, #8
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b086      	sub	sp, #24
 8001f1a:	af04      	add	r7, sp, #16
 8001f1c:	603a      	str	r2, [r7, #0]
 8001f1e:	617b      	str	r3, [r7, #20]
 8001f20:	4603      	mov	r3, r0
 8001f22:	80fb      	strh	r3, [r7, #6]
 8001f24:	460b      	mov	r3, r1
 8001f26:	80bb      	strh	r3, [r7, #4]
	ST7789_Select();
 8001f28:	2200      	movs	r2, #0
 8001f2a:	2180      	movs	r1, #128	@ 0x80
 8001f2c:	4821      	ldr	r0, [pc, #132]	@ (8001fb4 <ST7789_WriteString+0xa0>)
 8001f2e:	f002 f84b 	bl	8003fc8 <HAL_GPIO_WritePin>
	while (*str) {
 8001f32:	e02d      	b.n	8001f90 <ST7789_WriteString+0x7c>
		if (x + font.width >= ST7789_WIDTH) {
 8001f34:	88fb      	ldrh	r3, [r7, #6]
 8001f36:	7d3a      	ldrb	r2, [r7, #20]
 8001f38:	4413      	add	r3, r2
 8001f3a:	2bef      	cmp	r3, #239	@ 0xef
 8001f3c:	dd13      	ble.n	8001f66 <ST7789_WriteString+0x52>
			x = 0;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8001f42:	7d7b      	ldrb	r3, [r7, #21]
 8001f44:	461a      	mov	r2, r3
 8001f46:	88bb      	ldrh	r3, [r7, #4]
 8001f48:	4413      	add	r3, r2
 8001f4a:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) {
 8001f4c:	88bb      	ldrh	r3, [r7, #4]
 8001f4e:	7d7a      	ldrb	r2, [r7, #21]
 8001f50:	4413      	add	r3, r2
 8001f52:	2bef      	cmp	r3, #239	@ 0xef
 8001f54:	dc21      	bgt.n	8001f9a <ST7789_WriteString+0x86>
				break;
			}

			if (*str == ' ') {
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	2b20      	cmp	r3, #32
 8001f5c:	d103      	bne.n	8001f66 <ST7789_WriteString+0x52>
				// skip spaces in the beginning of the new line
				str++;
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	3301      	adds	r3, #1
 8001f62:	603b      	str	r3, [r7, #0]
				continue;
 8001f64:	e014      	b.n	8001f90 <ST7789_WriteString+0x7c>
			}
		}
		ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	781a      	ldrb	r2, [r3, #0]
 8001f6a:	88b9      	ldrh	r1, [r7, #4]
 8001f6c:	88f8      	ldrh	r0, [r7, #6]
 8001f6e:	8c3b      	ldrh	r3, [r7, #32]
 8001f70:	9302      	str	r3, [sp, #8]
 8001f72:	8bbb      	ldrh	r3, [r7, #28]
 8001f74:	9301      	str	r3, [sp, #4]
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	9300      	str	r3, [sp, #0]
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	f7ff ff4c 	bl	8001e18 <ST7789_WriteChar>
		x += font.width;
 8001f80:	7d3b      	ldrb	r3, [r7, #20]
 8001f82:	461a      	mov	r2, r3
 8001f84:	88fb      	ldrh	r3, [r7, #6]
 8001f86:	4413      	add	r3, r2
 8001f88:	80fb      	strh	r3, [r7, #6]
		str++;
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	603b      	str	r3, [r7, #0]
	while (*str) {
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d1cd      	bne.n	8001f34 <ST7789_WriteString+0x20>
 8001f98:	e000      	b.n	8001f9c <ST7789_WriteString+0x88>
				break;
 8001f9a:	bf00      	nop
	}
	ST7789_UnSelect();
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	2180      	movs	r1, #128	@ 0x80
 8001fa0:	4804      	ldr	r0, [pc, #16]	@ (8001fb4 <ST7789_WriteString+0xa0>)
 8001fa2:	f002 f811 	bl	8003fc8 <HAL_GPIO_WritePin>
}
 8001fa6:	bf00      	nop
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001fb0:	b002      	add	sp, #8
 8001fb2:	4770      	bx	lr
 8001fb4:	40020400 	.word	0x40020400

08001fb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	607b      	str	r3, [r7, #4]
 8001fc2:	4b12      	ldr	r3, [pc, #72]	@ (800200c <HAL_MspInit+0x54>)
 8001fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fc6:	4a11      	ldr	r2, [pc, #68]	@ (800200c <HAL_MspInit+0x54>)
 8001fc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fce:	4b0f      	ldr	r3, [pc, #60]	@ (800200c <HAL_MspInit+0x54>)
 8001fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fd6:	607b      	str	r3, [r7, #4]
 8001fd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fda:	2300      	movs	r3, #0
 8001fdc:	603b      	str	r3, [r7, #0]
 8001fde:	4b0b      	ldr	r3, [pc, #44]	@ (800200c <HAL_MspInit+0x54>)
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe2:	4a0a      	ldr	r2, [pc, #40]	@ (800200c <HAL_MspInit+0x54>)
 8001fe4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fe8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fea:	4b08      	ldr	r3, [pc, #32]	@ (800200c <HAL_MspInit+0x54>)
 8001fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ff2:	603b      	str	r3, [r7, #0]
 8001ff4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	210f      	movs	r1, #15
 8001ffa:	f06f 0001 	mvn.w	r0, #1
 8001ffe:	f001 fa19 	bl	8003434 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002002:	bf00      	nop
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	40023800 	.word	0x40023800

08002010 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a2a      	ldr	r2, [pc, #168]	@ (80020c8 <HAL_ADC_MspInit+0xb8>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d14d      	bne.n	80020be <HAL_ADC_MspInit+0xae>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002022:	2300      	movs	r3, #0
 8002024:	60fb      	str	r3, [r7, #12]
 8002026:	4b29      	ldr	r3, [pc, #164]	@ (80020cc <HAL_ADC_MspInit+0xbc>)
 8002028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800202a:	4a28      	ldr	r2, [pc, #160]	@ (80020cc <HAL_ADC_MspInit+0xbc>)
 800202c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002030:	6453      	str	r3, [r2, #68]	@ 0x44
 8002032:	4b26      	ldr	r3, [pc, #152]	@ (80020cc <HAL_ADC_MspInit+0xbc>)
 8002034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002036:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800203e:	4b24      	ldr	r3, [pc, #144]	@ (80020d0 <HAL_ADC_MspInit+0xc0>)
 8002040:	4a24      	ldr	r2, [pc, #144]	@ (80020d4 <HAL_ADC_MspInit+0xc4>)
 8002042:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002044:	4b22      	ldr	r3, [pc, #136]	@ (80020d0 <HAL_ADC_MspInit+0xc0>)
 8002046:	2200      	movs	r2, #0
 8002048:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800204a:	4b21      	ldr	r3, [pc, #132]	@ (80020d0 <HAL_ADC_MspInit+0xc0>)
 800204c:	2200      	movs	r2, #0
 800204e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002050:	4b1f      	ldr	r3, [pc, #124]	@ (80020d0 <HAL_ADC_MspInit+0xc0>)
 8002052:	2200      	movs	r2, #0
 8002054:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002056:	4b1e      	ldr	r3, [pc, #120]	@ (80020d0 <HAL_ADC_MspInit+0xc0>)
 8002058:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800205c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800205e:	4b1c      	ldr	r3, [pc, #112]	@ (80020d0 <HAL_ADC_MspInit+0xc0>)
 8002060:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002064:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002066:	4b1a      	ldr	r3, [pc, #104]	@ (80020d0 <HAL_ADC_MspInit+0xc0>)
 8002068:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800206c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800206e:	4b18      	ldr	r3, [pc, #96]	@ (80020d0 <HAL_ADC_MspInit+0xc0>)
 8002070:	2200      	movs	r2, #0
 8002072:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002074:	4b16      	ldr	r3, [pc, #88]	@ (80020d0 <HAL_ADC_MspInit+0xc0>)
 8002076:	2200      	movs	r2, #0
 8002078:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800207a:	4b15      	ldr	r3, [pc, #84]	@ (80020d0 <HAL_ADC_MspInit+0xc0>)
 800207c:	2204      	movs	r2, #4
 800207e:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002080:	4b13      	ldr	r3, [pc, #76]	@ (80020d0 <HAL_ADC_MspInit+0xc0>)
 8002082:	2203      	movs	r2, #3
 8002084:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 8002086:	4b12      	ldr	r3, [pc, #72]	@ (80020d0 <HAL_ADC_MspInit+0xc0>)
 8002088:	2200      	movs	r2, #0
 800208a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800208c:	4b10      	ldr	r3, [pc, #64]	@ (80020d0 <HAL_ADC_MspInit+0xc0>)
 800208e:	2200      	movs	r2, #0
 8002090:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002092:	480f      	ldr	r0, [pc, #60]	@ (80020d0 <HAL_ADC_MspInit+0xc0>)
 8002094:	f001 fa74 	bl	8003580 <HAL_DMA_Init>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <HAL_ADC_MspInit+0x92>
    {
      Error_Handler();
 800209e:	f7ff fc71 	bl	8001984 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a0a      	ldr	r2, [pc, #40]	@ (80020d0 <HAL_ADC_MspInit+0xc0>)
 80020a6:	639a      	str	r2, [r3, #56]	@ 0x38
 80020a8:	4a09      	ldr	r2, [pc, #36]	@ (80020d0 <HAL_ADC_MspInit+0xc0>)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 80020ae:	2200      	movs	r2, #0
 80020b0:	2105      	movs	r1, #5
 80020b2:	2012      	movs	r0, #18
 80020b4:	f001 f9be 	bl	8003434 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80020b8:	2012      	movs	r0, #18
 80020ba:	f001 f9d7 	bl	800346c <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80020be:	bf00      	nop
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40012000 	.word	0x40012000
 80020cc:	40023800 	.word	0x40023800
 80020d0:	200004e8 	.word	0x200004e8
 80020d4:	40026410 	.word	0x40026410

080020d8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b08a      	sub	sp, #40	@ 0x28
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e0:	f107 0314 	add.w	r3, r7, #20
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	605a      	str	r2, [r3, #4]
 80020ea:	609a      	str	r2, [r3, #8]
 80020ec:	60da      	str	r2, [r3, #12]
 80020ee:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a17      	ldr	r2, [pc, #92]	@ (8002154 <HAL_DAC_MspInit+0x7c>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d127      	bne.n	800214a <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80020fa:	2300      	movs	r3, #0
 80020fc:	613b      	str	r3, [r7, #16]
 80020fe:	4b16      	ldr	r3, [pc, #88]	@ (8002158 <HAL_DAC_MspInit+0x80>)
 8002100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002102:	4a15      	ldr	r2, [pc, #84]	@ (8002158 <HAL_DAC_MspInit+0x80>)
 8002104:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002108:	6413      	str	r3, [r2, #64]	@ 0x40
 800210a:	4b13      	ldr	r3, [pc, #76]	@ (8002158 <HAL_DAC_MspInit+0x80>)
 800210c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800210e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002112:	613b      	str	r3, [r7, #16]
 8002114:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002116:	2300      	movs	r3, #0
 8002118:	60fb      	str	r3, [r7, #12]
 800211a:	4b0f      	ldr	r3, [pc, #60]	@ (8002158 <HAL_DAC_MspInit+0x80>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211e:	4a0e      	ldr	r2, [pc, #56]	@ (8002158 <HAL_DAC_MspInit+0x80>)
 8002120:	f043 0301 	orr.w	r3, r3, #1
 8002124:	6313      	str	r3, [r2, #48]	@ 0x30
 8002126:	4b0c      	ldr	r3, [pc, #48]	@ (8002158 <HAL_DAC_MspInit+0x80>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	60fb      	str	r3, [r7, #12]
 8002130:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002132:	2330      	movs	r3, #48	@ 0x30
 8002134:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002136:	2303      	movs	r3, #3
 8002138:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213a:	2300      	movs	r3, #0
 800213c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800213e:	f107 0314 	add.w	r3, r7, #20
 8002142:	4619      	mov	r1, r3
 8002144:	4805      	ldr	r0, [pc, #20]	@ (800215c <HAL_DAC_MspInit+0x84>)
 8002146:	f001 fd8b 	bl	8003c60 <HAL_GPIO_Init>

  /* USER CODE END DAC_MspInit 1 */

  }

}
 800214a:	bf00      	nop
 800214c:	3728      	adds	r7, #40	@ 0x28
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	40007400 	.word	0x40007400
 8002158:	40023800 	.word	0x40023800
 800215c:	40020000 	.word	0x40020000

08002160 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b08a      	sub	sp, #40	@ 0x28
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002168:	f107 0314 	add.w	r3, r7, #20
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	605a      	str	r2, [r3, #4]
 8002172:	609a      	str	r2, [r3, #8]
 8002174:	60da      	str	r2, [r3, #12]
 8002176:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a48      	ldr	r2, [pc, #288]	@ (80022a0 <HAL_I2C_MspInit+0x140>)
 800217e:	4293      	cmp	r3, r2
 8002180:	f040 8089 	bne.w	8002296 <HAL_I2C_MspInit+0x136>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002184:	2300      	movs	r3, #0
 8002186:	613b      	str	r3, [r7, #16]
 8002188:	4b46      	ldr	r3, [pc, #280]	@ (80022a4 <HAL_I2C_MspInit+0x144>)
 800218a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218c:	4a45      	ldr	r2, [pc, #276]	@ (80022a4 <HAL_I2C_MspInit+0x144>)
 800218e:	f043 0302 	orr.w	r3, r3, #2
 8002192:	6313      	str	r3, [r2, #48]	@ 0x30
 8002194:	4b43      	ldr	r3, [pc, #268]	@ (80022a4 <HAL_I2C_MspInit+0x144>)
 8002196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	613b      	str	r3, [r7, #16]
 800219e:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80021a0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80021a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021a6:	2312      	movs	r3, #18
 80021a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021aa:	2300      	movs	r3, #0
 80021ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ae:	2303      	movs	r3, #3
 80021b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80021b2:	2304      	movs	r3, #4
 80021b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021b6:	f107 0314 	add.w	r3, r7, #20
 80021ba:	4619      	mov	r1, r3
 80021bc:	483a      	ldr	r0, [pc, #232]	@ (80022a8 <HAL_I2C_MspInit+0x148>)
 80021be:	f001 fd4f 	bl	8003c60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80021c2:	2300      	movs	r3, #0
 80021c4:	60fb      	str	r3, [r7, #12]
 80021c6:	4b37      	ldr	r3, [pc, #220]	@ (80022a4 <HAL_I2C_MspInit+0x144>)
 80021c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ca:	4a36      	ldr	r2, [pc, #216]	@ (80022a4 <HAL_I2C_MspInit+0x144>)
 80021cc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80021d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80021d2:	4b34      	ldr	r3, [pc, #208]	@ (80022a4 <HAL_I2C_MspInit+0x144>)
 80021d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 80021de:	4b33      	ldr	r3, [pc, #204]	@ (80022ac <HAL_I2C_MspInit+0x14c>)
 80021e0:	4a33      	ldr	r2, [pc, #204]	@ (80022b0 <HAL_I2C_MspInit+0x150>)
 80021e2:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 80021e4:	4b31      	ldr	r3, [pc, #196]	@ (80022ac <HAL_I2C_MspInit+0x14c>)
 80021e6:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 80021ea:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021ec:	4b2f      	ldr	r3, [pc, #188]	@ (80022ac <HAL_I2C_MspInit+0x14c>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021f2:	4b2e      	ldr	r3, [pc, #184]	@ (80022ac <HAL_I2C_MspInit+0x14c>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80021f8:	4b2c      	ldr	r3, [pc, #176]	@ (80022ac <HAL_I2C_MspInit+0x14c>)
 80021fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021fe:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002200:	4b2a      	ldr	r3, [pc, #168]	@ (80022ac <HAL_I2C_MspInit+0x14c>)
 8002202:	2200      	movs	r2, #0
 8002204:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002206:	4b29      	ldr	r3, [pc, #164]	@ (80022ac <HAL_I2C_MspInit+0x14c>)
 8002208:	2200      	movs	r2, #0
 800220a:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 800220c:	4b27      	ldr	r3, [pc, #156]	@ (80022ac <HAL_I2C_MspInit+0x14c>)
 800220e:	2200      	movs	r2, #0
 8002210:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002212:	4b26      	ldr	r3, [pc, #152]	@ (80022ac <HAL_I2C_MspInit+0x14c>)
 8002214:	2200      	movs	r2, #0
 8002216:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002218:	4b24      	ldr	r3, [pc, #144]	@ (80022ac <HAL_I2C_MspInit+0x14c>)
 800221a:	2200      	movs	r2, #0
 800221c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 800221e:	4823      	ldr	r0, [pc, #140]	@ (80022ac <HAL_I2C_MspInit+0x14c>)
 8002220:	f001 f9ae 	bl	8003580 <HAL_DMA_Init>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 800222a:	f7ff fbab 	bl	8001984 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a1e      	ldr	r2, [pc, #120]	@ (80022ac <HAL_I2C_MspInit+0x14c>)
 8002232:	639a      	str	r2, [r3, #56]	@ 0x38
 8002234:	4a1d      	ldr	r2, [pc, #116]	@ (80022ac <HAL_I2C_MspInit+0x14c>)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 800223a:	4b1e      	ldr	r3, [pc, #120]	@ (80022b4 <HAL_I2C_MspInit+0x154>)
 800223c:	4a1e      	ldr	r2, [pc, #120]	@ (80022b8 <HAL_I2C_MspInit+0x158>)
 800223e:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 8002240:	4b1c      	ldr	r3, [pc, #112]	@ (80022b4 <HAL_I2C_MspInit+0x154>)
 8002242:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8002246:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002248:	4b1a      	ldr	r3, [pc, #104]	@ (80022b4 <HAL_I2C_MspInit+0x154>)
 800224a:	2240      	movs	r2, #64	@ 0x40
 800224c:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800224e:	4b19      	ldr	r3, [pc, #100]	@ (80022b4 <HAL_I2C_MspInit+0x154>)
 8002250:	2200      	movs	r2, #0
 8002252:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002254:	4b17      	ldr	r3, [pc, #92]	@ (80022b4 <HAL_I2C_MspInit+0x154>)
 8002256:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800225a:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800225c:	4b15      	ldr	r3, [pc, #84]	@ (80022b4 <HAL_I2C_MspInit+0x154>)
 800225e:	2200      	movs	r2, #0
 8002260:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002262:	4b14      	ldr	r3, [pc, #80]	@ (80022b4 <HAL_I2C_MspInit+0x154>)
 8002264:	2200      	movs	r2, #0
 8002266:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8002268:	4b12      	ldr	r3, [pc, #72]	@ (80022b4 <HAL_I2C_MspInit+0x154>)
 800226a:	2200      	movs	r2, #0
 800226c:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800226e:	4b11      	ldr	r3, [pc, #68]	@ (80022b4 <HAL_I2C_MspInit+0x154>)
 8002270:	2200      	movs	r2, #0
 8002272:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002274:	4b0f      	ldr	r3, [pc, #60]	@ (80022b4 <HAL_I2C_MspInit+0x154>)
 8002276:	2200      	movs	r2, #0
 8002278:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 800227a:	480e      	ldr	r0, [pc, #56]	@ (80022b4 <HAL_I2C_MspInit+0x154>)
 800227c:	f001 f980 	bl	8003580 <HAL_DMA_Init>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 8002286:	f7ff fb7d 	bl	8001984 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a09      	ldr	r2, [pc, #36]	@ (80022b4 <HAL_I2C_MspInit+0x154>)
 800228e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002290:	4a08      	ldr	r2, [pc, #32]	@ (80022b4 <HAL_I2C_MspInit+0x154>)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8002296:	bf00      	nop
 8002298:	3728      	adds	r7, #40	@ 0x28
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	40005800 	.word	0x40005800
 80022a4:	40023800 	.word	0x40023800
 80022a8:	40020400 	.word	0x40020400
 80022ac:	200005b0 	.word	0x200005b0
 80022b0:	40026040 	.word	0x40026040
 80022b4:	20000610 	.word	0x20000610
 80022b8:	400260b8 	.word	0x400260b8

080022bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b08a      	sub	sp, #40	@ 0x28
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c4:	f107 0314 	add.w	r3, r7, #20
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	605a      	str	r2, [r3, #4]
 80022ce:	609a      	str	r2, [r3, #8]
 80022d0:	60da      	str	r2, [r3, #12]
 80022d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a3f      	ldr	r2, [pc, #252]	@ (80023d8 <HAL_SPI_MspInit+0x11c>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d177      	bne.n	80023ce <HAL_SPI_MspInit+0x112>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80022de:	2300      	movs	r3, #0
 80022e0:	613b      	str	r3, [r7, #16]
 80022e2:	4b3e      	ldr	r3, [pc, #248]	@ (80023dc <HAL_SPI_MspInit+0x120>)
 80022e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e6:	4a3d      	ldr	r2, [pc, #244]	@ (80023dc <HAL_SPI_MspInit+0x120>)
 80022e8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80022ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80022ee:	4b3b      	ldr	r3, [pc, #236]	@ (80023dc <HAL_SPI_MspInit+0x120>)
 80022f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022f6:	613b      	str	r3, [r7, #16]
 80022f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022fa:	2300      	movs	r3, #0
 80022fc:	60fb      	str	r3, [r7, #12]
 80022fe:	4b37      	ldr	r3, [pc, #220]	@ (80023dc <HAL_SPI_MspInit+0x120>)
 8002300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002302:	4a36      	ldr	r2, [pc, #216]	@ (80023dc <HAL_SPI_MspInit+0x120>)
 8002304:	f043 0301 	orr.w	r3, r3, #1
 8002308:	6313      	str	r3, [r2, #48]	@ 0x30
 800230a:	4b34      	ldr	r3, [pc, #208]	@ (80023dc <HAL_SPI_MspInit+0x120>)
 800230c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	60fb      	str	r3, [r7, #12]
 8002314:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002316:	2300      	movs	r3, #0
 8002318:	60bb      	str	r3, [r7, #8]
 800231a:	4b30      	ldr	r3, [pc, #192]	@ (80023dc <HAL_SPI_MspInit+0x120>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800231e:	4a2f      	ldr	r2, [pc, #188]	@ (80023dc <HAL_SPI_MspInit+0x120>)
 8002320:	f043 0302 	orr.w	r3, r3, #2
 8002324:	6313      	str	r3, [r2, #48]	@ 0x30
 8002326:	4b2d      	ldr	r3, [pc, #180]	@ (80023dc <HAL_SPI_MspInit+0x120>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	60bb      	str	r3, [r7, #8]
 8002330:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002332:	23c0      	movs	r3, #192	@ 0xc0
 8002334:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002336:	2302      	movs	r3, #2
 8002338:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233a:	2300      	movs	r3, #0
 800233c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800233e:	2303      	movs	r3, #3
 8002340:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002342:	2305      	movs	r3, #5
 8002344:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002346:	f107 0314 	add.w	r3, r7, #20
 800234a:	4619      	mov	r1, r3
 800234c:	4824      	ldr	r0, [pc, #144]	@ (80023e0 <HAL_SPI_MspInit+0x124>)
 800234e:	f001 fc87 	bl	8003c60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002352:	2308      	movs	r3, #8
 8002354:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002356:	2302      	movs	r3, #2
 8002358:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235a:	2300      	movs	r3, #0
 800235c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800235e:	2303      	movs	r3, #3
 8002360:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002362:	2305      	movs	r3, #5
 8002364:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002366:	f107 0314 	add.w	r3, r7, #20
 800236a:	4619      	mov	r1, r3
 800236c:	481d      	ldr	r0, [pc, #116]	@ (80023e4 <HAL_SPI_MspInit+0x128>)
 800236e:	f001 fc77 	bl	8003c60 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8002372:	4b1d      	ldr	r3, [pc, #116]	@ (80023e8 <HAL_SPI_MspInit+0x12c>)
 8002374:	4a1d      	ldr	r2, [pc, #116]	@ (80023ec <HAL_SPI_MspInit+0x130>)
 8002376:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8002378:	4b1b      	ldr	r3, [pc, #108]	@ (80023e8 <HAL_SPI_MspInit+0x12c>)
 800237a:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800237e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002380:	4b19      	ldr	r3, [pc, #100]	@ (80023e8 <HAL_SPI_MspInit+0x12c>)
 8002382:	2240      	movs	r2, #64	@ 0x40
 8002384:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002386:	4b18      	ldr	r3, [pc, #96]	@ (80023e8 <HAL_SPI_MspInit+0x12c>)
 8002388:	2200      	movs	r2, #0
 800238a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800238c:	4b16      	ldr	r3, [pc, #88]	@ (80023e8 <HAL_SPI_MspInit+0x12c>)
 800238e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002392:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002394:	4b14      	ldr	r3, [pc, #80]	@ (80023e8 <HAL_SPI_MspInit+0x12c>)
 8002396:	2200      	movs	r2, #0
 8002398:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800239a:	4b13      	ldr	r3, [pc, #76]	@ (80023e8 <HAL_SPI_MspInit+0x12c>)
 800239c:	2200      	movs	r2, #0
 800239e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80023a0:	4b11      	ldr	r3, [pc, #68]	@ (80023e8 <HAL_SPI_MspInit+0x12c>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80023a6:	4b10      	ldr	r3, [pc, #64]	@ (80023e8 <HAL_SPI_MspInit+0x12c>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023ac:	4b0e      	ldr	r3, [pc, #56]	@ (80023e8 <HAL_SPI_MspInit+0x12c>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80023b2:	480d      	ldr	r0, [pc, #52]	@ (80023e8 <HAL_SPI_MspInit+0x12c>)
 80023b4:	f001 f8e4 	bl	8003580 <HAL_DMA_Init>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 80023be:	f7ff fae1 	bl	8001984 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a08      	ldr	r2, [pc, #32]	@ (80023e8 <HAL_SPI_MspInit+0x12c>)
 80023c6:	649a      	str	r2, [r3, #72]	@ 0x48
 80023c8:	4a07      	ldr	r2, [pc, #28]	@ (80023e8 <HAL_SPI_MspInit+0x12c>)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80023ce:	bf00      	nop
 80023d0:	3728      	adds	r7, #40	@ 0x28
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	40013000 	.word	0x40013000
 80023dc:	40023800 	.word	0x40023800
 80023e0:	40020000 	.word	0x40020000
 80023e4:	40020400 	.word	0x40020400
 80023e8:	200006c8 	.word	0x200006c8
 80023ec:	40026458 	.word	0x40026458

080023f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b08c      	sub	sp, #48	@ 0x30
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80023f8:	2300      	movs	r3, #0
 80023fa:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80023fc:	2300      	movs	r3, #0
 80023fe:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002400:	2300      	movs	r3, #0
 8002402:	60bb      	str	r3, [r7, #8]
 8002404:	4b2e      	ldr	r3, [pc, #184]	@ (80024c0 <HAL_InitTick+0xd0>)
 8002406:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002408:	4a2d      	ldr	r2, [pc, #180]	@ (80024c0 <HAL_InitTick+0xd0>)
 800240a:	f043 0301 	orr.w	r3, r3, #1
 800240e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002410:	4b2b      	ldr	r3, [pc, #172]	@ (80024c0 <HAL_InitTick+0xd0>)
 8002412:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	60bb      	str	r3, [r7, #8]
 800241a:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800241c:	f107 020c 	add.w	r2, r7, #12
 8002420:	f107 0310 	add.w	r3, r7, #16
 8002424:	4611      	mov	r1, r2
 8002426:	4618      	mov	r0, r3
 8002428:	f003 fa7e 	bl	8005928 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800242c:	f003 fa68 	bl	8005900 <HAL_RCC_GetPCLK2Freq>
 8002430:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002434:	4a23      	ldr	r2, [pc, #140]	@ (80024c4 <HAL_InitTick+0xd4>)
 8002436:	fba2 2303 	umull	r2, r3, r2, r3
 800243a:	0c9b      	lsrs	r3, r3, #18
 800243c:	3b01      	subs	r3, #1
 800243e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002440:	4b21      	ldr	r3, [pc, #132]	@ (80024c8 <HAL_InitTick+0xd8>)
 8002442:	4a22      	ldr	r2, [pc, #136]	@ (80024cc <HAL_InitTick+0xdc>)
 8002444:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002446:	4b20      	ldr	r3, [pc, #128]	@ (80024c8 <HAL_InitTick+0xd8>)
 8002448:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800244c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800244e:	4a1e      	ldr	r2, [pc, #120]	@ (80024c8 <HAL_InitTick+0xd8>)
 8002450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002452:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002454:	4b1c      	ldr	r3, [pc, #112]	@ (80024c8 <HAL_InitTick+0xd8>)
 8002456:	2200      	movs	r2, #0
 8002458:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800245a:	4b1b      	ldr	r3, [pc, #108]	@ (80024c8 <HAL_InitTick+0xd8>)
 800245c:	2200      	movs	r2, #0
 800245e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002460:	4b19      	ldr	r3, [pc, #100]	@ (80024c8 <HAL_InitTick+0xd8>)
 8002462:	2200      	movs	r2, #0
 8002464:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002466:	4818      	ldr	r0, [pc, #96]	@ (80024c8 <HAL_InitTick+0xd8>)
 8002468:	f003 fe8c 	bl	8006184 <HAL_TIM_Base_Init>
 800246c:	4603      	mov	r3, r0
 800246e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002472:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002476:	2b00      	cmp	r3, #0
 8002478:	d11b      	bne.n	80024b2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800247a:	4813      	ldr	r0, [pc, #76]	@ (80024c8 <HAL_InitTick+0xd8>)
 800247c:	f003 fedc 	bl	8006238 <HAL_TIM_Base_Start_IT>
 8002480:	4603      	mov	r3, r0
 8002482:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002486:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800248a:	2b00      	cmp	r3, #0
 800248c:	d111      	bne.n	80024b2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800248e:	2019      	movs	r0, #25
 8002490:	f000 ffec 	bl	800346c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b0f      	cmp	r3, #15
 8002498:	d808      	bhi.n	80024ac <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800249a:	2200      	movs	r2, #0
 800249c:	6879      	ldr	r1, [r7, #4]
 800249e:	2019      	movs	r0, #25
 80024a0:	f000 ffc8 	bl	8003434 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024a4:	4a0a      	ldr	r2, [pc, #40]	@ (80024d0 <HAL_InitTick+0xe0>)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6013      	str	r3, [r2, #0]
 80024aa:	e002      	b.n	80024b2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80024b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3730      	adds	r7, #48	@ 0x30
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	40023800 	.word	0x40023800
 80024c4:	431bde83 	.word	0x431bde83
 80024c8:	20001094 	.word	0x20001094
 80024cc:	40010000 	.word	0x40010000
 80024d0:	20000010 	.word	0x20000010

080024d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80024d8:	bf00      	nop
 80024da:	e7fd      	b.n	80024d8 <NMI_Handler+0x4>

080024dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024e0:	bf00      	nop
 80024e2:	e7fd      	b.n	80024e0 <HardFault_Handler+0x4>

080024e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024e8:	bf00      	nop
 80024ea:	e7fd      	b.n	80024e8 <MemManage_Handler+0x4>

080024ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024f0:	bf00      	nop
 80024f2:	e7fd      	b.n	80024f0 <BusFault_Handler+0x4>

080024f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024f8:	bf00      	nop
 80024fa:	e7fd      	b.n	80024f8 <UsageFault_Handler+0x4>

080024fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002500:	bf00      	nop
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
	...

0800250c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8002510:	4802      	ldr	r0, [pc, #8]	@ (800251c <DMA1_Stream2_IRQHandler+0x10>)
 8002512:	f001 f93b 	bl	800378c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002516:	bf00      	nop
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	200005b0 	.word	0x200005b0

08002520 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002524:	4802      	ldr	r0, [pc, #8]	@ (8002530 <ADC_IRQHandler+0x10>)
 8002526:	f000 fb69 	bl	8002bfc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800252a:	bf00      	nop
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	200004a0 	.word	0x200004a0

08002534 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002538:	4802      	ldr	r0, [pc, #8]	@ (8002544 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800253a:	f003 feed 	bl	8006318 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800253e:	bf00      	nop
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	20001094 	.word	0x20001094

08002548 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 800254c:	4802      	ldr	r0, [pc, #8]	@ (8002558 <DMA1_Stream7_IRQHandler+0x10>)
 800254e:	f001 f91d 	bl	800378c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8002552:	bf00      	nop
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	20000610 	.word	0x20000610

0800255c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002560:	4802      	ldr	r0, [pc, #8]	@ (800256c <DMA2_Stream0_IRQHandler+0x10>)
 8002562:	f001 f913 	bl	800378c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002566:	bf00      	nop
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	200004e8 	.word	0x200004e8

08002570 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002574:	4802      	ldr	r0, [pc, #8]	@ (8002580 <DMA2_Stream3_IRQHandler+0x10>)
 8002576:	f001 f909 	bl	800378c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800257a:	bf00      	nop
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	200006c8 	.word	0x200006c8

08002584 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  return 1;
 8002588:	2301      	movs	r3, #1
}
 800258a:	4618      	mov	r0, r3
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <_kill>:

int _kill(int pid, int sig)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800259e:	f006 f927 	bl	80087f0 <__errno>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2216      	movs	r2, #22
 80025a6:	601a      	str	r2, [r3, #0]
  return -1;
 80025a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3708      	adds	r7, #8
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <_exit>:

void _exit (int status)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80025bc:	f04f 31ff 	mov.w	r1, #4294967295
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f7ff ffe7 	bl	8002594 <_kill>
  while (1) {}    /* Make sure we hang here */
 80025c6:	bf00      	nop
 80025c8:	e7fd      	b.n	80025c6 <_exit+0x12>

080025ca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b086      	sub	sp, #24
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	60f8      	str	r0, [r7, #12]
 80025d2:	60b9      	str	r1, [r7, #8]
 80025d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025d6:	2300      	movs	r3, #0
 80025d8:	617b      	str	r3, [r7, #20]
 80025da:	e00a      	b.n	80025f2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80025dc:	f3af 8000 	nop.w
 80025e0:	4601      	mov	r1, r0
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	1c5a      	adds	r2, r3, #1
 80025e6:	60ba      	str	r2, [r7, #8]
 80025e8:	b2ca      	uxtb	r2, r1
 80025ea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	3301      	adds	r3, #1
 80025f0:	617b      	str	r3, [r7, #20]
 80025f2:	697a      	ldr	r2, [r7, #20]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	dbf0      	blt.n	80025dc <_read+0x12>
  }

  return len;
 80025fa:	687b      	ldr	r3, [r7, #4]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3718      	adds	r7, #24
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002610:	2300      	movs	r3, #0
 8002612:	617b      	str	r3, [r7, #20]
 8002614:	e009      	b.n	800262a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	1c5a      	adds	r2, r3, #1
 800261a:	60ba      	str	r2, [r7, #8]
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	4618      	mov	r0, r3
 8002620:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	3301      	adds	r3, #1
 8002628:	617b      	str	r3, [r7, #20]
 800262a:	697a      	ldr	r2, [r7, #20]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	429a      	cmp	r2, r3
 8002630:	dbf1      	blt.n	8002616 <_write+0x12>
  }
  return len;
 8002632:	687b      	ldr	r3, [r7, #4]
}
 8002634:	4618      	mov	r0, r3
 8002636:	3718      	adds	r7, #24
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <_close>:

int _close(int file)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002644:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002648:	4618      	mov	r0, r3
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002664:	605a      	str	r2, [r3, #4]
  return 0;
 8002666:	2300      	movs	r3, #0
}
 8002668:	4618      	mov	r0, r3
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <_isatty>:

int _isatty(int file)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800267c:	2301      	movs	r3, #1
}
 800267e:	4618      	mov	r0, r3
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr

0800268a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800268a:	b480      	push	{r7}
 800268c:	b085      	sub	sp, #20
 800268e:	af00      	add	r7, sp, #0
 8002690:	60f8      	str	r0, [r7, #12]
 8002692:	60b9      	str	r1, [r7, #8]
 8002694:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002696:	2300      	movs	r3, #0
}
 8002698:	4618      	mov	r0, r3
 800269a:	3714      	adds	r7, #20
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026ac:	4a14      	ldr	r2, [pc, #80]	@ (8002700 <_sbrk+0x5c>)
 80026ae:	4b15      	ldr	r3, [pc, #84]	@ (8002704 <_sbrk+0x60>)
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026b8:	4b13      	ldr	r3, [pc, #76]	@ (8002708 <_sbrk+0x64>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d102      	bne.n	80026c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026c0:	4b11      	ldr	r3, [pc, #68]	@ (8002708 <_sbrk+0x64>)
 80026c2:	4a12      	ldr	r2, [pc, #72]	@ (800270c <_sbrk+0x68>)
 80026c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026c6:	4b10      	ldr	r3, [pc, #64]	@ (8002708 <_sbrk+0x64>)
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4413      	add	r3, r2
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d207      	bcs.n	80026e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026d4:	f006 f88c 	bl	80087f0 <__errno>
 80026d8:	4603      	mov	r3, r0
 80026da:	220c      	movs	r2, #12
 80026dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026de:	f04f 33ff 	mov.w	r3, #4294967295
 80026e2:	e009      	b.n	80026f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026e4:	4b08      	ldr	r3, [pc, #32]	@ (8002708 <_sbrk+0x64>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026ea:	4b07      	ldr	r3, [pc, #28]	@ (8002708 <_sbrk+0x64>)
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4413      	add	r3, r2
 80026f2:	4a05      	ldr	r2, [pc, #20]	@ (8002708 <_sbrk+0x64>)
 80026f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026f6:	68fb      	ldr	r3, [r7, #12]
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3718      	adds	r7, #24
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	20020000 	.word	0x20020000
 8002704:	00000400 	.word	0x00000400
 8002708:	200010dc 	.word	0x200010dc
 800270c:	20004f88 	.word	0x20004f88

08002710 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002714:	4b06      	ldr	r3, [pc, #24]	@ (8002730 <SystemInit+0x20>)
 8002716:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800271a:	4a05      	ldr	r2, [pc, #20]	@ (8002730 <SystemInit+0x20>)
 800271c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002720:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002724:	bf00      	nop
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	e000ed00 	.word	0xe000ed00

08002734 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002734:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800276c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002738:	f7ff ffea 	bl	8002710 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800273c:	480c      	ldr	r0, [pc, #48]	@ (8002770 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800273e:	490d      	ldr	r1, [pc, #52]	@ (8002774 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002740:	4a0d      	ldr	r2, [pc, #52]	@ (8002778 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002742:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002744:	e002      	b.n	800274c <LoopCopyDataInit>

08002746 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002746:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002748:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800274a:	3304      	adds	r3, #4

0800274c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800274c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800274e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002750:	d3f9      	bcc.n	8002746 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002752:	4a0a      	ldr	r2, [pc, #40]	@ (800277c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002754:	4c0a      	ldr	r4, [pc, #40]	@ (8002780 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002756:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002758:	e001      	b.n	800275e <LoopFillZerobss>

0800275a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800275a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800275c:	3204      	adds	r2, #4

0800275e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800275e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002760:	d3fb      	bcc.n	800275a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002762:	f006 f84b 	bl	80087fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002766:	f7fe fd8b 	bl	8001280 <main>
  bx  lr    
 800276a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800276c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002770:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002774:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002778:	0800b280 	.word	0x0800b280
  ldr r2, =_sbss
 800277c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002780:	20004f84 	.word	0x20004f84

08002784 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002784:	e7fe      	b.n	8002784 <CAN1_RX0_IRQHandler>
	...

08002788 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800278c:	4b0e      	ldr	r3, [pc, #56]	@ (80027c8 <HAL_Init+0x40>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a0d      	ldr	r2, [pc, #52]	@ (80027c8 <HAL_Init+0x40>)
 8002792:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002796:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002798:	4b0b      	ldr	r3, [pc, #44]	@ (80027c8 <HAL_Init+0x40>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a0a      	ldr	r2, [pc, #40]	@ (80027c8 <HAL_Init+0x40>)
 800279e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80027a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027a4:	4b08      	ldr	r3, [pc, #32]	@ (80027c8 <HAL_Init+0x40>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a07      	ldr	r2, [pc, #28]	@ (80027c8 <HAL_Init+0x40>)
 80027aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027b0:	2003      	movs	r0, #3
 80027b2:	f000 fe34 	bl	800341e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027b6:	200f      	movs	r0, #15
 80027b8:	f7ff fe1a 	bl	80023f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027bc:	f7ff fbfc 	bl	8001fb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	40023c00 	.word	0x40023c00

080027cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027d0:	4b06      	ldr	r3, [pc, #24]	@ (80027ec <HAL_IncTick+0x20>)
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	461a      	mov	r2, r3
 80027d6:	4b06      	ldr	r3, [pc, #24]	@ (80027f0 <HAL_IncTick+0x24>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4413      	add	r3, r2
 80027dc:	4a04      	ldr	r2, [pc, #16]	@ (80027f0 <HAL_IncTick+0x24>)
 80027de:	6013      	str	r3, [r2, #0]
}
 80027e0:	bf00      	nop
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	20000014 	.word	0x20000014
 80027f0:	200010e0 	.word	0x200010e0

080027f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  return uwTick;
 80027f8:	4b03      	ldr	r3, [pc, #12]	@ (8002808 <HAL_GetTick+0x14>)
 80027fa:	681b      	ldr	r3, [r3, #0]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	200010e0 	.word	0x200010e0

0800280c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002814:	f7ff ffee 	bl	80027f4 <HAL_GetTick>
 8002818:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002824:	d005      	beq.n	8002832 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002826:	4b0a      	ldr	r3, [pc, #40]	@ (8002850 <HAL_Delay+0x44>)
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	461a      	mov	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	4413      	add	r3, r2
 8002830:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002832:	bf00      	nop
 8002834:	f7ff ffde 	bl	80027f4 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	429a      	cmp	r2, r3
 8002842:	d8f7      	bhi.n	8002834 <HAL_Delay+0x28>
  {
  }
}
 8002844:	bf00      	nop
 8002846:	bf00      	nop
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	20000014 	.word	0x20000014

08002854 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800285c:	2300      	movs	r3, #0
 800285e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e033      	b.n	80028d2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286e:	2b00      	cmp	r3, #0
 8002870:	d109      	bne.n	8002886 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f7ff fbcc 	bl	8002010 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288a:	f003 0310 	and.w	r3, r3, #16
 800288e:	2b00      	cmp	r3, #0
 8002890:	d118      	bne.n	80028c4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002896:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800289a:	f023 0302 	bic.w	r3, r3, #2
 800289e:	f043 0202 	orr.w	r2, r3, #2
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 fc06 	bl	80030b8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b6:	f023 0303 	bic.w	r3, r3, #3
 80028ba:	f043 0201 	orr.w	r2, r3, #1
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	641a      	str	r2, [r3, #64]	@ 0x40
 80028c2:	e001      	b.n	80028c8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80028d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3710      	adds	r7, #16
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
	...

080028dc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80028e4:	2300      	movs	r3, #0
 80028e6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d101      	bne.n	80028f6 <HAL_ADC_Start+0x1a>
 80028f2:	2302      	movs	r3, #2
 80028f4:	e0b2      	b.n	8002a5c <HAL_ADC_Start+0x180>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f003 0301 	and.w	r3, r3, #1
 8002908:	2b01      	cmp	r3, #1
 800290a:	d018      	beq.n	800293e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	689a      	ldr	r2, [r3, #8]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f042 0201 	orr.w	r2, r2, #1
 800291a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800291c:	4b52      	ldr	r3, [pc, #328]	@ (8002a68 <HAL_ADC_Start+0x18c>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a52      	ldr	r2, [pc, #328]	@ (8002a6c <HAL_ADC_Start+0x190>)
 8002922:	fba2 2303 	umull	r2, r3, r2, r3
 8002926:	0c9a      	lsrs	r2, r3, #18
 8002928:	4613      	mov	r3, r2
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	4413      	add	r3, r2
 800292e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002930:	e002      	b.n	8002938 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	3b01      	subs	r3, #1
 8002936:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d1f9      	bne.n	8002932 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f003 0301 	and.w	r3, r3, #1
 8002948:	2b01      	cmp	r3, #1
 800294a:	d17a      	bne.n	8002a42 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002950:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002954:	f023 0301 	bic.w	r3, r3, #1
 8002958:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800296a:	2b00      	cmp	r3, #0
 800296c:	d007      	beq.n	800297e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002972:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002976:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002982:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002986:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800298a:	d106      	bne.n	800299a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002990:	f023 0206 	bic.w	r2, r3, #6
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	645a      	str	r2, [r3, #68]	@ 0x44
 8002998:	e002      	b.n	80029a0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029a8:	4b31      	ldr	r3, [pc, #196]	@ (8002a70 <HAL_ADC_Start+0x194>)
 80029aa:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80029b4:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f003 031f 	and.w	r3, r3, #31
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d12a      	bne.n	8002a18 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a2b      	ldr	r2, [pc, #172]	@ (8002a74 <HAL_ADC_Start+0x198>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d015      	beq.n	80029f8 <HAL_ADC_Start+0x11c>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a29      	ldr	r2, [pc, #164]	@ (8002a78 <HAL_ADC_Start+0x19c>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d105      	bne.n	80029e2 <HAL_ADC_Start+0x106>
 80029d6:	4b26      	ldr	r3, [pc, #152]	@ (8002a70 <HAL_ADC_Start+0x194>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f003 031f 	and.w	r3, r3, #31
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d00a      	beq.n	80029f8 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a25      	ldr	r2, [pc, #148]	@ (8002a7c <HAL_ADC_Start+0x1a0>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d136      	bne.n	8002a5a <HAL_ADC_Start+0x17e>
 80029ec:	4b20      	ldr	r3, [pc, #128]	@ (8002a70 <HAL_ADC_Start+0x194>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f003 0310 	and.w	r3, r3, #16
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d130      	bne.n	8002a5a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d129      	bne.n	8002a5a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	689a      	ldr	r2, [r3, #8]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002a14:	609a      	str	r2, [r3, #8]
 8002a16:	e020      	b.n	8002a5a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a15      	ldr	r2, [pc, #84]	@ (8002a74 <HAL_ADC_Start+0x198>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d11b      	bne.n	8002a5a <HAL_ADC_Start+0x17e>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d114      	bne.n	8002a5a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	689a      	ldr	r2, [r3, #8]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002a3e:	609a      	str	r2, [r3, #8]
 8002a40:	e00b      	b.n	8002a5a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a46:	f043 0210 	orr.w	r2, r3, #16
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a52:	f043 0201 	orr.w	r2, r3, #1
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3714      	adds	r7, #20
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr
 8002a68:	2000000c 	.word	0x2000000c
 8002a6c:	431bde83 	.word	0x431bde83
 8002a70:	40012300 	.word	0x40012300
 8002a74:	40012000 	.word	0x40012000
 8002a78:	40012100 	.word	0x40012100
 8002a7c:	40012200 	.word	0x40012200

08002a80 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d101      	bne.n	8002a96 <HAL_ADC_Stop+0x16>
 8002a92:	2302      	movs	r3, #2
 8002a94:	e021      	b.n	8002ada <HAL_ADC_Stop+0x5a>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	689a      	ldr	r2, [r3, #8]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f022 0201 	bic.w	r2, r2, #1
 8002aac:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d109      	bne.n	8002ad0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002ac4:	f023 0301 	bic.w	r3, r3, #1
 8002ac8:	f043 0201 	orr.w	r2, r3, #1
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr

08002ae6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b084      	sub	sp, #16
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
 8002aee:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002af0:	2300      	movs	r3, #0
 8002af2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002afe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b02:	d113      	bne.n	8002b2c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002b0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b12:	d10b      	bne.n	8002b2c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b18:	f043 0220 	orr.w	r2, r3, #32
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e063      	b.n	8002bf4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b2c:	f7ff fe62 	bl	80027f4 <HAL_GetTick>
 8002b30:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002b32:	e021      	b.n	8002b78 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b3a:	d01d      	beq.n	8002b78 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d007      	beq.n	8002b52 <HAL_ADC_PollForConversion+0x6c>
 8002b42:	f7ff fe57 	bl	80027f4 <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	683a      	ldr	r2, [r7, #0]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d212      	bcs.n	8002b78 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d00b      	beq.n	8002b78 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b64:	f043 0204 	orr.w	r2, r3, #4
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e03d      	b.n	8002bf4 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d1d6      	bne.n	8002b34 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f06f 0212 	mvn.w	r2, #18
 8002b8e:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b94:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d123      	bne.n	8002bf2 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d11f      	bne.n	8002bf2 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb8:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d006      	beq.n	8002bce <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d111      	bne.n	8002bf2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bde:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d105      	bne.n	8002bf2 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bea:	f043 0201 	orr.w	r2, r3, #1
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3710      	adds	r7, #16
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b086      	sub	sp, #24
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002c04:	2300      	movs	r3, #0
 8002c06:	617b      	str	r3, [r7, #20]
 8002c08:	2300      	movs	r3, #0
 8002c0a:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	f003 0320 	and.w	r3, r3, #32
 8002c2a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d049      	beq.n	8002cc6 <HAL_ADC_IRQHandler+0xca>
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d046      	beq.n	8002cc6 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c3c:	f003 0310 	and.w	r3, r3, #16
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d105      	bne.n	8002c50 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c48:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d12b      	bne.n	8002cb6 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d127      	bne.n	8002cb6 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c6c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d006      	beq.n	8002c82 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d119      	bne.n	8002cb6 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	685a      	ldr	r2, [r3, #4]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f022 0220 	bic.w	r2, r2, #32
 8002c90:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c96:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d105      	bne.n	8002cb6 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cae:	f043 0201 	orr.w	r2, r3, #1
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 f8bd 	bl	8002e36 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f06f 0212 	mvn.w	r2, #18
 8002cc4:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f003 0304 	and.w	r3, r3, #4
 8002ccc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cd4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d057      	beq.n	8002d8c <HAL_ADC_IRQHandler+0x190>
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d054      	beq.n	8002d8c <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce6:	f003 0310 	and.w	r3, r3, #16
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d105      	bne.n	8002cfa <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf2:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d139      	bne.n	8002d7c <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d0e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d006      	beq.n	8002d24 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d12b      	bne.n	8002d7c <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d124      	bne.n	8002d7c <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d11d      	bne.n	8002d7c <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d119      	bne.n	8002d7c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	685a      	ldr	r2, [r3, #4]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d56:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d105      	bne.n	8002d7c <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d74:	f043 0201 	orr.w	r2, r3, #1
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 fa97 	bl	80032b0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f06f 020c 	mvn.w	r2, #12
 8002d8a:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d9a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d017      	beq.n	8002dd2 <HAL_ADC_IRQHandler+0x1d6>
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d014      	beq.n	8002dd2 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d10d      	bne.n	8002dd2 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dba:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 f841 	bl	8002e4a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f06f 0201 	mvn.w	r2, #1
 8002dd0:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f003 0320 	and.w	r3, r3, #32
 8002dd8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002de0:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d015      	beq.n	8002e14 <HAL_ADC_IRQHandler+0x218>
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d012      	beq.n	8002e14 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002df2:	f043 0202 	orr.w	r2, r3, #2
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f06f 0220 	mvn.w	r2, #32
 8002e02:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f000 f82a 	bl	8002e5e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f06f 0220 	mvn.w	r2, #32
 8002e12:	601a      	str	r2, [r3, #0]
  }
}
 8002e14:	bf00      	nop
 8002e16:	3718      	adds	r7, #24
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr

08002e36 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002e36:	b480      	push	{r7}
 8002e38:	b083      	sub	sp, #12
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002e3e:	bf00      	nop
 8002e40:	370c      	adds	r7, #12
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr

08002e4a <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	b083      	sub	sp, #12
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002e52:	bf00      	nop
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr

08002e5e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b083      	sub	sp, #12
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002e66:	bf00      	nop
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
	...

08002e74 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d101      	bne.n	8002e90 <HAL_ADC_ConfigChannel+0x1c>
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	e105      	b.n	800309c <HAL_ADC_ConfigChannel+0x228>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2b09      	cmp	r3, #9
 8002e9e:	d925      	bls.n	8002eec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68d9      	ldr	r1, [r3, #12]
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	461a      	mov	r2, r3
 8002eae:	4613      	mov	r3, r2
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	4413      	add	r3, r2
 8002eb4:	3b1e      	subs	r3, #30
 8002eb6:	2207      	movs	r2, #7
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	43da      	mvns	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	400a      	ands	r2, r1
 8002ec4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68d9      	ldr	r1, [r3, #12]
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	4603      	mov	r3, r0
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	4403      	add	r3, r0
 8002ede:	3b1e      	subs	r3, #30
 8002ee0:	409a      	lsls	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	60da      	str	r2, [r3, #12]
 8002eea:	e022      	b.n	8002f32 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	6919      	ldr	r1, [r3, #16]
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	461a      	mov	r2, r3
 8002efa:	4613      	mov	r3, r2
 8002efc:	005b      	lsls	r3, r3, #1
 8002efe:	4413      	add	r3, r2
 8002f00:	2207      	movs	r2, #7
 8002f02:	fa02 f303 	lsl.w	r3, r2, r3
 8002f06:	43da      	mvns	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	400a      	ands	r2, r1
 8002f0e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	6919      	ldr	r1, [r3, #16]
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	689a      	ldr	r2, [r3, #8]
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	4618      	mov	r0, r3
 8002f22:	4603      	mov	r3, r0
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	4403      	add	r3, r0
 8002f28:	409a      	lsls	r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	2b06      	cmp	r3, #6
 8002f38:	d824      	bhi.n	8002f84 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	685a      	ldr	r2, [r3, #4]
 8002f44:	4613      	mov	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4413      	add	r3, r2
 8002f4a:	3b05      	subs	r3, #5
 8002f4c:	221f      	movs	r2, #31
 8002f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f52:	43da      	mvns	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	400a      	ands	r2, r1
 8002f5a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	4618      	mov	r0, r3
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	685a      	ldr	r2, [r3, #4]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	4413      	add	r3, r2
 8002f74:	3b05      	subs	r3, #5
 8002f76:	fa00 f203 	lsl.w	r2, r0, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	635a      	str	r2, [r3, #52]	@ 0x34
 8002f82:	e04c      	b.n	800301e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	2b0c      	cmp	r3, #12
 8002f8a:	d824      	bhi.n	8002fd6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	685a      	ldr	r2, [r3, #4]
 8002f96:	4613      	mov	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4413      	add	r3, r2
 8002f9c:	3b23      	subs	r3, #35	@ 0x23
 8002f9e:	221f      	movs	r2, #31
 8002fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa4:	43da      	mvns	r2, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	400a      	ands	r2, r1
 8002fac:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	4618      	mov	r0, r3
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	685a      	ldr	r2, [r3, #4]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	4413      	add	r3, r2
 8002fc6:	3b23      	subs	r3, #35	@ 0x23
 8002fc8:	fa00 f203 	lsl.w	r2, r0, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	631a      	str	r2, [r3, #48]	@ 0x30
 8002fd4:	e023      	b.n	800301e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685a      	ldr	r2, [r3, #4]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	4413      	add	r3, r2
 8002fe6:	3b41      	subs	r3, #65	@ 0x41
 8002fe8:	221f      	movs	r2, #31
 8002fea:	fa02 f303 	lsl.w	r3, r2, r3
 8002fee:	43da      	mvns	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	400a      	ands	r2, r1
 8002ff6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	b29b      	uxth	r3, r3
 8003004:	4618      	mov	r0, r3
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	685a      	ldr	r2, [r3, #4]
 800300a:	4613      	mov	r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	4413      	add	r3, r2
 8003010:	3b41      	subs	r3, #65	@ 0x41
 8003012:	fa00 f203 	lsl.w	r2, r0, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	430a      	orrs	r2, r1
 800301c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800301e:	4b22      	ldr	r3, [pc, #136]	@ (80030a8 <HAL_ADC_ConfigChannel+0x234>)
 8003020:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a21      	ldr	r2, [pc, #132]	@ (80030ac <HAL_ADC_ConfigChannel+0x238>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d109      	bne.n	8003040 <HAL_ADC_ConfigChannel+0x1cc>
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2b12      	cmp	r3, #18
 8003032:	d105      	bne.n	8003040 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a19      	ldr	r2, [pc, #100]	@ (80030ac <HAL_ADC_ConfigChannel+0x238>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d123      	bne.n	8003092 <HAL_ADC_ConfigChannel+0x21e>
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2b10      	cmp	r3, #16
 8003050:	d003      	beq.n	800305a <HAL_ADC_ConfigChannel+0x1e6>
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2b11      	cmp	r3, #17
 8003058:	d11b      	bne.n	8003092 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2b10      	cmp	r3, #16
 800306c:	d111      	bne.n	8003092 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800306e:	4b10      	ldr	r3, [pc, #64]	@ (80030b0 <HAL_ADC_ConfigChannel+0x23c>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a10      	ldr	r2, [pc, #64]	@ (80030b4 <HAL_ADC_ConfigChannel+0x240>)
 8003074:	fba2 2303 	umull	r2, r3, r2, r3
 8003078:	0c9a      	lsrs	r2, r3, #18
 800307a:	4613      	mov	r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	4413      	add	r3, r2
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003084:	e002      	b.n	800308c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	3b01      	subs	r3, #1
 800308a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1f9      	bne.n	8003086 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800309a:	2300      	movs	r3, #0
}
 800309c:	4618      	mov	r0, r3
 800309e:	3714      	adds	r7, #20
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr
 80030a8:	40012300 	.word	0x40012300
 80030ac:	40012000 	.word	0x40012000
 80030b0:	2000000c 	.word	0x2000000c
 80030b4:	431bde83 	.word	0x431bde83

080030b8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030c0:	4b79      	ldr	r3, [pc, #484]	@ (80032a8 <ADC_Init+0x1f0>)
 80030c2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	685a      	ldr	r2, [r3, #4]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	431a      	orrs	r2, r3
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	685a      	ldr	r2, [r3, #4]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80030ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	6859      	ldr	r1, [r3, #4]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	021a      	lsls	r2, r3, #8
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	430a      	orrs	r2, r1
 8003100:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	685a      	ldr	r2, [r3, #4]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003110:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	6859      	ldr	r1, [r3, #4]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689a      	ldr	r2, [r3, #8]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	430a      	orrs	r2, r1
 8003122:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	689a      	ldr	r2, [r3, #8]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003132:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	6899      	ldr	r1, [r3, #8]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	68da      	ldr	r2, [r3, #12]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	430a      	orrs	r2, r1
 8003144:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800314a:	4a58      	ldr	r2, [pc, #352]	@ (80032ac <ADC_Init+0x1f4>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d022      	beq.n	8003196 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	689a      	ldr	r2, [r3, #8]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800315e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6899      	ldr	r1, [r3, #8]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	430a      	orrs	r2, r1
 8003170:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	689a      	ldr	r2, [r3, #8]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003180:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	6899      	ldr	r1, [r3, #8]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	430a      	orrs	r2, r1
 8003192:	609a      	str	r2, [r3, #8]
 8003194:	e00f      	b.n	80031b6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	689a      	ldr	r2, [r3, #8]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80031a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80031b4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	689a      	ldr	r2, [r3, #8]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f022 0202 	bic.w	r2, r2, #2
 80031c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	6899      	ldr	r1, [r3, #8]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	7e1b      	ldrb	r3, [r3, #24]
 80031d0:	005a      	lsls	r2, r3, #1
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	430a      	orrs	r2, r1
 80031d8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d01b      	beq.n	800321c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	685a      	ldr	r2, [r3, #4]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80031f2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	685a      	ldr	r2, [r3, #4]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003202:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	6859      	ldr	r1, [r3, #4]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800320e:	3b01      	subs	r3, #1
 8003210:	035a      	lsls	r2, r3, #13
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	430a      	orrs	r2, r1
 8003218:	605a      	str	r2, [r3, #4]
 800321a:	e007      	b.n	800322c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	685a      	ldr	r2, [r3, #4]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800322a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800323a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	3b01      	subs	r3, #1
 8003248:	051a      	lsls	r2, r3, #20
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	430a      	orrs	r2, r1
 8003250:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	689a      	ldr	r2, [r3, #8]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003260:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	6899      	ldr	r1, [r3, #8]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800326e:	025a      	lsls	r2, r3, #9
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	430a      	orrs	r2, r1
 8003276:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	689a      	ldr	r2, [r3, #8]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003286:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	6899      	ldr	r1, [r3, #8]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	029a      	lsls	r2, r3, #10
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	430a      	orrs	r2, r1
 800329a:	609a      	str	r2, [r3, #8]
}
 800329c:	bf00      	nop
 800329e:	3714      	adds	r7, #20
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr
 80032a8:	40012300 	.word	0x40012300
 80032ac:	0f000001 	.word	0x0f000001

080032b0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b085      	sub	sp, #20
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f003 0307 	and.w	r3, r3, #7
 80032d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003308 <__NVIC_SetPriorityGrouping+0x44>)
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032da:	68ba      	ldr	r2, [r7, #8]
 80032dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80032e0:	4013      	ands	r3, r2
 80032e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80032f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032f6:	4a04      	ldr	r2, [pc, #16]	@ (8003308 <__NVIC_SetPriorityGrouping+0x44>)
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	60d3      	str	r3, [r2, #12]
}
 80032fc:	bf00      	nop
 80032fe:	3714      	adds	r7, #20
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr
 8003308:	e000ed00 	.word	0xe000ed00

0800330c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003310:	4b04      	ldr	r3, [pc, #16]	@ (8003324 <__NVIC_GetPriorityGrouping+0x18>)
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	0a1b      	lsrs	r3, r3, #8
 8003316:	f003 0307 	and.w	r3, r3, #7
}
 800331a:	4618      	mov	r0, r3
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr
 8003324:	e000ed00 	.word	0xe000ed00

08003328 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	4603      	mov	r3, r0
 8003330:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003336:	2b00      	cmp	r3, #0
 8003338:	db0b      	blt.n	8003352 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800333a:	79fb      	ldrb	r3, [r7, #7]
 800333c:	f003 021f 	and.w	r2, r3, #31
 8003340:	4907      	ldr	r1, [pc, #28]	@ (8003360 <__NVIC_EnableIRQ+0x38>)
 8003342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003346:	095b      	lsrs	r3, r3, #5
 8003348:	2001      	movs	r0, #1
 800334a:	fa00 f202 	lsl.w	r2, r0, r2
 800334e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003352:	bf00      	nop
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	e000e100 	.word	0xe000e100

08003364 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	4603      	mov	r3, r0
 800336c:	6039      	str	r1, [r7, #0]
 800336e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003374:	2b00      	cmp	r3, #0
 8003376:	db0a      	blt.n	800338e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	b2da      	uxtb	r2, r3
 800337c:	490c      	ldr	r1, [pc, #48]	@ (80033b0 <__NVIC_SetPriority+0x4c>)
 800337e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003382:	0112      	lsls	r2, r2, #4
 8003384:	b2d2      	uxtb	r2, r2
 8003386:	440b      	add	r3, r1
 8003388:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800338c:	e00a      	b.n	80033a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	b2da      	uxtb	r2, r3
 8003392:	4908      	ldr	r1, [pc, #32]	@ (80033b4 <__NVIC_SetPriority+0x50>)
 8003394:	79fb      	ldrb	r3, [r7, #7]
 8003396:	f003 030f 	and.w	r3, r3, #15
 800339a:	3b04      	subs	r3, #4
 800339c:	0112      	lsls	r2, r2, #4
 800339e:	b2d2      	uxtb	r2, r2
 80033a0:	440b      	add	r3, r1
 80033a2:	761a      	strb	r2, [r3, #24]
}
 80033a4:	bf00      	nop
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr
 80033b0:	e000e100 	.word	0xe000e100
 80033b4:	e000ed00 	.word	0xe000ed00

080033b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b089      	sub	sp, #36	@ 0x24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f003 0307 	and.w	r3, r3, #7
 80033ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	f1c3 0307 	rsb	r3, r3, #7
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	bf28      	it	cs
 80033d6:	2304      	movcs	r3, #4
 80033d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	3304      	adds	r3, #4
 80033de:	2b06      	cmp	r3, #6
 80033e0:	d902      	bls.n	80033e8 <NVIC_EncodePriority+0x30>
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	3b03      	subs	r3, #3
 80033e6:	e000      	b.n	80033ea <NVIC_EncodePriority+0x32>
 80033e8:	2300      	movs	r3, #0
 80033ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033ec:	f04f 32ff 	mov.w	r2, #4294967295
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	fa02 f303 	lsl.w	r3, r2, r3
 80033f6:	43da      	mvns	r2, r3
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	401a      	ands	r2, r3
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003400:	f04f 31ff 	mov.w	r1, #4294967295
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	fa01 f303 	lsl.w	r3, r1, r3
 800340a:	43d9      	mvns	r1, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003410:	4313      	orrs	r3, r2
         );
}
 8003412:	4618      	mov	r0, r3
 8003414:	3724      	adds	r7, #36	@ 0x24
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr

0800341e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800341e:	b580      	push	{r7, lr}
 8003420:	b082      	sub	sp, #8
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f7ff ff4c 	bl	80032c4 <__NVIC_SetPriorityGrouping>
}
 800342c:	bf00      	nop
 800342e:	3708      	adds	r7, #8
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003434:	b580      	push	{r7, lr}
 8003436:	b086      	sub	sp, #24
 8003438:	af00      	add	r7, sp, #0
 800343a:	4603      	mov	r3, r0
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	607a      	str	r2, [r7, #4]
 8003440:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003442:	2300      	movs	r3, #0
 8003444:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003446:	f7ff ff61 	bl	800330c <__NVIC_GetPriorityGrouping>
 800344a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	68b9      	ldr	r1, [r7, #8]
 8003450:	6978      	ldr	r0, [r7, #20]
 8003452:	f7ff ffb1 	bl	80033b8 <NVIC_EncodePriority>
 8003456:	4602      	mov	r2, r0
 8003458:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800345c:	4611      	mov	r1, r2
 800345e:	4618      	mov	r0, r3
 8003460:	f7ff ff80 	bl	8003364 <__NVIC_SetPriority>
}
 8003464:	bf00      	nop
 8003466:	3718      	adds	r7, #24
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	4603      	mov	r3, r0
 8003474:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800347a:	4618      	mov	r0, r3
 800347c:	f7ff ff54 	bl	8003328 <__NVIC_EnableIRQ>
}
 8003480:	bf00      	nop
 8003482:	3708      	adds	r7, #8
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e014      	b.n	80034c4 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	791b      	ldrb	r3, [r3, #4]
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d105      	bne.n	80034b0 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f7fe fe14 	bl	80020d8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2202      	movs	r2, #2
 80034b4:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3708      	adds	r7, #8
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b089      	sub	sp, #36	@ 0x24
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034d8:	2300      	movs	r3, #0
 80034da:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d002      	beq.n	80034e8 <HAL_DAC_ConfigChannel+0x1c>
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d101      	bne.n	80034ec <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e042      	b.n	8003572 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	795b      	ldrb	r3, [r3, #5]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d101      	bne.n	80034f8 <HAL_DAC_ConfigChannel+0x2c>
 80034f4:	2302      	movs	r3, #2
 80034f6:	e03c      	b.n	8003572 <HAL_DAC_ConfigChannel+0xa6>
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2201      	movs	r2, #1
 80034fc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2202      	movs	r2, #2
 8003502:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f003 0310 	and.w	r3, r3, #16
 8003512:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003516:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 800351a:	43db      	mvns	r3, r3
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	4013      	ands	r3, r2
 8003520:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	4313      	orrs	r3, r2
 800352c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f003 0310 	and.w	r3, r3, #16
 8003534:	697a      	ldr	r2, [r7, #20]
 8003536:	fa02 f303 	lsl.w	r3, r2, r3
 800353a:	69ba      	ldr	r2, [r7, #24]
 800353c:	4313      	orrs	r3, r2
 800353e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	69ba      	ldr	r2, [r7, #24]
 8003546:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6819      	ldr	r1, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f003 0310 	and.w	r3, r3, #16
 8003554:	22c0      	movs	r2, #192	@ 0xc0
 8003556:	fa02 f303 	lsl.w	r3, r2, r3
 800355a:	43da      	mvns	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	400a      	ands	r2, r1
 8003562:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2201      	movs	r2, #1
 8003568:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003570:	7ffb      	ldrb	r3, [r7, #31]
}
 8003572:	4618      	mov	r0, r3
 8003574:	3724      	adds	r7, #36	@ 0x24
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
	...

08003580 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003588:	2300      	movs	r3, #0
 800358a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800358c:	f7ff f932 	bl	80027f4 <HAL_GetTick>
 8003590:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d101      	bne.n	800359c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e099      	b.n	80036d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2202      	movs	r2, #2
 80035a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f022 0201 	bic.w	r2, r2, #1
 80035ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035bc:	e00f      	b.n	80035de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035be:	f7ff f919 	bl	80027f4 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	2b05      	cmp	r3, #5
 80035ca:	d908      	bls.n	80035de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2220      	movs	r2, #32
 80035d0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2203      	movs	r2, #3
 80035d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e078      	b.n	80036d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0301 	and.w	r3, r3, #1
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1e8      	bne.n	80035be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80035f4:	697a      	ldr	r2, [r7, #20]
 80035f6:	4b38      	ldr	r3, [pc, #224]	@ (80036d8 <HAL_DMA_Init+0x158>)
 80035f8:	4013      	ands	r3, r2
 80035fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685a      	ldr	r2, [r3, #4]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800360a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003616:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	699b      	ldr	r3, [r3, #24]
 800361c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003622:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a1b      	ldr	r3, [r3, #32]
 8003628:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800362a:	697a      	ldr	r2, [r7, #20]
 800362c:	4313      	orrs	r3, r2
 800362e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003634:	2b04      	cmp	r3, #4
 8003636:	d107      	bne.n	8003648 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003640:	4313      	orrs	r3, r2
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	4313      	orrs	r3, r2
 8003646:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	697a      	ldr	r2, [r7, #20]
 800364e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	695b      	ldr	r3, [r3, #20]
 8003656:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	f023 0307 	bic.w	r3, r3, #7
 800365e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	4313      	orrs	r3, r2
 8003668:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800366e:	2b04      	cmp	r3, #4
 8003670:	d117      	bne.n	80036a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003676:	697a      	ldr	r2, [r7, #20]
 8003678:	4313      	orrs	r3, r2
 800367a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00e      	beq.n	80036a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f000 fa6f 	bl	8003b68 <DMA_CheckFifoParam>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d008      	beq.n	80036a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2240      	movs	r2, #64	@ 0x40
 8003694:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2201      	movs	r2, #1
 800369a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800369e:	2301      	movs	r3, #1
 80036a0:	e016      	b.n	80036d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	697a      	ldr	r2, [r7, #20]
 80036a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 fa26 	bl	8003afc <DMA_CalcBaseAndBitshift>
 80036b0:	4603      	mov	r3, r0
 80036b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036b8:	223f      	movs	r2, #63	@ 0x3f
 80036ba:	409a      	lsls	r2, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80036ce:	2300      	movs	r3, #0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3718      	adds	r7, #24
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	f010803f 	.word	0xf010803f

080036dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b086      	sub	sp, #24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
 80036e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036ea:	2300      	movs	r3, #0
 80036ec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036f2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d101      	bne.n	8003702 <HAL_DMA_Start_IT+0x26>
 80036fe:	2302      	movs	r3, #2
 8003700:	e040      	b.n	8003784 <HAL_DMA_Start_IT+0xa8>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2201      	movs	r2, #1
 8003706:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b01      	cmp	r3, #1
 8003714:	d12f      	bne.n	8003776 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2202      	movs	r2, #2
 800371a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2200      	movs	r2, #0
 8003722:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	68b9      	ldr	r1, [r7, #8]
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	f000 f9b8 	bl	8003aa0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003734:	223f      	movs	r2, #63	@ 0x3f
 8003736:	409a      	lsls	r2, r3
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f042 0216 	orr.w	r2, r2, #22
 800374a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003750:	2b00      	cmp	r3, #0
 8003752:	d007      	beq.n	8003764 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f042 0208 	orr.w	r2, r2, #8
 8003762:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f042 0201 	orr.w	r2, r2, #1
 8003772:	601a      	str	r2, [r3, #0]
 8003774:	e005      	b.n	8003782 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800377e:	2302      	movs	r3, #2
 8003780:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003782:	7dfb      	ldrb	r3, [r7, #23]
}
 8003784:	4618      	mov	r0, r3
 8003786:	3718      	adds	r7, #24
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b086      	sub	sp, #24
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003794:	2300      	movs	r3, #0
 8003796:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003798:	4b8e      	ldr	r3, [pc, #568]	@ (80039d4 <HAL_DMA_IRQHandler+0x248>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a8e      	ldr	r2, [pc, #568]	@ (80039d8 <HAL_DMA_IRQHandler+0x24c>)
 800379e:	fba2 2303 	umull	r2, r3, r2, r3
 80037a2:	0a9b      	lsrs	r3, r3, #10
 80037a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037b6:	2208      	movs	r2, #8
 80037b8:	409a      	lsls	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	4013      	ands	r3, r2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d01a      	beq.n	80037f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0304 	and.w	r3, r3, #4
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d013      	beq.n	80037f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f022 0204 	bic.w	r2, r2, #4
 80037de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037e4:	2208      	movs	r2, #8
 80037e6:	409a      	lsls	r2, r3
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037f0:	f043 0201 	orr.w	r2, r3, #1
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037fc:	2201      	movs	r2, #1
 80037fe:	409a      	lsls	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	4013      	ands	r3, r2
 8003804:	2b00      	cmp	r3, #0
 8003806:	d012      	beq.n	800382e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003812:	2b00      	cmp	r3, #0
 8003814:	d00b      	beq.n	800382e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800381a:	2201      	movs	r2, #1
 800381c:	409a      	lsls	r2, r3
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003826:	f043 0202 	orr.w	r2, r3, #2
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003832:	2204      	movs	r2, #4
 8003834:	409a      	lsls	r2, r3
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	4013      	ands	r3, r2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d012      	beq.n	8003864 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00b      	beq.n	8003864 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003850:	2204      	movs	r2, #4
 8003852:	409a      	lsls	r2, r3
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800385c:	f043 0204 	orr.w	r2, r3, #4
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003868:	2210      	movs	r2, #16
 800386a:	409a      	lsls	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	4013      	ands	r3, r2
 8003870:	2b00      	cmp	r3, #0
 8003872:	d043      	beq.n	80038fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0308 	and.w	r3, r3, #8
 800387e:	2b00      	cmp	r3, #0
 8003880:	d03c      	beq.n	80038fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003886:	2210      	movs	r2, #16
 8003888:	409a      	lsls	r2, r3
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d018      	beq.n	80038ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d108      	bne.n	80038bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d024      	beq.n	80038fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	4798      	blx	r3
 80038ba:	e01f      	b.n	80038fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d01b      	beq.n	80038fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	4798      	blx	r3
 80038cc:	e016      	b.n	80038fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d107      	bne.n	80038ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f022 0208 	bic.w	r2, r2, #8
 80038ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d003      	beq.n	80038fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003900:	2220      	movs	r2, #32
 8003902:	409a      	lsls	r2, r3
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	4013      	ands	r3, r2
 8003908:	2b00      	cmp	r3, #0
 800390a:	f000 808f 	beq.w	8003a2c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0310 	and.w	r3, r3, #16
 8003918:	2b00      	cmp	r3, #0
 800391a:	f000 8087 	beq.w	8003a2c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003922:	2220      	movs	r2, #32
 8003924:	409a      	lsls	r2, r3
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003930:	b2db      	uxtb	r3, r3
 8003932:	2b05      	cmp	r3, #5
 8003934:	d136      	bne.n	80039a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 0216 	bic.w	r2, r2, #22
 8003944:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	695a      	ldr	r2, [r3, #20]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003954:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800395a:	2b00      	cmp	r3, #0
 800395c:	d103      	bne.n	8003966 <HAL_DMA_IRQHandler+0x1da>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003962:	2b00      	cmp	r3, #0
 8003964:	d007      	beq.n	8003976 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f022 0208 	bic.w	r2, r2, #8
 8003974:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800397a:	223f      	movs	r2, #63	@ 0x3f
 800397c:	409a      	lsls	r2, r3
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003996:	2b00      	cmp	r3, #0
 8003998:	d07e      	beq.n	8003a98 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	4798      	blx	r3
        }
        return;
 80039a2:	e079      	b.n	8003a98 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d01d      	beq.n	80039ee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d10d      	bne.n	80039dc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d031      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	4798      	blx	r3
 80039d0:	e02c      	b.n	8003a2c <HAL_DMA_IRQHandler+0x2a0>
 80039d2:	bf00      	nop
 80039d4:	2000000c 	.word	0x2000000c
 80039d8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d023      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	4798      	blx	r3
 80039ec:	e01e      	b.n	8003a2c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d10f      	bne.n	8003a1c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f022 0210 	bic.w	r2, r2, #16
 8003a0a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d003      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d032      	beq.n	8003a9a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a38:	f003 0301 	and.w	r3, r3, #1
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d022      	beq.n	8003a86 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2205      	movs	r2, #5
 8003a44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f022 0201 	bic.w	r2, r2, #1
 8003a56:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	60bb      	str	r3, [r7, #8]
 8003a5e:	697a      	ldr	r2, [r7, #20]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d307      	bcc.n	8003a74 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1f2      	bne.n	8003a58 <HAL_DMA_IRQHandler+0x2cc>
 8003a72:	e000      	b.n	8003a76 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003a74:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d005      	beq.n	8003a9a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	4798      	blx	r3
 8003a96:	e000      	b.n	8003a9a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003a98:	bf00      	nop
    }
  }
}
 8003a9a:	3718      	adds	r7, #24
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b085      	sub	sp, #20
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
 8003aac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003abc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	683a      	ldr	r2, [r7, #0]
 8003ac4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	2b40      	cmp	r3, #64	@ 0x40
 8003acc:	d108      	bne.n	8003ae0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68ba      	ldr	r2, [r7, #8]
 8003adc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003ade:	e007      	b.n	8003af0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68ba      	ldr	r2, [r7, #8]
 8003ae6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	60da      	str	r2, [r3, #12]
}
 8003af0:	bf00      	nop
 8003af2:	3714      	adds	r7, #20
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b085      	sub	sp, #20
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	3b10      	subs	r3, #16
 8003b0c:	4a14      	ldr	r2, [pc, #80]	@ (8003b60 <DMA_CalcBaseAndBitshift+0x64>)
 8003b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b12:	091b      	lsrs	r3, r3, #4
 8003b14:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003b16:	4a13      	ldr	r2, [pc, #76]	@ (8003b64 <DMA_CalcBaseAndBitshift+0x68>)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	461a      	mov	r2, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2b03      	cmp	r3, #3
 8003b28:	d909      	bls.n	8003b3e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003b32:	f023 0303 	bic.w	r3, r3, #3
 8003b36:	1d1a      	adds	r2, r3, #4
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	659a      	str	r2, [r3, #88]	@ 0x58
 8003b3c:	e007      	b.n	8003b4e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003b46:	f023 0303 	bic.w	r3, r3, #3
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3714      	adds	r7, #20
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	aaaaaaab 	.word	0xaaaaaaab
 8003b64:	0800aef8 	.word	0x0800aef8

08003b68 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b085      	sub	sp, #20
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b70:	2300      	movs	r3, #0
 8003b72:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b78:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d11f      	bne.n	8003bc2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	2b03      	cmp	r3, #3
 8003b86:	d856      	bhi.n	8003c36 <DMA_CheckFifoParam+0xce>
 8003b88:	a201      	add	r2, pc, #4	@ (adr r2, 8003b90 <DMA_CheckFifoParam+0x28>)
 8003b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b8e:	bf00      	nop
 8003b90:	08003ba1 	.word	0x08003ba1
 8003b94:	08003bb3 	.word	0x08003bb3
 8003b98:	08003ba1 	.word	0x08003ba1
 8003b9c:	08003c37 	.word	0x08003c37
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ba4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d046      	beq.n	8003c3a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bb0:	e043      	b.n	8003c3a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bb6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003bba:	d140      	bne.n	8003c3e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bc0:	e03d      	b.n	8003c3e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	699b      	ldr	r3, [r3, #24]
 8003bc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bca:	d121      	bne.n	8003c10 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	2b03      	cmp	r3, #3
 8003bd0:	d837      	bhi.n	8003c42 <DMA_CheckFifoParam+0xda>
 8003bd2:	a201      	add	r2, pc, #4	@ (adr r2, 8003bd8 <DMA_CheckFifoParam+0x70>)
 8003bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd8:	08003be9 	.word	0x08003be9
 8003bdc:	08003bef 	.word	0x08003bef
 8003be0:	08003be9 	.word	0x08003be9
 8003be4:	08003c01 	.word	0x08003c01
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	73fb      	strb	r3, [r7, #15]
      break;
 8003bec:	e030      	b.n	8003c50 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bf2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d025      	beq.n	8003c46 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bfe:	e022      	b.n	8003c46 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c04:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003c08:	d11f      	bne.n	8003c4a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003c0e:	e01c      	b.n	8003c4a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d903      	bls.n	8003c1e <DMA_CheckFifoParam+0xb6>
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	2b03      	cmp	r3, #3
 8003c1a:	d003      	beq.n	8003c24 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003c1c:	e018      	b.n	8003c50 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	73fb      	strb	r3, [r7, #15]
      break;
 8003c22:	e015      	b.n	8003c50 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c28:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d00e      	beq.n	8003c4e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	73fb      	strb	r3, [r7, #15]
      break;
 8003c34:	e00b      	b.n	8003c4e <DMA_CheckFifoParam+0xe6>
      break;
 8003c36:	bf00      	nop
 8003c38:	e00a      	b.n	8003c50 <DMA_CheckFifoParam+0xe8>
      break;
 8003c3a:	bf00      	nop
 8003c3c:	e008      	b.n	8003c50 <DMA_CheckFifoParam+0xe8>
      break;
 8003c3e:	bf00      	nop
 8003c40:	e006      	b.n	8003c50 <DMA_CheckFifoParam+0xe8>
      break;
 8003c42:	bf00      	nop
 8003c44:	e004      	b.n	8003c50 <DMA_CheckFifoParam+0xe8>
      break;
 8003c46:	bf00      	nop
 8003c48:	e002      	b.n	8003c50 <DMA_CheckFifoParam+0xe8>
      break;   
 8003c4a:	bf00      	nop
 8003c4c:	e000      	b.n	8003c50 <DMA_CheckFifoParam+0xe8>
      break;
 8003c4e:	bf00      	nop
    }
  } 
  
  return status; 
 8003c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3714      	adds	r7, #20
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop

08003c60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b089      	sub	sp, #36	@ 0x24
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c72:	2300      	movs	r3, #0
 8003c74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c76:	2300      	movs	r3, #0
 8003c78:	61fb      	str	r3, [r7, #28]
 8003c7a:	e16b      	b.n	8003f54 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	fa02 f303 	lsl.w	r3, r2, r3
 8003c84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	697a      	ldr	r2, [r7, #20]
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	f040 815a 	bne.w	8003f4e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f003 0303 	and.w	r3, r3, #3
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d005      	beq.n	8003cb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d130      	bne.n	8003d14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	005b      	lsls	r3, r3, #1
 8003cbc:	2203      	movs	r2, #3
 8003cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc2:	43db      	mvns	r3, r3
 8003cc4:	69ba      	ldr	r2, [r7, #24]
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	68da      	ldr	r2, [r3, #12]
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	005b      	lsls	r3, r3, #1
 8003cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd6:	69ba      	ldr	r2, [r7, #24]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	69ba      	ldr	r2, [r7, #24]
 8003ce0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ce8:	2201      	movs	r2, #1
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf0:	43db      	mvns	r3, r3
 8003cf2:	69ba      	ldr	r2, [r7, #24]
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	091b      	lsrs	r3, r3, #4
 8003cfe:	f003 0201 	and.w	r2, r3, #1
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	fa02 f303 	lsl.w	r3, r2, r3
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	69ba      	ldr	r2, [r7, #24]
 8003d12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f003 0303 	and.w	r3, r3, #3
 8003d1c:	2b03      	cmp	r3, #3
 8003d1e:	d017      	beq.n	8003d50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	005b      	lsls	r3, r3, #1
 8003d2a:	2203      	movs	r2, #3
 8003d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d30:	43db      	mvns	r3, r3
 8003d32:	69ba      	ldr	r2, [r7, #24]
 8003d34:	4013      	ands	r3, r2
 8003d36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	689a      	ldr	r2, [r3, #8]
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	005b      	lsls	r3, r3, #1
 8003d40:	fa02 f303 	lsl.w	r3, r2, r3
 8003d44:	69ba      	ldr	r2, [r7, #24]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	69ba      	ldr	r2, [r7, #24]
 8003d4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f003 0303 	and.w	r3, r3, #3
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d123      	bne.n	8003da4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	08da      	lsrs	r2, r3, #3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	3208      	adds	r2, #8
 8003d64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	f003 0307 	and.w	r3, r3, #7
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	220f      	movs	r2, #15
 8003d74:	fa02 f303 	lsl.w	r3, r2, r3
 8003d78:	43db      	mvns	r3, r3
 8003d7a:	69ba      	ldr	r2, [r7, #24]
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	691a      	ldr	r2, [r3, #16]
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	f003 0307 	and.w	r3, r3, #7
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d90:	69ba      	ldr	r2, [r7, #24]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	08da      	lsrs	r2, r3, #3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	3208      	adds	r2, #8
 8003d9e:	69b9      	ldr	r1, [r7, #24]
 8003da0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	2203      	movs	r2, #3
 8003db0:	fa02 f303 	lsl.w	r3, r2, r3
 8003db4:	43db      	mvns	r3, r3
 8003db6:	69ba      	ldr	r2, [r7, #24]
 8003db8:	4013      	ands	r3, r2
 8003dba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f003 0203 	and.w	r2, r3, #3
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	005b      	lsls	r3, r3, #1
 8003dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	69ba      	ldr	r2, [r7, #24]
 8003dd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	f000 80b4 	beq.w	8003f4e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003de6:	2300      	movs	r3, #0
 8003de8:	60fb      	str	r3, [r7, #12]
 8003dea:	4b60      	ldr	r3, [pc, #384]	@ (8003f6c <HAL_GPIO_Init+0x30c>)
 8003dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dee:	4a5f      	ldr	r2, [pc, #380]	@ (8003f6c <HAL_GPIO_Init+0x30c>)
 8003df0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003df4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003df6:	4b5d      	ldr	r3, [pc, #372]	@ (8003f6c <HAL_GPIO_Init+0x30c>)
 8003df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003dfe:	60fb      	str	r3, [r7, #12]
 8003e00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e02:	4a5b      	ldr	r2, [pc, #364]	@ (8003f70 <HAL_GPIO_Init+0x310>)
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	089b      	lsrs	r3, r3, #2
 8003e08:	3302      	adds	r3, #2
 8003e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	f003 0303 	and.w	r3, r3, #3
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	220f      	movs	r2, #15
 8003e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1e:	43db      	mvns	r3, r3
 8003e20:	69ba      	ldr	r2, [r7, #24]
 8003e22:	4013      	ands	r3, r2
 8003e24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a52      	ldr	r2, [pc, #328]	@ (8003f74 <HAL_GPIO_Init+0x314>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d02b      	beq.n	8003e86 <HAL_GPIO_Init+0x226>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a51      	ldr	r2, [pc, #324]	@ (8003f78 <HAL_GPIO_Init+0x318>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d025      	beq.n	8003e82 <HAL_GPIO_Init+0x222>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a50      	ldr	r2, [pc, #320]	@ (8003f7c <HAL_GPIO_Init+0x31c>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d01f      	beq.n	8003e7e <HAL_GPIO_Init+0x21e>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a4f      	ldr	r2, [pc, #316]	@ (8003f80 <HAL_GPIO_Init+0x320>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d019      	beq.n	8003e7a <HAL_GPIO_Init+0x21a>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a4e      	ldr	r2, [pc, #312]	@ (8003f84 <HAL_GPIO_Init+0x324>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d013      	beq.n	8003e76 <HAL_GPIO_Init+0x216>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a4d      	ldr	r2, [pc, #308]	@ (8003f88 <HAL_GPIO_Init+0x328>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d00d      	beq.n	8003e72 <HAL_GPIO_Init+0x212>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a4c      	ldr	r2, [pc, #304]	@ (8003f8c <HAL_GPIO_Init+0x32c>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d007      	beq.n	8003e6e <HAL_GPIO_Init+0x20e>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a4b      	ldr	r2, [pc, #300]	@ (8003f90 <HAL_GPIO_Init+0x330>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d101      	bne.n	8003e6a <HAL_GPIO_Init+0x20a>
 8003e66:	2307      	movs	r3, #7
 8003e68:	e00e      	b.n	8003e88 <HAL_GPIO_Init+0x228>
 8003e6a:	2308      	movs	r3, #8
 8003e6c:	e00c      	b.n	8003e88 <HAL_GPIO_Init+0x228>
 8003e6e:	2306      	movs	r3, #6
 8003e70:	e00a      	b.n	8003e88 <HAL_GPIO_Init+0x228>
 8003e72:	2305      	movs	r3, #5
 8003e74:	e008      	b.n	8003e88 <HAL_GPIO_Init+0x228>
 8003e76:	2304      	movs	r3, #4
 8003e78:	e006      	b.n	8003e88 <HAL_GPIO_Init+0x228>
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e004      	b.n	8003e88 <HAL_GPIO_Init+0x228>
 8003e7e:	2302      	movs	r3, #2
 8003e80:	e002      	b.n	8003e88 <HAL_GPIO_Init+0x228>
 8003e82:	2301      	movs	r3, #1
 8003e84:	e000      	b.n	8003e88 <HAL_GPIO_Init+0x228>
 8003e86:	2300      	movs	r3, #0
 8003e88:	69fa      	ldr	r2, [r7, #28]
 8003e8a:	f002 0203 	and.w	r2, r2, #3
 8003e8e:	0092      	lsls	r2, r2, #2
 8003e90:	4093      	lsls	r3, r2
 8003e92:	69ba      	ldr	r2, [r7, #24]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e98:	4935      	ldr	r1, [pc, #212]	@ (8003f70 <HAL_GPIO_Init+0x310>)
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	089b      	lsrs	r3, r3, #2
 8003e9e:	3302      	adds	r3, #2
 8003ea0:	69ba      	ldr	r2, [r7, #24]
 8003ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ea6:	4b3b      	ldr	r3, [pc, #236]	@ (8003f94 <HAL_GPIO_Init+0x334>)
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	43db      	mvns	r3, r3
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d003      	beq.n	8003eca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003ec2:	69ba      	ldr	r2, [r7, #24]
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003eca:	4a32      	ldr	r2, [pc, #200]	@ (8003f94 <HAL_GPIO_Init+0x334>)
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ed0:	4b30      	ldr	r3, [pc, #192]	@ (8003f94 <HAL_GPIO_Init+0x334>)
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	43db      	mvns	r3, r3
 8003eda:	69ba      	ldr	r2, [r7, #24]
 8003edc:	4013      	ands	r3, r2
 8003ede:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d003      	beq.n	8003ef4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ef4:	4a27      	ldr	r2, [pc, #156]	@ (8003f94 <HAL_GPIO_Init+0x334>)
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003efa:	4b26      	ldr	r3, [pc, #152]	@ (8003f94 <HAL_GPIO_Init+0x334>)
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	43db      	mvns	r3, r3
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	4013      	ands	r3, r2
 8003f08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d003      	beq.n	8003f1e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003f16:	69ba      	ldr	r2, [r7, #24]
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f1e:	4a1d      	ldr	r2, [pc, #116]	@ (8003f94 <HAL_GPIO_Init+0x334>)
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f24:	4b1b      	ldr	r3, [pc, #108]	@ (8003f94 <HAL_GPIO_Init+0x334>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	43db      	mvns	r3, r3
 8003f2e:	69ba      	ldr	r2, [r7, #24]
 8003f30:	4013      	ands	r3, r2
 8003f32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d003      	beq.n	8003f48 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003f40:	69ba      	ldr	r2, [r7, #24]
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f48:	4a12      	ldr	r2, [pc, #72]	@ (8003f94 <HAL_GPIO_Init+0x334>)
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	3301      	adds	r3, #1
 8003f52:	61fb      	str	r3, [r7, #28]
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	2b0f      	cmp	r3, #15
 8003f58:	f67f ae90 	bls.w	8003c7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f5c:	bf00      	nop
 8003f5e:	bf00      	nop
 8003f60:	3724      	adds	r7, #36	@ 0x24
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	40023800 	.word	0x40023800
 8003f70:	40013800 	.word	0x40013800
 8003f74:	40020000 	.word	0x40020000
 8003f78:	40020400 	.word	0x40020400
 8003f7c:	40020800 	.word	0x40020800
 8003f80:	40020c00 	.word	0x40020c00
 8003f84:	40021000 	.word	0x40021000
 8003f88:	40021400 	.word	0x40021400
 8003f8c:	40021800 	.word	0x40021800
 8003f90:	40021c00 	.word	0x40021c00
 8003f94:	40013c00 	.word	0x40013c00

08003f98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b085      	sub	sp, #20
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	691a      	ldr	r2, [r3, #16]
 8003fa8:	887b      	ldrh	r3, [r7, #2]
 8003faa:	4013      	ands	r3, r2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d002      	beq.n	8003fb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	73fb      	strb	r3, [r7, #15]
 8003fb4:	e001      	b.n	8003fba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3714      	adds	r7, #20
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	807b      	strh	r3, [r7, #2]
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003fd8:	787b      	ldrb	r3, [r7, #1]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d003      	beq.n	8003fe6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fde:	887a      	ldrh	r2, [r7, #2]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003fe4:	e003      	b.n	8003fee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003fe6:	887b      	ldrh	r3, [r7, #2]
 8003fe8:	041a      	lsls	r2, r3, #16
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	619a      	str	r2, [r3, #24]
}
 8003fee:	bf00      	nop
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr

08003ffa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b085      	sub	sp, #20
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
 8004002:	460b      	mov	r3, r1
 8004004:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800400c:	887a      	ldrh	r2, [r7, #2]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	4013      	ands	r3, r2
 8004012:	041a      	lsls	r2, r3, #16
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	43d9      	mvns	r1, r3
 8004018:	887b      	ldrh	r3, [r7, #2]
 800401a:	400b      	ands	r3, r1
 800401c:	431a      	orrs	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	619a      	str	r2, [r3, #24]
}
 8004022:	bf00      	nop
 8004024:	3714      	adds	r7, #20
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
	...

08004030 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d101      	bne.n	8004042 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e12b      	b.n	800429a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b00      	cmp	r3, #0
 800404c:	d106      	bne.n	800405c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f7fe f882 	bl	8002160 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2224      	movs	r2, #36	@ 0x24
 8004060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f022 0201 	bic.w	r2, r2, #1
 8004072:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004082:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004092:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004094:	f001 fc20 	bl	80058d8 <HAL_RCC_GetPCLK1Freq>
 8004098:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	4a81      	ldr	r2, [pc, #516]	@ (80042a4 <HAL_I2C_Init+0x274>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d807      	bhi.n	80040b4 <HAL_I2C_Init+0x84>
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	4a80      	ldr	r2, [pc, #512]	@ (80042a8 <HAL_I2C_Init+0x278>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	bf94      	ite	ls
 80040ac:	2301      	movls	r3, #1
 80040ae:	2300      	movhi	r3, #0
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	e006      	b.n	80040c2 <HAL_I2C_Init+0x92>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	4a7d      	ldr	r2, [pc, #500]	@ (80042ac <HAL_I2C_Init+0x27c>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	bf94      	ite	ls
 80040bc:	2301      	movls	r3, #1
 80040be:	2300      	movhi	r3, #0
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d001      	beq.n	80040ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e0e7      	b.n	800429a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	4a78      	ldr	r2, [pc, #480]	@ (80042b0 <HAL_I2C_Init+0x280>)
 80040ce:	fba2 2303 	umull	r2, r3, r2, r3
 80040d2:	0c9b      	lsrs	r3, r3, #18
 80040d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68ba      	ldr	r2, [r7, #8]
 80040e6:	430a      	orrs	r2, r1
 80040e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	6a1b      	ldr	r3, [r3, #32]
 80040f0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	4a6a      	ldr	r2, [pc, #424]	@ (80042a4 <HAL_I2C_Init+0x274>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d802      	bhi.n	8004104 <HAL_I2C_Init+0xd4>
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	3301      	adds	r3, #1
 8004102:	e009      	b.n	8004118 <HAL_I2C_Init+0xe8>
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800410a:	fb02 f303 	mul.w	r3, r2, r3
 800410e:	4a69      	ldr	r2, [pc, #420]	@ (80042b4 <HAL_I2C_Init+0x284>)
 8004110:	fba2 2303 	umull	r2, r3, r2, r3
 8004114:	099b      	lsrs	r3, r3, #6
 8004116:	3301      	adds	r3, #1
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	6812      	ldr	r2, [r2, #0]
 800411c:	430b      	orrs	r3, r1
 800411e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	69db      	ldr	r3, [r3, #28]
 8004126:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800412a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	495c      	ldr	r1, [pc, #368]	@ (80042a4 <HAL_I2C_Init+0x274>)
 8004134:	428b      	cmp	r3, r1
 8004136:	d819      	bhi.n	800416c <HAL_I2C_Init+0x13c>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	1e59      	subs	r1, r3, #1
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	005b      	lsls	r3, r3, #1
 8004142:	fbb1 f3f3 	udiv	r3, r1, r3
 8004146:	1c59      	adds	r1, r3, #1
 8004148:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800414c:	400b      	ands	r3, r1
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00a      	beq.n	8004168 <HAL_I2C_Init+0x138>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	1e59      	subs	r1, r3, #1
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	005b      	lsls	r3, r3, #1
 800415c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004160:	3301      	adds	r3, #1
 8004162:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004166:	e051      	b.n	800420c <HAL_I2C_Init+0x1dc>
 8004168:	2304      	movs	r3, #4
 800416a:	e04f      	b.n	800420c <HAL_I2C_Init+0x1dc>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d111      	bne.n	8004198 <HAL_I2C_Init+0x168>
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	1e58      	subs	r0, r3, #1
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6859      	ldr	r1, [r3, #4]
 800417c:	460b      	mov	r3, r1
 800417e:	005b      	lsls	r3, r3, #1
 8004180:	440b      	add	r3, r1
 8004182:	fbb0 f3f3 	udiv	r3, r0, r3
 8004186:	3301      	adds	r3, #1
 8004188:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800418c:	2b00      	cmp	r3, #0
 800418e:	bf0c      	ite	eq
 8004190:	2301      	moveq	r3, #1
 8004192:	2300      	movne	r3, #0
 8004194:	b2db      	uxtb	r3, r3
 8004196:	e012      	b.n	80041be <HAL_I2C_Init+0x18e>
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	1e58      	subs	r0, r3, #1
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6859      	ldr	r1, [r3, #4]
 80041a0:	460b      	mov	r3, r1
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	440b      	add	r3, r1
 80041a6:	0099      	lsls	r1, r3, #2
 80041a8:	440b      	add	r3, r1
 80041aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80041ae:	3301      	adds	r3, #1
 80041b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	bf0c      	ite	eq
 80041b8:	2301      	moveq	r3, #1
 80041ba:	2300      	movne	r3, #0
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d001      	beq.n	80041c6 <HAL_I2C_Init+0x196>
 80041c2:	2301      	movs	r3, #1
 80041c4:	e022      	b.n	800420c <HAL_I2C_Init+0x1dc>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d10e      	bne.n	80041ec <HAL_I2C_Init+0x1bc>
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	1e58      	subs	r0, r3, #1
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6859      	ldr	r1, [r3, #4]
 80041d6:	460b      	mov	r3, r1
 80041d8:	005b      	lsls	r3, r3, #1
 80041da:	440b      	add	r3, r1
 80041dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80041e0:	3301      	adds	r3, #1
 80041e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041ea:	e00f      	b.n	800420c <HAL_I2C_Init+0x1dc>
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	1e58      	subs	r0, r3, #1
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6859      	ldr	r1, [r3, #4]
 80041f4:	460b      	mov	r3, r1
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	440b      	add	r3, r1
 80041fa:	0099      	lsls	r1, r3, #2
 80041fc:	440b      	add	r3, r1
 80041fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004202:	3301      	adds	r3, #1
 8004204:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004208:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800420c:	6879      	ldr	r1, [r7, #4]
 800420e:	6809      	ldr	r1, [r1, #0]
 8004210:	4313      	orrs	r3, r2
 8004212:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	69da      	ldr	r2, [r3, #28]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a1b      	ldr	r3, [r3, #32]
 8004226:	431a      	orrs	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	430a      	orrs	r2, r1
 800422e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800423a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	6911      	ldr	r1, [r2, #16]
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	68d2      	ldr	r2, [r2, #12]
 8004246:	4311      	orrs	r1, r2
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	6812      	ldr	r2, [r2, #0]
 800424c:	430b      	orrs	r3, r1
 800424e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	695a      	ldr	r2, [r3, #20]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	431a      	orrs	r2, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	430a      	orrs	r2, r1
 800426a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f042 0201 	orr.w	r2, r2, #1
 800427a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2220      	movs	r2, #32
 8004286:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	000186a0 	.word	0x000186a0
 80042a8:	001e847f 	.word	0x001e847f
 80042ac:	003d08ff 	.word	0x003d08ff
 80042b0:	431bde83 	.word	0x431bde83
 80042b4:	10624dd3 	.word	0x10624dd3

080042b8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b088      	sub	sp, #32
 80042bc:	af02      	add	r7, sp, #8
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	4608      	mov	r0, r1
 80042c2:	4611      	mov	r1, r2
 80042c4:	461a      	mov	r2, r3
 80042c6:	4603      	mov	r3, r0
 80042c8:	817b      	strh	r3, [r7, #10]
 80042ca:	460b      	mov	r3, r1
 80042cc:	813b      	strh	r3, [r7, #8]
 80042ce:	4613      	mov	r3, r2
 80042d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80042d2:	f7fe fa8f 	bl	80027f4 <HAL_GetTick>
 80042d6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	2b20      	cmp	r3, #32
 80042e2:	f040 80d9 	bne.w	8004498 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	9300      	str	r3, [sp, #0]
 80042ea:	2319      	movs	r3, #25
 80042ec:	2201      	movs	r2, #1
 80042ee:	496d      	ldr	r1, [pc, #436]	@ (80044a4 <HAL_I2C_Mem_Write+0x1ec>)
 80042f0:	68f8      	ldr	r0, [r7, #12]
 80042f2:	f000 fc8b 	bl	8004c0c <I2C_WaitOnFlagUntilTimeout>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d001      	beq.n	8004300 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80042fc:	2302      	movs	r3, #2
 80042fe:	e0cc      	b.n	800449a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004306:	2b01      	cmp	r3, #1
 8004308:	d101      	bne.n	800430e <HAL_I2C_Mem_Write+0x56>
 800430a:	2302      	movs	r3, #2
 800430c:	e0c5      	b.n	800449a <HAL_I2C_Mem_Write+0x1e2>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2201      	movs	r2, #1
 8004312:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0301 	and.w	r3, r3, #1
 8004320:	2b01      	cmp	r3, #1
 8004322:	d007      	beq.n	8004334 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f042 0201 	orr.w	r2, r2, #1
 8004332:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004342:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2221      	movs	r2, #33	@ 0x21
 8004348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2240      	movs	r2, #64	@ 0x40
 8004350:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6a3a      	ldr	r2, [r7, #32]
 800435e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004364:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800436a:	b29a      	uxth	r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	4a4d      	ldr	r2, [pc, #308]	@ (80044a8 <HAL_I2C_Mem_Write+0x1f0>)
 8004374:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004376:	88f8      	ldrh	r0, [r7, #6]
 8004378:	893a      	ldrh	r2, [r7, #8]
 800437a:	8979      	ldrh	r1, [r7, #10]
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	9301      	str	r3, [sp, #4]
 8004380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004382:	9300      	str	r3, [sp, #0]
 8004384:	4603      	mov	r3, r0
 8004386:	68f8      	ldr	r0, [r7, #12]
 8004388:	f000 fac2 	bl	8004910 <I2C_RequestMemoryWrite>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d052      	beq.n	8004438 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e081      	b.n	800449a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800439a:	68f8      	ldr	r0, [r7, #12]
 800439c:	f000 fd50 	bl	8004e40 <I2C_WaitOnTXEFlagUntilTimeout>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d00d      	beq.n	80043c2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043aa:	2b04      	cmp	r3, #4
 80043ac:	d107      	bne.n	80043be <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e06b      	b.n	800449a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c6:	781a      	ldrb	r2, [r3, #0]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d2:	1c5a      	adds	r2, r3, #1
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043dc:	3b01      	subs	r3, #1
 80043de:	b29a      	uxth	r2, r3
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	3b01      	subs	r3, #1
 80043ec:	b29a      	uxth	r2, r3
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	695b      	ldr	r3, [r3, #20]
 80043f8:	f003 0304 	and.w	r3, r3, #4
 80043fc:	2b04      	cmp	r3, #4
 80043fe:	d11b      	bne.n	8004438 <HAL_I2C_Mem_Write+0x180>
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004404:	2b00      	cmp	r3, #0
 8004406:	d017      	beq.n	8004438 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800440c:	781a      	ldrb	r2, [r3, #0]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004418:	1c5a      	adds	r2, r3, #1
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004422:	3b01      	subs	r3, #1
 8004424:	b29a      	uxth	r2, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800442e:	b29b      	uxth	r3, r3
 8004430:	3b01      	subs	r3, #1
 8004432:	b29a      	uxth	r2, r3
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800443c:	2b00      	cmp	r3, #0
 800443e:	d1aa      	bne.n	8004396 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004440:	697a      	ldr	r2, [r7, #20]
 8004442:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004444:	68f8      	ldr	r0, [r7, #12]
 8004446:	f000 fd43 	bl	8004ed0 <I2C_WaitOnBTFFlagUntilTimeout>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d00d      	beq.n	800446c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004454:	2b04      	cmp	r3, #4
 8004456:	d107      	bne.n	8004468 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004466:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e016      	b.n	800449a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800447a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2220      	movs	r2, #32
 8004480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2200      	movs	r2, #0
 8004490:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004494:	2300      	movs	r3, #0
 8004496:	e000      	b.n	800449a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004498:	2302      	movs	r3, #2
  }
}
 800449a:	4618      	mov	r0, r3
 800449c:	3718      	adds	r7, #24
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	00100002 	.word	0x00100002
 80044a8:	ffff0000 	.word	0xffff0000

080044ac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b08c      	sub	sp, #48	@ 0x30
 80044b0:	af02      	add	r7, sp, #8
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	4608      	mov	r0, r1
 80044b6:	4611      	mov	r1, r2
 80044b8:	461a      	mov	r2, r3
 80044ba:	4603      	mov	r3, r0
 80044bc:	817b      	strh	r3, [r7, #10]
 80044be:	460b      	mov	r3, r1
 80044c0:	813b      	strh	r3, [r7, #8]
 80044c2:	4613      	mov	r3, r2
 80044c4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80044c6:	f7fe f995 	bl	80027f4 <HAL_GetTick>
 80044ca:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	2b20      	cmp	r3, #32
 80044d6:	f040 8214 	bne.w	8004902 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044dc:	9300      	str	r3, [sp, #0]
 80044de:	2319      	movs	r3, #25
 80044e0:	2201      	movs	r2, #1
 80044e2:	497b      	ldr	r1, [pc, #492]	@ (80046d0 <HAL_I2C_Mem_Read+0x224>)
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f000 fb91 	bl	8004c0c <I2C_WaitOnFlagUntilTimeout>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d001      	beq.n	80044f4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80044f0:	2302      	movs	r3, #2
 80044f2:	e207      	b.n	8004904 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d101      	bne.n	8004502 <HAL_I2C_Mem_Read+0x56>
 80044fe:	2302      	movs	r3, #2
 8004500:	e200      	b.n	8004904 <HAL_I2C_Mem_Read+0x458>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2201      	movs	r2, #1
 8004506:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0301 	and.w	r3, r3, #1
 8004514:	2b01      	cmp	r3, #1
 8004516:	d007      	beq.n	8004528 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f042 0201 	orr.w	r2, r2, #1
 8004526:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004536:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2222      	movs	r2, #34	@ 0x22
 800453c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2240      	movs	r2, #64	@ 0x40
 8004544:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004552:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004558:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800455e:	b29a      	uxth	r2, r3
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	4a5b      	ldr	r2, [pc, #364]	@ (80046d4 <HAL_I2C_Mem_Read+0x228>)
 8004568:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800456a:	88f8      	ldrh	r0, [r7, #6]
 800456c:	893a      	ldrh	r2, [r7, #8]
 800456e:	8979      	ldrh	r1, [r7, #10]
 8004570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004572:	9301      	str	r3, [sp, #4]
 8004574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004576:	9300      	str	r3, [sp, #0]
 8004578:	4603      	mov	r3, r0
 800457a:	68f8      	ldr	r0, [r7, #12]
 800457c:	f000 fa5e 	bl	8004a3c <I2C_RequestMemoryRead>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d001      	beq.n	800458a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e1bc      	b.n	8004904 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800458e:	2b00      	cmp	r3, #0
 8004590:	d113      	bne.n	80045ba <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004592:	2300      	movs	r3, #0
 8004594:	623b      	str	r3, [r7, #32]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	695b      	ldr	r3, [r3, #20]
 800459c:	623b      	str	r3, [r7, #32]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	623b      	str	r3, [r7, #32]
 80045a6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045b6:	601a      	str	r2, [r3, #0]
 80045b8:	e190      	b.n	80048dc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d11b      	bne.n	80045fa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045d2:	2300      	movs	r3, #0
 80045d4:	61fb      	str	r3, [r7, #28]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	695b      	ldr	r3, [r3, #20]
 80045dc:	61fb      	str	r3, [r7, #28]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	699b      	ldr	r3, [r3, #24]
 80045e4:	61fb      	str	r3, [r7, #28]
 80045e6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045f6:	601a      	str	r2, [r3, #0]
 80045f8:	e170      	b.n	80048dc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d11b      	bne.n	800463a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004610:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004620:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004622:	2300      	movs	r3, #0
 8004624:	61bb      	str	r3, [r7, #24]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	695b      	ldr	r3, [r3, #20]
 800462c:	61bb      	str	r3, [r7, #24]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	61bb      	str	r3, [r7, #24]
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	e150      	b.n	80048dc <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800463a:	2300      	movs	r3, #0
 800463c:	617b      	str	r3, [r7, #20]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	695b      	ldr	r3, [r3, #20]
 8004644:	617b      	str	r3, [r7, #20]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	699b      	ldr	r3, [r3, #24]
 800464c:	617b      	str	r3, [r7, #20]
 800464e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004650:	e144      	b.n	80048dc <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004656:	2b03      	cmp	r3, #3
 8004658:	f200 80f1 	bhi.w	800483e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004660:	2b01      	cmp	r3, #1
 8004662:	d123      	bne.n	80046ac <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004664:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004666:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004668:	68f8      	ldr	r0, [r7, #12]
 800466a:	f000 fc79 	bl	8004f60 <I2C_WaitOnRXNEFlagUntilTimeout>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d001      	beq.n	8004678 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e145      	b.n	8004904 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	691a      	ldr	r2, [r3, #16]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004682:	b2d2      	uxtb	r2, r2
 8004684:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800468a:	1c5a      	adds	r2, r3, #1
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004694:	3b01      	subs	r3, #1
 8004696:	b29a      	uxth	r2, r3
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	3b01      	subs	r3, #1
 80046a4:	b29a      	uxth	r2, r3
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80046aa:	e117      	b.n	80048dc <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d14e      	bne.n	8004752 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b6:	9300      	str	r3, [sp, #0]
 80046b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046ba:	2200      	movs	r2, #0
 80046bc:	4906      	ldr	r1, [pc, #24]	@ (80046d8 <HAL_I2C_Mem_Read+0x22c>)
 80046be:	68f8      	ldr	r0, [r7, #12]
 80046c0:	f000 faa4 	bl	8004c0c <I2C_WaitOnFlagUntilTimeout>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d008      	beq.n	80046dc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e11a      	b.n	8004904 <HAL_I2C_Mem_Read+0x458>
 80046ce:	bf00      	nop
 80046d0:	00100002 	.word	0x00100002
 80046d4:	ffff0000 	.word	0xffff0000
 80046d8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	691a      	ldr	r2, [r3, #16]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f6:	b2d2      	uxtb	r2, r2
 80046f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046fe:	1c5a      	adds	r2, r3, #1
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004708:	3b01      	subs	r3, #1
 800470a:	b29a      	uxth	r2, r3
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004714:	b29b      	uxth	r3, r3
 8004716:	3b01      	subs	r3, #1
 8004718:	b29a      	uxth	r2, r3
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	691a      	ldr	r2, [r3, #16]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004728:	b2d2      	uxtb	r2, r2
 800472a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004730:	1c5a      	adds	r2, r3, #1
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800473a:	3b01      	subs	r3, #1
 800473c:	b29a      	uxth	r2, r3
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004746:	b29b      	uxth	r3, r3
 8004748:	3b01      	subs	r3, #1
 800474a:	b29a      	uxth	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004750:	e0c4      	b.n	80048dc <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004754:	9300      	str	r3, [sp, #0]
 8004756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004758:	2200      	movs	r2, #0
 800475a:	496c      	ldr	r1, [pc, #432]	@ (800490c <HAL_I2C_Mem_Read+0x460>)
 800475c:	68f8      	ldr	r0, [r7, #12]
 800475e:	f000 fa55 	bl	8004c0c <I2C_WaitOnFlagUntilTimeout>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d001      	beq.n	800476c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e0cb      	b.n	8004904 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800477a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	691a      	ldr	r2, [r3, #16]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004786:	b2d2      	uxtb	r2, r2
 8004788:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800478e:	1c5a      	adds	r2, r3, #1
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004798:	3b01      	subs	r3, #1
 800479a:	b29a      	uxth	r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	3b01      	subs	r3, #1
 80047a8:	b29a      	uxth	r2, r3
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80047ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b0:	9300      	str	r3, [sp, #0]
 80047b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047b4:	2200      	movs	r2, #0
 80047b6:	4955      	ldr	r1, [pc, #340]	@ (800490c <HAL_I2C_Mem_Read+0x460>)
 80047b8:	68f8      	ldr	r0, [r7, #12]
 80047ba:	f000 fa27 	bl	8004c0c <I2C_WaitOnFlagUntilTimeout>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d001      	beq.n	80047c8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e09d      	b.n	8004904 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	691a      	ldr	r2, [r3, #16]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e2:	b2d2      	uxtb	r2, r2
 80047e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ea:	1c5a      	adds	r2, r3, #1
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047f4:	3b01      	subs	r3, #1
 80047f6:	b29a      	uxth	r2, r3
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004800:	b29b      	uxth	r3, r3
 8004802:	3b01      	subs	r3, #1
 8004804:	b29a      	uxth	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	691a      	ldr	r2, [r3, #16]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004814:	b2d2      	uxtb	r2, r2
 8004816:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800481c:	1c5a      	adds	r2, r3, #1
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004826:	3b01      	subs	r3, #1
 8004828:	b29a      	uxth	r2, r3
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004832:	b29b      	uxth	r3, r3
 8004834:	3b01      	subs	r3, #1
 8004836:	b29a      	uxth	r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800483c:	e04e      	b.n	80048dc <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800483e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004840:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004842:	68f8      	ldr	r0, [r7, #12]
 8004844:	f000 fb8c 	bl	8004f60 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d001      	beq.n	8004852 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e058      	b.n	8004904 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	691a      	ldr	r2, [r3, #16]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800485c:	b2d2      	uxtb	r2, r2
 800485e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004864:	1c5a      	adds	r2, r3, #1
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800486e:	3b01      	subs	r3, #1
 8004870:	b29a      	uxth	r2, r3
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800487a:	b29b      	uxth	r3, r3
 800487c:	3b01      	subs	r3, #1
 800487e:	b29a      	uxth	r2, r3
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	695b      	ldr	r3, [r3, #20]
 800488a:	f003 0304 	and.w	r3, r3, #4
 800488e:	2b04      	cmp	r3, #4
 8004890:	d124      	bne.n	80048dc <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004896:	2b03      	cmp	r3, #3
 8004898:	d107      	bne.n	80048aa <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048a8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	691a      	ldr	r2, [r3, #16]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b4:	b2d2      	uxtb	r2, r2
 80048b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048bc:	1c5a      	adds	r2, r3, #1
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048c6:	3b01      	subs	r3, #1
 80048c8:	b29a      	uxth	r2, r3
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	3b01      	subs	r3, #1
 80048d6:	b29a      	uxth	r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	f47f aeb6 	bne.w	8004652 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2220      	movs	r2, #32
 80048ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80048fe:	2300      	movs	r3, #0
 8004900:	e000      	b.n	8004904 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004902:	2302      	movs	r3, #2
  }
}
 8004904:	4618      	mov	r0, r3
 8004906:	3728      	adds	r7, #40	@ 0x28
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}
 800490c:	00010004 	.word	0x00010004

08004910 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b088      	sub	sp, #32
 8004914:	af02      	add	r7, sp, #8
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	4608      	mov	r0, r1
 800491a:	4611      	mov	r1, r2
 800491c:	461a      	mov	r2, r3
 800491e:	4603      	mov	r3, r0
 8004920:	817b      	strh	r3, [r7, #10]
 8004922:	460b      	mov	r3, r1
 8004924:	813b      	strh	r3, [r7, #8]
 8004926:	4613      	mov	r3, r2
 8004928:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004938:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800493a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800493c:	9300      	str	r3, [sp, #0]
 800493e:	6a3b      	ldr	r3, [r7, #32]
 8004940:	2200      	movs	r2, #0
 8004942:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	f000 f960 	bl	8004c0c <I2C_WaitOnFlagUntilTimeout>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00d      	beq.n	800496e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800495c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004960:	d103      	bne.n	800496a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004968:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e05f      	b.n	8004a2e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800496e:	897b      	ldrh	r3, [r7, #10]
 8004970:	b2db      	uxtb	r3, r3
 8004972:	461a      	mov	r2, r3
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800497c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800497e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004980:	6a3a      	ldr	r2, [r7, #32]
 8004982:	492d      	ldr	r1, [pc, #180]	@ (8004a38 <I2C_RequestMemoryWrite+0x128>)
 8004984:	68f8      	ldr	r0, [r7, #12]
 8004986:	f000 f9bb 	bl	8004d00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d001      	beq.n	8004994 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e04c      	b.n	8004a2e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004994:	2300      	movs	r3, #0
 8004996:	617b      	str	r3, [r7, #20]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	617b      	str	r3, [r7, #20]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	617b      	str	r3, [r7, #20]
 80049a8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049ac:	6a39      	ldr	r1, [r7, #32]
 80049ae:	68f8      	ldr	r0, [r7, #12]
 80049b0:	f000 fa46 	bl	8004e40 <I2C_WaitOnTXEFlagUntilTimeout>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d00d      	beq.n	80049d6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049be:	2b04      	cmp	r3, #4
 80049c0:	d107      	bne.n	80049d2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049d0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e02b      	b.n	8004a2e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80049d6:	88fb      	ldrh	r3, [r7, #6]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d105      	bne.n	80049e8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80049dc:	893b      	ldrh	r3, [r7, #8]
 80049de:	b2da      	uxtb	r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	611a      	str	r2, [r3, #16]
 80049e6:	e021      	b.n	8004a2c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80049e8:	893b      	ldrh	r3, [r7, #8]
 80049ea:	0a1b      	lsrs	r3, r3, #8
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	b2da      	uxtb	r2, r3
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049f8:	6a39      	ldr	r1, [r7, #32]
 80049fa:	68f8      	ldr	r0, [r7, #12]
 80049fc:	f000 fa20 	bl	8004e40 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00d      	beq.n	8004a22 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a0a:	2b04      	cmp	r3, #4
 8004a0c:	d107      	bne.n	8004a1e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a1c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e005      	b.n	8004a2e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a22:	893b      	ldrh	r3, [r7, #8]
 8004a24:	b2da      	uxtb	r2, r3
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3718      	adds	r7, #24
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	00010002 	.word	0x00010002

08004a3c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b088      	sub	sp, #32
 8004a40:	af02      	add	r7, sp, #8
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	4608      	mov	r0, r1
 8004a46:	4611      	mov	r1, r2
 8004a48:	461a      	mov	r2, r3
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	817b      	strh	r3, [r7, #10]
 8004a4e:	460b      	mov	r3, r1
 8004a50:	813b      	strh	r3, [r7, #8]
 8004a52:	4613      	mov	r3, r2
 8004a54:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004a64:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a74:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a78:	9300      	str	r3, [sp, #0]
 8004a7a:	6a3b      	ldr	r3, [r7, #32]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004a82:	68f8      	ldr	r0, [r7, #12]
 8004a84:	f000 f8c2 	bl	8004c0c <I2C_WaitOnFlagUntilTimeout>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00d      	beq.n	8004aaa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a9c:	d103      	bne.n	8004aa6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004aa4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e0aa      	b.n	8004c00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004aaa:	897b      	ldrh	r3, [r7, #10]
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	461a      	mov	r2, r3
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004ab8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004abc:	6a3a      	ldr	r2, [r7, #32]
 8004abe:	4952      	ldr	r1, [pc, #328]	@ (8004c08 <I2C_RequestMemoryRead+0x1cc>)
 8004ac0:	68f8      	ldr	r0, [r7, #12]
 8004ac2:	f000 f91d 	bl	8004d00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d001      	beq.n	8004ad0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e097      	b.n	8004c00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	617b      	str	r3, [r7, #20]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	695b      	ldr	r3, [r3, #20]
 8004ada:	617b      	str	r3, [r7, #20]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	699b      	ldr	r3, [r3, #24]
 8004ae2:	617b      	str	r3, [r7, #20]
 8004ae4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ae6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ae8:	6a39      	ldr	r1, [r7, #32]
 8004aea:	68f8      	ldr	r0, [r7, #12]
 8004aec:	f000 f9a8 	bl	8004e40 <I2C_WaitOnTXEFlagUntilTimeout>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d00d      	beq.n	8004b12 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004afa:	2b04      	cmp	r3, #4
 8004afc:	d107      	bne.n	8004b0e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b0c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e076      	b.n	8004c00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b12:	88fb      	ldrh	r3, [r7, #6]
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d105      	bne.n	8004b24 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b18:	893b      	ldrh	r3, [r7, #8]
 8004b1a:	b2da      	uxtb	r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	611a      	str	r2, [r3, #16]
 8004b22:	e021      	b.n	8004b68 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b24:	893b      	ldrh	r3, [r7, #8]
 8004b26:	0a1b      	lsrs	r3, r3, #8
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	b2da      	uxtb	r2, r3
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b34:	6a39      	ldr	r1, [r7, #32]
 8004b36:	68f8      	ldr	r0, [r7, #12]
 8004b38:	f000 f982 	bl	8004e40 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00d      	beq.n	8004b5e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b46:	2b04      	cmp	r3, #4
 8004b48:	d107      	bne.n	8004b5a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b58:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e050      	b.n	8004c00 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b5e:	893b      	ldrh	r3, [r7, #8]
 8004b60:	b2da      	uxtb	r2, r3
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b6a:	6a39      	ldr	r1, [r7, #32]
 8004b6c:	68f8      	ldr	r0, [r7, #12]
 8004b6e:	f000 f967 	bl	8004e40 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d00d      	beq.n	8004b94 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b7c:	2b04      	cmp	r3, #4
 8004b7e:	d107      	bne.n	8004b90 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b8e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e035      	b.n	8004c00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ba2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba6:	9300      	str	r3, [sp, #0]
 8004ba8:	6a3b      	ldr	r3, [r7, #32]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004bb0:	68f8      	ldr	r0, [r7, #12]
 8004bb2:	f000 f82b 	bl	8004c0c <I2C_WaitOnFlagUntilTimeout>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d00d      	beq.n	8004bd8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bca:	d103      	bne.n	8004bd4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004bd2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e013      	b.n	8004c00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004bd8:	897b      	ldrh	r3, [r7, #10]
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	f043 0301 	orr.w	r3, r3, #1
 8004be0:	b2da      	uxtb	r2, r3
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bea:	6a3a      	ldr	r2, [r7, #32]
 8004bec:	4906      	ldr	r1, [pc, #24]	@ (8004c08 <I2C_RequestMemoryRead+0x1cc>)
 8004bee:	68f8      	ldr	r0, [r7, #12]
 8004bf0:	f000 f886 	bl	8004d00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d001      	beq.n	8004bfe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e000      	b.n	8004c00 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3718      	adds	r7, #24
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	00010002 	.word	0x00010002

08004c0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	603b      	str	r3, [r7, #0]
 8004c18:	4613      	mov	r3, r2
 8004c1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c1c:	e048      	b.n	8004cb0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c24:	d044      	beq.n	8004cb0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c26:	f7fd fde5 	bl	80027f4 <HAL_GetTick>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	683a      	ldr	r2, [r7, #0]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d302      	bcc.n	8004c3c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d139      	bne.n	8004cb0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	0c1b      	lsrs	r3, r3, #16
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d10d      	bne.n	8004c62 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	695b      	ldr	r3, [r3, #20]
 8004c4c:	43da      	mvns	r2, r3
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	4013      	ands	r3, r2
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	bf0c      	ite	eq
 8004c58:	2301      	moveq	r3, #1
 8004c5a:	2300      	movne	r3, #0
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	461a      	mov	r2, r3
 8004c60:	e00c      	b.n	8004c7c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	699b      	ldr	r3, [r3, #24]
 8004c68:	43da      	mvns	r2, r3
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	bf0c      	ite	eq
 8004c74:	2301      	moveq	r3, #1
 8004c76:	2300      	movne	r3, #0
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	79fb      	ldrb	r3, [r7, #7]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d116      	bne.n	8004cb0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2200      	movs	r2, #0
 8004c86:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c9c:	f043 0220 	orr.w	r2, r3, #32
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e023      	b.n	8004cf8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	0c1b      	lsrs	r3, r3, #16
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d10d      	bne.n	8004cd6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	695b      	ldr	r3, [r3, #20]
 8004cc0:	43da      	mvns	r2, r3
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	bf0c      	ite	eq
 8004ccc:	2301      	moveq	r3, #1
 8004cce:	2300      	movne	r3, #0
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	e00c      	b.n	8004cf0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	699b      	ldr	r3, [r3, #24]
 8004cdc:	43da      	mvns	r2, r3
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	bf0c      	ite	eq
 8004ce8:	2301      	moveq	r3, #1
 8004cea:	2300      	movne	r3, #0
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	461a      	mov	r2, r3
 8004cf0:	79fb      	ldrb	r3, [r7, #7]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d093      	beq.n	8004c1e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3710      	adds	r7, #16
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	607a      	str	r2, [r7, #4]
 8004d0c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d0e:	e071      	b.n	8004df4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	695b      	ldr	r3, [r3, #20]
 8004d16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d1e:	d123      	bne.n	8004d68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d2e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004d38:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2220      	movs	r2, #32
 8004d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d54:	f043 0204 	orr.w	r2, r3, #4
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e067      	b.n	8004e38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d6e:	d041      	beq.n	8004df4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d70:	f7fd fd40 	bl	80027f4 <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d302      	bcc.n	8004d86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d136      	bne.n	8004df4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	0c1b      	lsrs	r3, r3, #16
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d10c      	bne.n	8004daa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	43da      	mvns	r2, r3
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	bf14      	ite	ne
 8004da2:	2301      	movne	r3, #1
 8004da4:	2300      	moveq	r3, #0
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	e00b      	b.n	8004dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	43da      	mvns	r2, r3
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	4013      	ands	r3, r2
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	bf14      	ite	ne
 8004dbc:	2301      	movne	r3, #1
 8004dbe:	2300      	moveq	r3, #0
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d016      	beq.n	8004df4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2220      	movs	r2, #32
 8004dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004de0:	f043 0220 	orr.w	r2, r3, #32
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e021      	b.n	8004e38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	0c1b      	lsrs	r3, r3, #16
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d10c      	bne.n	8004e18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	695b      	ldr	r3, [r3, #20]
 8004e04:	43da      	mvns	r2, r3
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	4013      	ands	r3, r2
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	bf14      	ite	ne
 8004e10:	2301      	movne	r3, #1
 8004e12:	2300      	moveq	r3, #0
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	e00b      	b.n	8004e30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	43da      	mvns	r2, r3
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	4013      	ands	r3, r2
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	bf14      	ite	ne
 8004e2a:	2301      	movne	r3, #1
 8004e2c:	2300      	moveq	r3, #0
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	f47f af6d 	bne.w	8004d10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3710      	adds	r7, #16
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	60b9      	str	r1, [r7, #8]
 8004e4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e4c:	e034      	b.n	8004eb8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e4e:	68f8      	ldr	r0, [r7, #12]
 8004e50:	f000 f8e3 	bl	800501a <I2C_IsAcknowledgeFailed>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d001      	beq.n	8004e5e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e034      	b.n	8004ec8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e64:	d028      	beq.n	8004eb8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e66:	f7fd fcc5 	bl	80027f4 <HAL_GetTick>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	68ba      	ldr	r2, [r7, #8]
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d302      	bcc.n	8004e7c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d11d      	bne.n	8004eb8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e86:	2b80      	cmp	r3, #128	@ 0x80
 8004e88:	d016      	beq.n	8004eb8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2220      	movs	r2, #32
 8004e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea4:	f043 0220 	orr.w	r2, r3, #32
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e007      	b.n	8004ec8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ec2:	2b80      	cmp	r3, #128	@ 0x80
 8004ec4:	d1c3      	bne.n	8004e4e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3710      	adds	r7, #16
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004edc:	e034      	b.n	8004f48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ede:	68f8      	ldr	r0, [r7, #12]
 8004ee0:	f000 f89b 	bl	800501a <I2C_IsAcknowledgeFailed>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d001      	beq.n	8004eee <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e034      	b.n	8004f58 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef4:	d028      	beq.n	8004f48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ef6:	f7fd fc7d 	bl	80027f4 <HAL_GetTick>
 8004efa:	4602      	mov	r2, r0
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	68ba      	ldr	r2, [r7, #8]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d302      	bcc.n	8004f0c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d11d      	bne.n	8004f48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	695b      	ldr	r3, [r3, #20]
 8004f12:	f003 0304 	and.w	r3, r3, #4
 8004f16:	2b04      	cmp	r3, #4
 8004f18:	d016      	beq.n	8004f48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2220      	movs	r2, #32
 8004f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f34:	f043 0220 	orr.w	r2, r3, #32
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e007      	b.n	8004f58 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	695b      	ldr	r3, [r3, #20]
 8004f4e:	f003 0304 	and.w	r3, r3, #4
 8004f52:	2b04      	cmp	r3, #4
 8004f54:	d1c3      	bne.n	8004ede <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3710      	adds	r7, #16
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f6c:	e049      	b.n	8005002 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	695b      	ldr	r3, [r3, #20]
 8004f74:	f003 0310 	and.w	r3, r3, #16
 8004f78:	2b10      	cmp	r3, #16
 8004f7a:	d119      	bne.n	8004fb0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f06f 0210 	mvn.w	r2, #16
 8004f84:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2220      	movs	r2, #32
 8004f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e030      	b.n	8005012 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fb0:	f7fd fc20 	bl	80027f4 <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	68ba      	ldr	r2, [r7, #8]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d302      	bcc.n	8004fc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d11d      	bne.n	8005002 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	695b      	ldr	r3, [r3, #20]
 8004fcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fd0:	2b40      	cmp	r3, #64	@ 0x40
 8004fd2:	d016      	beq.n	8005002 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2220      	movs	r2, #32
 8004fde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fee:	f043 0220 	orr.w	r2, r3, #32
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e007      	b.n	8005012 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	695b      	ldr	r3, [r3, #20]
 8005008:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800500c:	2b40      	cmp	r3, #64	@ 0x40
 800500e:	d1ae      	bne.n	8004f6e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3710      	adds	r7, #16
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}

0800501a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800501a:	b480      	push	{r7}
 800501c:	b083      	sub	sp, #12
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	695b      	ldr	r3, [r3, #20]
 8005028:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800502c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005030:	d11b      	bne.n	800506a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800503a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2220      	movs	r2, #32
 8005046:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005056:	f043 0204 	orr.w	r2, r3, #4
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e000      	b.n	800506c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800506a:	2300      	movs	r3, #0
}
 800506c:	4618      	mov	r0, r3
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b086      	sub	sp, #24
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d101      	bne.n	800508a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e267      	b.n	800555a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0301 	and.w	r3, r3, #1
 8005092:	2b00      	cmp	r3, #0
 8005094:	d075      	beq.n	8005182 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005096:	4b88      	ldr	r3, [pc, #544]	@ (80052b8 <HAL_RCC_OscConfig+0x240>)
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	f003 030c 	and.w	r3, r3, #12
 800509e:	2b04      	cmp	r3, #4
 80050a0:	d00c      	beq.n	80050bc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050a2:	4b85      	ldr	r3, [pc, #532]	@ (80052b8 <HAL_RCC_OscConfig+0x240>)
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80050aa:	2b08      	cmp	r3, #8
 80050ac:	d112      	bne.n	80050d4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050ae:	4b82      	ldr	r3, [pc, #520]	@ (80052b8 <HAL_RCC_OscConfig+0x240>)
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80050ba:	d10b      	bne.n	80050d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050bc:	4b7e      	ldr	r3, [pc, #504]	@ (80052b8 <HAL_RCC_OscConfig+0x240>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d05b      	beq.n	8005180 <HAL_RCC_OscConfig+0x108>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d157      	bne.n	8005180 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e242      	b.n	800555a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050dc:	d106      	bne.n	80050ec <HAL_RCC_OscConfig+0x74>
 80050de:	4b76      	ldr	r3, [pc, #472]	@ (80052b8 <HAL_RCC_OscConfig+0x240>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a75      	ldr	r2, [pc, #468]	@ (80052b8 <HAL_RCC_OscConfig+0x240>)
 80050e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050e8:	6013      	str	r3, [r2, #0]
 80050ea:	e01d      	b.n	8005128 <HAL_RCC_OscConfig+0xb0>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80050f4:	d10c      	bne.n	8005110 <HAL_RCC_OscConfig+0x98>
 80050f6:	4b70      	ldr	r3, [pc, #448]	@ (80052b8 <HAL_RCC_OscConfig+0x240>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a6f      	ldr	r2, [pc, #444]	@ (80052b8 <HAL_RCC_OscConfig+0x240>)
 80050fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005100:	6013      	str	r3, [r2, #0]
 8005102:	4b6d      	ldr	r3, [pc, #436]	@ (80052b8 <HAL_RCC_OscConfig+0x240>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a6c      	ldr	r2, [pc, #432]	@ (80052b8 <HAL_RCC_OscConfig+0x240>)
 8005108:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800510c:	6013      	str	r3, [r2, #0]
 800510e:	e00b      	b.n	8005128 <HAL_RCC_OscConfig+0xb0>
 8005110:	4b69      	ldr	r3, [pc, #420]	@ (80052b8 <HAL_RCC_OscConfig+0x240>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a68      	ldr	r2, [pc, #416]	@ (80052b8 <HAL_RCC_OscConfig+0x240>)
 8005116:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800511a:	6013      	str	r3, [r2, #0]
 800511c:	4b66      	ldr	r3, [pc, #408]	@ (80052b8 <HAL_RCC_OscConfig+0x240>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a65      	ldr	r2, [pc, #404]	@ (80052b8 <HAL_RCC_OscConfig+0x240>)
 8005122:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005126:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d013      	beq.n	8005158 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005130:	f7fd fb60 	bl	80027f4 <HAL_GetTick>
 8005134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005136:	e008      	b.n	800514a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005138:	f7fd fb5c 	bl	80027f4 <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	2b64      	cmp	r3, #100	@ 0x64
 8005144:	d901      	bls.n	800514a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e207      	b.n	800555a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800514a:	4b5b      	ldr	r3, [pc, #364]	@ (80052b8 <HAL_RCC_OscConfig+0x240>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d0f0      	beq.n	8005138 <HAL_RCC_OscConfig+0xc0>
 8005156:	e014      	b.n	8005182 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005158:	f7fd fb4c 	bl	80027f4 <HAL_GetTick>
 800515c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800515e:	e008      	b.n	8005172 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005160:	f7fd fb48 	bl	80027f4 <HAL_GetTick>
 8005164:	4602      	mov	r2, r0
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	2b64      	cmp	r3, #100	@ 0x64
 800516c:	d901      	bls.n	8005172 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e1f3      	b.n	800555a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005172:	4b51      	ldr	r3, [pc, #324]	@ (80052b8 <HAL_RCC_OscConfig+0x240>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800517a:	2b00      	cmp	r3, #0
 800517c:	d1f0      	bne.n	8005160 <HAL_RCC_OscConfig+0xe8>
 800517e:	e000      	b.n	8005182 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005180:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0302 	and.w	r3, r3, #2
 800518a:	2b00      	cmp	r3, #0
 800518c:	d063      	beq.n	8005256 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800518e:	4b4a      	ldr	r3, [pc, #296]	@ (80052b8 <HAL_RCC_OscConfig+0x240>)
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	f003 030c 	and.w	r3, r3, #12
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00b      	beq.n	80051b2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800519a:	4b47      	ldr	r3, [pc, #284]	@ (80052b8 <HAL_RCC_OscConfig+0x240>)
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80051a2:	2b08      	cmp	r3, #8
 80051a4:	d11c      	bne.n	80051e0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051a6:	4b44      	ldr	r3, [pc, #272]	@ (80052b8 <HAL_RCC_OscConfig+0x240>)
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d116      	bne.n	80051e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051b2:	4b41      	ldr	r3, [pc, #260]	@ (80052b8 <HAL_RCC_OscConfig+0x240>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0302 	and.w	r3, r3, #2
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d005      	beq.n	80051ca <HAL_RCC_OscConfig+0x152>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d001      	beq.n	80051ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e1c7      	b.n	800555a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051ca:	4b3b      	ldr	r3, [pc, #236]	@ (80052b8 <HAL_RCC_OscConfig+0x240>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	00db      	lsls	r3, r3, #3
 80051d8:	4937      	ldr	r1, [pc, #220]	@ (80052b8 <HAL_RCC_OscConfig+0x240>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051de:	e03a      	b.n	8005256 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d020      	beq.n	800522a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051e8:	4b34      	ldr	r3, [pc, #208]	@ (80052bc <HAL_RCC_OscConfig+0x244>)
 80051ea:	2201      	movs	r2, #1
 80051ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ee:	f7fd fb01 	bl	80027f4 <HAL_GetTick>
 80051f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051f4:	e008      	b.n	8005208 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051f6:	f7fd fafd 	bl	80027f4 <HAL_GetTick>
 80051fa:	4602      	mov	r2, r0
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	2b02      	cmp	r3, #2
 8005202:	d901      	bls.n	8005208 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e1a8      	b.n	800555a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005208:	4b2b      	ldr	r3, [pc, #172]	@ (80052b8 <HAL_RCC_OscConfig+0x240>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 0302 	and.w	r3, r3, #2
 8005210:	2b00      	cmp	r3, #0
 8005212:	d0f0      	beq.n	80051f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005214:	4b28      	ldr	r3, [pc, #160]	@ (80052b8 <HAL_RCC_OscConfig+0x240>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	691b      	ldr	r3, [r3, #16]
 8005220:	00db      	lsls	r3, r3, #3
 8005222:	4925      	ldr	r1, [pc, #148]	@ (80052b8 <HAL_RCC_OscConfig+0x240>)
 8005224:	4313      	orrs	r3, r2
 8005226:	600b      	str	r3, [r1, #0]
 8005228:	e015      	b.n	8005256 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800522a:	4b24      	ldr	r3, [pc, #144]	@ (80052bc <HAL_RCC_OscConfig+0x244>)
 800522c:	2200      	movs	r2, #0
 800522e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005230:	f7fd fae0 	bl	80027f4 <HAL_GetTick>
 8005234:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005236:	e008      	b.n	800524a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005238:	f7fd fadc 	bl	80027f4 <HAL_GetTick>
 800523c:	4602      	mov	r2, r0
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	2b02      	cmp	r3, #2
 8005244:	d901      	bls.n	800524a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005246:	2303      	movs	r3, #3
 8005248:	e187      	b.n	800555a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800524a:	4b1b      	ldr	r3, [pc, #108]	@ (80052b8 <HAL_RCC_OscConfig+0x240>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 0302 	and.w	r3, r3, #2
 8005252:	2b00      	cmp	r3, #0
 8005254:	d1f0      	bne.n	8005238 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0308 	and.w	r3, r3, #8
 800525e:	2b00      	cmp	r3, #0
 8005260:	d036      	beq.n	80052d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d016      	beq.n	8005298 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800526a:	4b15      	ldr	r3, [pc, #84]	@ (80052c0 <HAL_RCC_OscConfig+0x248>)
 800526c:	2201      	movs	r2, #1
 800526e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005270:	f7fd fac0 	bl	80027f4 <HAL_GetTick>
 8005274:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005276:	e008      	b.n	800528a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005278:	f7fd fabc 	bl	80027f4 <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	2b02      	cmp	r3, #2
 8005284:	d901      	bls.n	800528a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e167      	b.n	800555a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800528a:	4b0b      	ldr	r3, [pc, #44]	@ (80052b8 <HAL_RCC_OscConfig+0x240>)
 800528c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800528e:	f003 0302 	and.w	r3, r3, #2
 8005292:	2b00      	cmp	r3, #0
 8005294:	d0f0      	beq.n	8005278 <HAL_RCC_OscConfig+0x200>
 8005296:	e01b      	b.n	80052d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005298:	4b09      	ldr	r3, [pc, #36]	@ (80052c0 <HAL_RCC_OscConfig+0x248>)
 800529a:	2200      	movs	r2, #0
 800529c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800529e:	f7fd faa9 	bl	80027f4 <HAL_GetTick>
 80052a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052a4:	e00e      	b.n	80052c4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052a6:	f7fd faa5 	bl	80027f4 <HAL_GetTick>
 80052aa:	4602      	mov	r2, r0
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	d907      	bls.n	80052c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80052b4:	2303      	movs	r3, #3
 80052b6:	e150      	b.n	800555a <HAL_RCC_OscConfig+0x4e2>
 80052b8:	40023800 	.word	0x40023800
 80052bc:	42470000 	.word	0x42470000
 80052c0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052c4:	4b88      	ldr	r3, [pc, #544]	@ (80054e8 <HAL_RCC_OscConfig+0x470>)
 80052c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052c8:	f003 0302 	and.w	r3, r3, #2
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d1ea      	bne.n	80052a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0304 	and.w	r3, r3, #4
 80052d8:	2b00      	cmp	r3, #0
 80052da:	f000 8097 	beq.w	800540c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052de:	2300      	movs	r3, #0
 80052e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052e2:	4b81      	ldr	r3, [pc, #516]	@ (80054e8 <HAL_RCC_OscConfig+0x470>)
 80052e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d10f      	bne.n	800530e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052ee:	2300      	movs	r3, #0
 80052f0:	60bb      	str	r3, [r7, #8]
 80052f2:	4b7d      	ldr	r3, [pc, #500]	@ (80054e8 <HAL_RCC_OscConfig+0x470>)
 80052f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052f6:	4a7c      	ldr	r2, [pc, #496]	@ (80054e8 <HAL_RCC_OscConfig+0x470>)
 80052f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80052fe:	4b7a      	ldr	r3, [pc, #488]	@ (80054e8 <HAL_RCC_OscConfig+0x470>)
 8005300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005302:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005306:	60bb      	str	r3, [r7, #8]
 8005308:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800530a:	2301      	movs	r3, #1
 800530c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800530e:	4b77      	ldr	r3, [pc, #476]	@ (80054ec <HAL_RCC_OscConfig+0x474>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005316:	2b00      	cmp	r3, #0
 8005318:	d118      	bne.n	800534c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800531a:	4b74      	ldr	r3, [pc, #464]	@ (80054ec <HAL_RCC_OscConfig+0x474>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a73      	ldr	r2, [pc, #460]	@ (80054ec <HAL_RCC_OscConfig+0x474>)
 8005320:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005324:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005326:	f7fd fa65 	bl	80027f4 <HAL_GetTick>
 800532a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800532c:	e008      	b.n	8005340 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800532e:	f7fd fa61 	bl	80027f4 <HAL_GetTick>
 8005332:	4602      	mov	r2, r0
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	2b02      	cmp	r3, #2
 800533a:	d901      	bls.n	8005340 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	e10c      	b.n	800555a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005340:	4b6a      	ldr	r3, [pc, #424]	@ (80054ec <HAL_RCC_OscConfig+0x474>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005348:	2b00      	cmp	r3, #0
 800534a:	d0f0      	beq.n	800532e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	2b01      	cmp	r3, #1
 8005352:	d106      	bne.n	8005362 <HAL_RCC_OscConfig+0x2ea>
 8005354:	4b64      	ldr	r3, [pc, #400]	@ (80054e8 <HAL_RCC_OscConfig+0x470>)
 8005356:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005358:	4a63      	ldr	r2, [pc, #396]	@ (80054e8 <HAL_RCC_OscConfig+0x470>)
 800535a:	f043 0301 	orr.w	r3, r3, #1
 800535e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005360:	e01c      	b.n	800539c <HAL_RCC_OscConfig+0x324>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	2b05      	cmp	r3, #5
 8005368:	d10c      	bne.n	8005384 <HAL_RCC_OscConfig+0x30c>
 800536a:	4b5f      	ldr	r3, [pc, #380]	@ (80054e8 <HAL_RCC_OscConfig+0x470>)
 800536c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800536e:	4a5e      	ldr	r2, [pc, #376]	@ (80054e8 <HAL_RCC_OscConfig+0x470>)
 8005370:	f043 0304 	orr.w	r3, r3, #4
 8005374:	6713      	str	r3, [r2, #112]	@ 0x70
 8005376:	4b5c      	ldr	r3, [pc, #368]	@ (80054e8 <HAL_RCC_OscConfig+0x470>)
 8005378:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800537a:	4a5b      	ldr	r2, [pc, #364]	@ (80054e8 <HAL_RCC_OscConfig+0x470>)
 800537c:	f043 0301 	orr.w	r3, r3, #1
 8005380:	6713      	str	r3, [r2, #112]	@ 0x70
 8005382:	e00b      	b.n	800539c <HAL_RCC_OscConfig+0x324>
 8005384:	4b58      	ldr	r3, [pc, #352]	@ (80054e8 <HAL_RCC_OscConfig+0x470>)
 8005386:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005388:	4a57      	ldr	r2, [pc, #348]	@ (80054e8 <HAL_RCC_OscConfig+0x470>)
 800538a:	f023 0301 	bic.w	r3, r3, #1
 800538e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005390:	4b55      	ldr	r3, [pc, #340]	@ (80054e8 <HAL_RCC_OscConfig+0x470>)
 8005392:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005394:	4a54      	ldr	r2, [pc, #336]	@ (80054e8 <HAL_RCC_OscConfig+0x470>)
 8005396:	f023 0304 	bic.w	r3, r3, #4
 800539a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d015      	beq.n	80053d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053a4:	f7fd fa26 	bl	80027f4 <HAL_GetTick>
 80053a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053aa:	e00a      	b.n	80053c2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053ac:	f7fd fa22 	bl	80027f4 <HAL_GetTick>
 80053b0:	4602      	mov	r2, r0
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d901      	bls.n	80053c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e0cb      	b.n	800555a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053c2:	4b49      	ldr	r3, [pc, #292]	@ (80054e8 <HAL_RCC_OscConfig+0x470>)
 80053c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053c6:	f003 0302 	and.w	r3, r3, #2
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d0ee      	beq.n	80053ac <HAL_RCC_OscConfig+0x334>
 80053ce:	e014      	b.n	80053fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053d0:	f7fd fa10 	bl	80027f4 <HAL_GetTick>
 80053d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053d6:	e00a      	b.n	80053ee <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053d8:	f7fd fa0c 	bl	80027f4 <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d901      	bls.n	80053ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e0b5      	b.n	800555a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053ee:	4b3e      	ldr	r3, [pc, #248]	@ (80054e8 <HAL_RCC_OscConfig+0x470>)
 80053f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053f2:	f003 0302 	and.w	r3, r3, #2
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d1ee      	bne.n	80053d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80053fa:	7dfb      	ldrb	r3, [r7, #23]
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d105      	bne.n	800540c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005400:	4b39      	ldr	r3, [pc, #228]	@ (80054e8 <HAL_RCC_OscConfig+0x470>)
 8005402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005404:	4a38      	ldr	r2, [pc, #224]	@ (80054e8 <HAL_RCC_OscConfig+0x470>)
 8005406:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800540a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	699b      	ldr	r3, [r3, #24]
 8005410:	2b00      	cmp	r3, #0
 8005412:	f000 80a1 	beq.w	8005558 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005416:	4b34      	ldr	r3, [pc, #208]	@ (80054e8 <HAL_RCC_OscConfig+0x470>)
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	f003 030c 	and.w	r3, r3, #12
 800541e:	2b08      	cmp	r3, #8
 8005420:	d05c      	beq.n	80054dc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	699b      	ldr	r3, [r3, #24]
 8005426:	2b02      	cmp	r3, #2
 8005428:	d141      	bne.n	80054ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800542a:	4b31      	ldr	r3, [pc, #196]	@ (80054f0 <HAL_RCC_OscConfig+0x478>)
 800542c:	2200      	movs	r2, #0
 800542e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005430:	f7fd f9e0 	bl	80027f4 <HAL_GetTick>
 8005434:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005436:	e008      	b.n	800544a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005438:	f7fd f9dc 	bl	80027f4 <HAL_GetTick>
 800543c:	4602      	mov	r2, r0
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	2b02      	cmp	r3, #2
 8005444:	d901      	bls.n	800544a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005446:	2303      	movs	r3, #3
 8005448:	e087      	b.n	800555a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800544a:	4b27      	ldr	r3, [pc, #156]	@ (80054e8 <HAL_RCC_OscConfig+0x470>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005452:	2b00      	cmp	r3, #0
 8005454:	d1f0      	bne.n	8005438 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	69da      	ldr	r2, [r3, #28]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a1b      	ldr	r3, [r3, #32]
 800545e:	431a      	orrs	r2, r3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005464:	019b      	lsls	r3, r3, #6
 8005466:	431a      	orrs	r2, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800546c:	085b      	lsrs	r3, r3, #1
 800546e:	3b01      	subs	r3, #1
 8005470:	041b      	lsls	r3, r3, #16
 8005472:	431a      	orrs	r2, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005478:	061b      	lsls	r3, r3, #24
 800547a:	491b      	ldr	r1, [pc, #108]	@ (80054e8 <HAL_RCC_OscConfig+0x470>)
 800547c:	4313      	orrs	r3, r2
 800547e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005480:	4b1b      	ldr	r3, [pc, #108]	@ (80054f0 <HAL_RCC_OscConfig+0x478>)
 8005482:	2201      	movs	r2, #1
 8005484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005486:	f7fd f9b5 	bl	80027f4 <HAL_GetTick>
 800548a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800548c:	e008      	b.n	80054a0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800548e:	f7fd f9b1 	bl	80027f4 <HAL_GetTick>
 8005492:	4602      	mov	r2, r0
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	2b02      	cmp	r3, #2
 800549a:	d901      	bls.n	80054a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800549c:	2303      	movs	r3, #3
 800549e:	e05c      	b.n	800555a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054a0:	4b11      	ldr	r3, [pc, #68]	@ (80054e8 <HAL_RCC_OscConfig+0x470>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d0f0      	beq.n	800548e <HAL_RCC_OscConfig+0x416>
 80054ac:	e054      	b.n	8005558 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054ae:	4b10      	ldr	r3, [pc, #64]	@ (80054f0 <HAL_RCC_OscConfig+0x478>)
 80054b0:	2200      	movs	r2, #0
 80054b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054b4:	f7fd f99e 	bl	80027f4 <HAL_GetTick>
 80054b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054ba:	e008      	b.n	80054ce <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054bc:	f7fd f99a 	bl	80027f4 <HAL_GetTick>
 80054c0:	4602      	mov	r2, r0
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d901      	bls.n	80054ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	e045      	b.n	800555a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054ce:	4b06      	ldr	r3, [pc, #24]	@ (80054e8 <HAL_RCC_OscConfig+0x470>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d1f0      	bne.n	80054bc <HAL_RCC_OscConfig+0x444>
 80054da:	e03d      	b.n	8005558 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	699b      	ldr	r3, [r3, #24]
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d107      	bne.n	80054f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e038      	b.n	800555a <HAL_RCC_OscConfig+0x4e2>
 80054e8:	40023800 	.word	0x40023800
 80054ec:	40007000 	.word	0x40007000
 80054f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80054f4:	4b1b      	ldr	r3, [pc, #108]	@ (8005564 <HAL_RCC_OscConfig+0x4ec>)
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	699b      	ldr	r3, [r3, #24]
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d028      	beq.n	8005554 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800550c:	429a      	cmp	r2, r3
 800550e:	d121      	bne.n	8005554 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800551a:	429a      	cmp	r2, r3
 800551c:	d11a      	bne.n	8005554 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800551e:	68fa      	ldr	r2, [r7, #12]
 8005520:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005524:	4013      	ands	r3, r2
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800552a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800552c:	4293      	cmp	r3, r2
 800552e:	d111      	bne.n	8005554 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800553a:	085b      	lsrs	r3, r3, #1
 800553c:	3b01      	subs	r3, #1
 800553e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005540:	429a      	cmp	r2, r3
 8005542:	d107      	bne.n	8005554 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800554e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005550:	429a      	cmp	r2, r3
 8005552:	d001      	beq.n	8005558 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	e000      	b.n	800555a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3718      	adds	r7, #24
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	40023800 	.word	0x40023800

08005568 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d101      	bne.n	800557c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e0cc      	b.n	8005716 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800557c:	4b68      	ldr	r3, [pc, #416]	@ (8005720 <HAL_RCC_ClockConfig+0x1b8>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 0307 	and.w	r3, r3, #7
 8005584:	683a      	ldr	r2, [r7, #0]
 8005586:	429a      	cmp	r2, r3
 8005588:	d90c      	bls.n	80055a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800558a:	4b65      	ldr	r3, [pc, #404]	@ (8005720 <HAL_RCC_ClockConfig+0x1b8>)
 800558c:	683a      	ldr	r2, [r7, #0]
 800558e:	b2d2      	uxtb	r2, r2
 8005590:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005592:	4b63      	ldr	r3, [pc, #396]	@ (8005720 <HAL_RCC_ClockConfig+0x1b8>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0307 	and.w	r3, r3, #7
 800559a:	683a      	ldr	r2, [r7, #0]
 800559c:	429a      	cmp	r2, r3
 800559e:	d001      	beq.n	80055a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e0b8      	b.n	8005716 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0302 	and.w	r3, r3, #2
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d020      	beq.n	80055f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 0304 	and.w	r3, r3, #4
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d005      	beq.n	80055c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055bc:	4b59      	ldr	r3, [pc, #356]	@ (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	4a58      	ldr	r2, [pc, #352]	@ (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 80055c2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80055c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 0308 	and.w	r3, r3, #8
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d005      	beq.n	80055e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055d4:	4b53      	ldr	r3, [pc, #332]	@ (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	4a52      	ldr	r2, [pc, #328]	@ (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 80055da:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80055de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055e0:	4b50      	ldr	r3, [pc, #320]	@ (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	494d      	ldr	r1, [pc, #308]	@ (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 80055ee:	4313      	orrs	r3, r2
 80055f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 0301 	and.w	r3, r3, #1
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d044      	beq.n	8005688 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	2b01      	cmp	r3, #1
 8005604:	d107      	bne.n	8005616 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005606:	4b47      	ldr	r3, [pc, #284]	@ (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800560e:	2b00      	cmp	r3, #0
 8005610:	d119      	bne.n	8005646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e07f      	b.n	8005716 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	2b02      	cmp	r3, #2
 800561c:	d003      	beq.n	8005626 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005622:	2b03      	cmp	r3, #3
 8005624:	d107      	bne.n	8005636 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005626:	4b3f      	ldr	r3, [pc, #252]	@ (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800562e:	2b00      	cmp	r3, #0
 8005630:	d109      	bne.n	8005646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e06f      	b.n	8005716 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005636:	4b3b      	ldr	r3, [pc, #236]	@ (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0302 	and.w	r3, r3, #2
 800563e:	2b00      	cmp	r3, #0
 8005640:	d101      	bne.n	8005646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e067      	b.n	8005716 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005646:	4b37      	ldr	r3, [pc, #220]	@ (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	f023 0203 	bic.w	r2, r3, #3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	4934      	ldr	r1, [pc, #208]	@ (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 8005654:	4313      	orrs	r3, r2
 8005656:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005658:	f7fd f8cc 	bl	80027f4 <HAL_GetTick>
 800565c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800565e:	e00a      	b.n	8005676 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005660:	f7fd f8c8 	bl	80027f4 <HAL_GetTick>
 8005664:	4602      	mov	r2, r0
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	1ad3      	subs	r3, r2, r3
 800566a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800566e:	4293      	cmp	r3, r2
 8005670:	d901      	bls.n	8005676 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	e04f      	b.n	8005716 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005676:	4b2b      	ldr	r3, [pc, #172]	@ (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	f003 020c 	and.w	r2, r3, #12
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	429a      	cmp	r2, r3
 8005686:	d1eb      	bne.n	8005660 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005688:	4b25      	ldr	r3, [pc, #148]	@ (8005720 <HAL_RCC_ClockConfig+0x1b8>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 0307 	and.w	r3, r3, #7
 8005690:	683a      	ldr	r2, [r7, #0]
 8005692:	429a      	cmp	r2, r3
 8005694:	d20c      	bcs.n	80056b0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005696:	4b22      	ldr	r3, [pc, #136]	@ (8005720 <HAL_RCC_ClockConfig+0x1b8>)
 8005698:	683a      	ldr	r2, [r7, #0]
 800569a:	b2d2      	uxtb	r2, r2
 800569c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800569e:	4b20      	ldr	r3, [pc, #128]	@ (8005720 <HAL_RCC_ClockConfig+0x1b8>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 0307 	and.w	r3, r3, #7
 80056a6:	683a      	ldr	r2, [r7, #0]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d001      	beq.n	80056b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e032      	b.n	8005716 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0304 	and.w	r3, r3, #4
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d008      	beq.n	80056ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056bc:	4b19      	ldr	r3, [pc, #100]	@ (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	4916      	ldr	r1, [pc, #88]	@ (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 80056ca:	4313      	orrs	r3, r2
 80056cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 0308 	and.w	r3, r3, #8
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d009      	beq.n	80056ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056da:	4b12      	ldr	r3, [pc, #72]	@ (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	00db      	lsls	r3, r3, #3
 80056e8:	490e      	ldr	r1, [pc, #56]	@ (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 80056ea:	4313      	orrs	r3, r2
 80056ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80056ee:	f000 f821 	bl	8005734 <HAL_RCC_GetSysClockFreq>
 80056f2:	4602      	mov	r2, r0
 80056f4:	4b0b      	ldr	r3, [pc, #44]	@ (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	091b      	lsrs	r3, r3, #4
 80056fa:	f003 030f 	and.w	r3, r3, #15
 80056fe:	490a      	ldr	r1, [pc, #40]	@ (8005728 <HAL_RCC_ClockConfig+0x1c0>)
 8005700:	5ccb      	ldrb	r3, [r1, r3]
 8005702:	fa22 f303 	lsr.w	r3, r2, r3
 8005706:	4a09      	ldr	r2, [pc, #36]	@ (800572c <HAL_RCC_ClockConfig+0x1c4>)
 8005708:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800570a:	4b09      	ldr	r3, [pc, #36]	@ (8005730 <HAL_RCC_ClockConfig+0x1c8>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4618      	mov	r0, r3
 8005710:	f7fc fe6e 	bl	80023f0 <HAL_InitTick>

  return HAL_OK;
 8005714:	2300      	movs	r3, #0
}
 8005716:	4618      	mov	r0, r3
 8005718:	3710      	adds	r7, #16
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	40023c00 	.word	0x40023c00
 8005724:	40023800 	.word	0x40023800
 8005728:	0800aee0 	.word	0x0800aee0
 800572c:	2000000c 	.word	0x2000000c
 8005730:	20000010 	.word	0x20000010

08005734 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005734:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005738:	b090      	sub	sp, #64	@ 0x40
 800573a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800573c:	2300      	movs	r3, #0
 800573e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005740:	2300      	movs	r3, #0
 8005742:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005744:	2300      	movs	r3, #0
 8005746:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005748:	2300      	movs	r3, #0
 800574a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800574c:	4b59      	ldr	r3, [pc, #356]	@ (80058b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	f003 030c 	and.w	r3, r3, #12
 8005754:	2b08      	cmp	r3, #8
 8005756:	d00d      	beq.n	8005774 <HAL_RCC_GetSysClockFreq+0x40>
 8005758:	2b08      	cmp	r3, #8
 800575a:	f200 80a1 	bhi.w	80058a0 <HAL_RCC_GetSysClockFreq+0x16c>
 800575e:	2b00      	cmp	r3, #0
 8005760:	d002      	beq.n	8005768 <HAL_RCC_GetSysClockFreq+0x34>
 8005762:	2b04      	cmp	r3, #4
 8005764:	d003      	beq.n	800576e <HAL_RCC_GetSysClockFreq+0x3a>
 8005766:	e09b      	b.n	80058a0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005768:	4b53      	ldr	r3, [pc, #332]	@ (80058b8 <HAL_RCC_GetSysClockFreq+0x184>)
 800576a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800576c:	e09b      	b.n	80058a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800576e:	4b53      	ldr	r3, [pc, #332]	@ (80058bc <HAL_RCC_GetSysClockFreq+0x188>)
 8005770:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005772:	e098      	b.n	80058a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005774:	4b4f      	ldr	r3, [pc, #316]	@ (80058b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800577c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800577e:	4b4d      	ldr	r3, [pc, #308]	@ (80058b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005786:	2b00      	cmp	r3, #0
 8005788:	d028      	beq.n	80057dc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800578a:	4b4a      	ldr	r3, [pc, #296]	@ (80058b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	099b      	lsrs	r3, r3, #6
 8005790:	2200      	movs	r2, #0
 8005792:	623b      	str	r3, [r7, #32]
 8005794:	627a      	str	r2, [r7, #36]	@ 0x24
 8005796:	6a3b      	ldr	r3, [r7, #32]
 8005798:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800579c:	2100      	movs	r1, #0
 800579e:	4b47      	ldr	r3, [pc, #284]	@ (80058bc <HAL_RCC_GetSysClockFreq+0x188>)
 80057a0:	fb03 f201 	mul.w	r2, r3, r1
 80057a4:	2300      	movs	r3, #0
 80057a6:	fb00 f303 	mul.w	r3, r0, r3
 80057aa:	4413      	add	r3, r2
 80057ac:	4a43      	ldr	r2, [pc, #268]	@ (80058bc <HAL_RCC_GetSysClockFreq+0x188>)
 80057ae:	fba0 1202 	umull	r1, r2, r0, r2
 80057b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80057b4:	460a      	mov	r2, r1
 80057b6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80057b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057ba:	4413      	add	r3, r2
 80057bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057c0:	2200      	movs	r2, #0
 80057c2:	61bb      	str	r3, [r7, #24]
 80057c4:	61fa      	str	r2, [r7, #28]
 80057c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057ca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80057ce:	f7fb fa3b 	bl	8000c48 <__aeabi_uldivmod>
 80057d2:	4602      	mov	r2, r0
 80057d4:	460b      	mov	r3, r1
 80057d6:	4613      	mov	r3, r2
 80057d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057da:	e053      	b.n	8005884 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057dc:	4b35      	ldr	r3, [pc, #212]	@ (80058b4 <HAL_RCC_GetSysClockFreq+0x180>)
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	099b      	lsrs	r3, r3, #6
 80057e2:	2200      	movs	r2, #0
 80057e4:	613b      	str	r3, [r7, #16]
 80057e6:	617a      	str	r2, [r7, #20]
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80057ee:	f04f 0b00 	mov.w	fp, #0
 80057f2:	4652      	mov	r2, sl
 80057f4:	465b      	mov	r3, fp
 80057f6:	f04f 0000 	mov.w	r0, #0
 80057fa:	f04f 0100 	mov.w	r1, #0
 80057fe:	0159      	lsls	r1, r3, #5
 8005800:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005804:	0150      	lsls	r0, r2, #5
 8005806:	4602      	mov	r2, r0
 8005808:	460b      	mov	r3, r1
 800580a:	ebb2 080a 	subs.w	r8, r2, sl
 800580e:	eb63 090b 	sbc.w	r9, r3, fp
 8005812:	f04f 0200 	mov.w	r2, #0
 8005816:	f04f 0300 	mov.w	r3, #0
 800581a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800581e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005822:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005826:	ebb2 0408 	subs.w	r4, r2, r8
 800582a:	eb63 0509 	sbc.w	r5, r3, r9
 800582e:	f04f 0200 	mov.w	r2, #0
 8005832:	f04f 0300 	mov.w	r3, #0
 8005836:	00eb      	lsls	r3, r5, #3
 8005838:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800583c:	00e2      	lsls	r2, r4, #3
 800583e:	4614      	mov	r4, r2
 8005840:	461d      	mov	r5, r3
 8005842:	eb14 030a 	adds.w	r3, r4, sl
 8005846:	603b      	str	r3, [r7, #0]
 8005848:	eb45 030b 	adc.w	r3, r5, fp
 800584c:	607b      	str	r3, [r7, #4]
 800584e:	f04f 0200 	mov.w	r2, #0
 8005852:	f04f 0300 	mov.w	r3, #0
 8005856:	e9d7 4500 	ldrd	r4, r5, [r7]
 800585a:	4629      	mov	r1, r5
 800585c:	028b      	lsls	r3, r1, #10
 800585e:	4621      	mov	r1, r4
 8005860:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005864:	4621      	mov	r1, r4
 8005866:	028a      	lsls	r2, r1, #10
 8005868:	4610      	mov	r0, r2
 800586a:	4619      	mov	r1, r3
 800586c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800586e:	2200      	movs	r2, #0
 8005870:	60bb      	str	r3, [r7, #8]
 8005872:	60fa      	str	r2, [r7, #12]
 8005874:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005878:	f7fb f9e6 	bl	8000c48 <__aeabi_uldivmod>
 800587c:	4602      	mov	r2, r0
 800587e:	460b      	mov	r3, r1
 8005880:	4613      	mov	r3, r2
 8005882:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005884:	4b0b      	ldr	r3, [pc, #44]	@ (80058b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	0c1b      	lsrs	r3, r3, #16
 800588a:	f003 0303 	and.w	r3, r3, #3
 800588e:	3301      	adds	r3, #1
 8005890:	005b      	lsls	r3, r3, #1
 8005892:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005894:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005898:	fbb2 f3f3 	udiv	r3, r2, r3
 800589c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800589e:	e002      	b.n	80058a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80058a0:	4b05      	ldr	r3, [pc, #20]	@ (80058b8 <HAL_RCC_GetSysClockFreq+0x184>)
 80058a2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80058a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80058a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3740      	adds	r7, #64	@ 0x40
 80058ac:	46bd      	mov	sp, r7
 80058ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058b2:	bf00      	nop
 80058b4:	40023800 	.word	0x40023800
 80058b8:	00f42400 	.word	0x00f42400
 80058bc:	017d7840 	.word	0x017d7840

080058c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058c0:	b480      	push	{r7}
 80058c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058c4:	4b03      	ldr	r3, [pc, #12]	@ (80058d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80058c6:	681b      	ldr	r3, [r3, #0]
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop
 80058d4:	2000000c 	.word	0x2000000c

080058d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80058dc:	f7ff fff0 	bl	80058c0 <HAL_RCC_GetHCLKFreq>
 80058e0:	4602      	mov	r2, r0
 80058e2:	4b05      	ldr	r3, [pc, #20]	@ (80058f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	0a9b      	lsrs	r3, r3, #10
 80058e8:	f003 0307 	and.w	r3, r3, #7
 80058ec:	4903      	ldr	r1, [pc, #12]	@ (80058fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80058ee:	5ccb      	ldrb	r3, [r1, r3]
 80058f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	40023800 	.word	0x40023800
 80058fc:	0800aef0 	.word	0x0800aef0

08005900 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005904:	f7ff ffdc 	bl	80058c0 <HAL_RCC_GetHCLKFreq>
 8005908:	4602      	mov	r2, r0
 800590a:	4b05      	ldr	r3, [pc, #20]	@ (8005920 <HAL_RCC_GetPCLK2Freq+0x20>)
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	0b5b      	lsrs	r3, r3, #13
 8005910:	f003 0307 	and.w	r3, r3, #7
 8005914:	4903      	ldr	r1, [pc, #12]	@ (8005924 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005916:	5ccb      	ldrb	r3, [r1, r3]
 8005918:	fa22 f303 	lsr.w	r3, r2, r3
}
 800591c:	4618      	mov	r0, r3
 800591e:	bd80      	pop	{r7, pc}
 8005920:	40023800 	.word	0x40023800
 8005924:	0800aef0 	.word	0x0800aef0

08005928 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005928:	b480      	push	{r7}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	220f      	movs	r2, #15
 8005936:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005938:	4b12      	ldr	r3, [pc, #72]	@ (8005984 <HAL_RCC_GetClockConfig+0x5c>)
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	f003 0203 	and.w	r2, r3, #3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005944:	4b0f      	ldr	r3, [pc, #60]	@ (8005984 <HAL_RCC_GetClockConfig+0x5c>)
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005950:	4b0c      	ldr	r3, [pc, #48]	@ (8005984 <HAL_RCC_GetClockConfig+0x5c>)
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800595c:	4b09      	ldr	r3, [pc, #36]	@ (8005984 <HAL_RCC_GetClockConfig+0x5c>)
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	08db      	lsrs	r3, r3, #3
 8005962:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800596a:	4b07      	ldr	r3, [pc, #28]	@ (8005988 <HAL_RCC_GetClockConfig+0x60>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0207 	and.w	r2, r3, #7
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	601a      	str	r2, [r3, #0]
}
 8005976:	bf00      	nop
 8005978:	370c      	adds	r7, #12
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	40023800 	.word	0x40023800
 8005988:	40023c00 	.word	0x40023c00

0800598c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b082      	sub	sp, #8
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d101      	bne.n	800599e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e07b      	b.n	8005a96 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d108      	bne.n	80059b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80059ae:	d009      	beq.n	80059c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	61da      	str	r2, [r3, #28]
 80059b6:	e005      	b.n	80059c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d106      	bne.n	80059e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f7fc fc6c 	bl	80022bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2202      	movs	r2, #2
 80059e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80059fa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005a0c:	431a      	orrs	r2, r3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a16:	431a      	orrs	r2, r3
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	691b      	ldr	r3, [r3, #16]
 8005a1c:	f003 0302 	and.w	r3, r3, #2
 8005a20:	431a      	orrs	r2, r3
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	695b      	ldr	r3, [r3, #20]
 8005a26:	f003 0301 	and.w	r3, r3, #1
 8005a2a:	431a      	orrs	r2, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	699b      	ldr	r3, [r3, #24]
 8005a30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a34:	431a      	orrs	r2, r3
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	69db      	ldr	r3, [r3, #28]
 8005a3a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005a3e:	431a      	orrs	r2, r3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a1b      	ldr	r3, [r3, #32]
 8005a44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a48:	ea42 0103 	orr.w	r1, r2, r3
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a50:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	430a      	orrs	r2, r1
 8005a5a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	699b      	ldr	r3, [r3, #24]
 8005a60:	0c1b      	lsrs	r3, r3, #16
 8005a62:	f003 0104 	and.w	r1, r3, #4
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a6a:	f003 0210 	and.w	r2, r3, #16
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	430a      	orrs	r2, r1
 8005a74:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	69da      	ldr	r2, [r3, #28]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a84:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3708      	adds	r7, #8
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}

08005a9e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a9e:	b580      	push	{r7, lr}
 8005aa0:	b088      	sub	sp, #32
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	60f8      	str	r0, [r7, #12]
 8005aa6:	60b9      	str	r1, [r7, #8]
 8005aa8:	603b      	str	r3, [r7, #0]
 8005aaa:	4613      	mov	r3, r2
 8005aac:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005aae:	f7fc fea1 	bl	80027f4 <HAL_GetTick>
 8005ab2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005ab4:	88fb      	ldrh	r3, [r7, #6]
 8005ab6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d001      	beq.n	8005ac8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005ac4:	2302      	movs	r3, #2
 8005ac6:	e12a      	b.n	8005d1e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d002      	beq.n	8005ad4 <HAL_SPI_Transmit+0x36>
 8005ace:	88fb      	ldrh	r3, [r7, #6]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d101      	bne.n	8005ad8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e122      	b.n	8005d1e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d101      	bne.n	8005ae6 <HAL_SPI_Transmit+0x48>
 8005ae2:	2302      	movs	r3, #2
 8005ae4:	e11b      	b.n	8005d1e <HAL_SPI_Transmit+0x280>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2203      	movs	r2, #3
 8005af2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2200      	movs	r2, #0
 8005afa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	68ba      	ldr	r2, [r7, #8]
 8005b00:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	88fa      	ldrh	r2, [r7, #6]
 8005b06:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	88fa      	ldrh	r2, [r7, #6]
 8005b0c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2200      	movs	r2, #0
 8005b12:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2200      	movs	r2, #0
 8005b18:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2200      	movs	r2, #0
 8005b24:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b34:	d10f      	bne.n	8005b56 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b44:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b54:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b60:	2b40      	cmp	r3, #64	@ 0x40
 8005b62:	d007      	beq.n	8005b74 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b72:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b7c:	d152      	bne.n	8005c24 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d002      	beq.n	8005b8c <HAL_SPI_Transmit+0xee>
 8005b86:	8b7b      	ldrh	r3, [r7, #26]
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d145      	bne.n	8005c18 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b90:	881a      	ldrh	r2, [r3, #0]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b9c:	1c9a      	adds	r2, r3, #2
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	3b01      	subs	r3, #1
 8005baa:	b29a      	uxth	r2, r3
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005bb0:	e032      	b.n	8005c18 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	f003 0302 	and.w	r3, r3, #2
 8005bbc:	2b02      	cmp	r3, #2
 8005bbe:	d112      	bne.n	8005be6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bc4:	881a      	ldrh	r2, [r3, #0]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bd0:	1c9a      	adds	r2, r3, #2
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	3b01      	subs	r3, #1
 8005bde:	b29a      	uxth	r2, r3
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005be4:	e018      	b.n	8005c18 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005be6:	f7fc fe05 	bl	80027f4 <HAL_GetTick>
 8005bea:	4602      	mov	r2, r0
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	1ad3      	subs	r3, r2, r3
 8005bf0:	683a      	ldr	r2, [r7, #0]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d803      	bhi.n	8005bfe <HAL_SPI_Transmit+0x160>
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bfc:	d102      	bne.n	8005c04 <HAL_SPI_Transmit+0x166>
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d109      	bne.n	8005c18 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005c14:	2303      	movs	r3, #3
 8005c16:	e082      	b.n	8005d1e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d1c7      	bne.n	8005bb2 <HAL_SPI_Transmit+0x114>
 8005c22:	e053      	b.n	8005ccc <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d002      	beq.n	8005c32 <HAL_SPI_Transmit+0x194>
 8005c2c:	8b7b      	ldrh	r3, [r7, #26]
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d147      	bne.n	8005cc2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	330c      	adds	r3, #12
 8005c3c:	7812      	ldrb	r2, [r2, #0]
 8005c3e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c44:	1c5a      	adds	r2, r3, #1
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	3b01      	subs	r3, #1
 8005c52:	b29a      	uxth	r2, r3
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005c58:	e033      	b.n	8005cc2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	f003 0302 	and.w	r3, r3, #2
 8005c64:	2b02      	cmp	r3, #2
 8005c66:	d113      	bne.n	8005c90 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	330c      	adds	r3, #12
 8005c72:	7812      	ldrb	r2, [r2, #0]
 8005c74:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c7a:	1c5a      	adds	r2, r3, #1
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	3b01      	subs	r3, #1
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005c8e:	e018      	b.n	8005cc2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c90:	f7fc fdb0 	bl	80027f4 <HAL_GetTick>
 8005c94:	4602      	mov	r2, r0
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	1ad3      	subs	r3, r2, r3
 8005c9a:	683a      	ldr	r2, [r7, #0]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d803      	bhi.n	8005ca8 <HAL_SPI_Transmit+0x20a>
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ca6:	d102      	bne.n	8005cae <HAL_SPI_Transmit+0x210>
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d109      	bne.n	8005cc2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	e02d      	b.n	8005d1e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d1c6      	bne.n	8005c5a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ccc:	69fa      	ldr	r2, [r7, #28]
 8005cce:	6839      	ldr	r1, [r7, #0]
 8005cd0:	68f8      	ldr	r0, [r7, #12]
 8005cd2:	f000 fa03 	bl	80060dc <SPI_EndRxTxTransaction>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d002      	beq.n	8005ce2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2220      	movs	r2, #32
 8005ce0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d10a      	bne.n	8005d00 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005cea:	2300      	movs	r3, #0
 8005cec:	617b      	str	r3, [r7, #20]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	617b      	str	r3, [r7, #20]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	617b      	str	r3, [r7, #20]
 8005cfe:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d001      	beq.n	8005d1c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e000      	b.n	8005d1e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005d1c:	2300      	movs	r3, #0
  }
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3720      	adds	r7, #32
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
	...

08005d28 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	4613      	mov	r3, r2
 8005d34:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d001      	beq.n	8005d46 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8005d42:	2302      	movs	r3, #2
 8005d44:	e097      	b.n	8005e76 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d002      	beq.n	8005d52 <HAL_SPI_Transmit_DMA+0x2a>
 8005d4c:	88fb      	ldrh	r3, [r7, #6]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d101      	bne.n	8005d56 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e08f      	b.n	8005e76 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d101      	bne.n	8005d64 <HAL_SPI_Transmit_DMA+0x3c>
 8005d60:	2302      	movs	r3, #2
 8005d62:	e088      	b.n	8005e76 <HAL_SPI_Transmit_DMA+0x14e>
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2203      	movs	r2, #3
 8005d70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2200      	movs	r2, #0
 8005d78:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	68ba      	ldr	r2, [r7, #8]
 8005d7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	88fa      	ldrh	r2, [r7, #6]
 8005d84:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	88fa      	ldrh	r2, [r7, #6]
 8005d8a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2200      	movs	r2, #0
 8005d96:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2200      	movs	r2, #0
 8005da2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2200      	movs	r2, #0
 8005da8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005db2:	d10f      	bne.n	8005dd4 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005dc2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005dd2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005dd8:	4a29      	ldr	r2, [pc, #164]	@ (8005e80 <HAL_SPI_Transmit_DMA+0x158>)
 8005dda:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005de0:	4a28      	ldr	r2, [pc, #160]	@ (8005e84 <HAL_SPI_Transmit_DMA+0x15c>)
 8005de2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005de8:	4a27      	ldr	r2, [pc, #156]	@ (8005e88 <HAL_SPI_Transmit_DMA+0x160>)
 8005dea:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005df0:	2200      	movs	r2, #0
 8005df2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dfc:	4619      	mov	r1, r3
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	330c      	adds	r3, #12
 8005e04:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e0a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005e0c:	f7fd fc66 	bl	80036dc <HAL_DMA_Start_IT>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d00b      	beq.n	8005e2e <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e1a:	f043 0210 	orr.w	r2, r3, #16
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2200      	movs	r2, #0
 8005e26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e023      	b.n	8005e76 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e38:	2b40      	cmp	r3, #64	@ 0x40
 8005e3a:	d007      	beq.n	8005e4c <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e4a:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	685a      	ldr	r2, [r3, #4]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f042 0220 	orr.w	r2, r2, #32
 8005e62:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	685a      	ldr	r2, [r3, #4]
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f042 0202 	orr.w	r2, r2, #2
 8005e72:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3710      	adds	r7, #16
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
 8005e7e:	bf00      	nop
 8005e80:	08005f71 	.word	0x08005f71
 8005e84:	08005ec9 	.word	0x08005ec9
 8005e88:	08005f8d 	.word	0x08005f8d

08005e8c <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8005e94:	bf00      	nop
 8005e96:	370c      	adds	r7, #12
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8005ea8:	bf00      	nop
 8005eaa:	370c      	adds	r7, #12
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005ebc:	bf00      	nop
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b086      	sub	sp, #24
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ed4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ed6:	f7fc fc8d 	bl	80027f4 <HAL_GetTick>
 8005eda:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ee6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005eea:	d03b      	beq.n	8005f64 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	685a      	ldr	r2, [r3, #4]
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f022 0220 	bic.w	r2, r2, #32
 8005efa:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	685a      	ldr	r2, [r3, #4]
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f022 0202 	bic.w	r2, r2, #2
 8005f0a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005f0c:	693a      	ldr	r2, [r7, #16]
 8005f0e:	2164      	movs	r1, #100	@ 0x64
 8005f10:	6978      	ldr	r0, [r7, #20]
 8005f12:	f000 f8e3 	bl	80060dc <SPI_EndRxTxTransaction>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d005      	beq.n	8005f28 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f20:	f043 0220 	orr.w	r2, r3, #32
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d10a      	bne.n	8005f46 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f30:	2300      	movs	r3, #0
 8005f32:	60fb      	str	r3, [r7, #12]
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	60fb      	str	r3, [r7, #12]
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	60fb      	str	r3, [r7, #12]
 8005f44:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d003      	beq.n	8005f64 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005f5c:	6978      	ldr	r0, [r7, #20]
 8005f5e:	f7ff ffa9 	bl	8005eb4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005f62:	e002      	b.n	8005f6a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8005f64:	6978      	ldr	r0, [r7, #20]
 8005f66:	f7ff ff91 	bl	8005e8c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005f6a:	3718      	adds	r7, #24
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b084      	sub	sp, #16
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f7c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8005f7e:	68f8      	ldr	r0, [r7, #12]
 8005f80:	f7ff ff8e 	bl	8005ea0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005f84:	bf00      	nop
 8005f86:	3710      	adds	r7, #16
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f98:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	685a      	ldr	r2, [r3, #4]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f022 0203 	bic.w	r2, r2, #3
 8005fa8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fae:	f043 0210 	orr.w	r2, r3, #16
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2201      	movs	r2, #1
 8005fba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005fbe:	68f8      	ldr	r0, [r7, #12]
 8005fc0:	f7ff ff78 	bl	8005eb4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005fc4:	bf00      	nop
 8005fc6:	3710      	adds	r7, #16
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b088      	sub	sp, #32
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	603b      	str	r3, [r7, #0]
 8005fd8:	4613      	mov	r3, r2
 8005fda:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005fdc:	f7fc fc0a 	bl	80027f4 <HAL_GetTick>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fe4:	1a9b      	subs	r3, r3, r2
 8005fe6:	683a      	ldr	r2, [r7, #0]
 8005fe8:	4413      	add	r3, r2
 8005fea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005fec:	f7fc fc02 	bl	80027f4 <HAL_GetTick>
 8005ff0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005ff2:	4b39      	ldr	r3, [pc, #228]	@ (80060d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	015b      	lsls	r3, r3, #5
 8005ff8:	0d1b      	lsrs	r3, r3, #20
 8005ffa:	69fa      	ldr	r2, [r7, #28]
 8005ffc:	fb02 f303 	mul.w	r3, r2, r3
 8006000:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006002:	e054      	b.n	80060ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800600a:	d050      	beq.n	80060ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800600c:	f7fc fbf2 	bl	80027f4 <HAL_GetTick>
 8006010:	4602      	mov	r2, r0
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	1ad3      	subs	r3, r2, r3
 8006016:	69fa      	ldr	r2, [r7, #28]
 8006018:	429a      	cmp	r2, r3
 800601a:	d902      	bls.n	8006022 <SPI_WaitFlagStateUntilTimeout+0x56>
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d13d      	bne.n	800609e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	685a      	ldr	r2, [r3, #4]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006030:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800603a:	d111      	bne.n	8006060 <SPI_WaitFlagStateUntilTimeout+0x94>
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006044:	d004      	beq.n	8006050 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800604e:	d107      	bne.n	8006060 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800605e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006064:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006068:	d10f      	bne.n	800608a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006078:	601a      	str	r2, [r3, #0]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006088:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2201      	movs	r2, #1
 800608e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2200      	movs	r2, #0
 8006096:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800609a:	2303      	movs	r3, #3
 800609c:	e017      	b.n	80060ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d101      	bne.n	80060a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80060a4:	2300      	movs	r3, #0
 80060a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	3b01      	subs	r3, #1
 80060ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	689a      	ldr	r2, [r3, #8]
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	4013      	ands	r3, r2
 80060b8:	68ba      	ldr	r2, [r7, #8]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	bf0c      	ite	eq
 80060be:	2301      	moveq	r3, #1
 80060c0:	2300      	movne	r3, #0
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	461a      	mov	r2, r3
 80060c6:	79fb      	ldrb	r3, [r7, #7]
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d19b      	bne.n	8006004 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80060cc:	2300      	movs	r3, #0
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3720      	adds	r7, #32
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	bf00      	nop
 80060d8:	2000000c 	.word	0x2000000c

080060dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b088      	sub	sp, #32
 80060e0:	af02      	add	r7, sp, #8
 80060e2:	60f8      	str	r0, [r7, #12]
 80060e4:	60b9      	str	r1, [r7, #8]
 80060e6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	9300      	str	r3, [sp, #0]
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	2201      	movs	r2, #1
 80060f0:	2102      	movs	r1, #2
 80060f2:	68f8      	ldr	r0, [r7, #12]
 80060f4:	f7ff ff6a 	bl	8005fcc <SPI_WaitFlagStateUntilTimeout>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d007      	beq.n	800610e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006102:	f043 0220 	orr.w	r2, r3, #32
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800610a:	2303      	movs	r3, #3
 800610c:	e032      	b.n	8006174 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800610e:	4b1b      	ldr	r3, [pc, #108]	@ (800617c <SPI_EndRxTxTransaction+0xa0>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a1b      	ldr	r2, [pc, #108]	@ (8006180 <SPI_EndRxTxTransaction+0xa4>)
 8006114:	fba2 2303 	umull	r2, r3, r2, r3
 8006118:	0d5b      	lsrs	r3, r3, #21
 800611a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800611e:	fb02 f303 	mul.w	r3, r2, r3
 8006122:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800612c:	d112      	bne.n	8006154 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	9300      	str	r3, [sp, #0]
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	2200      	movs	r2, #0
 8006136:	2180      	movs	r1, #128	@ 0x80
 8006138:	68f8      	ldr	r0, [r7, #12]
 800613a:	f7ff ff47 	bl	8005fcc <SPI_WaitFlagStateUntilTimeout>
 800613e:	4603      	mov	r3, r0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d016      	beq.n	8006172 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006148:	f043 0220 	orr.w	r2, r3, #32
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006150:	2303      	movs	r3, #3
 8006152:	e00f      	b.n	8006174 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d00a      	beq.n	8006170 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	3b01      	subs	r3, #1
 800615e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800616a:	2b80      	cmp	r3, #128	@ 0x80
 800616c:	d0f2      	beq.n	8006154 <SPI_EndRxTxTransaction+0x78>
 800616e:	e000      	b.n	8006172 <SPI_EndRxTxTransaction+0x96>
        break;
 8006170:	bf00      	nop
  }

  return HAL_OK;
 8006172:	2300      	movs	r3, #0
}
 8006174:	4618      	mov	r0, r3
 8006176:	3718      	adds	r7, #24
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}
 800617c:	2000000c 	.word	0x2000000c
 8006180:	165e9f81 	.word	0x165e9f81

08006184 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b082      	sub	sp, #8
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d101      	bne.n	8006196 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e041      	b.n	800621a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800619c:	b2db      	uxtb	r3, r3
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d106      	bne.n	80061b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 f839 	bl	8006222 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2202      	movs	r2, #2
 80061b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	3304      	adds	r3, #4
 80061c0:	4619      	mov	r1, r3
 80061c2:	4610      	mov	r0, r2
 80061c4:	f000 f9c0 	bl	8006548 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2201      	movs	r2, #1
 80061dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006218:	2300      	movs	r3, #0
}
 800621a:	4618      	mov	r0, r3
 800621c:	3708      	adds	r7, #8
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}

08006222 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006222:	b480      	push	{r7}
 8006224:	b083      	sub	sp, #12
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800622a:	bf00      	nop
 800622c:	370c      	adds	r7, #12
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr
	...

08006238 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006238:	b480      	push	{r7}
 800623a:	b085      	sub	sp, #20
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006246:	b2db      	uxtb	r3, r3
 8006248:	2b01      	cmp	r3, #1
 800624a:	d001      	beq.n	8006250 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	e04e      	b.n	80062ee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2202      	movs	r2, #2
 8006254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68da      	ldr	r2, [r3, #12]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f042 0201 	orr.w	r2, r2, #1
 8006266:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a23      	ldr	r2, [pc, #140]	@ (80062fc <HAL_TIM_Base_Start_IT+0xc4>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d022      	beq.n	80062b8 <HAL_TIM_Base_Start_IT+0x80>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800627a:	d01d      	beq.n	80062b8 <HAL_TIM_Base_Start_IT+0x80>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a1f      	ldr	r2, [pc, #124]	@ (8006300 <HAL_TIM_Base_Start_IT+0xc8>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d018      	beq.n	80062b8 <HAL_TIM_Base_Start_IT+0x80>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a1e      	ldr	r2, [pc, #120]	@ (8006304 <HAL_TIM_Base_Start_IT+0xcc>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d013      	beq.n	80062b8 <HAL_TIM_Base_Start_IT+0x80>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a1c      	ldr	r2, [pc, #112]	@ (8006308 <HAL_TIM_Base_Start_IT+0xd0>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d00e      	beq.n	80062b8 <HAL_TIM_Base_Start_IT+0x80>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a1b      	ldr	r2, [pc, #108]	@ (800630c <HAL_TIM_Base_Start_IT+0xd4>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d009      	beq.n	80062b8 <HAL_TIM_Base_Start_IT+0x80>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a19      	ldr	r2, [pc, #100]	@ (8006310 <HAL_TIM_Base_Start_IT+0xd8>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d004      	beq.n	80062b8 <HAL_TIM_Base_Start_IT+0x80>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a18      	ldr	r2, [pc, #96]	@ (8006314 <HAL_TIM_Base_Start_IT+0xdc>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d111      	bne.n	80062dc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	f003 0307 	and.w	r3, r3, #7
 80062c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2b06      	cmp	r3, #6
 80062c8:	d010      	beq.n	80062ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f042 0201 	orr.w	r2, r2, #1
 80062d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062da:	e007      	b.n	80062ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f042 0201 	orr.w	r2, r2, #1
 80062ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3714      	adds	r7, #20
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr
 80062fa:	bf00      	nop
 80062fc:	40010000 	.word	0x40010000
 8006300:	40000400 	.word	0x40000400
 8006304:	40000800 	.word	0x40000800
 8006308:	40000c00 	.word	0x40000c00
 800630c:	40010400 	.word	0x40010400
 8006310:	40014000 	.word	0x40014000
 8006314:	40001800 	.word	0x40001800

08006318 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	691b      	ldr	r3, [r3, #16]
 800632e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	f003 0302 	and.w	r3, r3, #2
 8006336:	2b00      	cmp	r3, #0
 8006338:	d020      	beq.n	800637c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f003 0302 	and.w	r3, r3, #2
 8006340:	2b00      	cmp	r3, #0
 8006342:	d01b      	beq.n	800637c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f06f 0202 	mvn.w	r2, #2
 800634c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2201      	movs	r2, #1
 8006352:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	699b      	ldr	r3, [r3, #24]
 800635a:	f003 0303 	and.w	r3, r3, #3
 800635e:	2b00      	cmp	r3, #0
 8006360:	d003      	beq.n	800636a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 f8d2 	bl	800650c <HAL_TIM_IC_CaptureCallback>
 8006368:	e005      	b.n	8006376 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 f8c4 	bl	80064f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f000 f8d5 	bl	8006520 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	f003 0304 	and.w	r3, r3, #4
 8006382:	2b00      	cmp	r3, #0
 8006384:	d020      	beq.n	80063c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f003 0304 	and.w	r3, r3, #4
 800638c:	2b00      	cmp	r3, #0
 800638e:	d01b      	beq.n	80063c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f06f 0204 	mvn.w	r2, #4
 8006398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2202      	movs	r2, #2
 800639e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	699b      	ldr	r3, [r3, #24]
 80063a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d003      	beq.n	80063b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 f8ac 	bl	800650c <HAL_TIM_IC_CaptureCallback>
 80063b4:	e005      	b.n	80063c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 f89e 	bl	80064f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f000 f8af 	bl	8006520 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	f003 0308 	and.w	r3, r3, #8
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d020      	beq.n	8006414 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f003 0308 	and.w	r3, r3, #8
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d01b      	beq.n	8006414 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f06f 0208 	mvn.w	r2, #8
 80063e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2204      	movs	r2, #4
 80063ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	69db      	ldr	r3, [r3, #28]
 80063f2:	f003 0303 	and.w	r3, r3, #3
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d003      	beq.n	8006402 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 f886 	bl	800650c <HAL_TIM_IC_CaptureCallback>
 8006400:	e005      	b.n	800640e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 f878 	bl	80064f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f000 f889 	bl	8006520 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	f003 0310 	and.w	r3, r3, #16
 800641a:	2b00      	cmp	r3, #0
 800641c:	d020      	beq.n	8006460 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f003 0310 	and.w	r3, r3, #16
 8006424:	2b00      	cmp	r3, #0
 8006426:	d01b      	beq.n	8006460 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f06f 0210 	mvn.w	r2, #16
 8006430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2208      	movs	r2, #8
 8006436:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	69db      	ldr	r3, [r3, #28]
 800643e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006442:	2b00      	cmp	r3, #0
 8006444:	d003      	beq.n	800644e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 f860 	bl	800650c <HAL_TIM_IC_CaptureCallback>
 800644c:	e005      	b.n	800645a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 f852 	bl	80064f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f000 f863 	bl	8006520 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	f003 0301 	and.w	r3, r3, #1
 8006466:	2b00      	cmp	r3, #0
 8006468:	d00c      	beq.n	8006484 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f003 0301 	and.w	r3, r3, #1
 8006470:	2b00      	cmp	r3, #0
 8006472:	d007      	beq.n	8006484 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f06f 0201 	mvn.w	r2, #1
 800647c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f7fb fa6e 	bl	8001960 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800648a:	2b00      	cmp	r3, #0
 800648c:	d00c      	beq.n	80064a8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006494:	2b00      	cmp	r3, #0
 8006496:	d007      	beq.n	80064a8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80064a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 f906 	bl	80066b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d00c      	beq.n	80064cc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d007      	beq.n	80064cc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80064c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 f834 	bl	8006534 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	f003 0320 	and.w	r3, r3, #32
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d00c      	beq.n	80064f0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f003 0320 	and.w	r3, r3, #32
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d007      	beq.n	80064f0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f06f 0220 	mvn.w	r2, #32
 80064e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 f8d8 	bl	80066a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80064f0:	bf00      	nop
 80064f2:	3710      	adds	r7, #16
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b083      	sub	sp, #12
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006500:	bf00      	nop
 8006502:	370c      	adds	r7, #12
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr

0800650c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800650c:	b480      	push	{r7}
 800650e:	b083      	sub	sp, #12
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006514:	bf00      	nop
 8006516:	370c      	adds	r7, #12
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006520:	b480      	push	{r7}
 8006522:	b083      	sub	sp, #12
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006528:	bf00      	nop
 800652a:	370c      	adds	r7, #12
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800653c:	bf00      	nop
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006548:	b480      	push	{r7}
 800654a:	b085      	sub	sp, #20
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4a46      	ldr	r2, [pc, #280]	@ (8006674 <TIM_Base_SetConfig+0x12c>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d013      	beq.n	8006588 <TIM_Base_SetConfig+0x40>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006566:	d00f      	beq.n	8006588 <TIM_Base_SetConfig+0x40>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	4a43      	ldr	r2, [pc, #268]	@ (8006678 <TIM_Base_SetConfig+0x130>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d00b      	beq.n	8006588 <TIM_Base_SetConfig+0x40>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	4a42      	ldr	r2, [pc, #264]	@ (800667c <TIM_Base_SetConfig+0x134>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d007      	beq.n	8006588 <TIM_Base_SetConfig+0x40>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	4a41      	ldr	r2, [pc, #260]	@ (8006680 <TIM_Base_SetConfig+0x138>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d003      	beq.n	8006588 <TIM_Base_SetConfig+0x40>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	4a40      	ldr	r2, [pc, #256]	@ (8006684 <TIM_Base_SetConfig+0x13c>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d108      	bne.n	800659a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800658e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	68fa      	ldr	r2, [r7, #12]
 8006596:	4313      	orrs	r3, r2
 8006598:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4a35      	ldr	r2, [pc, #212]	@ (8006674 <TIM_Base_SetConfig+0x12c>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d02b      	beq.n	80065fa <TIM_Base_SetConfig+0xb2>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065a8:	d027      	beq.n	80065fa <TIM_Base_SetConfig+0xb2>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	4a32      	ldr	r2, [pc, #200]	@ (8006678 <TIM_Base_SetConfig+0x130>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d023      	beq.n	80065fa <TIM_Base_SetConfig+0xb2>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4a31      	ldr	r2, [pc, #196]	@ (800667c <TIM_Base_SetConfig+0x134>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d01f      	beq.n	80065fa <TIM_Base_SetConfig+0xb2>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a30      	ldr	r2, [pc, #192]	@ (8006680 <TIM_Base_SetConfig+0x138>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d01b      	beq.n	80065fa <TIM_Base_SetConfig+0xb2>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4a2f      	ldr	r2, [pc, #188]	@ (8006684 <TIM_Base_SetConfig+0x13c>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d017      	beq.n	80065fa <TIM_Base_SetConfig+0xb2>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4a2e      	ldr	r2, [pc, #184]	@ (8006688 <TIM_Base_SetConfig+0x140>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d013      	beq.n	80065fa <TIM_Base_SetConfig+0xb2>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	4a2d      	ldr	r2, [pc, #180]	@ (800668c <TIM_Base_SetConfig+0x144>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d00f      	beq.n	80065fa <TIM_Base_SetConfig+0xb2>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4a2c      	ldr	r2, [pc, #176]	@ (8006690 <TIM_Base_SetConfig+0x148>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d00b      	beq.n	80065fa <TIM_Base_SetConfig+0xb2>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	4a2b      	ldr	r2, [pc, #172]	@ (8006694 <TIM_Base_SetConfig+0x14c>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d007      	beq.n	80065fa <TIM_Base_SetConfig+0xb2>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4a2a      	ldr	r2, [pc, #168]	@ (8006698 <TIM_Base_SetConfig+0x150>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d003      	beq.n	80065fa <TIM_Base_SetConfig+0xb2>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4a29      	ldr	r2, [pc, #164]	@ (800669c <TIM_Base_SetConfig+0x154>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d108      	bne.n	800660c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006600:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	68fa      	ldr	r2, [r7, #12]
 8006608:	4313      	orrs	r3, r2
 800660a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	695b      	ldr	r3, [r3, #20]
 8006616:	4313      	orrs	r3, r2
 8006618:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	689a      	ldr	r2, [r3, #8]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	4a10      	ldr	r2, [pc, #64]	@ (8006674 <TIM_Base_SetConfig+0x12c>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d003      	beq.n	8006640 <TIM_Base_SetConfig+0xf8>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	4a12      	ldr	r2, [pc, #72]	@ (8006684 <TIM_Base_SetConfig+0x13c>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d103      	bne.n	8006648 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	691a      	ldr	r2, [r3, #16]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2201      	movs	r2, #1
 800664c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	691b      	ldr	r3, [r3, #16]
 8006652:	f003 0301 	and.w	r3, r3, #1
 8006656:	2b01      	cmp	r3, #1
 8006658:	d105      	bne.n	8006666 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	691b      	ldr	r3, [r3, #16]
 800665e:	f023 0201 	bic.w	r2, r3, #1
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	611a      	str	r2, [r3, #16]
  }
}
 8006666:	bf00      	nop
 8006668:	3714      	adds	r7, #20
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr
 8006672:	bf00      	nop
 8006674:	40010000 	.word	0x40010000
 8006678:	40000400 	.word	0x40000400
 800667c:	40000800 	.word	0x40000800
 8006680:	40000c00 	.word	0x40000c00
 8006684:	40010400 	.word	0x40010400
 8006688:	40014000 	.word	0x40014000
 800668c:	40014400 	.word	0x40014400
 8006690:	40014800 	.word	0x40014800
 8006694:	40001800 	.word	0x40001800
 8006698:	40001c00 	.word	0x40001c00
 800669c:	40002000 	.word	0x40002000

080066a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b083      	sub	sp, #12
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80066a8:	bf00      	nop
 80066aa:	370c      	adds	r7, #12
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80066bc:	bf00      	nop
 80066be:	370c      	adds	r7, #12
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr

080066c8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b085      	sub	sp, #20
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	4603      	mov	r3, r0
 80066d0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80066d2:	2300      	movs	r3, #0
 80066d4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80066d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80066da:	2b84      	cmp	r3, #132	@ 0x84
 80066dc:	d005      	beq.n	80066ea <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80066de:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	4413      	add	r3, r2
 80066e6:	3303      	adds	r3, #3
 80066e8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80066ea:	68fb      	ldr	r3, [r7, #12]
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3714      	adds	r7, #20
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80066fc:	f000 fafc 	bl	8006cf8 <vTaskStartScheduler>
  
  return osOK;
 8006700:	2300      	movs	r3, #0
}
 8006702:	4618      	mov	r0, r3
 8006704:	bd80      	pop	{r7, pc}

08006706 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006706:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006708:	b089      	sub	sp, #36	@ 0x24
 800670a:	af04      	add	r7, sp, #16
 800670c:	6078      	str	r0, [r7, #4]
 800670e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	695b      	ldr	r3, [r3, #20]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d020      	beq.n	800675a <osThreadCreate+0x54>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	699b      	ldr	r3, [r3, #24]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d01c      	beq.n	800675a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	685c      	ldr	r4, [r3, #4]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	691e      	ldr	r6, [r3, #16]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006732:	4618      	mov	r0, r3
 8006734:	f7ff ffc8 	bl	80066c8 <makeFreeRtosPriority>
 8006738:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	695b      	ldr	r3, [r3, #20]
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006742:	9202      	str	r2, [sp, #8]
 8006744:	9301      	str	r3, [sp, #4]
 8006746:	9100      	str	r1, [sp, #0]
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	4632      	mov	r2, r6
 800674c:	4629      	mov	r1, r5
 800674e:	4620      	mov	r0, r4
 8006750:	f000 f8ed 	bl	800692e <xTaskCreateStatic>
 8006754:	4603      	mov	r3, r0
 8006756:	60fb      	str	r3, [r7, #12]
 8006758:	e01c      	b.n	8006794 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	685c      	ldr	r4, [r3, #4]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006766:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800676e:	4618      	mov	r0, r3
 8006770:	f7ff ffaa 	bl	80066c8 <makeFreeRtosPriority>
 8006774:	4602      	mov	r2, r0
 8006776:	f107 030c 	add.w	r3, r7, #12
 800677a:	9301      	str	r3, [sp, #4]
 800677c:	9200      	str	r2, [sp, #0]
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	4632      	mov	r2, r6
 8006782:	4629      	mov	r1, r5
 8006784:	4620      	mov	r0, r4
 8006786:	f000 f932 	bl	80069ee <xTaskCreate>
 800678a:	4603      	mov	r3, r0
 800678c:	2b01      	cmp	r3, #1
 800678e:	d001      	beq.n	8006794 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006790:	2300      	movs	r3, #0
 8006792:	e000      	b.n	8006796 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006794:	68fb      	ldr	r3, [r7, #12]
}
 8006796:	4618      	mov	r0, r3
 8006798:	3714      	adds	r7, #20
 800679a:	46bd      	mov	sp, r7
 800679c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800679e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800679e:	b580      	push	{r7, lr}
 80067a0:	b084      	sub	sp, #16
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d001      	beq.n	80067b4 <osDelay+0x16>
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	e000      	b.n	80067b6 <osDelay+0x18>
 80067b4:	2301      	movs	r3, #1
 80067b6:	4618      	mov	r0, r3
 80067b8:	f000 fa68 	bl	8006c8c <vTaskDelay>
  
  return osOK;
 80067bc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3710      	adds	r7, #16
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}

080067c6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80067c6:	b480      	push	{r7}
 80067c8:	b083      	sub	sp, #12
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f103 0208 	add.w	r2, r3, #8
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f04f 32ff 	mov.w	r2, #4294967295
 80067de:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f103 0208 	add.w	r2, r3, #8
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f103 0208 	add.w	r2, r3, #8
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80067fa:	bf00      	nop
 80067fc:	370c      	adds	r7, #12
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr

08006806 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006806:	b480      	push	{r7}
 8006808:	b083      	sub	sp, #12
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006814:	bf00      	nop
 8006816:	370c      	adds	r7, #12
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006820:	b480      	push	{r7}
 8006822:	b085      	sub	sp, #20
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	68fa      	ldr	r2, [r7, #12]
 8006834:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	689a      	ldr	r2, [r3, #8]
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	683a      	ldr	r2, [r7, #0]
 8006844:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	683a      	ldr	r2, [r7, #0]
 800684a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	1c5a      	adds	r2, r3, #1
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	601a      	str	r2, [r3, #0]
}
 800685c:	bf00      	nop
 800685e:	3714      	adds	r7, #20
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr

08006868 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006868:	b480      	push	{r7}
 800686a:	b085      	sub	sp, #20
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800687e:	d103      	bne.n	8006888 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	691b      	ldr	r3, [r3, #16]
 8006884:	60fb      	str	r3, [r7, #12]
 8006886:	e00c      	b.n	80068a2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	3308      	adds	r3, #8
 800688c:	60fb      	str	r3, [r7, #12]
 800688e:	e002      	b.n	8006896 <vListInsert+0x2e>
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	60fb      	str	r3, [r7, #12]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	68ba      	ldr	r2, [r7, #8]
 800689e:	429a      	cmp	r2, r3
 80068a0:	d2f6      	bcs.n	8006890 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	685a      	ldr	r2, [r3, #4]
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	683a      	ldr	r2, [r7, #0]
 80068b0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	68fa      	ldr	r2, [r7, #12]
 80068b6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	683a      	ldr	r2, [r7, #0]
 80068bc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	1c5a      	adds	r2, r3, #1
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	601a      	str	r2, [r3, #0]
}
 80068ce:	bf00      	nop
 80068d0:	3714      	adds	r7, #20
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr

080068da <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80068da:	b480      	push	{r7}
 80068dc:	b085      	sub	sp, #20
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	691b      	ldr	r3, [r3, #16]
 80068e6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	6892      	ldr	r2, [r2, #8]
 80068f0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	6852      	ldr	r2, [r2, #4]
 80068fa:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	429a      	cmp	r2, r3
 8006904:	d103      	bne.n	800690e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	689a      	ldr	r2, [r3, #8]
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2200      	movs	r2, #0
 8006912:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	1e5a      	subs	r2, r3, #1
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
}
 8006922:	4618      	mov	r0, r3
 8006924:	3714      	adds	r7, #20
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr

0800692e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800692e:	b580      	push	{r7, lr}
 8006930:	b08e      	sub	sp, #56	@ 0x38
 8006932:	af04      	add	r7, sp, #16
 8006934:	60f8      	str	r0, [r7, #12]
 8006936:	60b9      	str	r1, [r7, #8]
 8006938:	607a      	str	r2, [r7, #4]
 800693a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800693c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800693e:	2b00      	cmp	r3, #0
 8006940:	d10b      	bne.n	800695a <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006946:	f383 8811 	msr	BASEPRI, r3
 800694a:	f3bf 8f6f 	isb	sy
 800694e:	f3bf 8f4f 	dsb	sy
 8006952:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006954:	bf00      	nop
 8006956:	bf00      	nop
 8006958:	e7fd      	b.n	8006956 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800695a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800695c:	2b00      	cmp	r3, #0
 800695e:	d10b      	bne.n	8006978 <xTaskCreateStatic+0x4a>
	__asm volatile
 8006960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006964:	f383 8811 	msr	BASEPRI, r3
 8006968:	f3bf 8f6f 	isb	sy
 800696c:	f3bf 8f4f 	dsb	sy
 8006970:	61fb      	str	r3, [r7, #28]
}
 8006972:	bf00      	nop
 8006974:	bf00      	nop
 8006976:	e7fd      	b.n	8006974 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006978:	23a0      	movs	r3, #160	@ 0xa0
 800697a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	2ba0      	cmp	r3, #160	@ 0xa0
 8006980:	d00b      	beq.n	800699a <xTaskCreateStatic+0x6c>
	__asm volatile
 8006982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006986:	f383 8811 	msr	BASEPRI, r3
 800698a:	f3bf 8f6f 	isb	sy
 800698e:	f3bf 8f4f 	dsb	sy
 8006992:	61bb      	str	r3, [r7, #24]
}
 8006994:	bf00      	nop
 8006996:	bf00      	nop
 8006998:	e7fd      	b.n	8006996 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800699a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800699c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d01e      	beq.n	80069e0 <xTaskCreateStatic+0xb2>
 80069a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d01b      	beq.n	80069e0 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80069a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069aa:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80069ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80069b0:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80069b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069b4:	2202      	movs	r2, #2
 80069b6:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80069ba:	2300      	movs	r3, #0
 80069bc:	9303      	str	r3, [sp, #12]
 80069be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069c0:	9302      	str	r3, [sp, #8]
 80069c2:	f107 0314 	add.w	r3, r7, #20
 80069c6:	9301      	str	r3, [sp, #4]
 80069c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ca:	9300      	str	r3, [sp, #0]
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	68b9      	ldr	r1, [r7, #8]
 80069d2:	68f8      	ldr	r0, [r7, #12]
 80069d4:	f000 f850 	bl	8006a78 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80069d8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80069da:	f000 f8ed 	bl	8006bb8 <prvAddNewTaskToReadyList>
 80069de:	e001      	b.n	80069e4 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80069e0:	2300      	movs	r3, #0
 80069e2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80069e4:	697b      	ldr	r3, [r7, #20]
	}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3728      	adds	r7, #40	@ 0x28
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}

080069ee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80069ee:	b580      	push	{r7, lr}
 80069f0:	b08c      	sub	sp, #48	@ 0x30
 80069f2:	af04      	add	r7, sp, #16
 80069f4:	60f8      	str	r0, [r7, #12]
 80069f6:	60b9      	str	r1, [r7, #8]
 80069f8:	603b      	str	r3, [r7, #0]
 80069fa:	4613      	mov	r3, r2
 80069fc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80069fe:	88fb      	ldrh	r3, [r7, #6]
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	4618      	mov	r0, r3
 8006a04:	f000 ff00 	bl	8007808 <pvPortMalloc>
 8006a08:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d00e      	beq.n	8006a2e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006a10:	20a0      	movs	r0, #160	@ 0xa0
 8006a12:	f000 fef9 	bl	8007808 <pvPortMalloc>
 8006a16:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006a18:	69fb      	ldr	r3, [r7, #28]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d003      	beq.n	8006a26 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006a1e:	69fb      	ldr	r3, [r7, #28]
 8006a20:	697a      	ldr	r2, [r7, #20]
 8006a22:	631a      	str	r2, [r3, #48]	@ 0x30
 8006a24:	e005      	b.n	8006a32 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006a26:	6978      	ldr	r0, [r7, #20]
 8006a28:	f000 ffbc 	bl	80079a4 <vPortFree>
 8006a2c:	e001      	b.n	8006a32 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d017      	beq.n	8006a68 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006a38:	69fb      	ldr	r3, [r7, #28]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006a40:	88fa      	ldrh	r2, [r7, #6]
 8006a42:	2300      	movs	r3, #0
 8006a44:	9303      	str	r3, [sp, #12]
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	9302      	str	r3, [sp, #8]
 8006a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a4c:	9301      	str	r3, [sp, #4]
 8006a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a50:	9300      	str	r3, [sp, #0]
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	68b9      	ldr	r1, [r7, #8]
 8006a56:	68f8      	ldr	r0, [r7, #12]
 8006a58:	f000 f80e 	bl	8006a78 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a5c:	69f8      	ldr	r0, [r7, #28]
 8006a5e:	f000 f8ab 	bl	8006bb8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006a62:	2301      	movs	r3, #1
 8006a64:	61bb      	str	r3, [r7, #24]
 8006a66:	e002      	b.n	8006a6e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006a68:	f04f 33ff 	mov.w	r3, #4294967295
 8006a6c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006a6e:	69bb      	ldr	r3, [r7, #24]
	}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3720      	adds	r7, #32
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b088      	sub	sp, #32
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	60b9      	str	r1, [r7, #8]
 8006a82:	607a      	str	r2, [r7, #4]
 8006a84:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006a90:	3b01      	subs	r3, #1
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	4413      	add	r3, r2
 8006a96:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006a98:	69bb      	ldr	r3, [r7, #24]
 8006a9a:	f023 0307 	bic.w	r3, r3, #7
 8006a9e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006aa0:	69bb      	ldr	r3, [r7, #24]
 8006aa2:	f003 0307 	and.w	r3, r3, #7
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d00b      	beq.n	8006ac2 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8006aaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aae:	f383 8811 	msr	BASEPRI, r3
 8006ab2:	f3bf 8f6f 	isb	sy
 8006ab6:	f3bf 8f4f 	dsb	sy
 8006aba:	617b      	str	r3, [r7, #20]
}
 8006abc:	bf00      	nop
 8006abe:	bf00      	nop
 8006ac0:	e7fd      	b.n	8006abe <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d01f      	beq.n	8006b08 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006ac8:	2300      	movs	r3, #0
 8006aca:	61fb      	str	r3, [r7, #28]
 8006acc:	e012      	b.n	8006af4 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006ace:	68ba      	ldr	r2, [r7, #8]
 8006ad0:	69fb      	ldr	r3, [r7, #28]
 8006ad2:	4413      	add	r3, r2
 8006ad4:	7819      	ldrb	r1, [r3, #0]
 8006ad6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	4413      	add	r3, r2
 8006adc:	3334      	adds	r3, #52	@ 0x34
 8006ade:	460a      	mov	r2, r1
 8006ae0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006ae2:	68ba      	ldr	r2, [r7, #8]
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	4413      	add	r3, r2
 8006ae8:	781b      	ldrb	r3, [r3, #0]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d006      	beq.n	8006afc <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006aee:	69fb      	ldr	r3, [r7, #28]
 8006af0:	3301      	adds	r3, #1
 8006af2:	61fb      	str	r3, [r7, #28]
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	2b0f      	cmp	r3, #15
 8006af8:	d9e9      	bls.n	8006ace <prvInitialiseNewTask+0x56>
 8006afa:	e000      	b.n	8006afe <prvInitialiseNewTask+0x86>
			{
				break;
 8006afc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b00:	2200      	movs	r2, #0
 8006b02:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006b06:	e003      	b.n	8006b10 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b12:	2b06      	cmp	r3, #6
 8006b14:	d901      	bls.n	8006b1a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006b16:	2306      	movs	r3, #6
 8006b18:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b1e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b24:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b28:	2200      	movs	r2, #0
 8006b2a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b2e:	3304      	adds	r3, #4
 8006b30:	4618      	mov	r0, r3
 8006b32:	f7ff fe68 	bl	8006806 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b38:	3318      	adds	r3, #24
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f7ff fe63 	bl	8006806 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b44:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b48:	f1c3 0207 	rsb	r2, r3, #7
 8006b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b4e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b54:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b60:	2200      	movs	r2, #0
 8006b62:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b68:	334c      	adds	r3, #76	@ 0x4c
 8006b6a:	224c      	movs	r2, #76	@ 0x4c
 8006b6c:	2100      	movs	r1, #0
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f001 fd95 	bl	800869e <memset>
 8006b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b76:	4a0d      	ldr	r2, [pc, #52]	@ (8006bac <prvInitialiseNewTask+0x134>)
 8006b78:	651a      	str	r2, [r3, #80]	@ 0x50
 8006b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b7c:	4a0c      	ldr	r2, [pc, #48]	@ (8006bb0 <prvInitialiseNewTask+0x138>)
 8006b7e:	655a      	str	r2, [r3, #84]	@ 0x54
 8006b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b82:	4a0c      	ldr	r2, [pc, #48]	@ (8006bb4 <prvInitialiseNewTask+0x13c>)
 8006b84:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006b86:	683a      	ldr	r2, [r7, #0]
 8006b88:	68f9      	ldr	r1, [r7, #12]
 8006b8a:	69b8      	ldr	r0, [r7, #24]
 8006b8c:	f000 fc2a 	bl	80073e4 <pxPortInitialiseStack>
 8006b90:	4602      	mov	r2, r0
 8006b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b94:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006b96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d002      	beq.n	8006ba2 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ba0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ba2:	bf00      	nop
 8006ba4:	3720      	adds	r7, #32
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop
 8006bac:	20004e38 	.word	0x20004e38
 8006bb0:	20004ea0 	.word	0x20004ea0
 8006bb4:	20004f08 	.word	0x20004f08

08006bb8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b082      	sub	sp, #8
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006bc0:	f000 fd42 	bl	8007648 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006bc4:	4b2a      	ldr	r3, [pc, #168]	@ (8006c70 <prvAddNewTaskToReadyList+0xb8>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	3301      	adds	r3, #1
 8006bca:	4a29      	ldr	r2, [pc, #164]	@ (8006c70 <prvAddNewTaskToReadyList+0xb8>)
 8006bcc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006bce:	4b29      	ldr	r3, [pc, #164]	@ (8006c74 <prvAddNewTaskToReadyList+0xbc>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d109      	bne.n	8006bea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006bd6:	4a27      	ldr	r2, [pc, #156]	@ (8006c74 <prvAddNewTaskToReadyList+0xbc>)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006bdc:	4b24      	ldr	r3, [pc, #144]	@ (8006c70 <prvAddNewTaskToReadyList+0xb8>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d110      	bne.n	8006c06 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006be4:	f000 fad4 	bl	8007190 <prvInitialiseTaskLists>
 8006be8:	e00d      	b.n	8006c06 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006bea:	4b23      	ldr	r3, [pc, #140]	@ (8006c78 <prvAddNewTaskToReadyList+0xc0>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d109      	bne.n	8006c06 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006bf2:	4b20      	ldr	r3, [pc, #128]	@ (8006c74 <prvAddNewTaskToReadyList+0xbc>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d802      	bhi.n	8006c06 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006c00:	4a1c      	ldr	r2, [pc, #112]	@ (8006c74 <prvAddNewTaskToReadyList+0xbc>)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006c06:	4b1d      	ldr	r3, [pc, #116]	@ (8006c7c <prvAddNewTaskToReadyList+0xc4>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	4a1b      	ldr	r2, [pc, #108]	@ (8006c7c <prvAddNewTaskToReadyList+0xc4>)
 8006c0e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c14:	2201      	movs	r2, #1
 8006c16:	409a      	lsls	r2, r3
 8006c18:	4b19      	ldr	r3, [pc, #100]	@ (8006c80 <prvAddNewTaskToReadyList+0xc8>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	4a18      	ldr	r2, [pc, #96]	@ (8006c80 <prvAddNewTaskToReadyList+0xc8>)
 8006c20:	6013      	str	r3, [r2, #0]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c26:	4613      	mov	r3, r2
 8006c28:	009b      	lsls	r3, r3, #2
 8006c2a:	4413      	add	r3, r2
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	4a15      	ldr	r2, [pc, #84]	@ (8006c84 <prvAddNewTaskToReadyList+0xcc>)
 8006c30:	441a      	add	r2, r3
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	3304      	adds	r3, #4
 8006c36:	4619      	mov	r1, r3
 8006c38:	4610      	mov	r0, r2
 8006c3a:	f7ff fdf1 	bl	8006820 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006c3e:	f000 fd35 	bl	80076ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006c42:	4b0d      	ldr	r3, [pc, #52]	@ (8006c78 <prvAddNewTaskToReadyList+0xc0>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d00e      	beq.n	8006c68 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8006c74 <prvAddNewTaskToReadyList+0xbc>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d207      	bcs.n	8006c68 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006c58:	4b0b      	ldr	r3, [pc, #44]	@ (8006c88 <prvAddNewTaskToReadyList+0xd0>)
 8006c5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c5e:	601a      	str	r2, [r3, #0]
 8006c60:	f3bf 8f4f 	dsb	sy
 8006c64:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c68:	bf00      	nop
 8006c6a:	3708      	adds	r7, #8
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}
 8006c70:	200011e4 	.word	0x200011e4
 8006c74:	200010e4 	.word	0x200010e4
 8006c78:	200011f0 	.word	0x200011f0
 8006c7c:	20001200 	.word	0x20001200
 8006c80:	200011ec 	.word	0x200011ec
 8006c84:	200010e8 	.word	0x200010e8
 8006c88:	e000ed04 	.word	0xe000ed04

08006c8c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006c94:	2300      	movs	r3, #0
 8006c96:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d018      	beq.n	8006cd0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006c9e:	4b14      	ldr	r3, [pc, #80]	@ (8006cf0 <vTaskDelay+0x64>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d00b      	beq.n	8006cbe <vTaskDelay+0x32>
	__asm volatile
 8006ca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006caa:	f383 8811 	msr	BASEPRI, r3
 8006cae:	f3bf 8f6f 	isb	sy
 8006cb2:	f3bf 8f4f 	dsb	sy
 8006cb6:	60bb      	str	r3, [r7, #8]
}
 8006cb8:	bf00      	nop
 8006cba:	bf00      	nop
 8006cbc:	e7fd      	b.n	8006cba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006cbe:	f000 f885 	bl	8006dcc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006cc2:	2100      	movs	r1, #0
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f000 fb27 	bl	8007318 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006cca:	f000 f88d 	bl	8006de8 <xTaskResumeAll>
 8006cce:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d107      	bne.n	8006ce6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006cd6:	4b07      	ldr	r3, [pc, #28]	@ (8006cf4 <vTaskDelay+0x68>)
 8006cd8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cdc:	601a      	str	r2, [r3, #0]
 8006cde:	f3bf 8f4f 	dsb	sy
 8006ce2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006ce6:	bf00      	nop
 8006ce8:	3710      	adds	r7, #16
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	2000120c 	.word	0x2000120c
 8006cf4:	e000ed04 	.word	0xe000ed04

08006cf8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b08a      	sub	sp, #40	@ 0x28
 8006cfc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006d02:	2300      	movs	r3, #0
 8006d04:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006d06:	463a      	mov	r2, r7
 8006d08:	1d39      	adds	r1, r7, #4
 8006d0a:	f107 0308 	add.w	r3, r7, #8
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f7fa f912 	bl	8000f38 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006d14:	6839      	ldr	r1, [r7, #0]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	68ba      	ldr	r2, [r7, #8]
 8006d1a:	9202      	str	r2, [sp, #8]
 8006d1c:	9301      	str	r3, [sp, #4]
 8006d1e:	2300      	movs	r3, #0
 8006d20:	9300      	str	r3, [sp, #0]
 8006d22:	2300      	movs	r3, #0
 8006d24:	460a      	mov	r2, r1
 8006d26:	4921      	ldr	r1, [pc, #132]	@ (8006dac <vTaskStartScheduler+0xb4>)
 8006d28:	4821      	ldr	r0, [pc, #132]	@ (8006db0 <vTaskStartScheduler+0xb8>)
 8006d2a:	f7ff fe00 	bl	800692e <xTaskCreateStatic>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	4a20      	ldr	r2, [pc, #128]	@ (8006db4 <vTaskStartScheduler+0xbc>)
 8006d32:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006d34:	4b1f      	ldr	r3, [pc, #124]	@ (8006db4 <vTaskStartScheduler+0xbc>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d002      	beq.n	8006d42 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	617b      	str	r3, [r7, #20]
 8006d40:	e001      	b.n	8006d46 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006d42:	2300      	movs	r3, #0
 8006d44:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d11b      	bne.n	8006d84 <vTaskStartScheduler+0x8c>
	__asm volatile
 8006d4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d50:	f383 8811 	msr	BASEPRI, r3
 8006d54:	f3bf 8f6f 	isb	sy
 8006d58:	f3bf 8f4f 	dsb	sy
 8006d5c:	613b      	str	r3, [r7, #16]
}
 8006d5e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006d60:	4b15      	ldr	r3, [pc, #84]	@ (8006db8 <vTaskStartScheduler+0xc0>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	334c      	adds	r3, #76	@ 0x4c
 8006d66:	4a15      	ldr	r2, [pc, #84]	@ (8006dbc <vTaskStartScheduler+0xc4>)
 8006d68:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006d6a:	4b15      	ldr	r3, [pc, #84]	@ (8006dc0 <vTaskStartScheduler+0xc8>)
 8006d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8006d70:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006d72:	4b14      	ldr	r3, [pc, #80]	@ (8006dc4 <vTaskStartScheduler+0xcc>)
 8006d74:	2201      	movs	r2, #1
 8006d76:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006d78:	4b13      	ldr	r3, [pc, #76]	@ (8006dc8 <vTaskStartScheduler+0xd0>)
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006d7e:	f000 fbbf 	bl	8007500 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006d82:	e00f      	b.n	8006da4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d8a:	d10b      	bne.n	8006da4 <vTaskStartScheduler+0xac>
	__asm volatile
 8006d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d90:	f383 8811 	msr	BASEPRI, r3
 8006d94:	f3bf 8f6f 	isb	sy
 8006d98:	f3bf 8f4f 	dsb	sy
 8006d9c:	60fb      	str	r3, [r7, #12]
}
 8006d9e:	bf00      	nop
 8006da0:	bf00      	nop
 8006da2:	e7fd      	b.n	8006da0 <vTaskStartScheduler+0xa8>
}
 8006da4:	bf00      	nop
 8006da6:	3718      	adds	r7, #24
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}
 8006dac:	0800a76c 	.word	0x0800a76c
 8006db0:	08007161 	.word	0x08007161
 8006db4:	20001208 	.word	0x20001208
 8006db8:	200010e4 	.word	0x200010e4
 8006dbc:	20000028 	.word	0x20000028
 8006dc0:	20001204 	.word	0x20001204
 8006dc4:	200011f0 	.word	0x200011f0
 8006dc8:	200011e8 	.word	0x200011e8

08006dcc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006dcc:	b480      	push	{r7}
 8006dce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006dd0:	4b04      	ldr	r3, [pc, #16]	@ (8006de4 <vTaskSuspendAll+0x18>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	3301      	adds	r3, #1
 8006dd6:	4a03      	ldr	r2, [pc, #12]	@ (8006de4 <vTaskSuspendAll+0x18>)
 8006dd8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006dda:	bf00      	nop
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr
 8006de4:	2000120c 	.word	0x2000120c

08006de8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b084      	sub	sp, #16
 8006dec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006dee:	2300      	movs	r3, #0
 8006df0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006df2:	2300      	movs	r3, #0
 8006df4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006df6:	4b42      	ldr	r3, [pc, #264]	@ (8006f00 <xTaskResumeAll+0x118>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d10b      	bne.n	8006e16 <xTaskResumeAll+0x2e>
	__asm volatile
 8006dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e02:	f383 8811 	msr	BASEPRI, r3
 8006e06:	f3bf 8f6f 	isb	sy
 8006e0a:	f3bf 8f4f 	dsb	sy
 8006e0e:	603b      	str	r3, [r7, #0]
}
 8006e10:	bf00      	nop
 8006e12:	bf00      	nop
 8006e14:	e7fd      	b.n	8006e12 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006e16:	f000 fc17 	bl	8007648 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006e1a:	4b39      	ldr	r3, [pc, #228]	@ (8006f00 <xTaskResumeAll+0x118>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	3b01      	subs	r3, #1
 8006e20:	4a37      	ldr	r2, [pc, #220]	@ (8006f00 <xTaskResumeAll+0x118>)
 8006e22:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e24:	4b36      	ldr	r3, [pc, #216]	@ (8006f00 <xTaskResumeAll+0x118>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d161      	bne.n	8006ef0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006e2c:	4b35      	ldr	r3, [pc, #212]	@ (8006f04 <xTaskResumeAll+0x11c>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d05d      	beq.n	8006ef0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e34:	e02e      	b.n	8006e94 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e36:	4b34      	ldr	r3, [pc, #208]	@ (8006f08 <xTaskResumeAll+0x120>)
 8006e38:	68db      	ldr	r3, [r3, #12]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	3318      	adds	r3, #24
 8006e42:	4618      	mov	r0, r3
 8006e44:	f7ff fd49 	bl	80068da <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	3304      	adds	r3, #4
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f7ff fd44 	bl	80068da <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e56:	2201      	movs	r2, #1
 8006e58:	409a      	lsls	r2, r3
 8006e5a:	4b2c      	ldr	r3, [pc, #176]	@ (8006f0c <xTaskResumeAll+0x124>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	4a2a      	ldr	r2, [pc, #168]	@ (8006f0c <xTaskResumeAll+0x124>)
 8006e62:	6013      	str	r3, [r2, #0]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e68:	4613      	mov	r3, r2
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	4413      	add	r3, r2
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	4a27      	ldr	r2, [pc, #156]	@ (8006f10 <xTaskResumeAll+0x128>)
 8006e72:	441a      	add	r2, r3
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	3304      	adds	r3, #4
 8006e78:	4619      	mov	r1, r3
 8006e7a:	4610      	mov	r0, r2
 8006e7c:	f7ff fcd0 	bl	8006820 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e84:	4b23      	ldr	r3, [pc, #140]	@ (8006f14 <xTaskResumeAll+0x12c>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d302      	bcc.n	8006e94 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006e8e:	4b22      	ldr	r3, [pc, #136]	@ (8006f18 <xTaskResumeAll+0x130>)
 8006e90:	2201      	movs	r2, #1
 8006e92:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e94:	4b1c      	ldr	r3, [pc, #112]	@ (8006f08 <xTaskResumeAll+0x120>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d1cc      	bne.n	8006e36 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d001      	beq.n	8006ea6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006ea2:	f000 fa19 	bl	80072d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006ea6:	4b1d      	ldr	r3, [pc, #116]	@ (8006f1c <xTaskResumeAll+0x134>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d010      	beq.n	8006ed4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006eb2:	f000 f837 	bl	8006f24 <xTaskIncrementTick>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d002      	beq.n	8006ec2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006ebc:	4b16      	ldr	r3, [pc, #88]	@ (8006f18 <xTaskResumeAll+0x130>)
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	3b01      	subs	r3, #1
 8006ec6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d1f1      	bne.n	8006eb2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006ece:	4b13      	ldr	r3, [pc, #76]	@ (8006f1c <xTaskResumeAll+0x134>)
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006ed4:	4b10      	ldr	r3, [pc, #64]	@ (8006f18 <xTaskResumeAll+0x130>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d009      	beq.n	8006ef0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006edc:	2301      	movs	r3, #1
 8006ede:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006ee0:	4b0f      	ldr	r3, [pc, #60]	@ (8006f20 <xTaskResumeAll+0x138>)
 8006ee2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ee6:	601a      	str	r2, [r3, #0]
 8006ee8:	f3bf 8f4f 	dsb	sy
 8006eec:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006ef0:	f000 fbdc 	bl	80076ac <vPortExitCritical>

	return xAlreadyYielded;
 8006ef4:	68bb      	ldr	r3, [r7, #8]
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3710      	adds	r7, #16
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	bf00      	nop
 8006f00:	2000120c 	.word	0x2000120c
 8006f04:	200011e4 	.word	0x200011e4
 8006f08:	200011a4 	.word	0x200011a4
 8006f0c:	200011ec 	.word	0x200011ec
 8006f10:	200010e8 	.word	0x200010e8
 8006f14:	200010e4 	.word	0x200010e4
 8006f18:	200011f8 	.word	0x200011f8
 8006f1c:	200011f4 	.word	0x200011f4
 8006f20:	e000ed04 	.word	0xe000ed04

08006f24 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b086      	sub	sp, #24
 8006f28:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f2e:	4b4f      	ldr	r3, [pc, #316]	@ (800706c <xTaskIncrementTick+0x148>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	f040 808f 	bne.w	8007056 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006f38:	4b4d      	ldr	r3, [pc, #308]	@ (8007070 <xTaskIncrementTick+0x14c>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006f40:	4a4b      	ldr	r2, [pc, #300]	@ (8007070 <xTaskIncrementTick+0x14c>)
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d121      	bne.n	8006f90 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006f4c:	4b49      	ldr	r3, [pc, #292]	@ (8007074 <xTaskIncrementTick+0x150>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d00b      	beq.n	8006f6e <xTaskIncrementTick+0x4a>
	__asm volatile
 8006f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f5a:	f383 8811 	msr	BASEPRI, r3
 8006f5e:	f3bf 8f6f 	isb	sy
 8006f62:	f3bf 8f4f 	dsb	sy
 8006f66:	603b      	str	r3, [r7, #0]
}
 8006f68:	bf00      	nop
 8006f6a:	bf00      	nop
 8006f6c:	e7fd      	b.n	8006f6a <xTaskIncrementTick+0x46>
 8006f6e:	4b41      	ldr	r3, [pc, #260]	@ (8007074 <xTaskIncrementTick+0x150>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	60fb      	str	r3, [r7, #12]
 8006f74:	4b40      	ldr	r3, [pc, #256]	@ (8007078 <xTaskIncrementTick+0x154>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a3e      	ldr	r2, [pc, #248]	@ (8007074 <xTaskIncrementTick+0x150>)
 8006f7a:	6013      	str	r3, [r2, #0]
 8006f7c:	4a3e      	ldr	r2, [pc, #248]	@ (8007078 <xTaskIncrementTick+0x154>)
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	6013      	str	r3, [r2, #0]
 8006f82:	4b3e      	ldr	r3, [pc, #248]	@ (800707c <xTaskIncrementTick+0x158>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	3301      	adds	r3, #1
 8006f88:	4a3c      	ldr	r2, [pc, #240]	@ (800707c <xTaskIncrementTick+0x158>)
 8006f8a:	6013      	str	r3, [r2, #0]
 8006f8c:	f000 f9a4 	bl	80072d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006f90:	4b3b      	ldr	r3, [pc, #236]	@ (8007080 <xTaskIncrementTick+0x15c>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	693a      	ldr	r2, [r7, #16]
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d348      	bcc.n	800702c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f9a:	4b36      	ldr	r3, [pc, #216]	@ (8007074 <xTaskIncrementTick+0x150>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d104      	bne.n	8006fae <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fa4:	4b36      	ldr	r3, [pc, #216]	@ (8007080 <xTaskIncrementTick+0x15c>)
 8006fa6:	f04f 32ff 	mov.w	r2, #4294967295
 8006faa:	601a      	str	r2, [r3, #0]
					break;
 8006fac:	e03e      	b.n	800702c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fae:	4b31      	ldr	r3, [pc, #196]	@ (8007074 <xTaskIncrementTick+0x150>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006fbe:	693a      	ldr	r2, [r7, #16]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d203      	bcs.n	8006fce <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006fc6:	4a2e      	ldr	r2, [pc, #184]	@ (8007080 <xTaskIncrementTick+0x15c>)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006fcc:	e02e      	b.n	800702c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	3304      	adds	r3, #4
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f7ff fc81 	bl	80068da <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d004      	beq.n	8006fea <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	3318      	adds	r3, #24
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f7ff fc78 	bl	80068da <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fee:	2201      	movs	r2, #1
 8006ff0:	409a      	lsls	r2, r3
 8006ff2:	4b24      	ldr	r3, [pc, #144]	@ (8007084 <xTaskIncrementTick+0x160>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	4a22      	ldr	r2, [pc, #136]	@ (8007084 <xTaskIncrementTick+0x160>)
 8006ffa:	6013      	str	r3, [r2, #0]
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007000:	4613      	mov	r3, r2
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	4413      	add	r3, r2
 8007006:	009b      	lsls	r3, r3, #2
 8007008:	4a1f      	ldr	r2, [pc, #124]	@ (8007088 <xTaskIncrementTick+0x164>)
 800700a:	441a      	add	r2, r3
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	3304      	adds	r3, #4
 8007010:	4619      	mov	r1, r3
 8007012:	4610      	mov	r0, r2
 8007014:	f7ff fc04 	bl	8006820 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800701c:	4b1b      	ldr	r3, [pc, #108]	@ (800708c <xTaskIncrementTick+0x168>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007022:	429a      	cmp	r2, r3
 8007024:	d3b9      	bcc.n	8006f9a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007026:	2301      	movs	r3, #1
 8007028:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800702a:	e7b6      	b.n	8006f9a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800702c:	4b17      	ldr	r3, [pc, #92]	@ (800708c <xTaskIncrementTick+0x168>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007032:	4915      	ldr	r1, [pc, #84]	@ (8007088 <xTaskIncrementTick+0x164>)
 8007034:	4613      	mov	r3, r2
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	4413      	add	r3, r2
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	440b      	add	r3, r1
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	2b01      	cmp	r3, #1
 8007042:	d901      	bls.n	8007048 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007044:	2301      	movs	r3, #1
 8007046:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007048:	4b11      	ldr	r3, [pc, #68]	@ (8007090 <xTaskIncrementTick+0x16c>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d007      	beq.n	8007060 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007050:	2301      	movs	r3, #1
 8007052:	617b      	str	r3, [r7, #20]
 8007054:	e004      	b.n	8007060 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007056:	4b0f      	ldr	r3, [pc, #60]	@ (8007094 <xTaskIncrementTick+0x170>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	3301      	adds	r3, #1
 800705c:	4a0d      	ldr	r2, [pc, #52]	@ (8007094 <xTaskIncrementTick+0x170>)
 800705e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007060:	697b      	ldr	r3, [r7, #20]
}
 8007062:	4618      	mov	r0, r3
 8007064:	3718      	adds	r7, #24
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}
 800706a:	bf00      	nop
 800706c:	2000120c 	.word	0x2000120c
 8007070:	200011e8 	.word	0x200011e8
 8007074:	2000119c 	.word	0x2000119c
 8007078:	200011a0 	.word	0x200011a0
 800707c:	200011fc 	.word	0x200011fc
 8007080:	20001204 	.word	0x20001204
 8007084:	200011ec 	.word	0x200011ec
 8007088:	200010e8 	.word	0x200010e8
 800708c:	200010e4 	.word	0x200010e4
 8007090:	200011f8 	.word	0x200011f8
 8007094:	200011f4 	.word	0x200011f4

08007098 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007098:	b480      	push	{r7}
 800709a:	b087      	sub	sp, #28
 800709c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800709e:	4b2a      	ldr	r3, [pc, #168]	@ (8007148 <vTaskSwitchContext+0xb0>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d003      	beq.n	80070ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80070a6:	4b29      	ldr	r3, [pc, #164]	@ (800714c <vTaskSwitchContext+0xb4>)
 80070a8:	2201      	movs	r2, #1
 80070aa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80070ac:	e045      	b.n	800713a <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80070ae:	4b27      	ldr	r3, [pc, #156]	@ (800714c <vTaskSwitchContext+0xb4>)
 80070b0:	2200      	movs	r2, #0
 80070b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070b4:	4b26      	ldr	r3, [pc, #152]	@ (8007150 <vTaskSwitchContext+0xb8>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	fab3 f383 	clz	r3, r3
 80070c0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80070c2:	7afb      	ldrb	r3, [r7, #11]
 80070c4:	f1c3 031f 	rsb	r3, r3, #31
 80070c8:	617b      	str	r3, [r7, #20]
 80070ca:	4922      	ldr	r1, [pc, #136]	@ (8007154 <vTaskSwitchContext+0xbc>)
 80070cc:	697a      	ldr	r2, [r7, #20]
 80070ce:	4613      	mov	r3, r2
 80070d0:	009b      	lsls	r3, r3, #2
 80070d2:	4413      	add	r3, r2
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	440b      	add	r3, r1
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d10b      	bne.n	80070f6 <vTaskSwitchContext+0x5e>
	__asm volatile
 80070de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070e2:	f383 8811 	msr	BASEPRI, r3
 80070e6:	f3bf 8f6f 	isb	sy
 80070ea:	f3bf 8f4f 	dsb	sy
 80070ee:	607b      	str	r3, [r7, #4]
}
 80070f0:	bf00      	nop
 80070f2:	bf00      	nop
 80070f4:	e7fd      	b.n	80070f2 <vTaskSwitchContext+0x5a>
 80070f6:	697a      	ldr	r2, [r7, #20]
 80070f8:	4613      	mov	r3, r2
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	4413      	add	r3, r2
 80070fe:	009b      	lsls	r3, r3, #2
 8007100:	4a14      	ldr	r2, [pc, #80]	@ (8007154 <vTaskSwitchContext+0xbc>)
 8007102:	4413      	add	r3, r2
 8007104:	613b      	str	r3, [r7, #16]
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	685a      	ldr	r2, [r3, #4]
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	605a      	str	r2, [r3, #4]
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	685a      	ldr	r2, [r3, #4]
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	3308      	adds	r3, #8
 8007118:	429a      	cmp	r2, r3
 800711a:	d104      	bne.n	8007126 <vTaskSwitchContext+0x8e>
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	685a      	ldr	r2, [r3, #4]
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	605a      	str	r2, [r3, #4]
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	4a0a      	ldr	r2, [pc, #40]	@ (8007158 <vTaskSwitchContext+0xc0>)
 800712e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007130:	4b09      	ldr	r3, [pc, #36]	@ (8007158 <vTaskSwitchContext+0xc0>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	334c      	adds	r3, #76	@ 0x4c
 8007136:	4a09      	ldr	r2, [pc, #36]	@ (800715c <vTaskSwitchContext+0xc4>)
 8007138:	6013      	str	r3, [r2, #0]
}
 800713a:	bf00      	nop
 800713c:	371c      	adds	r7, #28
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr
 8007146:	bf00      	nop
 8007148:	2000120c 	.word	0x2000120c
 800714c:	200011f8 	.word	0x200011f8
 8007150:	200011ec 	.word	0x200011ec
 8007154:	200010e8 	.word	0x200010e8
 8007158:	200010e4 	.word	0x200010e4
 800715c:	20000028 	.word	0x20000028

08007160 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b082      	sub	sp, #8
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007168:	f000 f852 	bl	8007210 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800716c:	4b06      	ldr	r3, [pc, #24]	@ (8007188 <prvIdleTask+0x28>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	2b01      	cmp	r3, #1
 8007172:	d9f9      	bls.n	8007168 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007174:	4b05      	ldr	r3, [pc, #20]	@ (800718c <prvIdleTask+0x2c>)
 8007176:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800717a:	601a      	str	r2, [r3, #0]
 800717c:	f3bf 8f4f 	dsb	sy
 8007180:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007184:	e7f0      	b.n	8007168 <prvIdleTask+0x8>
 8007186:	bf00      	nop
 8007188:	200010e8 	.word	0x200010e8
 800718c:	e000ed04 	.word	0xe000ed04

08007190 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b082      	sub	sp, #8
 8007194:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007196:	2300      	movs	r3, #0
 8007198:	607b      	str	r3, [r7, #4]
 800719a:	e00c      	b.n	80071b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	4613      	mov	r3, r2
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	4413      	add	r3, r2
 80071a4:	009b      	lsls	r3, r3, #2
 80071a6:	4a12      	ldr	r2, [pc, #72]	@ (80071f0 <prvInitialiseTaskLists+0x60>)
 80071a8:	4413      	add	r3, r2
 80071aa:	4618      	mov	r0, r3
 80071ac:	f7ff fb0b 	bl	80067c6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	3301      	adds	r3, #1
 80071b4:	607b      	str	r3, [r7, #4]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2b06      	cmp	r3, #6
 80071ba:	d9ef      	bls.n	800719c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80071bc:	480d      	ldr	r0, [pc, #52]	@ (80071f4 <prvInitialiseTaskLists+0x64>)
 80071be:	f7ff fb02 	bl	80067c6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80071c2:	480d      	ldr	r0, [pc, #52]	@ (80071f8 <prvInitialiseTaskLists+0x68>)
 80071c4:	f7ff faff 	bl	80067c6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80071c8:	480c      	ldr	r0, [pc, #48]	@ (80071fc <prvInitialiseTaskLists+0x6c>)
 80071ca:	f7ff fafc 	bl	80067c6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80071ce:	480c      	ldr	r0, [pc, #48]	@ (8007200 <prvInitialiseTaskLists+0x70>)
 80071d0:	f7ff faf9 	bl	80067c6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80071d4:	480b      	ldr	r0, [pc, #44]	@ (8007204 <prvInitialiseTaskLists+0x74>)
 80071d6:	f7ff faf6 	bl	80067c6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80071da:	4b0b      	ldr	r3, [pc, #44]	@ (8007208 <prvInitialiseTaskLists+0x78>)
 80071dc:	4a05      	ldr	r2, [pc, #20]	@ (80071f4 <prvInitialiseTaskLists+0x64>)
 80071de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80071e0:	4b0a      	ldr	r3, [pc, #40]	@ (800720c <prvInitialiseTaskLists+0x7c>)
 80071e2:	4a05      	ldr	r2, [pc, #20]	@ (80071f8 <prvInitialiseTaskLists+0x68>)
 80071e4:	601a      	str	r2, [r3, #0]
}
 80071e6:	bf00      	nop
 80071e8:	3708      	adds	r7, #8
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}
 80071ee:	bf00      	nop
 80071f0:	200010e8 	.word	0x200010e8
 80071f4:	20001174 	.word	0x20001174
 80071f8:	20001188 	.word	0x20001188
 80071fc:	200011a4 	.word	0x200011a4
 8007200:	200011b8 	.word	0x200011b8
 8007204:	200011d0 	.word	0x200011d0
 8007208:	2000119c 	.word	0x2000119c
 800720c:	200011a0 	.word	0x200011a0

08007210 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b082      	sub	sp, #8
 8007214:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007216:	e019      	b.n	800724c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007218:	f000 fa16 	bl	8007648 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800721c:	4b10      	ldr	r3, [pc, #64]	@ (8007260 <prvCheckTasksWaitingTermination+0x50>)
 800721e:	68db      	ldr	r3, [r3, #12]
 8007220:	68db      	ldr	r3, [r3, #12]
 8007222:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	3304      	adds	r3, #4
 8007228:	4618      	mov	r0, r3
 800722a:	f7ff fb56 	bl	80068da <uxListRemove>
				--uxCurrentNumberOfTasks;
 800722e:	4b0d      	ldr	r3, [pc, #52]	@ (8007264 <prvCheckTasksWaitingTermination+0x54>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	3b01      	subs	r3, #1
 8007234:	4a0b      	ldr	r2, [pc, #44]	@ (8007264 <prvCheckTasksWaitingTermination+0x54>)
 8007236:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007238:	4b0b      	ldr	r3, [pc, #44]	@ (8007268 <prvCheckTasksWaitingTermination+0x58>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	3b01      	subs	r3, #1
 800723e:	4a0a      	ldr	r2, [pc, #40]	@ (8007268 <prvCheckTasksWaitingTermination+0x58>)
 8007240:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007242:	f000 fa33 	bl	80076ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 f810 	bl	800726c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800724c:	4b06      	ldr	r3, [pc, #24]	@ (8007268 <prvCheckTasksWaitingTermination+0x58>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d1e1      	bne.n	8007218 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007254:	bf00      	nop
 8007256:	bf00      	nop
 8007258:	3708      	adds	r7, #8
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
 800725e:	bf00      	nop
 8007260:	200011b8 	.word	0x200011b8
 8007264:	200011e4 	.word	0x200011e4
 8007268:	200011cc 	.word	0x200011cc

0800726c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800726c:	b580      	push	{r7, lr}
 800726e:	b084      	sub	sp, #16
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	334c      	adds	r3, #76	@ 0x4c
 8007278:	4618      	mov	r0, r3
 800727a:	f001 fa2d 	bl	80086d8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007284:	2b00      	cmp	r3, #0
 8007286:	d108      	bne.n	800729a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800728c:	4618      	mov	r0, r3
 800728e:	f000 fb89 	bl	80079a4 <vPortFree>
				vPortFree( pxTCB );
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 fb86 	bl	80079a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007298:	e019      	b.n	80072ce <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d103      	bne.n	80072ac <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f000 fb7d 	bl	80079a4 <vPortFree>
	}
 80072aa:	e010      	b.n	80072ce <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80072b2:	2b02      	cmp	r3, #2
 80072b4:	d00b      	beq.n	80072ce <prvDeleteTCB+0x62>
	__asm volatile
 80072b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072ba:	f383 8811 	msr	BASEPRI, r3
 80072be:	f3bf 8f6f 	isb	sy
 80072c2:	f3bf 8f4f 	dsb	sy
 80072c6:	60fb      	str	r3, [r7, #12]
}
 80072c8:	bf00      	nop
 80072ca:	bf00      	nop
 80072cc:	e7fd      	b.n	80072ca <prvDeleteTCB+0x5e>
	}
 80072ce:	bf00      	nop
 80072d0:	3710      	adds	r7, #16
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}
	...

080072d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80072d8:	b480      	push	{r7}
 80072da:	b083      	sub	sp, #12
 80072dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80072de:	4b0c      	ldr	r3, [pc, #48]	@ (8007310 <prvResetNextTaskUnblockTime+0x38>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d104      	bne.n	80072f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80072e8:	4b0a      	ldr	r3, [pc, #40]	@ (8007314 <prvResetNextTaskUnblockTime+0x3c>)
 80072ea:	f04f 32ff 	mov.w	r2, #4294967295
 80072ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80072f0:	e008      	b.n	8007304 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072f2:	4b07      	ldr	r3, [pc, #28]	@ (8007310 <prvResetNextTaskUnblockTime+0x38>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	68db      	ldr	r3, [r3, #12]
 80072f8:	68db      	ldr	r3, [r3, #12]
 80072fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	4a04      	ldr	r2, [pc, #16]	@ (8007314 <prvResetNextTaskUnblockTime+0x3c>)
 8007302:	6013      	str	r3, [r2, #0]
}
 8007304:	bf00      	nop
 8007306:	370c      	adds	r7, #12
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr
 8007310:	2000119c 	.word	0x2000119c
 8007314:	20001204 	.word	0x20001204

08007318 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b084      	sub	sp, #16
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007322:	4b29      	ldr	r3, [pc, #164]	@ (80073c8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007328:	4b28      	ldr	r3, [pc, #160]	@ (80073cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	3304      	adds	r3, #4
 800732e:	4618      	mov	r0, r3
 8007330:	f7ff fad3 	bl	80068da <uxListRemove>
 8007334:	4603      	mov	r3, r0
 8007336:	2b00      	cmp	r3, #0
 8007338:	d10b      	bne.n	8007352 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800733a:	4b24      	ldr	r3, [pc, #144]	@ (80073cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007340:	2201      	movs	r2, #1
 8007342:	fa02 f303 	lsl.w	r3, r2, r3
 8007346:	43da      	mvns	r2, r3
 8007348:	4b21      	ldr	r3, [pc, #132]	@ (80073d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4013      	ands	r3, r2
 800734e:	4a20      	ldr	r2, [pc, #128]	@ (80073d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007350:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007358:	d10a      	bne.n	8007370 <prvAddCurrentTaskToDelayedList+0x58>
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d007      	beq.n	8007370 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007360:	4b1a      	ldr	r3, [pc, #104]	@ (80073cc <prvAddCurrentTaskToDelayedList+0xb4>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	3304      	adds	r3, #4
 8007366:	4619      	mov	r1, r3
 8007368:	481a      	ldr	r0, [pc, #104]	@ (80073d4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800736a:	f7ff fa59 	bl	8006820 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800736e:	e026      	b.n	80073be <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007370:	68fa      	ldr	r2, [r7, #12]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	4413      	add	r3, r2
 8007376:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007378:	4b14      	ldr	r3, [pc, #80]	@ (80073cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	68ba      	ldr	r2, [r7, #8]
 800737e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007380:	68ba      	ldr	r2, [r7, #8]
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	429a      	cmp	r2, r3
 8007386:	d209      	bcs.n	800739c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007388:	4b13      	ldr	r3, [pc, #76]	@ (80073d8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	4b0f      	ldr	r3, [pc, #60]	@ (80073cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	3304      	adds	r3, #4
 8007392:	4619      	mov	r1, r3
 8007394:	4610      	mov	r0, r2
 8007396:	f7ff fa67 	bl	8006868 <vListInsert>
}
 800739a:	e010      	b.n	80073be <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800739c:	4b0f      	ldr	r3, [pc, #60]	@ (80073dc <prvAddCurrentTaskToDelayedList+0xc4>)
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	4b0a      	ldr	r3, [pc, #40]	@ (80073cc <prvAddCurrentTaskToDelayedList+0xb4>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	3304      	adds	r3, #4
 80073a6:	4619      	mov	r1, r3
 80073a8:	4610      	mov	r0, r2
 80073aa:	f7ff fa5d 	bl	8006868 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80073ae:	4b0c      	ldr	r3, [pc, #48]	@ (80073e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	68ba      	ldr	r2, [r7, #8]
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d202      	bcs.n	80073be <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80073b8:	4a09      	ldr	r2, [pc, #36]	@ (80073e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	6013      	str	r3, [r2, #0]
}
 80073be:	bf00      	nop
 80073c0:	3710      	adds	r7, #16
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	bf00      	nop
 80073c8:	200011e8 	.word	0x200011e8
 80073cc:	200010e4 	.word	0x200010e4
 80073d0:	200011ec 	.word	0x200011ec
 80073d4:	200011d0 	.word	0x200011d0
 80073d8:	200011a0 	.word	0x200011a0
 80073dc:	2000119c 	.word	0x2000119c
 80073e0:	20001204 	.word	0x20001204

080073e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80073e4:	b480      	push	{r7}
 80073e6:	b085      	sub	sp, #20
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	60f8      	str	r0, [r7, #12]
 80073ec:	60b9      	str	r1, [r7, #8]
 80073ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	3b04      	subs	r3, #4
 80073f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80073fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	3b04      	subs	r3, #4
 8007402:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	f023 0201 	bic.w	r2, r3, #1
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	3b04      	subs	r3, #4
 8007412:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007414:	4a0c      	ldr	r2, [pc, #48]	@ (8007448 <pxPortInitialiseStack+0x64>)
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	3b14      	subs	r3, #20
 800741e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	3b04      	subs	r3, #4
 800742a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f06f 0202 	mvn.w	r2, #2
 8007432:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	3b20      	subs	r3, #32
 8007438:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800743a:	68fb      	ldr	r3, [r7, #12]
}
 800743c:	4618      	mov	r0, r3
 800743e:	3714      	adds	r7, #20
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr
 8007448:	0800744d 	.word	0x0800744d

0800744c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800744c:	b480      	push	{r7}
 800744e:	b085      	sub	sp, #20
 8007450:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007452:	2300      	movs	r3, #0
 8007454:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007456:	4b13      	ldr	r3, [pc, #76]	@ (80074a4 <prvTaskExitError+0x58>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800745e:	d00b      	beq.n	8007478 <prvTaskExitError+0x2c>
	__asm volatile
 8007460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007464:	f383 8811 	msr	BASEPRI, r3
 8007468:	f3bf 8f6f 	isb	sy
 800746c:	f3bf 8f4f 	dsb	sy
 8007470:	60fb      	str	r3, [r7, #12]
}
 8007472:	bf00      	nop
 8007474:	bf00      	nop
 8007476:	e7fd      	b.n	8007474 <prvTaskExitError+0x28>
	__asm volatile
 8007478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800747c:	f383 8811 	msr	BASEPRI, r3
 8007480:	f3bf 8f6f 	isb	sy
 8007484:	f3bf 8f4f 	dsb	sy
 8007488:	60bb      	str	r3, [r7, #8]
}
 800748a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800748c:	bf00      	nop
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d0fc      	beq.n	800748e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007494:	bf00      	nop
 8007496:	bf00      	nop
 8007498:	3714      	adds	r7, #20
 800749a:	46bd      	mov	sp, r7
 800749c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a0:	4770      	bx	lr
 80074a2:	bf00      	nop
 80074a4:	20000018 	.word	0x20000018
	...

080074b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80074b0:	4b07      	ldr	r3, [pc, #28]	@ (80074d0 <pxCurrentTCBConst2>)
 80074b2:	6819      	ldr	r1, [r3, #0]
 80074b4:	6808      	ldr	r0, [r1, #0]
 80074b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ba:	f380 8809 	msr	PSP, r0
 80074be:	f3bf 8f6f 	isb	sy
 80074c2:	f04f 0000 	mov.w	r0, #0
 80074c6:	f380 8811 	msr	BASEPRI, r0
 80074ca:	4770      	bx	lr
 80074cc:	f3af 8000 	nop.w

080074d0 <pxCurrentTCBConst2>:
 80074d0:	200010e4 	.word	0x200010e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80074d4:	bf00      	nop
 80074d6:	bf00      	nop

080074d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80074d8:	4808      	ldr	r0, [pc, #32]	@ (80074fc <prvPortStartFirstTask+0x24>)
 80074da:	6800      	ldr	r0, [r0, #0]
 80074dc:	6800      	ldr	r0, [r0, #0]
 80074de:	f380 8808 	msr	MSP, r0
 80074e2:	f04f 0000 	mov.w	r0, #0
 80074e6:	f380 8814 	msr	CONTROL, r0
 80074ea:	b662      	cpsie	i
 80074ec:	b661      	cpsie	f
 80074ee:	f3bf 8f4f 	dsb	sy
 80074f2:	f3bf 8f6f 	isb	sy
 80074f6:	df00      	svc	0
 80074f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80074fa:	bf00      	nop
 80074fc:	e000ed08 	.word	0xe000ed08

08007500 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b086      	sub	sp, #24
 8007504:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007506:	4b47      	ldr	r3, [pc, #284]	@ (8007624 <xPortStartScheduler+0x124>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a47      	ldr	r2, [pc, #284]	@ (8007628 <xPortStartScheduler+0x128>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d10b      	bne.n	8007528 <xPortStartScheduler+0x28>
	__asm volatile
 8007510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007514:	f383 8811 	msr	BASEPRI, r3
 8007518:	f3bf 8f6f 	isb	sy
 800751c:	f3bf 8f4f 	dsb	sy
 8007520:	613b      	str	r3, [r7, #16]
}
 8007522:	bf00      	nop
 8007524:	bf00      	nop
 8007526:	e7fd      	b.n	8007524 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007528:	4b3e      	ldr	r3, [pc, #248]	@ (8007624 <xPortStartScheduler+0x124>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a3f      	ldr	r2, [pc, #252]	@ (800762c <xPortStartScheduler+0x12c>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d10b      	bne.n	800754a <xPortStartScheduler+0x4a>
	__asm volatile
 8007532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007536:	f383 8811 	msr	BASEPRI, r3
 800753a:	f3bf 8f6f 	isb	sy
 800753e:	f3bf 8f4f 	dsb	sy
 8007542:	60fb      	str	r3, [r7, #12]
}
 8007544:	bf00      	nop
 8007546:	bf00      	nop
 8007548:	e7fd      	b.n	8007546 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800754a:	4b39      	ldr	r3, [pc, #228]	@ (8007630 <xPortStartScheduler+0x130>)
 800754c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	b2db      	uxtb	r3, r3
 8007554:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	22ff      	movs	r2, #255	@ 0xff
 800755a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	781b      	ldrb	r3, [r3, #0]
 8007560:	b2db      	uxtb	r3, r3
 8007562:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007564:	78fb      	ldrb	r3, [r7, #3]
 8007566:	b2db      	uxtb	r3, r3
 8007568:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800756c:	b2da      	uxtb	r2, r3
 800756e:	4b31      	ldr	r3, [pc, #196]	@ (8007634 <xPortStartScheduler+0x134>)
 8007570:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007572:	4b31      	ldr	r3, [pc, #196]	@ (8007638 <xPortStartScheduler+0x138>)
 8007574:	2207      	movs	r2, #7
 8007576:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007578:	e009      	b.n	800758e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800757a:	4b2f      	ldr	r3, [pc, #188]	@ (8007638 <xPortStartScheduler+0x138>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	3b01      	subs	r3, #1
 8007580:	4a2d      	ldr	r2, [pc, #180]	@ (8007638 <xPortStartScheduler+0x138>)
 8007582:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007584:	78fb      	ldrb	r3, [r7, #3]
 8007586:	b2db      	uxtb	r3, r3
 8007588:	005b      	lsls	r3, r3, #1
 800758a:	b2db      	uxtb	r3, r3
 800758c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800758e:	78fb      	ldrb	r3, [r7, #3]
 8007590:	b2db      	uxtb	r3, r3
 8007592:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007596:	2b80      	cmp	r3, #128	@ 0x80
 8007598:	d0ef      	beq.n	800757a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800759a:	4b27      	ldr	r3, [pc, #156]	@ (8007638 <xPortStartScheduler+0x138>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f1c3 0307 	rsb	r3, r3, #7
 80075a2:	2b04      	cmp	r3, #4
 80075a4:	d00b      	beq.n	80075be <xPortStartScheduler+0xbe>
	__asm volatile
 80075a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075aa:	f383 8811 	msr	BASEPRI, r3
 80075ae:	f3bf 8f6f 	isb	sy
 80075b2:	f3bf 8f4f 	dsb	sy
 80075b6:	60bb      	str	r3, [r7, #8]
}
 80075b8:	bf00      	nop
 80075ba:	bf00      	nop
 80075bc:	e7fd      	b.n	80075ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80075be:	4b1e      	ldr	r3, [pc, #120]	@ (8007638 <xPortStartScheduler+0x138>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	021b      	lsls	r3, r3, #8
 80075c4:	4a1c      	ldr	r2, [pc, #112]	@ (8007638 <xPortStartScheduler+0x138>)
 80075c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80075c8:	4b1b      	ldr	r3, [pc, #108]	@ (8007638 <xPortStartScheduler+0x138>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80075d0:	4a19      	ldr	r2, [pc, #100]	@ (8007638 <xPortStartScheduler+0x138>)
 80075d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	b2da      	uxtb	r2, r3
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80075dc:	4b17      	ldr	r3, [pc, #92]	@ (800763c <xPortStartScheduler+0x13c>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a16      	ldr	r2, [pc, #88]	@ (800763c <xPortStartScheduler+0x13c>)
 80075e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80075e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80075e8:	4b14      	ldr	r3, [pc, #80]	@ (800763c <xPortStartScheduler+0x13c>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a13      	ldr	r2, [pc, #76]	@ (800763c <xPortStartScheduler+0x13c>)
 80075ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80075f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80075f4:	f000 f8da 	bl	80077ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80075f8:	4b11      	ldr	r3, [pc, #68]	@ (8007640 <xPortStartScheduler+0x140>)
 80075fa:	2200      	movs	r2, #0
 80075fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80075fe:	f000 f8f9 	bl	80077f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007602:	4b10      	ldr	r3, [pc, #64]	@ (8007644 <xPortStartScheduler+0x144>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a0f      	ldr	r2, [pc, #60]	@ (8007644 <xPortStartScheduler+0x144>)
 8007608:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800760c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800760e:	f7ff ff63 	bl	80074d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007612:	f7ff fd41 	bl	8007098 <vTaskSwitchContext>
	prvTaskExitError();
 8007616:	f7ff ff19 	bl	800744c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800761a:	2300      	movs	r3, #0
}
 800761c:	4618      	mov	r0, r3
 800761e:	3718      	adds	r7, #24
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}
 8007624:	e000ed00 	.word	0xe000ed00
 8007628:	410fc271 	.word	0x410fc271
 800762c:	410fc270 	.word	0x410fc270
 8007630:	e000e400 	.word	0xe000e400
 8007634:	20001210 	.word	0x20001210
 8007638:	20001214 	.word	0x20001214
 800763c:	e000ed20 	.word	0xe000ed20
 8007640:	20000018 	.word	0x20000018
 8007644:	e000ef34 	.word	0xe000ef34

08007648 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007648:	b480      	push	{r7}
 800764a:	b083      	sub	sp, #12
 800764c:	af00      	add	r7, sp, #0
	__asm volatile
 800764e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007652:	f383 8811 	msr	BASEPRI, r3
 8007656:	f3bf 8f6f 	isb	sy
 800765a:	f3bf 8f4f 	dsb	sy
 800765e:	607b      	str	r3, [r7, #4]
}
 8007660:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007662:	4b10      	ldr	r3, [pc, #64]	@ (80076a4 <vPortEnterCritical+0x5c>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	3301      	adds	r3, #1
 8007668:	4a0e      	ldr	r2, [pc, #56]	@ (80076a4 <vPortEnterCritical+0x5c>)
 800766a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800766c:	4b0d      	ldr	r3, [pc, #52]	@ (80076a4 <vPortEnterCritical+0x5c>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	2b01      	cmp	r3, #1
 8007672:	d110      	bne.n	8007696 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007674:	4b0c      	ldr	r3, [pc, #48]	@ (80076a8 <vPortEnterCritical+0x60>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	b2db      	uxtb	r3, r3
 800767a:	2b00      	cmp	r3, #0
 800767c:	d00b      	beq.n	8007696 <vPortEnterCritical+0x4e>
	__asm volatile
 800767e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007682:	f383 8811 	msr	BASEPRI, r3
 8007686:	f3bf 8f6f 	isb	sy
 800768a:	f3bf 8f4f 	dsb	sy
 800768e:	603b      	str	r3, [r7, #0]
}
 8007690:	bf00      	nop
 8007692:	bf00      	nop
 8007694:	e7fd      	b.n	8007692 <vPortEnterCritical+0x4a>
	}
}
 8007696:	bf00      	nop
 8007698:	370c      	adds	r7, #12
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr
 80076a2:	bf00      	nop
 80076a4:	20000018 	.word	0x20000018
 80076a8:	e000ed04 	.word	0xe000ed04

080076ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80076ac:	b480      	push	{r7}
 80076ae:	b083      	sub	sp, #12
 80076b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80076b2:	4b12      	ldr	r3, [pc, #72]	@ (80076fc <vPortExitCritical+0x50>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d10b      	bne.n	80076d2 <vPortExitCritical+0x26>
	__asm volatile
 80076ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076be:	f383 8811 	msr	BASEPRI, r3
 80076c2:	f3bf 8f6f 	isb	sy
 80076c6:	f3bf 8f4f 	dsb	sy
 80076ca:	607b      	str	r3, [r7, #4]
}
 80076cc:	bf00      	nop
 80076ce:	bf00      	nop
 80076d0:	e7fd      	b.n	80076ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80076d2:	4b0a      	ldr	r3, [pc, #40]	@ (80076fc <vPortExitCritical+0x50>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	3b01      	subs	r3, #1
 80076d8:	4a08      	ldr	r2, [pc, #32]	@ (80076fc <vPortExitCritical+0x50>)
 80076da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80076dc:	4b07      	ldr	r3, [pc, #28]	@ (80076fc <vPortExitCritical+0x50>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d105      	bne.n	80076f0 <vPortExitCritical+0x44>
 80076e4:	2300      	movs	r3, #0
 80076e6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80076ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80076f0:	bf00      	nop
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr
 80076fc:	20000018 	.word	0x20000018

08007700 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007700:	f3ef 8009 	mrs	r0, PSP
 8007704:	f3bf 8f6f 	isb	sy
 8007708:	4b15      	ldr	r3, [pc, #84]	@ (8007760 <pxCurrentTCBConst>)
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	f01e 0f10 	tst.w	lr, #16
 8007710:	bf08      	it	eq
 8007712:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007716:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800771a:	6010      	str	r0, [r2, #0]
 800771c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007720:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007724:	f380 8811 	msr	BASEPRI, r0
 8007728:	f3bf 8f4f 	dsb	sy
 800772c:	f3bf 8f6f 	isb	sy
 8007730:	f7ff fcb2 	bl	8007098 <vTaskSwitchContext>
 8007734:	f04f 0000 	mov.w	r0, #0
 8007738:	f380 8811 	msr	BASEPRI, r0
 800773c:	bc09      	pop	{r0, r3}
 800773e:	6819      	ldr	r1, [r3, #0]
 8007740:	6808      	ldr	r0, [r1, #0]
 8007742:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007746:	f01e 0f10 	tst.w	lr, #16
 800774a:	bf08      	it	eq
 800774c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007750:	f380 8809 	msr	PSP, r0
 8007754:	f3bf 8f6f 	isb	sy
 8007758:	4770      	bx	lr
 800775a:	bf00      	nop
 800775c:	f3af 8000 	nop.w

08007760 <pxCurrentTCBConst>:
 8007760:	200010e4 	.word	0x200010e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007764:	bf00      	nop
 8007766:	bf00      	nop

08007768 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b082      	sub	sp, #8
 800776c:	af00      	add	r7, sp, #0
	__asm volatile
 800776e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007772:	f383 8811 	msr	BASEPRI, r3
 8007776:	f3bf 8f6f 	isb	sy
 800777a:	f3bf 8f4f 	dsb	sy
 800777e:	607b      	str	r3, [r7, #4]
}
 8007780:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007782:	f7ff fbcf 	bl	8006f24 <xTaskIncrementTick>
 8007786:	4603      	mov	r3, r0
 8007788:	2b00      	cmp	r3, #0
 800778a:	d003      	beq.n	8007794 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800778c:	4b06      	ldr	r3, [pc, #24]	@ (80077a8 <SysTick_Handler+0x40>)
 800778e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007792:	601a      	str	r2, [r3, #0]
 8007794:	2300      	movs	r3, #0
 8007796:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	f383 8811 	msr	BASEPRI, r3
}
 800779e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80077a0:	bf00      	nop
 80077a2:	3708      	adds	r7, #8
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}
 80077a8:	e000ed04 	.word	0xe000ed04

080077ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80077ac:	b480      	push	{r7}
 80077ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80077b0:	4b0b      	ldr	r3, [pc, #44]	@ (80077e0 <vPortSetupTimerInterrupt+0x34>)
 80077b2:	2200      	movs	r2, #0
 80077b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80077b6:	4b0b      	ldr	r3, [pc, #44]	@ (80077e4 <vPortSetupTimerInterrupt+0x38>)
 80077b8:	2200      	movs	r2, #0
 80077ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80077bc:	4b0a      	ldr	r3, [pc, #40]	@ (80077e8 <vPortSetupTimerInterrupt+0x3c>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a0a      	ldr	r2, [pc, #40]	@ (80077ec <vPortSetupTimerInterrupt+0x40>)
 80077c2:	fba2 2303 	umull	r2, r3, r2, r3
 80077c6:	099b      	lsrs	r3, r3, #6
 80077c8:	4a09      	ldr	r2, [pc, #36]	@ (80077f0 <vPortSetupTimerInterrupt+0x44>)
 80077ca:	3b01      	subs	r3, #1
 80077cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80077ce:	4b04      	ldr	r3, [pc, #16]	@ (80077e0 <vPortSetupTimerInterrupt+0x34>)
 80077d0:	2207      	movs	r2, #7
 80077d2:	601a      	str	r2, [r3, #0]
}
 80077d4:	bf00      	nop
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr
 80077de:	bf00      	nop
 80077e0:	e000e010 	.word	0xe000e010
 80077e4:	e000e018 	.word	0xe000e018
 80077e8:	2000000c 	.word	0x2000000c
 80077ec:	10624dd3 	.word	0x10624dd3
 80077f0:	e000e014 	.word	0xe000e014

080077f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80077f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007804 <vPortEnableVFP+0x10>
 80077f8:	6801      	ldr	r1, [r0, #0]
 80077fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80077fe:	6001      	str	r1, [r0, #0]
 8007800:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007802:	bf00      	nop
 8007804:	e000ed88 	.word	0xe000ed88

08007808 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b08a      	sub	sp, #40	@ 0x28
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007810:	2300      	movs	r3, #0
 8007812:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007814:	f7ff fada 	bl	8006dcc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007818:	4b5c      	ldr	r3, [pc, #368]	@ (800798c <pvPortMalloc+0x184>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d101      	bne.n	8007824 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007820:	f000 f924 	bl	8007a6c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007824:	4b5a      	ldr	r3, [pc, #360]	@ (8007990 <pvPortMalloc+0x188>)
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	4013      	ands	r3, r2
 800782c:	2b00      	cmp	r3, #0
 800782e:	f040 8095 	bne.w	800795c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d01e      	beq.n	8007876 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007838:	2208      	movs	r2, #8
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	4413      	add	r3, r2
 800783e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f003 0307 	and.w	r3, r3, #7
 8007846:	2b00      	cmp	r3, #0
 8007848:	d015      	beq.n	8007876 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f023 0307 	bic.w	r3, r3, #7
 8007850:	3308      	adds	r3, #8
 8007852:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f003 0307 	and.w	r3, r3, #7
 800785a:	2b00      	cmp	r3, #0
 800785c:	d00b      	beq.n	8007876 <pvPortMalloc+0x6e>
	__asm volatile
 800785e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007862:	f383 8811 	msr	BASEPRI, r3
 8007866:	f3bf 8f6f 	isb	sy
 800786a:	f3bf 8f4f 	dsb	sy
 800786e:	617b      	str	r3, [r7, #20]
}
 8007870:	bf00      	nop
 8007872:	bf00      	nop
 8007874:	e7fd      	b.n	8007872 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d06f      	beq.n	800795c <pvPortMalloc+0x154>
 800787c:	4b45      	ldr	r3, [pc, #276]	@ (8007994 <pvPortMalloc+0x18c>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	429a      	cmp	r2, r3
 8007884:	d86a      	bhi.n	800795c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007886:	4b44      	ldr	r3, [pc, #272]	@ (8007998 <pvPortMalloc+0x190>)
 8007888:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800788a:	4b43      	ldr	r3, [pc, #268]	@ (8007998 <pvPortMalloc+0x190>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007890:	e004      	b.n	800789c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007894:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800789c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	687a      	ldr	r2, [r7, #4]
 80078a2:	429a      	cmp	r2, r3
 80078a4:	d903      	bls.n	80078ae <pvPortMalloc+0xa6>
 80078a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d1f1      	bne.n	8007892 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80078ae:	4b37      	ldr	r3, [pc, #220]	@ (800798c <pvPortMalloc+0x184>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d051      	beq.n	800795c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80078b8:	6a3b      	ldr	r3, [r7, #32]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	2208      	movs	r2, #8
 80078be:	4413      	add	r3, r2
 80078c0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80078c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	6a3b      	ldr	r3, [r7, #32]
 80078c8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80078ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078cc:	685a      	ldr	r2, [r3, #4]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	1ad2      	subs	r2, r2, r3
 80078d2:	2308      	movs	r3, #8
 80078d4:	005b      	lsls	r3, r3, #1
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d920      	bls.n	800791c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80078da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	4413      	add	r3, r2
 80078e0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80078e2:	69bb      	ldr	r3, [r7, #24]
 80078e4:	f003 0307 	and.w	r3, r3, #7
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d00b      	beq.n	8007904 <pvPortMalloc+0xfc>
	__asm volatile
 80078ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078f0:	f383 8811 	msr	BASEPRI, r3
 80078f4:	f3bf 8f6f 	isb	sy
 80078f8:	f3bf 8f4f 	dsb	sy
 80078fc:	613b      	str	r3, [r7, #16]
}
 80078fe:	bf00      	nop
 8007900:	bf00      	nop
 8007902:	e7fd      	b.n	8007900 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007906:	685a      	ldr	r2, [r3, #4]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	1ad2      	subs	r2, r2, r3
 800790c:	69bb      	ldr	r3, [r7, #24]
 800790e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007916:	69b8      	ldr	r0, [r7, #24]
 8007918:	f000 f90a 	bl	8007b30 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800791c:	4b1d      	ldr	r3, [pc, #116]	@ (8007994 <pvPortMalloc+0x18c>)
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	1ad3      	subs	r3, r2, r3
 8007926:	4a1b      	ldr	r2, [pc, #108]	@ (8007994 <pvPortMalloc+0x18c>)
 8007928:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800792a:	4b1a      	ldr	r3, [pc, #104]	@ (8007994 <pvPortMalloc+0x18c>)
 800792c:	681a      	ldr	r2, [r3, #0]
 800792e:	4b1b      	ldr	r3, [pc, #108]	@ (800799c <pvPortMalloc+0x194>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	429a      	cmp	r2, r3
 8007934:	d203      	bcs.n	800793e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007936:	4b17      	ldr	r3, [pc, #92]	@ (8007994 <pvPortMalloc+0x18c>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a18      	ldr	r2, [pc, #96]	@ (800799c <pvPortMalloc+0x194>)
 800793c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800793e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007940:	685a      	ldr	r2, [r3, #4]
 8007942:	4b13      	ldr	r3, [pc, #76]	@ (8007990 <pvPortMalloc+0x188>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	431a      	orrs	r2, r3
 8007948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800794a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800794c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800794e:	2200      	movs	r2, #0
 8007950:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007952:	4b13      	ldr	r3, [pc, #76]	@ (80079a0 <pvPortMalloc+0x198>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	3301      	adds	r3, #1
 8007958:	4a11      	ldr	r2, [pc, #68]	@ (80079a0 <pvPortMalloc+0x198>)
 800795a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800795c:	f7ff fa44 	bl	8006de8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007960:	69fb      	ldr	r3, [r7, #28]
 8007962:	f003 0307 	and.w	r3, r3, #7
 8007966:	2b00      	cmp	r3, #0
 8007968:	d00b      	beq.n	8007982 <pvPortMalloc+0x17a>
	__asm volatile
 800796a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800796e:	f383 8811 	msr	BASEPRI, r3
 8007972:	f3bf 8f6f 	isb	sy
 8007976:	f3bf 8f4f 	dsb	sy
 800797a:	60fb      	str	r3, [r7, #12]
}
 800797c:	bf00      	nop
 800797e:	bf00      	nop
 8007980:	e7fd      	b.n	800797e <pvPortMalloc+0x176>
	return pvReturn;
 8007982:	69fb      	ldr	r3, [r7, #28]
}
 8007984:	4618      	mov	r0, r3
 8007986:	3728      	adds	r7, #40	@ 0x28
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}
 800798c:	20004e20 	.word	0x20004e20
 8007990:	20004e34 	.word	0x20004e34
 8007994:	20004e24 	.word	0x20004e24
 8007998:	20004e18 	.word	0x20004e18
 800799c:	20004e28 	.word	0x20004e28
 80079a0:	20004e2c 	.word	0x20004e2c

080079a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b086      	sub	sp, #24
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d04f      	beq.n	8007a56 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80079b6:	2308      	movs	r3, #8
 80079b8:	425b      	negs	r3, r3
 80079ba:	697a      	ldr	r2, [r7, #20]
 80079bc:	4413      	add	r3, r2
 80079be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	685a      	ldr	r2, [r3, #4]
 80079c8:	4b25      	ldr	r3, [pc, #148]	@ (8007a60 <vPortFree+0xbc>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4013      	ands	r3, r2
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d10b      	bne.n	80079ea <vPortFree+0x46>
	__asm volatile
 80079d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079d6:	f383 8811 	msr	BASEPRI, r3
 80079da:	f3bf 8f6f 	isb	sy
 80079de:	f3bf 8f4f 	dsb	sy
 80079e2:	60fb      	str	r3, [r7, #12]
}
 80079e4:	bf00      	nop
 80079e6:	bf00      	nop
 80079e8:	e7fd      	b.n	80079e6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d00b      	beq.n	8007a0a <vPortFree+0x66>
	__asm volatile
 80079f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079f6:	f383 8811 	msr	BASEPRI, r3
 80079fa:	f3bf 8f6f 	isb	sy
 80079fe:	f3bf 8f4f 	dsb	sy
 8007a02:	60bb      	str	r3, [r7, #8]
}
 8007a04:	bf00      	nop
 8007a06:	bf00      	nop
 8007a08:	e7fd      	b.n	8007a06 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	685a      	ldr	r2, [r3, #4]
 8007a0e:	4b14      	ldr	r3, [pc, #80]	@ (8007a60 <vPortFree+0xbc>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4013      	ands	r3, r2
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d01e      	beq.n	8007a56 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d11a      	bne.n	8007a56 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	685a      	ldr	r2, [r3, #4]
 8007a24:	4b0e      	ldr	r3, [pc, #56]	@ (8007a60 <vPortFree+0xbc>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	43db      	mvns	r3, r3
 8007a2a:	401a      	ands	r2, r3
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007a30:	f7ff f9cc 	bl	8006dcc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	685a      	ldr	r2, [r3, #4]
 8007a38:	4b0a      	ldr	r3, [pc, #40]	@ (8007a64 <vPortFree+0xc0>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4413      	add	r3, r2
 8007a3e:	4a09      	ldr	r2, [pc, #36]	@ (8007a64 <vPortFree+0xc0>)
 8007a40:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007a42:	6938      	ldr	r0, [r7, #16]
 8007a44:	f000 f874 	bl	8007b30 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007a48:	4b07      	ldr	r3, [pc, #28]	@ (8007a68 <vPortFree+0xc4>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	3301      	adds	r3, #1
 8007a4e:	4a06      	ldr	r2, [pc, #24]	@ (8007a68 <vPortFree+0xc4>)
 8007a50:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007a52:	f7ff f9c9 	bl	8006de8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007a56:	bf00      	nop
 8007a58:	3718      	adds	r7, #24
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
 8007a5e:	bf00      	nop
 8007a60:	20004e34 	.word	0x20004e34
 8007a64:	20004e24 	.word	0x20004e24
 8007a68:	20004e30 	.word	0x20004e30

08007a6c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b085      	sub	sp, #20
 8007a70:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007a72:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007a76:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007a78:	4b27      	ldr	r3, [pc, #156]	@ (8007b18 <prvHeapInit+0xac>)
 8007a7a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	f003 0307 	and.w	r3, r3, #7
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00c      	beq.n	8007aa0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	3307      	adds	r3, #7
 8007a8a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f023 0307 	bic.w	r3, r3, #7
 8007a92:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007a94:	68ba      	ldr	r2, [r7, #8]
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	1ad3      	subs	r3, r2, r3
 8007a9a:	4a1f      	ldr	r2, [pc, #124]	@ (8007b18 <prvHeapInit+0xac>)
 8007a9c:	4413      	add	r3, r2
 8007a9e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007aa4:	4a1d      	ldr	r2, [pc, #116]	@ (8007b1c <prvHeapInit+0xb0>)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007aaa:	4b1c      	ldr	r3, [pc, #112]	@ (8007b1c <prvHeapInit+0xb0>)
 8007aac:	2200      	movs	r2, #0
 8007aae:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	68ba      	ldr	r2, [r7, #8]
 8007ab4:	4413      	add	r3, r2
 8007ab6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007ab8:	2208      	movs	r2, #8
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	1a9b      	subs	r3, r3, r2
 8007abe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	f023 0307 	bic.w	r3, r3, #7
 8007ac6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	4a15      	ldr	r2, [pc, #84]	@ (8007b20 <prvHeapInit+0xb4>)
 8007acc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007ace:	4b14      	ldr	r3, [pc, #80]	@ (8007b20 <prvHeapInit+0xb4>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007ad6:	4b12      	ldr	r3, [pc, #72]	@ (8007b20 <prvHeapInit+0xb4>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	2200      	movs	r2, #0
 8007adc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	68fa      	ldr	r2, [r7, #12]
 8007ae6:	1ad2      	subs	r2, r2, r3
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007aec:	4b0c      	ldr	r3, [pc, #48]	@ (8007b20 <prvHeapInit+0xb4>)
 8007aee:	681a      	ldr	r2, [r3, #0]
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	4a0a      	ldr	r2, [pc, #40]	@ (8007b24 <prvHeapInit+0xb8>)
 8007afa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	4a09      	ldr	r2, [pc, #36]	@ (8007b28 <prvHeapInit+0xbc>)
 8007b02:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007b04:	4b09      	ldr	r3, [pc, #36]	@ (8007b2c <prvHeapInit+0xc0>)
 8007b06:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007b0a:	601a      	str	r2, [r3, #0]
}
 8007b0c:	bf00      	nop
 8007b0e:	3714      	adds	r7, #20
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr
 8007b18:	20001218 	.word	0x20001218
 8007b1c:	20004e18 	.word	0x20004e18
 8007b20:	20004e20 	.word	0x20004e20
 8007b24:	20004e28 	.word	0x20004e28
 8007b28:	20004e24 	.word	0x20004e24
 8007b2c:	20004e34 	.word	0x20004e34

08007b30 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007b30:	b480      	push	{r7}
 8007b32:	b085      	sub	sp, #20
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007b38:	4b28      	ldr	r3, [pc, #160]	@ (8007bdc <prvInsertBlockIntoFreeList+0xac>)
 8007b3a:	60fb      	str	r3, [r7, #12]
 8007b3c:	e002      	b.n	8007b44 <prvInsertBlockIntoFreeList+0x14>
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	60fb      	str	r3, [r7, #12]
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	d8f7      	bhi.n	8007b3e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	68ba      	ldr	r2, [r7, #8]
 8007b58:	4413      	add	r3, r2
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d108      	bne.n	8007b72 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	685a      	ldr	r2, [r3, #4]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	441a      	add	r2, r3
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	68ba      	ldr	r2, [r7, #8]
 8007b7c:	441a      	add	r2, r3
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d118      	bne.n	8007bb8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681a      	ldr	r2, [r3, #0]
 8007b8a:	4b15      	ldr	r3, [pc, #84]	@ (8007be0 <prvInsertBlockIntoFreeList+0xb0>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d00d      	beq.n	8007bae <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	685a      	ldr	r2, [r3, #4]
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	441a      	add	r2, r3
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	681a      	ldr	r2, [r3, #0]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	601a      	str	r2, [r3, #0]
 8007bac:	e008      	b.n	8007bc0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007bae:	4b0c      	ldr	r3, [pc, #48]	@ (8007be0 <prvInsertBlockIntoFreeList+0xb0>)
 8007bb0:	681a      	ldr	r2, [r3, #0]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	601a      	str	r2, [r3, #0]
 8007bb6:	e003      	b.n	8007bc0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681a      	ldr	r2, [r3, #0]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007bc0:	68fa      	ldr	r2, [r7, #12]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d002      	beq.n	8007bce <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007bce:	bf00      	nop
 8007bd0:	3714      	adds	r7, #20
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd8:	4770      	bx	lr
 8007bda:	bf00      	nop
 8007bdc:	20004e18 	.word	0x20004e18
 8007be0:	20004e20 	.word	0x20004e20

08007be4 <__cvt>:
 8007be4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007be8:	ec57 6b10 	vmov	r6, r7, d0
 8007bec:	2f00      	cmp	r7, #0
 8007bee:	460c      	mov	r4, r1
 8007bf0:	4619      	mov	r1, r3
 8007bf2:	463b      	mov	r3, r7
 8007bf4:	bfbb      	ittet	lt
 8007bf6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007bfa:	461f      	movlt	r7, r3
 8007bfc:	2300      	movge	r3, #0
 8007bfe:	232d      	movlt	r3, #45	@ 0x2d
 8007c00:	700b      	strb	r3, [r1, #0]
 8007c02:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007c04:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007c08:	4691      	mov	r9, r2
 8007c0a:	f023 0820 	bic.w	r8, r3, #32
 8007c0e:	bfbc      	itt	lt
 8007c10:	4632      	movlt	r2, r6
 8007c12:	4616      	movlt	r6, r2
 8007c14:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007c18:	d005      	beq.n	8007c26 <__cvt+0x42>
 8007c1a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007c1e:	d100      	bne.n	8007c22 <__cvt+0x3e>
 8007c20:	3401      	adds	r4, #1
 8007c22:	2102      	movs	r1, #2
 8007c24:	e000      	b.n	8007c28 <__cvt+0x44>
 8007c26:	2103      	movs	r1, #3
 8007c28:	ab03      	add	r3, sp, #12
 8007c2a:	9301      	str	r3, [sp, #4]
 8007c2c:	ab02      	add	r3, sp, #8
 8007c2e:	9300      	str	r3, [sp, #0]
 8007c30:	ec47 6b10 	vmov	d0, r6, r7
 8007c34:	4653      	mov	r3, sl
 8007c36:	4622      	mov	r2, r4
 8007c38:	f000 fe9e 	bl	8008978 <_dtoa_r>
 8007c3c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007c40:	4605      	mov	r5, r0
 8007c42:	d119      	bne.n	8007c78 <__cvt+0x94>
 8007c44:	f019 0f01 	tst.w	r9, #1
 8007c48:	d00e      	beq.n	8007c68 <__cvt+0x84>
 8007c4a:	eb00 0904 	add.w	r9, r0, r4
 8007c4e:	2200      	movs	r2, #0
 8007c50:	2300      	movs	r3, #0
 8007c52:	4630      	mov	r0, r6
 8007c54:	4639      	mov	r1, r7
 8007c56:	f7f8 ff37 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c5a:	b108      	cbz	r0, 8007c60 <__cvt+0x7c>
 8007c5c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007c60:	2230      	movs	r2, #48	@ 0x30
 8007c62:	9b03      	ldr	r3, [sp, #12]
 8007c64:	454b      	cmp	r3, r9
 8007c66:	d31e      	bcc.n	8007ca6 <__cvt+0xc2>
 8007c68:	9b03      	ldr	r3, [sp, #12]
 8007c6a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007c6c:	1b5b      	subs	r3, r3, r5
 8007c6e:	4628      	mov	r0, r5
 8007c70:	6013      	str	r3, [r2, #0]
 8007c72:	b004      	add	sp, #16
 8007c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c78:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007c7c:	eb00 0904 	add.w	r9, r0, r4
 8007c80:	d1e5      	bne.n	8007c4e <__cvt+0x6a>
 8007c82:	7803      	ldrb	r3, [r0, #0]
 8007c84:	2b30      	cmp	r3, #48	@ 0x30
 8007c86:	d10a      	bne.n	8007c9e <__cvt+0xba>
 8007c88:	2200      	movs	r2, #0
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	4630      	mov	r0, r6
 8007c8e:	4639      	mov	r1, r7
 8007c90:	f7f8 ff1a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c94:	b918      	cbnz	r0, 8007c9e <__cvt+0xba>
 8007c96:	f1c4 0401 	rsb	r4, r4, #1
 8007c9a:	f8ca 4000 	str.w	r4, [sl]
 8007c9e:	f8da 3000 	ldr.w	r3, [sl]
 8007ca2:	4499      	add	r9, r3
 8007ca4:	e7d3      	b.n	8007c4e <__cvt+0x6a>
 8007ca6:	1c59      	adds	r1, r3, #1
 8007ca8:	9103      	str	r1, [sp, #12]
 8007caa:	701a      	strb	r2, [r3, #0]
 8007cac:	e7d9      	b.n	8007c62 <__cvt+0x7e>

08007cae <__exponent>:
 8007cae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007cb0:	2900      	cmp	r1, #0
 8007cb2:	bfba      	itte	lt
 8007cb4:	4249      	neglt	r1, r1
 8007cb6:	232d      	movlt	r3, #45	@ 0x2d
 8007cb8:	232b      	movge	r3, #43	@ 0x2b
 8007cba:	2909      	cmp	r1, #9
 8007cbc:	7002      	strb	r2, [r0, #0]
 8007cbe:	7043      	strb	r3, [r0, #1]
 8007cc0:	dd29      	ble.n	8007d16 <__exponent+0x68>
 8007cc2:	f10d 0307 	add.w	r3, sp, #7
 8007cc6:	461d      	mov	r5, r3
 8007cc8:	270a      	movs	r7, #10
 8007cca:	461a      	mov	r2, r3
 8007ccc:	fbb1 f6f7 	udiv	r6, r1, r7
 8007cd0:	fb07 1416 	mls	r4, r7, r6, r1
 8007cd4:	3430      	adds	r4, #48	@ 0x30
 8007cd6:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007cda:	460c      	mov	r4, r1
 8007cdc:	2c63      	cmp	r4, #99	@ 0x63
 8007cde:	f103 33ff 	add.w	r3, r3, #4294967295
 8007ce2:	4631      	mov	r1, r6
 8007ce4:	dcf1      	bgt.n	8007cca <__exponent+0x1c>
 8007ce6:	3130      	adds	r1, #48	@ 0x30
 8007ce8:	1e94      	subs	r4, r2, #2
 8007cea:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007cee:	1c41      	adds	r1, r0, #1
 8007cf0:	4623      	mov	r3, r4
 8007cf2:	42ab      	cmp	r3, r5
 8007cf4:	d30a      	bcc.n	8007d0c <__exponent+0x5e>
 8007cf6:	f10d 0309 	add.w	r3, sp, #9
 8007cfa:	1a9b      	subs	r3, r3, r2
 8007cfc:	42ac      	cmp	r4, r5
 8007cfe:	bf88      	it	hi
 8007d00:	2300      	movhi	r3, #0
 8007d02:	3302      	adds	r3, #2
 8007d04:	4403      	add	r3, r0
 8007d06:	1a18      	subs	r0, r3, r0
 8007d08:	b003      	add	sp, #12
 8007d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d0c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007d10:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007d14:	e7ed      	b.n	8007cf2 <__exponent+0x44>
 8007d16:	2330      	movs	r3, #48	@ 0x30
 8007d18:	3130      	adds	r1, #48	@ 0x30
 8007d1a:	7083      	strb	r3, [r0, #2]
 8007d1c:	70c1      	strb	r1, [r0, #3]
 8007d1e:	1d03      	adds	r3, r0, #4
 8007d20:	e7f1      	b.n	8007d06 <__exponent+0x58>
	...

08007d24 <_printf_float>:
 8007d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d28:	b08d      	sub	sp, #52	@ 0x34
 8007d2a:	460c      	mov	r4, r1
 8007d2c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007d30:	4616      	mov	r6, r2
 8007d32:	461f      	mov	r7, r3
 8007d34:	4605      	mov	r5, r0
 8007d36:	f000 fcbb 	bl	80086b0 <_localeconv_r>
 8007d3a:	6803      	ldr	r3, [r0, #0]
 8007d3c:	9304      	str	r3, [sp, #16]
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f7f8 fa96 	bl	8000270 <strlen>
 8007d44:	2300      	movs	r3, #0
 8007d46:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d48:	f8d8 3000 	ldr.w	r3, [r8]
 8007d4c:	9005      	str	r0, [sp, #20]
 8007d4e:	3307      	adds	r3, #7
 8007d50:	f023 0307 	bic.w	r3, r3, #7
 8007d54:	f103 0208 	add.w	r2, r3, #8
 8007d58:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007d5c:	f8d4 b000 	ldr.w	fp, [r4]
 8007d60:	f8c8 2000 	str.w	r2, [r8]
 8007d64:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007d68:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007d6c:	9307      	str	r3, [sp, #28]
 8007d6e:	f8cd 8018 	str.w	r8, [sp, #24]
 8007d72:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007d76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d7a:	4b9c      	ldr	r3, [pc, #624]	@ (8007fec <_printf_float+0x2c8>)
 8007d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8007d80:	f7f8 fed4 	bl	8000b2c <__aeabi_dcmpun>
 8007d84:	bb70      	cbnz	r0, 8007de4 <_printf_float+0xc0>
 8007d86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d8a:	4b98      	ldr	r3, [pc, #608]	@ (8007fec <_printf_float+0x2c8>)
 8007d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8007d90:	f7f8 feae 	bl	8000af0 <__aeabi_dcmple>
 8007d94:	bb30      	cbnz	r0, 8007de4 <_printf_float+0xc0>
 8007d96:	2200      	movs	r2, #0
 8007d98:	2300      	movs	r3, #0
 8007d9a:	4640      	mov	r0, r8
 8007d9c:	4649      	mov	r1, r9
 8007d9e:	f7f8 fe9d 	bl	8000adc <__aeabi_dcmplt>
 8007da2:	b110      	cbz	r0, 8007daa <_printf_float+0x86>
 8007da4:	232d      	movs	r3, #45	@ 0x2d
 8007da6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007daa:	4a91      	ldr	r2, [pc, #580]	@ (8007ff0 <_printf_float+0x2cc>)
 8007dac:	4b91      	ldr	r3, [pc, #580]	@ (8007ff4 <_printf_float+0x2d0>)
 8007dae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007db2:	bf94      	ite	ls
 8007db4:	4690      	movls	r8, r2
 8007db6:	4698      	movhi	r8, r3
 8007db8:	2303      	movs	r3, #3
 8007dba:	6123      	str	r3, [r4, #16]
 8007dbc:	f02b 0304 	bic.w	r3, fp, #4
 8007dc0:	6023      	str	r3, [r4, #0]
 8007dc2:	f04f 0900 	mov.w	r9, #0
 8007dc6:	9700      	str	r7, [sp, #0]
 8007dc8:	4633      	mov	r3, r6
 8007dca:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007dcc:	4621      	mov	r1, r4
 8007dce:	4628      	mov	r0, r5
 8007dd0:	f000 f9d2 	bl	8008178 <_printf_common>
 8007dd4:	3001      	adds	r0, #1
 8007dd6:	f040 808d 	bne.w	8007ef4 <_printf_float+0x1d0>
 8007dda:	f04f 30ff 	mov.w	r0, #4294967295
 8007dde:	b00d      	add	sp, #52	@ 0x34
 8007de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007de4:	4642      	mov	r2, r8
 8007de6:	464b      	mov	r3, r9
 8007de8:	4640      	mov	r0, r8
 8007dea:	4649      	mov	r1, r9
 8007dec:	f7f8 fe9e 	bl	8000b2c <__aeabi_dcmpun>
 8007df0:	b140      	cbz	r0, 8007e04 <_printf_float+0xe0>
 8007df2:	464b      	mov	r3, r9
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	bfbc      	itt	lt
 8007df8:	232d      	movlt	r3, #45	@ 0x2d
 8007dfa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007dfe:	4a7e      	ldr	r2, [pc, #504]	@ (8007ff8 <_printf_float+0x2d4>)
 8007e00:	4b7e      	ldr	r3, [pc, #504]	@ (8007ffc <_printf_float+0x2d8>)
 8007e02:	e7d4      	b.n	8007dae <_printf_float+0x8a>
 8007e04:	6863      	ldr	r3, [r4, #4]
 8007e06:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007e0a:	9206      	str	r2, [sp, #24]
 8007e0c:	1c5a      	adds	r2, r3, #1
 8007e0e:	d13b      	bne.n	8007e88 <_printf_float+0x164>
 8007e10:	2306      	movs	r3, #6
 8007e12:	6063      	str	r3, [r4, #4]
 8007e14:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007e18:	2300      	movs	r3, #0
 8007e1a:	6022      	str	r2, [r4, #0]
 8007e1c:	9303      	str	r3, [sp, #12]
 8007e1e:	ab0a      	add	r3, sp, #40	@ 0x28
 8007e20:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007e24:	ab09      	add	r3, sp, #36	@ 0x24
 8007e26:	9300      	str	r3, [sp, #0]
 8007e28:	6861      	ldr	r1, [r4, #4]
 8007e2a:	ec49 8b10 	vmov	d0, r8, r9
 8007e2e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007e32:	4628      	mov	r0, r5
 8007e34:	f7ff fed6 	bl	8007be4 <__cvt>
 8007e38:	9b06      	ldr	r3, [sp, #24]
 8007e3a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007e3c:	2b47      	cmp	r3, #71	@ 0x47
 8007e3e:	4680      	mov	r8, r0
 8007e40:	d129      	bne.n	8007e96 <_printf_float+0x172>
 8007e42:	1cc8      	adds	r0, r1, #3
 8007e44:	db02      	blt.n	8007e4c <_printf_float+0x128>
 8007e46:	6863      	ldr	r3, [r4, #4]
 8007e48:	4299      	cmp	r1, r3
 8007e4a:	dd41      	ble.n	8007ed0 <_printf_float+0x1ac>
 8007e4c:	f1aa 0a02 	sub.w	sl, sl, #2
 8007e50:	fa5f fa8a 	uxtb.w	sl, sl
 8007e54:	3901      	subs	r1, #1
 8007e56:	4652      	mov	r2, sl
 8007e58:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007e5c:	9109      	str	r1, [sp, #36]	@ 0x24
 8007e5e:	f7ff ff26 	bl	8007cae <__exponent>
 8007e62:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007e64:	1813      	adds	r3, r2, r0
 8007e66:	2a01      	cmp	r2, #1
 8007e68:	4681      	mov	r9, r0
 8007e6a:	6123      	str	r3, [r4, #16]
 8007e6c:	dc02      	bgt.n	8007e74 <_printf_float+0x150>
 8007e6e:	6822      	ldr	r2, [r4, #0]
 8007e70:	07d2      	lsls	r2, r2, #31
 8007e72:	d501      	bpl.n	8007e78 <_printf_float+0x154>
 8007e74:	3301      	adds	r3, #1
 8007e76:	6123      	str	r3, [r4, #16]
 8007e78:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d0a2      	beq.n	8007dc6 <_printf_float+0xa2>
 8007e80:	232d      	movs	r3, #45	@ 0x2d
 8007e82:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e86:	e79e      	b.n	8007dc6 <_printf_float+0xa2>
 8007e88:	9a06      	ldr	r2, [sp, #24]
 8007e8a:	2a47      	cmp	r2, #71	@ 0x47
 8007e8c:	d1c2      	bne.n	8007e14 <_printf_float+0xf0>
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d1c0      	bne.n	8007e14 <_printf_float+0xf0>
 8007e92:	2301      	movs	r3, #1
 8007e94:	e7bd      	b.n	8007e12 <_printf_float+0xee>
 8007e96:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007e9a:	d9db      	bls.n	8007e54 <_printf_float+0x130>
 8007e9c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007ea0:	d118      	bne.n	8007ed4 <_printf_float+0x1b0>
 8007ea2:	2900      	cmp	r1, #0
 8007ea4:	6863      	ldr	r3, [r4, #4]
 8007ea6:	dd0b      	ble.n	8007ec0 <_printf_float+0x19c>
 8007ea8:	6121      	str	r1, [r4, #16]
 8007eaa:	b913      	cbnz	r3, 8007eb2 <_printf_float+0x18e>
 8007eac:	6822      	ldr	r2, [r4, #0]
 8007eae:	07d0      	lsls	r0, r2, #31
 8007eb0:	d502      	bpl.n	8007eb8 <_printf_float+0x194>
 8007eb2:	3301      	adds	r3, #1
 8007eb4:	440b      	add	r3, r1
 8007eb6:	6123      	str	r3, [r4, #16]
 8007eb8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007eba:	f04f 0900 	mov.w	r9, #0
 8007ebe:	e7db      	b.n	8007e78 <_printf_float+0x154>
 8007ec0:	b913      	cbnz	r3, 8007ec8 <_printf_float+0x1a4>
 8007ec2:	6822      	ldr	r2, [r4, #0]
 8007ec4:	07d2      	lsls	r2, r2, #31
 8007ec6:	d501      	bpl.n	8007ecc <_printf_float+0x1a8>
 8007ec8:	3302      	adds	r3, #2
 8007eca:	e7f4      	b.n	8007eb6 <_printf_float+0x192>
 8007ecc:	2301      	movs	r3, #1
 8007ece:	e7f2      	b.n	8007eb6 <_printf_float+0x192>
 8007ed0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007ed4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ed6:	4299      	cmp	r1, r3
 8007ed8:	db05      	blt.n	8007ee6 <_printf_float+0x1c2>
 8007eda:	6823      	ldr	r3, [r4, #0]
 8007edc:	6121      	str	r1, [r4, #16]
 8007ede:	07d8      	lsls	r0, r3, #31
 8007ee0:	d5ea      	bpl.n	8007eb8 <_printf_float+0x194>
 8007ee2:	1c4b      	adds	r3, r1, #1
 8007ee4:	e7e7      	b.n	8007eb6 <_printf_float+0x192>
 8007ee6:	2900      	cmp	r1, #0
 8007ee8:	bfd4      	ite	le
 8007eea:	f1c1 0202 	rsble	r2, r1, #2
 8007eee:	2201      	movgt	r2, #1
 8007ef0:	4413      	add	r3, r2
 8007ef2:	e7e0      	b.n	8007eb6 <_printf_float+0x192>
 8007ef4:	6823      	ldr	r3, [r4, #0]
 8007ef6:	055a      	lsls	r2, r3, #21
 8007ef8:	d407      	bmi.n	8007f0a <_printf_float+0x1e6>
 8007efa:	6923      	ldr	r3, [r4, #16]
 8007efc:	4642      	mov	r2, r8
 8007efe:	4631      	mov	r1, r6
 8007f00:	4628      	mov	r0, r5
 8007f02:	47b8      	blx	r7
 8007f04:	3001      	adds	r0, #1
 8007f06:	d12b      	bne.n	8007f60 <_printf_float+0x23c>
 8007f08:	e767      	b.n	8007dda <_printf_float+0xb6>
 8007f0a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007f0e:	f240 80dd 	bls.w	80080cc <_printf_float+0x3a8>
 8007f12:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007f16:	2200      	movs	r2, #0
 8007f18:	2300      	movs	r3, #0
 8007f1a:	f7f8 fdd5 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f1e:	2800      	cmp	r0, #0
 8007f20:	d033      	beq.n	8007f8a <_printf_float+0x266>
 8007f22:	4a37      	ldr	r2, [pc, #220]	@ (8008000 <_printf_float+0x2dc>)
 8007f24:	2301      	movs	r3, #1
 8007f26:	4631      	mov	r1, r6
 8007f28:	4628      	mov	r0, r5
 8007f2a:	47b8      	blx	r7
 8007f2c:	3001      	adds	r0, #1
 8007f2e:	f43f af54 	beq.w	8007dda <_printf_float+0xb6>
 8007f32:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007f36:	4543      	cmp	r3, r8
 8007f38:	db02      	blt.n	8007f40 <_printf_float+0x21c>
 8007f3a:	6823      	ldr	r3, [r4, #0]
 8007f3c:	07d8      	lsls	r0, r3, #31
 8007f3e:	d50f      	bpl.n	8007f60 <_printf_float+0x23c>
 8007f40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f44:	4631      	mov	r1, r6
 8007f46:	4628      	mov	r0, r5
 8007f48:	47b8      	blx	r7
 8007f4a:	3001      	adds	r0, #1
 8007f4c:	f43f af45 	beq.w	8007dda <_printf_float+0xb6>
 8007f50:	f04f 0900 	mov.w	r9, #0
 8007f54:	f108 38ff 	add.w	r8, r8, #4294967295
 8007f58:	f104 0a1a 	add.w	sl, r4, #26
 8007f5c:	45c8      	cmp	r8, r9
 8007f5e:	dc09      	bgt.n	8007f74 <_printf_float+0x250>
 8007f60:	6823      	ldr	r3, [r4, #0]
 8007f62:	079b      	lsls	r3, r3, #30
 8007f64:	f100 8103 	bmi.w	800816e <_printf_float+0x44a>
 8007f68:	68e0      	ldr	r0, [r4, #12]
 8007f6a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f6c:	4298      	cmp	r0, r3
 8007f6e:	bfb8      	it	lt
 8007f70:	4618      	movlt	r0, r3
 8007f72:	e734      	b.n	8007dde <_printf_float+0xba>
 8007f74:	2301      	movs	r3, #1
 8007f76:	4652      	mov	r2, sl
 8007f78:	4631      	mov	r1, r6
 8007f7a:	4628      	mov	r0, r5
 8007f7c:	47b8      	blx	r7
 8007f7e:	3001      	adds	r0, #1
 8007f80:	f43f af2b 	beq.w	8007dda <_printf_float+0xb6>
 8007f84:	f109 0901 	add.w	r9, r9, #1
 8007f88:	e7e8      	b.n	8007f5c <_printf_float+0x238>
 8007f8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	dc39      	bgt.n	8008004 <_printf_float+0x2e0>
 8007f90:	4a1b      	ldr	r2, [pc, #108]	@ (8008000 <_printf_float+0x2dc>)
 8007f92:	2301      	movs	r3, #1
 8007f94:	4631      	mov	r1, r6
 8007f96:	4628      	mov	r0, r5
 8007f98:	47b8      	blx	r7
 8007f9a:	3001      	adds	r0, #1
 8007f9c:	f43f af1d 	beq.w	8007dda <_printf_float+0xb6>
 8007fa0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007fa4:	ea59 0303 	orrs.w	r3, r9, r3
 8007fa8:	d102      	bne.n	8007fb0 <_printf_float+0x28c>
 8007faa:	6823      	ldr	r3, [r4, #0]
 8007fac:	07d9      	lsls	r1, r3, #31
 8007fae:	d5d7      	bpl.n	8007f60 <_printf_float+0x23c>
 8007fb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007fb4:	4631      	mov	r1, r6
 8007fb6:	4628      	mov	r0, r5
 8007fb8:	47b8      	blx	r7
 8007fba:	3001      	adds	r0, #1
 8007fbc:	f43f af0d 	beq.w	8007dda <_printf_float+0xb6>
 8007fc0:	f04f 0a00 	mov.w	sl, #0
 8007fc4:	f104 0b1a 	add.w	fp, r4, #26
 8007fc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fca:	425b      	negs	r3, r3
 8007fcc:	4553      	cmp	r3, sl
 8007fce:	dc01      	bgt.n	8007fd4 <_printf_float+0x2b0>
 8007fd0:	464b      	mov	r3, r9
 8007fd2:	e793      	b.n	8007efc <_printf_float+0x1d8>
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	465a      	mov	r2, fp
 8007fd8:	4631      	mov	r1, r6
 8007fda:	4628      	mov	r0, r5
 8007fdc:	47b8      	blx	r7
 8007fde:	3001      	adds	r0, #1
 8007fe0:	f43f aefb 	beq.w	8007dda <_printf_float+0xb6>
 8007fe4:	f10a 0a01 	add.w	sl, sl, #1
 8007fe8:	e7ee      	b.n	8007fc8 <_printf_float+0x2a4>
 8007fea:	bf00      	nop
 8007fec:	7fefffff 	.word	0x7fefffff
 8007ff0:	0800af00 	.word	0x0800af00
 8007ff4:	0800af04 	.word	0x0800af04
 8007ff8:	0800af08 	.word	0x0800af08
 8007ffc:	0800af0c 	.word	0x0800af0c
 8008000:	0800af10 	.word	0x0800af10
 8008004:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008006:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800800a:	4553      	cmp	r3, sl
 800800c:	bfa8      	it	ge
 800800e:	4653      	movge	r3, sl
 8008010:	2b00      	cmp	r3, #0
 8008012:	4699      	mov	r9, r3
 8008014:	dc36      	bgt.n	8008084 <_printf_float+0x360>
 8008016:	f04f 0b00 	mov.w	fp, #0
 800801a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800801e:	f104 021a 	add.w	r2, r4, #26
 8008022:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008024:	9306      	str	r3, [sp, #24]
 8008026:	eba3 0309 	sub.w	r3, r3, r9
 800802a:	455b      	cmp	r3, fp
 800802c:	dc31      	bgt.n	8008092 <_printf_float+0x36e>
 800802e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008030:	459a      	cmp	sl, r3
 8008032:	dc3a      	bgt.n	80080aa <_printf_float+0x386>
 8008034:	6823      	ldr	r3, [r4, #0]
 8008036:	07da      	lsls	r2, r3, #31
 8008038:	d437      	bmi.n	80080aa <_printf_float+0x386>
 800803a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800803c:	ebaa 0903 	sub.w	r9, sl, r3
 8008040:	9b06      	ldr	r3, [sp, #24]
 8008042:	ebaa 0303 	sub.w	r3, sl, r3
 8008046:	4599      	cmp	r9, r3
 8008048:	bfa8      	it	ge
 800804a:	4699      	movge	r9, r3
 800804c:	f1b9 0f00 	cmp.w	r9, #0
 8008050:	dc33      	bgt.n	80080ba <_printf_float+0x396>
 8008052:	f04f 0800 	mov.w	r8, #0
 8008056:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800805a:	f104 0b1a 	add.w	fp, r4, #26
 800805e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008060:	ebaa 0303 	sub.w	r3, sl, r3
 8008064:	eba3 0309 	sub.w	r3, r3, r9
 8008068:	4543      	cmp	r3, r8
 800806a:	f77f af79 	ble.w	8007f60 <_printf_float+0x23c>
 800806e:	2301      	movs	r3, #1
 8008070:	465a      	mov	r2, fp
 8008072:	4631      	mov	r1, r6
 8008074:	4628      	mov	r0, r5
 8008076:	47b8      	blx	r7
 8008078:	3001      	adds	r0, #1
 800807a:	f43f aeae 	beq.w	8007dda <_printf_float+0xb6>
 800807e:	f108 0801 	add.w	r8, r8, #1
 8008082:	e7ec      	b.n	800805e <_printf_float+0x33a>
 8008084:	4642      	mov	r2, r8
 8008086:	4631      	mov	r1, r6
 8008088:	4628      	mov	r0, r5
 800808a:	47b8      	blx	r7
 800808c:	3001      	adds	r0, #1
 800808e:	d1c2      	bne.n	8008016 <_printf_float+0x2f2>
 8008090:	e6a3      	b.n	8007dda <_printf_float+0xb6>
 8008092:	2301      	movs	r3, #1
 8008094:	4631      	mov	r1, r6
 8008096:	4628      	mov	r0, r5
 8008098:	9206      	str	r2, [sp, #24]
 800809a:	47b8      	blx	r7
 800809c:	3001      	adds	r0, #1
 800809e:	f43f ae9c 	beq.w	8007dda <_printf_float+0xb6>
 80080a2:	9a06      	ldr	r2, [sp, #24]
 80080a4:	f10b 0b01 	add.w	fp, fp, #1
 80080a8:	e7bb      	b.n	8008022 <_printf_float+0x2fe>
 80080aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080ae:	4631      	mov	r1, r6
 80080b0:	4628      	mov	r0, r5
 80080b2:	47b8      	blx	r7
 80080b4:	3001      	adds	r0, #1
 80080b6:	d1c0      	bne.n	800803a <_printf_float+0x316>
 80080b8:	e68f      	b.n	8007dda <_printf_float+0xb6>
 80080ba:	9a06      	ldr	r2, [sp, #24]
 80080bc:	464b      	mov	r3, r9
 80080be:	4442      	add	r2, r8
 80080c0:	4631      	mov	r1, r6
 80080c2:	4628      	mov	r0, r5
 80080c4:	47b8      	blx	r7
 80080c6:	3001      	adds	r0, #1
 80080c8:	d1c3      	bne.n	8008052 <_printf_float+0x32e>
 80080ca:	e686      	b.n	8007dda <_printf_float+0xb6>
 80080cc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80080d0:	f1ba 0f01 	cmp.w	sl, #1
 80080d4:	dc01      	bgt.n	80080da <_printf_float+0x3b6>
 80080d6:	07db      	lsls	r3, r3, #31
 80080d8:	d536      	bpl.n	8008148 <_printf_float+0x424>
 80080da:	2301      	movs	r3, #1
 80080dc:	4642      	mov	r2, r8
 80080de:	4631      	mov	r1, r6
 80080e0:	4628      	mov	r0, r5
 80080e2:	47b8      	blx	r7
 80080e4:	3001      	adds	r0, #1
 80080e6:	f43f ae78 	beq.w	8007dda <_printf_float+0xb6>
 80080ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080ee:	4631      	mov	r1, r6
 80080f0:	4628      	mov	r0, r5
 80080f2:	47b8      	blx	r7
 80080f4:	3001      	adds	r0, #1
 80080f6:	f43f ae70 	beq.w	8007dda <_printf_float+0xb6>
 80080fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80080fe:	2200      	movs	r2, #0
 8008100:	2300      	movs	r3, #0
 8008102:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008106:	f7f8 fcdf 	bl	8000ac8 <__aeabi_dcmpeq>
 800810a:	b9c0      	cbnz	r0, 800813e <_printf_float+0x41a>
 800810c:	4653      	mov	r3, sl
 800810e:	f108 0201 	add.w	r2, r8, #1
 8008112:	4631      	mov	r1, r6
 8008114:	4628      	mov	r0, r5
 8008116:	47b8      	blx	r7
 8008118:	3001      	adds	r0, #1
 800811a:	d10c      	bne.n	8008136 <_printf_float+0x412>
 800811c:	e65d      	b.n	8007dda <_printf_float+0xb6>
 800811e:	2301      	movs	r3, #1
 8008120:	465a      	mov	r2, fp
 8008122:	4631      	mov	r1, r6
 8008124:	4628      	mov	r0, r5
 8008126:	47b8      	blx	r7
 8008128:	3001      	adds	r0, #1
 800812a:	f43f ae56 	beq.w	8007dda <_printf_float+0xb6>
 800812e:	f108 0801 	add.w	r8, r8, #1
 8008132:	45d0      	cmp	r8, sl
 8008134:	dbf3      	blt.n	800811e <_printf_float+0x3fa>
 8008136:	464b      	mov	r3, r9
 8008138:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800813c:	e6df      	b.n	8007efe <_printf_float+0x1da>
 800813e:	f04f 0800 	mov.w	r8, #0
 8008142:	f104 0b1a 	add.w	fp, r4, #26
 8008146:	e7f4      	b.n	8008132 <_printf_float+0x40e>
 8008148:	2301      	movs	r3, #1
 800814a:	4642      	mov	r2, r8
 800814c:	e7e1      	b.n	8008112 <_printf_float+0x3ee>
 800814e:	2301      	movs	r3, #1
 8008150:	464a      	mov	r2, r9
 8008152:	4631      	mov	r1, r6
 8008154:	4628      	mov	r0, r5
 8008156:	47b8      	blx	r7
 8008158:	3001      	adds	r0, #1
 800815a:	f43f ae3e 	beq.w	8007dda <_printf_float+0xb6>
 800815e:	f108 0801 	add.w	r8, r8, #1
 8008162:	68e3      	ldr	r3, [r4, #12]
 8008164:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008166:	1a5b      	subs	r3, r3, r1
 8008168:	4543      	cmp	r3, r8
 800816a:	dcf0      	bgt.n	800814e <_printf_float+0x42a>
 800816c:	e6fc      	b.n	8007f68 <_printf_float+0x244>
 800816e:	f04f 0800 	mov.w	r8, #0
 8008172:	f104 0919 	add.w	r9, r4, #25
 8008176:	e7f4      	b.n	8008162 <_printf_float+0x43e>

08008178 <_printf_common>:
 8008178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800817c:	4616      	mov	r6, r2
 800817e:	4698      	mov	r8, r3
 8008180:	688a      	ldr	r2, [r1, #8]
 8008182:	690b      	ldr	r3, [r1, #16]
 8008184:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008188:	4293      	cmp	r3, r2
 800818a:	bfb8      	it	lt
 800818c:	4613      	movlt	r3, r2
 800818e:	6033      	str	r3, [r6, #0]
 8008190:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008194:	4607      	mov	r7, r0
 8008196:	460c      	mov	r4, r1
 8008198:	b10a      	cbz	r2, 800819e <_printf_common+0x26>
 800819a:	3301      	adds	r3, #1
 800819c:	6033      	str	r3, [r6, #0]
 800819e:	6823      	ldr	r3, [r4, #0]
 80081a0:	0699      	lsls	r1, r3, #26
 80081a2:	bf42      	ittt	mi
 80081a4:	6833      	ldrmi	r3, [r6, #0]
 80081a6:	3302      	addmi	r3, #2
 80081a8:	6033      	strmi	r3, [r6, #0]
 80081aa:	6825      	ldr	r5, [r4, #0]
 80081ac:	f015 0506 	ands.w	r5, r5, #6
 80081b0:	d106      	bne.n	80081c0 <_printf_common+0x48>
 80081b2:	f104 0a19 	add.w	sl, r4, #25
 80081b6:	68e3      	ldr	r3, [r4, #12]
 80081b8:	6832      	ldr	r2, [r6, #0]
 80081ba:	1a9b      	subs	r3, r3, r2
 80081bc:	42ab      	cmp	r3, r5
 80081be:	dc26      	bgt.n	800820e <_printf_common+0x96>
 80081c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80081c4:	6822      	ldr	r2, [r4, #0]
 80081c6:	3b00      	subs	r3, #0
 80081c8:	bf18      	it	ne
 80081ca:	2301      	movne	r3, #1
 80081cc:	0692      	lsls	r2, r2, #26
 80081ce:	d42b      	bmi.n	8008228 <_printf_common+0xb0>
 80081d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80081d4:	4641      	mov	r1, r8
 80081d6:	4638      	mov	r0, r7
 80081d8:	47c8      	blx	r9
 80081da:	3001      	adds	r0, #1
 80081dc:	d01e      	beq.n	800821c <_printf_common+0xa4>
 80081de:	6823      	ldr	r3, [r4, #0]
 80081e0:	6922      	ldr	r2, [r4, #16]
 80081e2:	f003 0306 	and.w	r3, r3, #6
 80081e6:	2b04      	cmp	r3, #4
 80081e8:	bf02      	ittt	eq
 80081ea:	68e5      	ldreq	r5, [r4, #12]
 80081ec:	6833      	ldreq	r3, [r6, #0]
 80081ee:	1aed      	subeq	r5, r5, r3
 80081f0:	68a3      	ldr	r3, [r4, #8]
 80081f2:	bf0c      	ite	eq
 80081f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80081f8:	2500      	movne	r5, #0
 80081fa:	4293      	cmp	r3, r2
 80081fc:	bfc4      	itt	gt
 80081fe:	1a9b      	subgt	r3, r3, r2
 8008200:	18ed      	addgt	r5, r5, r3
 8008202:	2600      	movs	r6, #0
 8008204:	341a      	adds	r4, #26
 8008206:	42b5      	cmp	r5, r6
 8008208:	d11a      	bne.n	8008240 <_printf_common+0xc8>
 800820a:	2000      	movs	r0, #0
 800820c:	e008      	b.n	8008220 <_printf_common+0xa8>
 800820e:	2301      	movs	r3, #1
 8008210:	4652      	mov	r2, sl
 8008212:	4641      	mov	r1, r8
 8008214:	4638      	mov	r0, r7
 8008216:	47c8      	blx	r9
 8008218:	3001      	adds	r0, #1
 800821a:	d103      	bne.n	8008224 <_printf_common+0xac>
 800821c:	f04f 30ff 	mov.w	r0, #4294967295
 8008220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008224:	3501      	adds	r5, #1
 8008226:	e7c6      	b.n	80081b6 <_printf_common+0x3e>
 8008228:	18e1      	adds	r1, r4, r3
 800822a:	1c5a      	adds	r2, r3, #1
 800822c:	2030      	movs	r0, #48	@ 0x30
 800822e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008232:	4422      	add	r2, r4
 8008234:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008238:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800823c:	3302      	adds	r3, #2
 800823e:	e7c7      	b.n	80081d0 <_printf_common+0x58>
 8008240:	2301      	movs	r3, #1
 8008242:	4622      	mov	r2, r4
 8008244:	4641      	mov	r1, r8
 8008246:	4638      	mov	r0, r7
 8008248:	47c8      	blx	r9
 800824a:	3001      	adds	r0, #1
 800824c:	d0e6      	beq.n	800821c <_printf_common+0xa4>
 800824e:	3601      	adds	r6, #1
 8008250:	e7d9      	b.n	8008206 <_printf_common+0x8e>
	...

08008254 <_printf_i>:
 8008254:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008258:	7e0f      	ldrb	r7, [r1, #24]
 800825a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800825c:	2f78      	cmp	r7, #120	@ 0x78
 800825e:	4691      	mov	r9, r2
 8008260:	4680      	mov	r8, r0
 8008262:	460c      	mov	r4, r1
 8008264:	469a      	mov	sl, r3
 8008266:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800826a:	d807      	bhi.n	800827c <_printf_i+0x28>
 800826c:	2f62      	cmp	r7, #98	@ 0x62
 800826e:	d80a      	bhi.n	8008286 <_printf_i+0x32>
 8008270:	2f00      	cmp	r7, #0
 8008272:	f000 80d2 	beq.w	800841a <_printf_i+0x1c6>
 8008276:	2f58      	cmp	r7, #88	@ 0x58
 8008278:	f000 80b9 	beq.w	80083ee <_printf_i+0x19a>
 800827c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008280:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008284:	e03a      	b.n	80082fc <_printf_i+0xa8>
 8008286:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800828a:	2b15      	cmp	r3, #21
 800828c:	d8f6      	bhi.n	800827c <_printf_i+0x28>
 800828e:	a101      	add	r1, pc, #4	@ (adr r1, 8008294 <_printf_i+0x40>)
 8008290:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008294:	080082ed 	.word	0x080082ed
 8008298:	08008301 	.word	0x08008301
 800829c:	0800827d 	.word	0x0800827d
 80082a0:	0800827d 	.word	0x0800827d
 80082a4:	0800827d 	.word	0x0800827d
 80082a8:	0800827d 	.word	0x0800827d
 80082ac:	08008301 	.word	0x08008301
 80082b0:	0800827d 	.word	0x0800827d
 80082b4:	0800827d 	.word	0x0800827d
 80082b8:	0800827d 	.word	0x0800827d
 80082bc:	0800827d 	.word	0x0800827d
 80082c0:	08008401 	.word	0x08008401
 80082c4:	0800832b 	.word	0x0800832b
 80082c8:	080083bb 	.word	0x080083bb
 80082cc:	0800827d 	.word	0x0800827d
 80082d0:	0800827d 	.word	0x0800827d
 80082d4:	08008423 	.word	0x08008423
 80082d8:	0800827d 	.word	0x0800827d
 80082dc:	0800832b 	.word	0x0800832b
 80082e0:	0800827d 	.word	0x0800827d
 80082e4:	0800827d 	.word	0x0800827d
 80082e8:	080083c3 	.word	0x080083c3
 80082ec:	6833      	ldr	r3, [r6, #0]
 80082ee:	1d1a      	adds	r2, r3, #4
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	6032      	str	r2, [r6, #0]
 80082f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80082f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80082fc:	2301      	movs	r3, #1
 80082fe:	e09d      	b.n	800843c <_printf_i+0x1e8>
 8008300:	6833      	ldr	r3, [r6, #0]
 8008302:	6820      	ldr	r0, [r4, #0]
 8008304:	1d19      	adds	r1, r3, #4
 8008306:	6031      	str	r1, [r6, #0]
 8008308:	0606      	lsls	r6, r0, #24
 800830a:	d501      	bpl.n	8008310 <_printf_i+0xbc>
 800830c:	681d      	ldr	r5, [r3, #0]
 800830e:	e003      	b.n	8008318 <_printf_i+0xc4>
 8008310:	0645      	lsls	r5, r0, #25
 8008312:	d5fb      	bpl.n	800830c <_printf_i+0xb8>
 8008314:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008318:	2d00      	cmp	r5, #0
 800831a:	da03      	bge.n	8008324 <_printf_i+0xd0>
 800831c:	232d      	movs	r3, #45	@ 0x2d
 800831e:	426d      	negs	r5, r5
 8008320:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008324:	4859      	ldr	r0, [pc, #356]	@ (800848c <_printf_i+0x238>)
 8008326:	230a      	movs	r3, #10
 8008328:	e011      	b.n	800834e <_printf_i+0xfa>
 800832a:	6821      	ldr	r1, [r4, #0]
 800832c:	6833      	ldr	r3, [r6, #0]
 800832e:	0608      	lsls	r0, r1, #24
 8008330:	f853 5b04 	ldr.w	r5, [r3], #4
 8008334:	d402      	bmi.n	800833c <_printf_i+0xe8>
 8008336:	0649      	lsls	r1, r1, #25
 8008338:	bf48      	it	mi
 800833a:	b2ad      	uxthmi	r5, r5
 800833c:	2f6f      	cmp	r7, #111	@ 0x6f
 800833e:	4853      	ldr	r0, [pc, #332]	@ (800848c <_printf_i+0x238>)
 8008340:	6033      	str	r3, [r6, #0]
 8008342:	bf14      	ite	ne
 8008344:	230a      	movne	r3, #10
 8008346:	2308      	moveq	r3, #8
 8008348:	2100      	movs	r1, #0
 800834a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800834e:	6866      	ldr	r6, [r4, #4]
 8008350:	60a6      	str	r6, [r4, #8]
 8008352:	2e00      	cmp	r6, #0
 8008354:	bfa2      	ittt	ge
 8008356:	6821      	ldrge	r1, [r4, #0]
 8008358:	f021 0104 	bicge.w	r1, r1, #4
 800835c:	6021      	strge	r1, [r4, #0]
 800835e:	b90d      	cbnz	r5, 8008364 <_printf_i+0x110>
 8008360:	2e00      	cmp	r6, #0
 8008362:	d04b      	beq.n	80083fc <_printf_i+0x1a8>
 8008364:	4616      	mov	r6, r2
 8008366:	fbb5 f1f3 	udiv	r1, r5, r3
 800836a:	fb03 5711 	mls	r7, r3, r1, r5
 800836e:	5dc7      	ldrb	r7, [r0, r7]
 8008370:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008374:	462f      	mov	r7, r5
 8008376:	42bb      	cmp	r3, r7
 8008378:	460d      	mov	r5, r1
 800837a:	d9f4      	bls.n	8008366 <_printf_i+0x112>
 800837c:	2b08      	cmp	r3, #8
 800837e:	d10b      	bne.n	8008398 <_printf_i+0x144>
 8008380:	6823      	ldr	r3, [r4, #0]
 8008382:	07df      	lsls	r7, r3, #31
 8008384:	d508      	bpl.n	8008398 <_printf_i+0x144>
 8008386:	6923      	ldr	r3, [r4, #16]
 8008388:	6861      	ldr	r1, [r4, #4]
 800838a:	4299      	cmp	r1, r3
 800838c:	bfde      	ittt	le
 800838e:	2330      	movle	r3, #48	@ 0x30
 8008390:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008394:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008398:	1b92      	subs	r2, r2, r6
 800839a:	6122      	str	r2, [r4, #16]
 800839c:	f8cd a000 	str.w	sl, [sp]
 80083a0:	464b      	mov	r3, r9
 80083a2:	aa03      	add	r2, sp, #12
 80083a4:	4621      	mov	r1, r4
 80083a6:	4640      	mov	r0, r8
 80083a8:	f7ff fee6 	bl	8008178 <_printf_common>
 80083ac:	3001      	adds	r0, #1
 80083ae:	d14a      	bne.n	8008446 <_printf_i+0x1f2>
 80083b0:	f04f 30ff 	mov.w	r0, #4294967295
 80083b4:	b004      	add	sp, #16
 80083b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083ba:	6823      	ldr	r3, [r4, #0]
 80083bc:	f043 0320 	orr.w	r3, r3, #32
 80083c0:	6023      	str	r3, [r4, #0]
 80083c2:	4833      	ldr	r0, [pc, #204]	@ (8008490 <_printf_i+0x23c>)
 80083c4:	2778      	movs	r7, #120	@ 0x78
 80083c6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80083ca:	6823      	ldr	r3, [r4, #0]
 80083cc:	6831      	ldr	r1, [r6, #0]
 80083ce:	061f      	lsls	r7, r3, #24
 80083d0:	f851 5b04 	ldr.w	r5, [r1], #4
 80083d4:	d402      	bmi.n	80083dc <_printf_i+0x188>
 80083d6:	065f      	lsls	r7, r3, #25
 80083d8:	bf48      	it	mi
 80083da:	b2ad      	uxthmi	r5, r5
 80083dc:	6031      	str	r1, [r6, #0]
 80083de:	07d9      	lsls	r1, r3, #31
 80083e0:	bf44      	itt	mi
 80083e2:	f043 0320 	orrmi.w	r3, r3, #32
 80083e6:	6023      	strmi	r3, [r4, #0]
 80083e8:	b11d      	cbz	r5, 80083f2 <_printf_i+0x19e>
 80083ea:	2310      	movs	r3, #16
 80083ec:	e7ac      	b.n	8008348 <_printf_i+0xf4>
 80083ee:	4827      	ldr	r0, [pc, #156]	@ (800848c <_printf_i+0x238>)
 80083f0:	e7e9      	b.n	80083c6 <_printf_i+0x172>
 80083f2:	6823      	ldr	r3, [r4, #0]
 80083f4:	f023 0320 	bic.w	r3, r3, #32
 80083f8:	6023      	str	r3, [r4, #0]
 80083fa:	e7f6      	b.n	80083ea <_printf_i+0x196>
 80083fc:	4616      	mov	r6, r2
 80083fe:	e7bd      	b.n	800837c <_printf_i+0x128>
 8008400:	6833      	ldr	r3, [r6, #0]
 8008402:	6825      	ldr	r5, [r4, #0]
 8008404:	6961      	ldr	r1, [r4, #20]
 8008406:	1d18      	adds	r0, r3, #4
 8008408:	6030      	str	r0, [r6, #0]
 800840a:	062e      	lsls	r6, r5, #24
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	d501      	bpl.n	8008414 <_printf_i+0x1c0>
 8008410:	6019      	str	r1, [r3, #0]
 8008412:	e002      	b.n	800841a <_printf_i+0x1c6>
 8008414:	0668      	lsls	r0, r5, #25
 8008416:	d5fb      	bpl.n	8008410 <_printf_i+0x1bc>
 8008418:	8019      	strh	r1, [r3, #0]
 800841a:	2300      	movs	r3, #0
 800841c:	6123      	str	r3, [r4, #16]
 800841e:	4616      	mov	r6, r2
 8008420:	e7bc      	b.n	800839c <_printf_i+0x148>
 8008422:	6833      	ldr	r3, [r6, #0]
 8008424:	1d1a      	adds	r2, r3, #4
 8008426:	6032      	str	r2, [r6, #0]
 8008428:	681e      	ldr	r6, [r3, #0]
 800842a:	6862      	ldr	r2, [r4, #4]
 800842c:	2100      	movs	r1, #0
 800842e:	4630      	mov	r0, r6
 8008430:	f7f7 fece 	bl	80001d0 <memchr>
 8008434:	b108      	cbz	r0, 800843a <_printf_i+0x1e6>
 8008436:	1b80      	subs	r0, r0, r6
 8008438:	6060      	str	r0, [r4, #4]
 800843a:	6863      	ldr	r3, [r4, #4]
 800843c:	6123      	str	r3, [r4, #16]
 800843e:	2300      	movs	r3, #0
 8008440:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008444:	e7aa      	b.n	800839c <_printf_i+0x148>
 8008446:	6923      	ldr	r3, [r4, #16]
 8008448:	4632      	mov	r2, r6
 800844a:	4649      	mov	r1, r9
 800844c:	4640      	mov	r0, r8
 800844e:	47d0      	blx	sl
 8008450:	3001      	adds	r0, #1
 8008452:	d0ad      	beq.n	80083b0 <_printf_i+0x15c>
 8008454:	6823      	ldr	r3, [r4, #0]
 8008456:	079b      	lsls	r3, r3, #30
 8008458:	d413      	bmi.n	8008482 <_printf_i+0x22e>
 800845a:	68e0      	ldr	r0, [r4, #12]
 800845c:	9b03      	ldr	r3, [sp, #12]
 800845e:	4298      	cmp	r0, r3
 8008460:	bfb8      	it	lt
 8008462:	4618      	movlt	r0, r3
 8008464:	e7a6      	b.n	80083b4 <_printf_i+0x160>
 8008466:	2301      	movs	r3, #1
 8008468:	4632      	mov	r2, r6
 800846a:	4649      	mov	r1, r9
 800846c:	4640      	mov	r0, r8
 800846e:	47d0      	blx	sl
 8008470:	3001      	adds	r0, #1
 8008472:	d09d      	beq.n	80083b0 <_printf_i+0x15c>
 8008474:	3501      	adds	r5, #1
 8008476:	68e3      	ldr	r3, [r4, #12]
 8008478:	9903      	ldr	r1, [sp, #12]
 800847a:	1a5b      	subs	r3, r3, r1
 800847c:	42ab      	cmp	r3, r5
 800847e:	dcf2      	bgt.n	8008466 <_printf_i+0x212>
 8008480:	e7eb      	b.n	800845a <_printf_i+0x206>
 8008482:	2500      	movs	r5, #0
 8008484:	f104 0619 	add.w	r6, r4, #25
 8008488:	e7f5      	b.n	8008476 <_printf_i+0x222>
 800848a:	bf00      	nop
 800848c:	0800af12 	.word	0x0800af12
 8008490:	0800af23 	.word	0x0800af23

08008494 <std>:
 8008494:	2300      	movs	r3, #0
 8008496:	b510      	push	{r4, lr}
 8008498:	4604      	mov	r4, r0
 800849a:	e9c0 3300 	strd	r3, r3, [r0]
 800849e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80084a2:	6083      	str	r3, [r0, #8]
 80084a4:	8181      	strh	r1, [r0, #12]
 80084a6:	6643      	str	r3, [r0, #100]	@ 0x64
 80084a8:	81c2      	strh	r2, [r0, #14]
 80084aa:	6183      	str	r3, [r0, #24]
 80084ac:	4619      	mov	r1, r3
 80084ae:	2208      	movs	r2, #8
 80084b0:	305c      	adds	r0, #92	@ 0x5c
 80084b2:	f000 f8f4 	bl	800869e <memset>
 80084b6:	4b0d      	ldr	r3, [pc, #52]	@ (80084ec <std+0x58>)
 80084b8:	6263      	str	r3, [r4, #36]	@ 0x24
 80084ba:	4b0d      	ldr	r3, [pc, #52]	@ (80084f0 <std+0x5c>)
 80084bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80084be:	4b0d      	ldr	r3, [pc, #52]	@ (80084f4 <std+0x60>)
 80084c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80084c2:	4b0d      	ldr	r3, [pc, #52]	@ (80084f8 <std+0x64>)
 80084c4:	6323      	str	r3, [r4, #48]	@ 0x30
 80084c6:	4b0d      	ldr	r3, [pc, #52]	@ (80084fc <std+0x68>)
 80084c8:	6224      	str	r4, [r4, #32]
 80084ca:	429c      	cmp	r4, r3
 80084cc:	d006      	beq.n	80084dc <std+0x48>
 80084ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80084d2:	4294      	cmp	r4, r2
 80084d4:	d002      	beq.n	80084dc <std+0x48>
 80084d6:	33d0      	adds	r3, #208	@ 0xd0
 80084d8:	429c      	cmp	r4, r3
 80084da:	d105      	bne.n	80084e8 <std+0x54>
 80084dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80084e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084e4:	f000 b9ae 	b.w	8008844 <__retarget_lock_init_recursive>
 80084e8:	bd10      	pop	{r4, pc}
 80084ea:	bf00      	nop
 80084ec:	08008619 	.word	0x08008619
 80084f0:	0800863b 	.word	0x0800863b
 80084f4:	08008673 	.word	0x08008673
 80084f8:	08008697 	.word	0x08008697
 80084fc:	20004e38 	.word	0x20004e38

08008500 <stdio_exit_handler>:
 8008500:	4a02      	ldr	r2, [pc, #8]	@ (800850c <stdio_exit_handler+0xc>)
 8008502:	4903      	ldr	r1, [pc, #12]	@ (8008510 <stdio_exit_handler+0x10>)
 8008504:	4803      	ldr	r0, [pc, #12]	@ (8008514 <stdio_exit_handler+0x14>)
 8008506:	f000 b869 	b.w	80085dc <_fwalk_sglue>
 800850a:	bf00      	nop
 800850c:	2000001c 	.word	0x2000001c
 8008510:	08009f0d 	.word	0x08009f0d
 8008514:	2000002c 	.word	0x2000002c

08008518 <cleanup_stdio>:
 8008518:	6841      	ldr	r1, [r0, #4]
 800851a:	4b0c      	ldr	r3, [pc, #48]	@ (800854c <cleanup_stdio+0x34>)
 800851c:	4299      	cmp	r1, r3
 800851e:	b510      	push	{r4, lr}
 8008520:	4604      	mov	r4, r0
 8008522:	d001      	beq.n	8008528 <cleanup_stdio+0x10>
 8008524:	f001 fcf2 	bl	8009f0c <_fflush_r>
 8008528:	68a1      	ldr	r1, [r4, #8]
 800852a:	4b09      	ldr	r3, [pc, #36]	@ (8008550 <cleanup_stdio+0x38>)
 800852c:	4299      	cmp	r1, r3
 800852e:	d002      	beq.n	8008536 <cleanup_stdio+0x1e>
 8008530:	4620      	mov	r0, r4
 8008532:	f001 fceb 	bl	8009f0c <_fflush_r>
 8008536:	68e1      	ldr	r1, [r4, #12]
 8008538:	4b06      	ldr	r3, [pc, #24]	@ (8008554 <cleanup_stdio+0x3c>)
 800853a:	4299      	cmp	r1, r3
 800853c:	d004      	beq.n	8008548 <cleanup_stdio+0x30>
 800853e:	4620      	mov	r0, r4
 8008540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008544:	f001 bce2 	b.w	8009f0c <_fflush_r>
 8008548:	bd10      	pop	{r4, pc}
 800854a:	bf00      	nop
 800854c:	20004e38 	.word	0x20004e38
 8008550:	20004ea0 	.word	0x20004ea0
 8008554:	20004f08 	.word	0x20004f08

08008558 <global_stdio_init.part.0>:
 8008558:	b510      	push	{r4, lr}
 800855a:	4b0b      	ldr	r3, [pc, #44]	@ (8008588 <global_stdio_init.part.0+0x30>)
 800855c:	4c0b      	ldr	r4, [pc, #44]	@ (800858c <global_stdio_init.part.0+0x34>)
 800855e:	4a0c      	ldr	r2, [pc, #48]	@ (8008590 <global_stdio_init.part.0+0x38>)
 8008560:	601a      	str	r2, [r3, #0]
 8008562:	4620      	mov	r0, r4
 8008564:	2200      	movs	r2, #0
 8008566:	2104      	movs	r1, #4
 8008568:	f7ff ff94 	bl	8008494 <std>
 800856c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008570:	2201      	movs	r2, #1
 8008572:	2109      	movs	r1, #9
 8008574:	f7ff ff8e 	bl	8008494 <std>
 8008578:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800857c:	2202      	movs	r2, #2
 800857e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008582:	2112      	movs	r1, #18
 8008584:	f7ff bf86 	b.w	8008494 <std>
 8008588:	20004f70 	.word	0x20004f70
 800858c:	20004e38 	.word	0x20004e38
 8008590:	08008501 	.word	0x08008501

08008594 <__sfp_lock_acquire>:
 8008594:	4801      	ldr	r0, [pc, #4]	@ (800859c <__sfp_lock_acquire+0x8>)
 8008596:	f000 b956 	b.w	8008846 <__retarget_lock_acquire_recursive>
 800859a:	bf00      	nop
 800859c:	20004f79 	.word	0x20004f79

080085a0 <__sfp_lock_release>:
 80085a0:	4801      	ldr	r0, [pc, #4]	@ (80085a8 <__sfp_lock_release+0x8>)
 80085a2:	f000 b951 	b.w	8008848 <__retarget_lock_release_recursive>
 80085a6:	bf00      	nop
 80085a8:	20004f79 	.word	0x20004f79

080085ac <__sinit>:
 80085ac:	b510      	push	{r4, lr}
 80085ae:	4604      	mov	r4, r0
 80085b0:	f7ff fff0 	bl	8008594 <__sfp_lock_acquire>
 80085b4:	6a23      	ldr	r3, [r4, #32]
 80085b6:	b11b      	cbz	r3, 80085c0 <__sinit+0x14>
 80085b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085bc:	f7ff bff0 	b.w	80085a0 <__sfp_lock_release>
 80085c0:	4b04      	ldr	r3, [pc, #16]	@ (80085d4 <__sinit+0x28>)
 80085c2:	6223      	str	r3, [r4, #32]
 80085c4:	4b04      	ldr	r3, [pc, #16]	@ (80085d8 <__sinit+0x2c>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d1f5      	bne.n	80085b8 <__sinit+0xc>
 80085cc:	f7ff ffc4 	bl	8008558 <global_stdio_init.part.0>
 80085d0:	e7f2      	b.n	80085b8 <__sinit+0xc>
 80085d2:	bf00      	nop
 80085d4:	08008519 	.word	0x08008519
 80085d8:	20004f70 	.word	0x20004f70

080085dc <_fwalk_sglue>:
 80085dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085e0:	4607      	mov	r7, r0
 80085e2:	4688      	mov	r8, r1
 80085e4:	4614      	mov	r4, r2
 80085e6:	2600      	movs	r6, #0
 80085e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80085ec:	f1b9 0901 	subs.w	r9, r9, #1
 80085f0:	d505      	bpl.n	80085fe <_fwalk_sglue+0x22>
 80085f2:	6824      	ldr	r4, [r4, #0]
 80085f4:	2c00      	cmp	r4, #0
 80085f6:	d1f7      	bne.n	80085e8 <_fwalk_sglue+0xc>
 80085f8:	4630      	mov	r0, r6
 80085fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085fe:	89ab      	ldrh	r3, [r5, #12]
 8008600:	2b01      	cmp	r3, #1
 8008602:	d907      	bls.n	8008614 <_fwalk_sglue+0x38>
 8008604:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008608:	3301      	adds	r3, #1
 800860a:	d003      	beq.n	8008614 <_fwalk_sglue+0x38>
 800860c:	4629      	mov	r1, r5
 800860e:	4638      	mov	r0, r7
 8008610:	47c0      	blx	r8
 8008612:	4306      	orrs	r6, r0
 8008614:	3568      	adds	r5, #104	@ 0x68
 8008616:	e7e9      	b.n	80085ec <_fwalk_sglue+0x10>

08008618 <__sread>:
 8008618:	b510      	push	{r4, lr}
 800861a:	460c      	mov	r4, r1
 800861c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008620:	f000 f8c2 	bl	80087a8 <_read_r>
 8008624:	2800      	cmp	r0, #0
 8008626:	bfab      	itete	ge
 8008628:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800862a:	89a3      	ldrhlt	r3, [r4, #12]
 800862c:	181b      	addge	r3, r3, r0
 800862e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008632:	bfac      	ite	ge
 8008634:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008636:	81a3      	strhlt	r3, [r4, #12]
 8008638:	bd10      	pop	{r4, pc}

0800863a <__swrite>:
 800863a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800863e:	461f      	mov	r7, r3
 8008640:	898b      	ldrh	r3, [r1, #12]
 8008642:	05db      	lsls	r3, r3, #23
 8008644:	4605      	mov	r5, r0
 8008646:	460c      	mov	r4, r1
 8008648:	4616      	mov	r6, r2
 800864a:	d505      	bpl.n	8008658 <__swrite+0x1e>
 800864c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008650:	2302      	movs	r3, #2
 8008652:	2200      	movs	r2, #0
 8008654:	f000 f896 	bl	8008784 <_lseek_r>
 8008658:	89a3      	ldrh	r3, [r4, #12]
 800865a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800865e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008662:	81a3      	strh	r3, [r4, #12]
 8008664:	4632      	mov	r2, r6
 8008666:	463b      	mov	r3, r7
 8008668:	4628      	mov	r0, r5
 800866a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800866e:	f000 b8ad 	b.w	80087cc <_write_r>

08008672 <__sseek>:
 8008672:	b510      	push	{r4, lr}
 8008674:	460c      	mov	r4, r1
 8008676:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800867a:	f000 f883 	bl	8008784 <_lseek_r>
 800867e:	1c43      	adds	r3, r0, #1
 8008680:	89a3      	ldrh	r3, [r4, #12]
 8008682:	bf15      	itete	ne
 8008684:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008686:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800868a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800868e:	81a3      	strheq	r3, [r4, #12]
 8008690:	bf18      	it	ne
 8008692:	81a3      	strhne	r3, [r4, #12]
 8008694:	bd10      	pop	{r4, pc}

08008696 <__sclose>:
 8008696:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800869a:	f000 b80d 	b.w	80086b8 <_close_r>

0800869e <memset>:
 800869e:	4402      	add	r2, r0
 80086a0:	4603      	mov	r3, r0
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d100      	bne.n	80086a8 <memset+0xa>
 80086a6:	4770      	bx	lr
 80086a8:	f803 1b01 	strb.w	r1, [r3], #1
 80086ac:	e7f9      	b.n	80086a2 <memset+0x4>
	...

080086b0 <_localeconv_r>:
 80086b0:	4800      	ldr	r0, [pc, #0]	@ (80086b4 <_localeconv_r+0x4>)
 80086b2:	4770      	bx	lr
 80086b4:	20000168 	.word	0x20000168

080086b8 <_close_r>:
 80086b8:	b538      	push	{r3, r4, r5, lr}
 80086ba:	4d06      	ldr	r5, [pc, #24]	@ (80086d4 <_close_r+0x1c>)
 80086bc:	2300      	movs	r3, #0
 80086be:	4604      	mov	r4, r0
 80086c0:	4608      	mov	r0, r1
 80086c2:	602b      	str	r3, [r5, #0]
 80086c4:	f7f9 ffba 	bl	800263c <_close>
 80086c8:	1c43      	adds	r3, r0, #1
 80086ca:	d102      	bne.n	80086d2 <_close_r+0x1a>
 80086cc:	682b      	ldr	r3, [r5, #0]
 80086ce:	b103      	cbz	r3, 80086d2 <_close_r+0x1a>
 80086d0:	6023      	str	r3, [r4, #0]
 80086d2:	bd38      	pop	{r3, r4, r5, pc}
 80086d4:	20004f74 	.word	0x20004f74

080086d8 <_reclaim_reent>:
 80086d8:	4b29      	ldr	r3, [pc, #164]	@ (8008780 <_reclaim_reent+0xa8>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4283      	cmp	r3, r0
 80086de:	b570      	push	{r4, r5, r6, lr}
 80086e0:	4604      	mov	r4, r0
 80086e2:	d04b      	beq.n	800877c <_reclaim_reent+0xa4>
 80086e4:	69c3      	ldr	r3, [r0, #28]
 80086e6:	b1ab      	cbz	r3, 8008714 <_reclaim_reent+0x3c>
 80086e8:	68db      	ldr	r3, [r3, #12]
 80086ea:	b16b      	cbz	r3, 8008708 <_reclaim_reent+0x30>
 80086ec:	2500      	movs	r5, #0
 80086ee:	69e3      	ldr	r3, [r4, #28]
 80086f0:	68db      	ldr	r3, [r3, #12]
 80086f2:	5959      	ldr	r1, [r3, r5]
 80086f4:	2900      	cmp	r1, #0
 80086f6:	d13b      	bne.n	8008770 <_reclaim_reent+0x98>
 80086f8:	3504      	adds	r5, #4
 80086fa:	2d80      	cmp	r5, #128	@ 0x80
 80086fc:	d1f7      	bne.n	80086ee <_reclaim_reent+0x16>
 80086fe:	69e3      	ldr	r3, [r4, #28]
 8008700:	4620      	mov	r0, r4
 8008702:	68d9      	ldr	r1, [r3, #12]
 8008704:	f000 fefc 	bl	8009500 <_free_r>
 8008708:	69e3      	ldr	r3, [r4, #28]
 800870a:	6819      	ldr	r1, [r3, #0]
 800870c:	b111      	cbz	r1, 8008714 <_reclaim_reent+0x3c>
 800870e:	4620      	mov	r0, r4
 8008710:	f000 fef6 	bl	8009500 <_free_r>
 8008714:	6961      	ldr	r1, [r4, #20]
 8008716:	b111      	cbz	r1, 800871e <_reclaim_reent+0x46>
 8008718:	4620      	mov	r0, r4
 800871a:	f000 fef1 	bl	8009500 <_free_r>
 800871e:	69e1      	ldr	r1, [r4, #28]
 8008720:	b111      	cbz	r1, 8008728 <_reclaim_reent+0x50>
 8008722:	4620      	mov	r0, r4
 8008724:	f000 feec 	bl	8009500 <_free_r>
 8008728:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800872a:	b111      	cbz	r1, 8008732 <_reclaim_reent+0x5a>
 800872c:	4620      	mov	r0, r4
 800872e:	f000 fee7 	bl	8009500 <_free_r>
 8008732:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008734:	b111      	cbz	r1, 800873c <_reclaim_reent+0x64>
 8008736:	4620      	mov	r0, r4
 8008738:	f000 fee2 	bl	8009500 <_free_r>
 800873c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800873e:	b111      	cbz	r1, 8008746 <_reclaim_reent+0x6e>
 8008740:	4620      	mov	r0, r4
 8008742:	f000 fedd 	bl	8009500 <_free_r>
 8008746:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008748:	b111      	cbz	r1, 8008750 <_reclaim_reent+0x78>
 800874a:	4620      	mov	r0, r4
 800874c:	f000 fed8 	bl	8009500 <_free_r>
 8008750:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008752:	b111      	cbz	r1, 800875a <_reclaim_reent+0x82>
 8008754:	4620      	mov	r0, r4
 8008756:	f000 fed3 	bl	8009500 <_free_r>
 800875a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800875c:	b111      	cbz	r1, 8008764 <_reclaim_reent+0x8c>
 800875e:	4620      	mov	r0, r4
 8008760:	f000 fece 	bl	8009500 <_free_r>
 8008764:	6a23      	ldr	r3, [r4, #32]
 8008766:	b14b      	cbz	r3, 800877c <_reclaim_reent+0xa4>
 8008768:	4620      	mov	r0, r4
 800876a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800876e:	4718      	bx	r3
 8008770:	680e      	ldr	r6, [r1, #0]
 8008772:	4620      	mov	r0, r4
 8008774:	f000 fec4 	bl	8009500 <_free_r>
 8008778:	4631      	mov	r1, r6
 800877a:	e7bb      	b.n	80086f4 <_reclaim_reent+0x1c>
 800877c:	bd70      	pop	{r4, r5, r6, pc}
 800877e:	bf00      	nop
 8008780:	20000028 	.word	0x20000028

08008784 <_lseek_r>:
 8008784:	b538      	push	{r3, r4, r5, lr}
 8008786:	4d07      	ldr	r5, [pc, #28]	@ (80087a4 <_lseek_r+0x20>)
 8008788:	4604      	mov	r4, r0
 800878a:	4608      	mov	r0, r1
 800878c:	4611      	mov	r1, r2
 800878e:	2200      	movs	r2, #0
 8008790:	602a      	str	r2, [r5, #0]
 8008792:	461a      	mov	r2, r3
 8008794:	f7f9 ff79 	bl	800268a <_lseek>
 8008798:	1c43      	adds	r3, r0, #1
 800879a:	d102      	bne.n	80087a2 <_lseek_r+0x1e>
 800879c:	682b      	ldr	r3, [r5, #0]
 800879e:	b103      	cbz	r3, 80087a2 <_lseek_r+0x1e>
 80087a0:	6023      	str	r3, [r4, #0]
 80087a2:	bd38      	pop	{r3, r4, r5, pc}
 80087a4:	20004f74 	.word	0x20004f74

080087a8 <_read_r>:
 80087a8:	b538      	push	{r3, r4, r5, lr}
 80087aa:	4d07      	ldr	r5, [pc, #28]	@ (80087c8 <_read_r+0x20>)
 80087ac:	4604      	mov	r4, r0
 80087ae:	4608      	mov	r0, r1
 80087b0:	4611      	mov	r1, r2
 80087b2:	2200      	movs	r2, #0
 80087b4:	602a      	str	r2, [r5, #0]
 80087b6:	461a      	mov	r2, r3
 80087b8:	f7f9 ff07 	bl	80025ca <_read>
 80087bc:	1c43      	adds	r3, r0, #1
 80087be:	d102      	bne.n	80087c6 <_read_r+0x1e>
 80087c0:	682b      	ldr	r3, [r5, #0]
 80087c2:	b103      	cbz	r3, 80087c6 <_read_r+0x1e>
 80087c4:	6023      	str	r3, [r4, #0]
 80087c6:	bd38      	pop	{r3, r4, r5, pc}
 80087c8:	20004f74 	.word	0x20004f74

080087cc <_write_r>:
 80087cc:	b538      	push	{r3, r4, r5, lr}
 80087ce:	4d07      	ldr	r5, [pc, #28]	@ (80087ec <_write_r+0x20>)
 80087d0:	4604      	mov	r4, r0
 80087d2:	4608      	mov	r0, r1
 80087d4:	4611      	mov	r1, r2
 80087d6:	2200      	movs	r2, #0
 80087d8:	602a      	str	r2, [r5, #0]
 80087da:	461a      	mov	r2, r3
 80087dc:	f7f9 ff12 	bl	8002604 <_write>
 80087e0:	1c43      	adds	r3, r0, #1
 80087e2:	d102      	bne.n	80087ea <_write_r+0x1e>
 80087e4:	682b      	ldr	r3, [r5, #0]
 80087e6:	b103      	cbz	r3, 80087ea <_write_r+0x1e>
 80087e8:	6023      	str	r3, [r4, #0]
 80087ea:	bd38      	pop	{r3, r4, r5, pc}
 80087ec:	20004f74 	.word	0x20004f74

080087f0 <__errno>:
 80087f0:	4b01      	ldr	r3, [pc, #4]	@ (80087f8 <__errno+0x8>)
 80087f2:	6818      	ldr	r0, [r3, #0]
 80087f4:	4770      	bx	lr
 80087f6:	bf00      	nop
 80087f8:	20000028 	.word	0x20000028

080087fc <__libc_init_array>:
 80087fc:	b570      	push	{r4, r5, r6, lr}
 80087fe:	4d0d      	ldr	r5, [pc, #52]	@ (8008834 <__libc_init_array+0x38>)
 8008800:	4c0d      	ldr	r4, [pc, #52]	@ (8008838 <__libc_init_array+0x3c>)
 8008802:	1b64      	subs	r4, r4, r5
 8008804:	10a4      	asrs	r4, r4, #2
 8008806:	2600      	movs	r6, #0
 8008808:	42a6      	cmp	r6, r4
 800880a:	d109      	bne.n	8008820 <__libc_init_array+0x24>
 800880c:	4d0b      	ldr	r5, [pc, #44]	@ (800883c <__libc_init_array+0x40>)
 800880e:	4c0c      	ldr	r4, [pc, #48]	@ (8008840 <__libc_init_array+0x44>)
 8008810:	f001 febc 	bl	800a58c <_init>
 8008814:	1b64      	subs	r4, r4, r5
 8008816:	10a4      	asrs	r4, r4, #2
 8008818:	2600      	movs	r6, #0
 800881a:	42a6      	cmp	r6, r4
 800881c:	d105      	bne.n	800882a <__libc_init_array+0x2e>
 800881e:	bd70      	pop	{r4, r5, r6, pc}
 8008820:	f855 3b04 	ldr.w	r3, [r5], #4
 8008824:	4798      	blx	r3
 8008826:	3601      	adds	r6, #1
 8008828:	e7ee      	b.n	8008808 <__libc_init_array+0xc>
 800882a:	f855 3b04 	ldr.w	r3, [r5], #4
 800882e:	4798      	blx	r3
 8008830:	3601      	adds	r6, #1
 8008832:	e7f2      	b.n	800881a <__libc_init_array+0x1e>
 8008834:	0800b278 	.word	0x0800b278
 8008838:	0800b278 	.word	0x0800b278
 800883c:	0800b278 	.word	0x0800b278
 8008840:	0800b27c 	.word	0x0800b27c

08008844 <__retarget_lock_init_recursive>:
 8008844:	4770      	bx	lr

08008846 <__retarget_lock_acquire_recursive>:
 8008846:	4770      	bx	lr

08008848 <__retarget_lock_release_recursive>:
 8008848:	4770      	bx	lr

0800884a <memcpy>:
 800884a:	440a      	add	r2, r1
 800884c:	4291      	cmp	r1, r2
 800884e:	f100 33ff 	add.w	r3, r0, #4294967295
 8008852:	d100      	bne.n	8008856 <memcpy+0xc>
 8008854:	4770      	bx	lr
 8008856:	b510      	push	{r4, lr}
 8008858:	f811 4b01 	ldrb.w	r4, [r1], #1
 800885c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008860:	4291      	cmp	r1, r2
 8008862:	d1f9      	bne.n	8008858 <memcpy+0xe>
 8008864:	bd10      	pop	{r4, pc}

08008866 <quorem>:
 8008866:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800886a:	6903      	ldr	r3, [r0, #16]
 800886c:	690c      	ldr	r4, [r1, #16]
 800886e:	42a3      	cmp	r3, r4
 8008870:	4607      	mov	r7, r0
 8008872:	db7e      	blt.n	8008972 <quorem+0x10c>
 8008874:	3c01      	subs	r4, #1
 8008876:	f101 0814 	add.w	r8, r1, #20
 800887a:	00a3      	lsls	r3, r4, #2
 800887c:	f100 0514 	add.w	r5, r0, #20
 8008880:	9300      	str	r3, [sp, #0]
 8008882:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008886:	9301      	str	r3, [sp, #4]
 8008888:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800888c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008890:	3301      	adds	r3, #1
 8008892:	429a      	cmp	r2, r3
 8008894:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008898:	fbb2 f6f3 	udiv	r6, r2, r3
 800889c:	d32e      	bcc.n	80088fc <quorem+0x96>
 800889e:	f04f 0a00 	mov.w	sl, #0
 80088a2:	46c4      	mov	ip, r8
 80088a4:	46ae      	mov	lr, r5
 80088a6:	46d3      	mov	fp, sl
 80088a8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80088ac:	b298      	uxth	r0, r3
 80088ae:	fb06 a000 	mla	r0, r6, r0, sl
 80088b2:	0c02      	lsrs	r2, r0, #16
 80088b4:	0c1b      	lsrs	r3, r3, #16
 80088b6:	fb06 2303 	mla	r3, r6, r3, r2
 80088ba:	f8de 2000 	ldr.w	r2, [lr]
 80088be:	b280      	uxth	r0, r0
 80088c0:	b292      	uxth	r2, r2
 80088c2:	1a12      	subs	r2, r2, r0
 80088c4:	445a      	add	r2, fp
 80088c6:	f8de 0000 	ldr.w	r0, [lr]
 80088ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80088ce:	b29b      	uxth	r3, r3
 80088d0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80088d4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80088d8:	b292      	uxth	r2, r2
 80088da:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80088de:	45e1      	cmp	r9, ip
 80088e0:	f84e 2b04 	str.w	r2, [lr], #4
 80088e4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80088e8:	d2de      	bcs.n	80088a8 <quorem+0x42>
 80088ea:	9b00      	ldr	r3, [sp, #0]
 80088ec:	58eb      	ldr	r3, [r5, r3]
 80088ee:	b92b      	cbnz	r3, 80088fc <quorem+0x96>
 80088f0:	9b01      	ldr	r3, [sp, #4]
 80088f2:	3b04      	subs	r3, #4
 80088f4:	429d      	cmp	r5, r3
 80088f6:	461a      	mov	r2, r3
 80088f8:	d32f      	bcc.n	800895a <quorem+0xf4>
 80088fa:	613c      	str	r4, [r7, #16]
 80088fc:	4638      	mov	r0, r7
 80088fe:	f001 f979 	bl	8009bf4 <__mcmp>
 8008902:	2800      	cmp	r0, #0
 8008904:	db25      	blt.n	8008952 <quorem+0xec>
 8008906:	4629      	mov	r1, r5
 8008908:	2000      	movs	r0, #0
 800890a:	f858 2b04 	ldr.w	r2, [r8], #4
 800890e:	f8d1 c000 	ldr.w	ip, [r1]
 8008912:	fa1f fe82 	uxth.w	lr, r2
 8008916:	fa1f f38c 	uxth.w	r3, ip
 800891a:	eba3 030e 	sub.w	r3, r3, lr
 800891e:	4403      	add	r3, r0
 8008920:	0c12      	lsrs	r2, r2, #16
 8008922:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008926:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800892a:	b29b      	uxth	r3, r3
 800892c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008930:	45c1      	cmp	r9, r8
 8008932:	f841 3b04 	str.w	r3, [r1], #4
 8008936:	ea4f 4022 	mov.w	r0, r2, asr #16
 800893a:	d2e6      	bcs.n	800890a <quorem+0xa4>
 800893c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008940:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008944:	b922      	cbnz	r2, 8008950 <quorem+0xea>
 8008946:	3b04      	subs	r3, #4
 8008948:	429d      	cmp	r5, r3
 800894a:	461a      	mov	r2, r3
 800894c:	d30b      	bcc.n	8008966 <quorem+0x100>
 800894e:	613c      	str	r4, [r7, #16]
 8008950:	3601      	adds	r6, #1
 8008952:	4630      	mov	r0, r6
 8008954:	b003      	add	sp, #12
 8008956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800895a:	6812      	ldr	r2, [r2, #0]
 800895c:	3b04      	subs	r3, #4
 800895e:	2a00      	cmp	r2, #0
 8008960:	d1cb      	bne.n	80088fa <quorem+0x94>
 8008962:	3c01      	subs	r4, #1
 8008964:	e7c6      	b.n	80088f4 <quorem+0x8e>
 8008966:	6812      	ldr	r2, [r2, #0]
 8008968:	3b04      	subs	r3, #4
 800896a:	2a00      	cmp	r2, #0
 800896c:	d1ef      	bne.n	800894e <quorem+0xe8>
 800896e:	3c01      	subs	r4, #1
 8008970:	e7ea      	b.n	8008948 <quorem+0xe2>
 8008972:	2000      	movs	r0, #0
 8008974:	e7ee      	b.n	8008954 <quorem+0xee>
	...

08008978 <_dtoa_r>:
 8008978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800897c:	69c7      	ldr	r7, [r0, #28]
 800897e:	b099      	sub	sp, #100	@ 0x64
 8008980:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008984:	ec55 4b10 	vmov	r4, r5, d0
 8008988:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800898a:	9109      	str	r1, [sp, #36]	@ 0x24
 800898c:	4683      	mov	fp, r0
 800898e:	920e      	str	r2, [sp, #56]	@ 0x38
 8008990:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008992:	b97f      	cbnz	r7, 80089b4 <_dtoa_r+0x3c>
 8008994:	2010      	movs	r0, #16
 8008996:	f000 fdfd 	bl	8009594 <malloc>
 800899a:	4602      	mov	r2, r0
 800899c:	f8cb 001c 	str.w	r0, [fp, #28]
 80089a0:	b920      	cbnz	r0, 80089ac <_dtoa_r+0x34>
 80089a2:	4ba7      	ldr	r3, [pc, #668]	@ (8008c40 <_dtoa_r+0x2c8>)
 80089a4:	21ef      	movs	r1, #239	@ 0xef
 80089a6:	48a7      	ldr	r0, [pc, #668]	@ (8008c44 <_dtoa_r+0x2cc>)
 80089a8:	f001 fae8 	bl	8009f7c <__assert_func>
 80089ac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80089b0:	6007      	str	r7, [r0, #0]
 80089b2:	60c7      	str	r7, [r0, #12]
 80089b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80089b8:	6819      	ldr	r1, [r3, #0]
 80089ba:	b159      	cbz	r1, 80089d4 <_dtoa_r+0x5c>
 80089bc:	685a      	ldr	r2, [r3, #4]
 80089be:	604a      	str	r2, [r1, #4]
 80089c0:	2301      	movs	r3, #1
 80089c2:	4093      	lsls	r3, r2
 80089c4:	608b      	str	r3, [r1, #8]
 80089c6:	4658      	mov	r0, fp
 80089c8:	f000 feda 	bl	8009780 <_Bfree>
 80089cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80089d0:	2200      	movs	r2, #0
 80089d2:	601a      	str	r2, [r3, #0]
 80089d4:	1e2b      	subs	r3, r5, #0
 80089d6:	bfb9      	ittee	lt
 80089d8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80089dc:	9303      	strlt	r3, [sp, #12]
 80089de:	2300      	movge	r3, #0
 80089e0:	6033      	strge	r3, [r6, #0]
 80089e2:	9f03      	ldr	r7, [sp, #12]
 80089e4:	4b98      	ldr	r3, [pc, #608]	@ (8008c48 <_dtoa_r+0x2d0>)
 80089e6:	bfbc      	itt	lt
 80089e8:	2201      	movlt	r2, #1
 80089ea:	6032      	strlt	r2, [r6, #0]
 80089ec:	43bb      	bics	r3, r7
 80089ee:	d112      	bne.n	8008a16 <_dtoa_r+0x9e>
 80089f0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80089f2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80089f6:	6013      	str	r3, [r2, #0]
 80089f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80089fc:	4323      	orrs	r3, r4
 80089fe:	f000 854d 	beq.w	800949c <_dtoa_r+0xb24>
 8008a02:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008a04:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008c5c <_dtoa_r+0x2e4>
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	f000 854f 	beq.w	80094ac <_dtoa_r+0xb34>
 8008a0e:	f10a 0303 	add.w	r3, sl, #3
 8008a12:	f000 bd49 	b.w	80094a8 <_dtoa_r+0xb30>
 8008a16:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	ec51 0b17 	vmov	r0, r1, d7
 8008a20:	2300      	movs	r3, #0
 8008a22:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008a26:	f7f8 f84f 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a2a:	4680      	mov	r8, r0
 8008a2c:	b158      	cbz	r0, 8008a46 <_dtoa_r+0xce>
 8008a2e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008a30:	2301      	movs	r3, #1
 8008a32:	6013      	str	r3, [r2, #0]
 8008a34:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008a36:	b113      	cbz	r3, 8008a3e <_dtoa_r+0xc6>
 8008a38:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008a3a:	4b84      	ldr	r3, [pc, #528]	@ (8008c4c <_dtoa_r+0x2d4>)
 8008a3c:	6013      	str	r3, [r2, #0]
 8008a3e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008c60 <_dtoa_r+0x2e8>
 8008a42:	f000 bd33 	b.w	80094ac <_dtoa_r+0xb34>
 8008a46:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008a4a:	aa16      	add	r2, sp, #88	@ 0x58
 8008a4c:	a917      	add	r1, sp, #92	@ 0x5c
 8008a4e:	4658      	mov	r0, fp
 8008a50:	f001 f980 	bl	8009d54 <__d2b>
 8008a54:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008a58:	4681      	mov	r9, r0
 8008a5a:	2e00      	cmp	r6, #0
 8008a5c:	d077      	beq.n	8008b4e <_dtoa_r+0x1d6>
 8008a5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008a60:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008a64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008a6c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008a70:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008a74:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008a78:	4619      	mov	r1, r3
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	4b74      	ldr	r3, [pc, #464]	@ (8008c50 <_dtoa_r+0x2d8>)
 8008a7e:	f7f7 fc03 	bl	8000288 <__aeabi_dsub>
 8008a82:	a369      	add	r3, pc, #420	@ (adr r3, 8008c28 <_dtoa_r+0x2b0>)
 8008a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a88:	f7f7 fdb6 	bl	80005f8 <__aeabi_dmul>
 8008a8c:	a368      	add	r3, pc, #416	@ (adr r3, 8008c30 <_dtoa_r+0x2b8>)
 8008a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a92:	f7f7 fbfb 	bl	800028c <__adddf3>
 8008a96:	4604      	mov	r4, r0
 8008a98:	4630      	mov	r0, r6
 8008a9a:	460d      	mov	r5, r1
 8008a9c:	f7f7 fd42 	bl	8000524 <__aeabi_i2d>
 8008aa0:	a365      	add	r3, pc, #404	@ (adr r3, 8008c38 <_dtoa_r+0x2c0>)
 8008aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa6:	f7f7 fda7 	bl	80005f8 <__aeabi_dmul>
 8008aaa:	4602      	mov	r2, r0
 8008aac:	460b      	mov	r3, r1
 8008aae:	4620      	mov	r0, r4
 8008ab0:	4629      	mov	r1, r5
 8008ab2:	f7f7 fbeb 	bl	800028c <__adddf3>
 8008ab6:	4604      	mov	r4, r0
 8008ab8:	460d      	mov	r5, r1
 8008aba:	f7f8 f84d 	bl	8000b58 <__aeabi_d2iz>
 8008abe:	2200      	movs	r2, #0
 8008ac0:	4607      	mov	r7, r0
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	4620      	mov	r0, r4
 8008ac6:	4629      	mov	r1, r5
 8008ac8:	f7f8 f808 	bl	8000adc <__aeabi_dcmplt>
 8008acc:	b140      	cbz	r0, 8008ae0 <_dtoa_r+0x168>
 8008ace:	4638      	mov	r0, r7
 8008ad0:	f7f7 fd28 	bl	8000524 <__aeabi_i2d>
 8008ad4:	4622      	mov	r2, r4
 8008ad6:	462b      	mov	r3, r5
 8008ad8:	f7f7 fff6 	bl	8000ac8 <__aeabi_dcmpeq>
 8008adc:	b900      	cbnz	r0, 8008ae0 <_dtoa_r+0x168>
 8008ade:	3f01      	subs	r7, #1
 8008ae0:	2f16      	cmp	r7, #22
 8008ae2:	d851      	bhi.n	8008b88 <_dtoa_r+0x210>
 8008ae4:	4b5b      	ldr	r3, [pc, #364]	@ (8008c54 <_dtoa_r+0x2dc>)
 8008ae6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008af2:	f7f7 fff3 	bl	8000adc <__aeabi_dcmplt>
 8008af6:	2800      	cmp	r0, #0
 8008af8:	d048      	beq.n	8008b8c <_dtoa_r+0x214>
 8008afa:	3f01      	subs	r7, #1
 8008afc:	2300      	movs	r3, #0
 8008afe:	9312      	str	r3, [sp, #72]	@ 0x48
 8008b00:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008b02:	1b9b      	subs	r3, r3, r6
 8008b04:	1e5a      	subs	r2, r3, #1
 8008b06:	bf44      	itt	mi
 8008b08:	f1c3 0801 	rsbmi	r8, r3, #1
 8008b0c:	2300      	movmi	r3, #0
 8008b0e:	9208      	str	r2, [sp, #32]
 8008b10:	bf54      	ite	pl
 8008b12:	f04f 0800 	movpl.w	r8, #0
 8008b16:	9308      	strmi	r3, [sp, #32]
 8008b18:	2f00      	cmp	r7, #0
 8008b1a:	db39      	blt.n	8008b90 <_dtoa_r+0x218>
 8008b1c:	9b08      	ldr	r3, [sp, #32]
 8008b1e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008b20:	443b      	add	r3, r7
 8008b22:	9308      	str	r3, [sp, #32]
 8008b24:	2300      	movs	r3, #0
 8008b26:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b2a:	2b09      	cmp	r3, #9
 8008b2c:	d864      	bhi.n	8008bf8 <_dtoa_r+0x280>
 8008b2e:	2b05      	cmp	r3, #5
 8008b30:	bfc4      	itt	gt
 8008b32:	3b04      	subgt	r3, #4
 8008b34:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008b36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b38:	f1a3 0302 	sub.w	r3, r3, #2
 8008b3c:	bfcc      	ite	gt
 8008b3e:	2400      	movgt	r4, #0
 8008b40:	2401      	movle	r4, #1
 8008b42:	2b03      	cmp	r3, #3
 8008b44:	d863      	bhi.n	8008c0e <_dtoa_r+0x296>
 8008b46:	e8df f003 	tbb	[pc, r3]
 8008b4a:	372a      	.short	0x372a
 8008b4c:	5535      	.short	0x5535
 8008b4e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008b52:	441e      	add	r6, r3
 8008b54:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008b58:	2b20      	cmp	r3, #32
 8008b5a:	bfc1      	itttt	gt
 8008b5c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008b60:	409f      	lslgt	r7, r3
 8008b62:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008b66:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008b6a:	bfd6      	itet	le
 8008b6c:	f1c3 0320 	rsble	r3, r3, #32
 8008b70:	ea47 0003 	orrgt.w	r0, r7, r3
 8008b74:	fa04 f003 	lslle.w	r0, r4, r3
 8008b78:	f7f7 fcc4 	bl	8000504 <__aeabi_ui2d>
 8008b7c:	2201      	movs	r2, #1
 8008b7e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008b82:	3e01      	subs	r6, #1
 8008b84:	9214      	str	r2, [sp, #80]	@ 0x50
 8008b86:	e777      	b.n	8008a78 <_dtoa_r+0x100>
 8008b88:	2301      	movs	r3, #1
 8008b8a:	e7b8      	b.n	8008afe <_dtoa_r+0x186>
 8008b8c:	9012      	str	r0, [sp, #72]	@ 0x48
 8008b8e:	e7b7      	b.n	8008b00 <_dtoa_r+0x188>
 8008b90:	427b      	negs	r3, r7
 8008b92:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b94:	2300      	movs	r3, #0
 8008b96:	eba8 0807 	sub.w	r8, r8, r7
 8008b9a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008b9c:	e7c4      	b.n	8008b28 <_dtoa_r+0x1b0>
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008ba2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	dc35      	bgt.n	8008c14 <_dtoa_r+0x29c>
 8008ba8:	2301      	movs	r3, #1
 8008baa:	9300      	str	r3, [sp, #0]
 8008bac:	9307      	str	r3, [sp, #28]
 8008bae:	461a      	mov	r2, r3
 8008bb0:	920e      	str	r2, [sp, #56]	@ 0x38
 8008bb2:	e00b      	b.n	8008bcc <_dtoa_r+0x254>
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	e7f3      	b.n	8008ba0 <_dtoa_r+0x228>
 8008bb8:	2300      	movs	r3, #0
 8008bba:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008bbc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008bbe:	18fb      	adds	r3, r7, r3
 8008bc0:	9300      	str	r3, [sp, #0]
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	2b01      	cmp	r3, #1
 8008bc6:	9307      	str	r3, [sp, #28]
 8008bc8:	bfb8      	it	lt
 8008bca:	2301      	movlt	r3, #1
 8008bcc:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008bd0:	2100      	movs	r1, #0
 8008bd2:	2204      	movs	r2, #4
 8008bd4:	f102 0514 	add.w	r5, r2, #20
 8008bd8:	429d      	cmp	r5, r3
 8008bda:	d91f      	bls.n	8008c1c <_dtoa_r+0x2a4>
 8008bdc:	6041      	str	r1, [r0, #4]
 8008bde:	4658      	mov	r0, fp
 8008be0:	f000 fd8e 	bl	8009700 <_Balloc>
 8008be4:	4682      	mov	sl, r0
 8008be6:	2800      	cmp	r0, #0
 8008be8:	d13c      	bne.n	8008c64 <_dtoa_r+0x2ec>
 8008bea:	4b1b      	ldr	r3, [pc, #108]	@ (8008c58 <_dtoa_r+0x2e0>)
 8008bec:	4602      	mov	r2, r0
 8008bee:	f240 11af 	movw	r1, #431	@ 0x1af
 8008bf2:	e6d8      	b.n	80089a6 <_dtoa_r+0x2e>
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	e7e0      	b.n	8008bba <_dtoa_r+0x242>
 8008bf8:	2401      	movs	r4, #1
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	9309      	str	r3, [sp, #36]	@ 0x24
 8008bfe:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008c00:	f04f 33ff 	mov.w	r3, #4294967295
 8008c04:	9300      	str	r3, [sp, #0]
 8008c06:	9307      	str	r3, [sp, #28]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	2312      	movs	r3, #18
 8008c0c:	e7d0      	b.n	8008bb0 <_dtoa_r+0x238>
 8008c0e:	2301      	movs	r3, #1
 8008c10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008c12:	e7f5      	b.n	8008c00 <_dtoa_r+0x288>
 8008c14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c16:	9300      	str	r3, [sp, #0]
 8008c18:	9307      	str	r3, [sp, #28]
 8008c1a:	e7d7      	b.n	8008bcc <_dtoa_r+0x254>
 8008c1c:	3101      	adds	r1, #1
 8008c1e:	0052      	lsls	r2, r2, #1
 8008c20:	e7d8      	b.n	8008bd4 <_dtoa_r+0x25c>
 8008c22:	bf00      	nop
 8008c24:	f3af 8000 	nop.w
 8008c28:	636f4361 	.word	0x636f4361
 8008c2c:	3fd287a7 	.word	0x3fd287a7
 8008c30:	8b60c8b3 	.word	0x8b60c8b3
 8008c34:	3fc68a28 	.word	0x3fc68a28
 8008c38:	509f79fb 	.word	0x509f79fb
 8008c3c:	3fd34413 	.word	0x3fd34413
 8008c40:	0800af41 	.word	0x0800af41
 8008c44:	0800af58 	.word	0x0800af58
 8008c48:	7ff00000 	.word	0x7ff00000
 8008c4c:	0800af11 	.word	0x0800af11
 8008c50:	3ff80000 	.word	0x3ff80000
 8008c54:	0800b050 	.word	0x0800b050
 8008c58:	0800afb0 	.word	0x0800afb0
 8008c5c:	0800af3d 	.word	0x0800af3d
 8008c60:	0800af10 	.word	0x0800af10
 8008c64:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008c68:	6018      	str	r0, [r3, #0]
 8008c6a:	9b07      	ldr	r3, [sp, #28]
 8008c6c:	2b0e      	cmp	r3, #14
 8008c6e:	f200 80a4 	bhi.w	8008dba <_dtoa_r+0x442>
 8008c72:	2c00      	cmp	r4, #0
 8008c74:	f000 80a1 	beq.w	8008dba <_dtoa_r+0x442>
 8008c78:	2f00      	cmp	r7, #0
 8008c7a:	dd33      	ble.n	8008ce4 <_dtoa_r+0x36c>
 8008c7c:	4bad      	ldr	r3, [pc, #692]	@ (8008f34 <_dtoa_r+0x5bc>)
 8008c7e:	f007 020f 	and.w	r2, r7, #15
 8008c82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c86:	ed93 7b00 	vldr	d7, [r3]
 8008c8a:	05f8      	lsls	r0, r7, #23
 8008c8c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008c90:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008c94:	d516      	bpl.n	8008cc4 <_dtoa_r+0x34c>
 8008c96:	4ba8      	ldr	r3, [pc, #672]	@ (8008f38 <_dtoa_r+0x5c0>)
 8008c98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008c9c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008ca0:	f7f7 fdd4 	bl	800084c <__aeabi_ddiv>
 8008ca4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ca8:	f004 040f 	and.w	r4, r4, #15
 8008cac:	2603      	movs	r6, #3
 8008cae:	4da2      	ldr	r5, [pc, #648]	@ (8008f38 <_dtoa_r+0x5c0>)
 8008cb0:	b954      	cbnz	r4, 8008cc8 <_dtoa_r+0x350>
 8008cb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008cb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cba:	f7f7 fdc7 	bl	800084c <__aeabi_ddiv>
 8008cbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008cc2:	e028      	b.n	8008d16 <_dtoa_r+0x39e>
 8008cc4:	2602      	movs	r6, #2
 8008cc6:	e7f2      	b.n	8008cae <_dtoa_r+0x336>
 8008cc8:	07e1      	lsls	r1, r4, #31
 8008cca:	d508      	bpl.n	8008cde <_dtoa_r+0x366>
 8008ccc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008cd0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008cd4:	f7f7 fc90 	bl	80005f8 <__aeabi_dmul>
 8008cd8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008cdc:	3601      	adds	r6, #1
 8008cde:	1064      	asrs	r4, r4, #1
 8008ce0:	3508      	adds	r5, #8
 8008ce2:	e7e5      	b.n	8008cb0 <_dtoa_r+0x338>
 8008ce4:	f000 80d2 	beq.w	8008e8c <_dtoa_r+0x514>
 8008ce8:	427c      	negs	r4, r7
 8008cea:	4b92      	ldr	r3, [pc, #584]	@ (8008f34 <_dtoa_r+0x5bc>)
 8008cec:	4d92      	ldr	r5, [pc, #584]	@ (8008f38 <_dtoa_r+0x5c0>)
 8008cee:	f004 020f 	and.w	r2, r4, #15
 8008cf2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cfa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008cfe:	f7f7 fc7b 	bl	80005f8 <__aeabi_dmul>
 8008d02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d06:	1124      	asrs	r4, r4, #4
 8008d08:	2300      	movs	r3, #0
 8008d0a:	2602      	movs	r6, #2
 8008d0c:	2c00      	cmp	r4, #0
 8008d0e:	f040 80b2 	bne.w	8008e76 <_dtoa_r+0x4fe>
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d1d3      	bne.n	8008cbe <_dtoa_r+0x346>
 8008d16:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008d18:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	f000 80b7 	beq.w	8008e90 <_dtoa_r+0x518>
 8008d22:	4b86      	ldr	r3, [pc, #536]	@ (8008f3c <_dtoa_r+0x5c4>)
 8008d24:	2200      	movs	r2, #0
 8008d26:	4620      	mov	r0, r4
 8008d28:	4629      	mov	r1, r5
 8008d2a:	f7f7 fed7 	bl	8000adc <__aeabi_dcmplt>
 8008d2e:	2800      	cmp	r0, #0
 8008d30:	f000 80ae 	beq.w	8008e90 <_dtoa_r+0x518>
 8008d34:	9b07      	ldr	r3, [sp, #28]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	f000 80aa 	beq.w	8008e90 <_dtoa_r+0x518>
 8008d3c:	9b00      	ldr	r3, [sp, #0]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	dd37      	ble.n	8008db2 <_dtoa_r+0x43a>
 8008d42:	1e7b      	subs	r3, r7, #1
 8008d44:	9304      	str	r3, [sp, #16]
 8008d46:	4620      	mov	r0, r4
 8008d48:	4b7d      	ldr	r3, [pc, #500]	@ (8008f40 <_dtoa_r+0x5c8>)
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	4629      	mov	r1, r5
 8008d4e:	f7f7 fc53 	bl	80005f8 <__aeabi_dmul>
 8008d52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d56:	9c00      	ldr	r4, [sp, #0]
 8008d58:	3601      	adds	r6, #1
 8008d5a:	4630      	mov	r0, r6
 8008d5c:	f7f7 fbe2 	bl	8000524 <__aeabi_i2d>
 8008d60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d64:	f7f7 fc48 	bl	80005f8 <__aeabi_dmul>
 8008d68:	4b76      	ldr	r3, [pc, #472]	@ (8008f44 <_dtoa_r+0x5cc>)
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	f7f7 fa8e 	bl	800028c <__adddf3>
 8008d70:	4605      	mov	r5, r0
 8008d72:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008d76:	2c00      	cmp	r4, #0
 8008d78:	f040 808d 	bne.w	8008e96 <_dtoa_r+0x51e>
 8008d7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d80:	4b71      	ldr	r3, [pc, #452]	@ (8008f48 <_dtoa_r+0x5d0>)
 8008d82:	2200      	movs	r2, #0
 8008d84:	f7f7 fa80 	bl	8000288 <__aeabi_dsub>
 8008d88:	4602      	mov	r2, r0
 8008d8a:	460b      	mov	r3, r1
 8008d8c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008d90:	462a      	mov	r2, r5
 8008d92:	4633      	mov	r3, r6
 8008d94:	f7f7 fec0 	bl	8000b18 <__aeabi_dcmpgt>
 8008d98:	2800      	cmp	r0, #0
 8008d9a:	f040 828b 	bne.w	80092b4 <_dtoa_r+0x93c>
 8008d9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008da2:	462a      	mov	r2, r5
 8008da4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008da8:	f7f7 fe98 	bl	8000adc <__aeabi_dcmplt>
 8008dac:	2800      	cmp	r0, #0
 8008dae:	f040 8128 	bne.w	8009002 <_dtoa_r+0x68a>
 8008db2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008db6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008dba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	f2c0 815a 	blt.w	8009076 <_dtoa_r+0x6fe>
 8008dc2:	2f0e      	cmp	r7, #14
 8008dc4:	f300 8157 	bgt.w	8009076 <_dtoa_r+0x6fe>
 8008dc8:	4b5a      	ldr	r3, [pc, #360]	@ (8008f34 <_dtoa_r+0x5bc>)
 8008dca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008dce:	ed93 7b00 	vldr	d7, [r3]
 8008dd2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	ed8d 7b00 	vstr	d7, [sp]
 8008dda:	da03      	bge.n	8008de4 <_dtoa_r+0x46c>
 8008ddc:	9b07      	ldr	r3, [sp, #28]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	f340 8101 	ble.w	8008fe6 <_dtoa_r+0x66e>
 8008de4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008de8:	4656      	mov	r6, sl
 8008dea:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008dee:	4620      	mov	r0, r4
 8008df0:	4629      	mov	r1, r5
 8008df2:	f7f7 fd2b 	bl	800084c <__aeabi_ddiv>
 8008df6:	f7f7 feaf 	bl	8000b58 <__aeabi_d2iz>
 8008dfa:	4680      	mov	r8, r0
 8008dfc:	f7f7 fb92 	bl	8000524 <__aeabi_i2d>
 8008e00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e04:	f7f7 fbf8 	bl	80005f8 <__aeabi_dmul>
 8008e08:	4602      	mov	r2, r0
 8008e0a:	460b      	mov	r3, r1
 8008e0c:	4620      	mov	r0, r4
 8008e0e:	4629      	mov	r1, r5
 8008e10:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008e14:	f7f7 fa38 	bl	8000288 <__aeabi_dsub>
 8008e18:	f806 4b01 	strb.w	r4, [r6], #1
 8008e1c:	9d07      	ldr	r5, [sp, #28]
 8008e1e:	eba6 040a 	sub.w	r4, r6, sl
 8008e22:	42a5      	cmp	r5, r4
 8008e24:	4602      	mov	r2, r0
 8008e26:	460b      	mov	r3, r1
 8008e28:	f040 8117 	bne.w	800905a <_dtoa_r+0x6e2>
 8008e2c:	f7f7 fa2e 	bl	800028c <__adddf3>
 8008e30:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e34:	4604      	mov	r4, r0
 8008e36:	460d      	mov	r5, r1
 8008e38:	f7f7 fe6e 	bl	8000b18 <__aeabi_dcmpgt>
 8008e3c:	2800      	cmp	r0, #0
 8008e3e:	f040 80f9 	bne.w	8009034 <_dtoa_r+0x6bc>
 8008e42:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e46:	4620      	mov	r0, r4
 8008e48:	4629      	mov	r1, r5
 8008e4a:	f7f7 fe3d 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e4e:	b118      	cbz	r0, 8008e58 <_dtoa_r+0x4e0>
 8008e50:	f018 0f01 	tst.w	r8, #1
 8008e54:	f040 80ee 	bne.w	8009034 <_dtoa_r+0x6bc>
 8008e58:	4649      	mov	r1, r9
 8008e5a:	4658      	mov	r0, fp
 8008e5c:	f000 fc90 	bl	8009780 <_Bfree>
 8008e60:	2300      	movs	r3, #0
 8008e62:	7033      	strb	r3, [r6, #0]
 8008e64:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008e66:	3701      	adds	r7, #1
 8008e68:	601f      	str	r7, [r3, #0]
 8008e6a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	f000 831d 	beq.w	80094ac <_dtoa_r+0xb34>
 8008e72:	601e      	str	r6, [r3, #0]
 8008e74:	e31a      	b.n	80094ac <_dtoa_r+0xb34>
 8008e76:	07e2      	lsls	r2, r4, #31
 8008e78:	d505      	bpl.n	8008e86 <_dtoa_r+0x50e>
 8008e7a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008e7e:	f7f7 fbbb 	bl	80005f8 <__aeabi_dmul>
 8008e82:	3601      	adds	r6, #1
 8008e84:	2301      	movs	r3, #1
 8008e86:	1064      	asrs	r4, r4, #1
 8008e88:	3508      	adds	r5, #8
 8008e8a:	e73f      	b.n	8008d0c <_dtoa_r+0x394>
 8008e8c:	2602      	movs	r6, #2
 8008e8e:	e742      	b.n	8008d16 <_dtoa_r+0x39e>
 8008e90:	9c07      	ldr	r4, [sp, #28]
 8008e92:	9704      	str	r7, [sp, #16]
 8008e94:	e761      	b.n	8008d5a <_dtoa_r+0x3e2>
 8008e96:	4b27      	ldr	r3, [pc, #156]	@ (8008f34 <_dtoa_r+0x5bc>)
 8008e98:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008e9a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008e9e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008ea2:	4454      	add	r4, sl
 8008ea4:	2900      	cmp	r1, #0
 8008ea6:	d053      	beq.n	8008f50 <_dtoa_r+0x5d8>
 8008ea8:	4928      	ldr	r1, [pc, #160]	@ (8008f4c <_dtoa_r+0x5d4>)
 8008eaa:	2000      	movs	r0, #0
 8008eac:	f7f7 fcce 	bl	800084c <__aeabi_ddiv>
 8008eb0:	4633      	mov	r3, r6
 8008eb2:	462a      	mov	r2, r5
 8008eb4:	f7f7 f9e8 	bl	8000288 <__aeabi_dsub>
 8008eb8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008ebc:	4656      	mov	r6, sl
 8008ebe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ec2:	f7f7 fe49 	bl	8000b58 <__aeabi_d2iz>
 8008ec6:	4605      	mov	r5, r0
 8008ec8:	f7f7 fb2c 	bl	8000524 <__aeabi_i2d>
 8008ecc:	4602      	mov	r2, r0
 8008ece:	460b      	mov	r3, r1
 8008ed0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ed4:	f7f7 f9d8 	bl	8000288 <__aeabi_dsub>
 8008ed8:	3530      	adds	r5, #48	@ 0x30
 8008eda:	4602      	mov	r2, r0
 8008edc:	460b      	mov	r3, r1
 8008ede:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008ee2:	f806 5b01 	strb.w	r5, [r6], #1
 8008ee6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008eea:	f7f7 fdf7 	bl	8000adc <__aeabi_dcmplt>
 8008eee:	2800      	cmp	r0, #0
 8008ef0:	d171      	bne.n	8008fd6 <_dtoa_r+0x65e>
 8008ef2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ef6:	4911      	ldr	r1, [pc, #68]	@ (8008f3c <_dtoa_r+0x5c4>)
 8008ef8:	2000      	movs	r0, #0
 8008efa:	f7f7 f9c5 	bl	8000288 <__aeabi_dsub>
 8008efe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008f02:	f7f7 fdeb 	bl	8000adc <__aeabi_dcmplt>
 8008f06:	2800      	cmp	r0, #0
 8008f08:	f040 8095 	bne.w	8009036 <_dtoa_r+0x6be>
 8008f0c:	42a6      	cmp	r6, r4
 8008f0e:	f43f af50 	beq.w	8008db2 <_dtoa_r+0x43a>
 8008f12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008f16:	4b0a      	ldr	r3, [pc, #40]	@ (8008f40 <_dtoa_r+0x5c8>)
 8008f18:	2200      	movs	r2, #0
 8008f1a:	f7f7 fb6d 	bl	80005f8 <__aeabi_dmul>
 8008f1e:	4b08      	ldr	r3, [pc, #32]	@ (8008f40 <_dtoa_r+0x5c8>)
 8008f20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008f24:	2200      	movs	r2, #0
 8008f26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f2a:	f7f7 fb65 	bl	80005f8 <__aeabi_dmul>
 8008f2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f32:	e7c4      	b.n	8008ebe <_dtoa_r+0x546>
 8008f34:	0800b050 	.word	0x0800b050
 8008f38:	0800b028 	.word	0x0800b028
 8008f3c:	3ff00000 	.word	0x3ff00000
 8008f40:	40240000 	.word	0x40240000
 8008f44:	401c0000 	.word	0x401c0000
 8008f48:	40140000 	.word	0x40140000
 8008f4c:	3fe00000 	.word	0x3fe00000
 8008f50:	4631      	mov	r1, r6
 8008f52:	4628      	mov	r0, r5
 8008f54:	f7f7 fb50 	bl	80005f8 <__aeabi_dmul>
 8008f58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008f5c:	9415      	str	r4, [sp, #84]	@ 0x54
 8008f5e:	4656      	mov	r6, sl
 8008f60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f64:	f7f7 fdf8 	bl	8000b58 <__aeabi_d2iz>
 8008f68:	4605      	mov	r5, r0
 8008f6a:	f7f7 fadb 	bl	8000524 <__aeabi_i2d>
 8008f6e:	4602      	mov	r2, r0
 8008f70:	460b      	mov	r3, r1
 8008f72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f76:	f7f7 f987 	bl	8000288 <__aeabi_dsub>
 8008f7a:	3530      	adds	r5, #48	@ 0x30
 8008f7c:	f806 5b01 	strb.w	r5, [r6], #1
 8008f80:	4602      	mov	r2, r0
 8008f82:	460b      	mov	r3, r1
 8008f84:	42a6      	cmp	r6, r4
 8008f86:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008f8a:	f04f 0200 	mov.w	r2, #0
 8008f8e:	d124      	bne.n	8008fda <_dtoa_r+0x662>
 8008f90:	4bac      	ldr	r3, [pc, #688]	@ (8009244 <_dtoa_r+0x8cc>)
 8008f92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008f96:	f7f7 f979 	bl	800028c <__adddf3>
 8008f9a:	4602      	mov	r2, r0
 8008f9c:	460b      	mov	r3, r1
 8008f9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fa2:	f7f7 fdb9 	bl	8000b18 <__aeabi_dcmpgt>
 8008fa6:	2800      	cmp	r0, #0
 8008fa8:	d145      	bne.n	8009036 <_dtoa_r+0x6be>
 8008faa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008fae:	49a5      	ldr	r1, [pc, #660]	@ (8009244 <_dtoa_r+0x8cc>)
 8008fb0:	2000      	movs	r0, #0
 8008fb2:	f7f7 f969 	bl	8000288 <__aeabi_dsub>
 8008fb6:	4602      	mov	r2, r0
 8008fb8:	460b      	mov	r3, r1
 8008fba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fbe:	f7f7 fd8d 	bl	8000adc <__aeabi_dcmplt>
 8008fc2:	2800      	cmp	r0, #0
 8008fc4:	f43f aef5 	beq.w	8008db2 <_dtoa_r+0x43a>
 8008fc8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008fca:	1e73      	subs	r3, r6, #1
 8008fcc:	9315      	str	r3, [sp, #84]	@ 0x54
 8008fce:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008fd2:	2b30      	cmp	r3, #48	@ 0x30
 8008fd4:	d0f8      	beq.n	8008fc8 <_dtoa_r+0x650>
 8008fd6:	9f04      	ldr	r7, [sp, #16]
 8008fd8:	e73e      	b.n	8008e58 <_dtoa_r+0x4e0>
 8008fda:	4b9b      	ldr	r3, [pc, #620]	@ (8009248 <_dtoa_r+0x8d0>)
 8008fdc:	f7f7 fb0c 	bl	80005f8 <__aeabi_dmul>
 8008fe0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008fe4:	e7bc      	b.n	8008f60 <_dtoa_r+0x5e8>
 8008fe6:	d10c      	bne.n	8009002 <_dtoa_r+0x68a>
 8008fe8:	4b98      	ldr	r3, [pc, #608]	@ (800924c <_dtoa_r+0x8d4>)
 8008fea:	2200      	movs	r2, #0
 8008fec:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ff0:	f7f7 fb02 	bl	80005f8 <__aeabi_dmul>
 8008ff4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ff8:	f7f7 fd84 	bl	8000b04 <__aeabi_dcmpge>
 8008ffc:	2800      	cmp	r0, #0
 8008ffe:	f000 8157 	beq.w	80092b0 <_dtoa_r+0x938>
 8009002:	2400      	movs	r4, #0
 8009004:	4625      	mov	r5, r4
 8009006:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009008:	43db      	mvns	r3, r3
 800900a:	9304      	str	r3, [sp, #16]
 800900c:	4656      	mov	r6, sl
 800900e:	2700      	movs	r7, #0
 8009010:	4621      	mov	r1, r4
 8009012:	4658      	mov	r0, fp
 8009014:	f000 fbb4 	bl	8009780 <_Bfree>
 8009018:	2d00      	cmp	r5, #0
 800901a:	d0dc      	beq.n	8008fd6 <_dtoa_r+0x65e>
 800901c:	b12f      	cbz	r7, 800902a <_dtoa_r+0x6b2>
 800901e:	42af      	cmp	r7, r5
 8009020:	d003      	beq.n	800902a <_dtoa_r+0x6b2>
 8009022:	4639      	mov	r1, r7
 8009024:	4658      	mov	r0, fp
 8009026:	f000 fbab 	bl	8009780 <_Bfree>
 800902a:	4629      	mov	r1, r5
 800902c:	4658      	mov	r0, fp
 800902e:	f000 fba7 	bl	8009780 <_Bfree>
 8009032:	e7d0      	b.n	8008fd6 <_dtoa_r+0x65e>
 8009034:	9704      	str	r7, [sp, #16]
 8009036:	4633      	mov	r3, r6
 8009038:	461e      	mov	r6, r3
 800903a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800903e:	2a39      	cmp	r2, #57	@ 0x39
 8009040:	d107      	bne.n	8009052 <_dtoa_r+0x6da>
 8009042:	459a      	cmp	sl, r3
 8009044:	d1f8      	bne.n	8009038 <_dtoa_r+0x6c0>
 8009046:	9a04      	ldr	r2, [sp, #16]
 8009048:	3201      	adds	r2, #1
 800904a:	9204      	str	r2, [sp, #16]
 800904c:	2230      	movs	r2, #48	@ 0x30
 800904e:	f88a 2000 	strb.w	r2, [sl]
 8009052:	781a      	ldrb	r2, [r3, #0]
 8009054:	3201      	adds	r2, #1
 8009056:	701a      	strb	r2, [r3, #0]
 8009058:	e7bd      	b.n	8008fd6 <_dtoa_r+0x65e>
 800905a:	4b7b      	ldr	r3, [pc, #492]	@ (8009248 <_dtoa_r+0x8d0>)
 800905c:	2200      	movs	r2, #0
 800905e:	f7f7 facb 	bl	80005f8 <__aeabi_dmul>
 8009062:	2200      	movs	r2, #0
 8009064:	2300      	movs	r3, #0
 8009066:	4604      	mov	r4, r0
 8009068:	460d      	mov	r5, r1
 800906a:	f7f7 fd2d 	bl	8000ac8 <__aeabi_dcmpeq>
 800906e:	2800      	cmp	r0, #0
 8009070:	f43f aebb 	beq.w	8008dea <_dtoa_r+0x472>
 8009074:	e6f0      	b.n	8008e58 <_dtoa_r+0x4e0>
 8009076:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009078:	2a00      	cmp	r2, #0
 800907a:	f000 80db 	beq.w	8009234 <_dtoa_r+0x8bc>
 800907e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009080:	2a01      	cmp	r2, #1
 8009082:	f300 80bf 	bgt.w	8009204 <_dtoa_r+0x88c>
 8009086:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009088:	2a00      	cmp	r2, #0
 800908a:	f000 80b7 	beq.w	80091fc <_dtoa_r+0x884>
 800908e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009092:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009094:	4646      	mov	r6, r8
 8009096:	9a08      	ldr	r2, [sp, #32]
 8009098:	2101      	movs	r1, #1
 800909a:	441a      	add	r2, r3
 800909c:	4658      	mov	r0, fp
 800909e:	4498      	add	r8, r3
 80090a0:	9208      	str	r2, [sp, #32]
 80090a2:	f000 fc21 	bl	80098e8 <__i2b>
 80090a6:	4605      	mov	r5, r0
 80090a8:	b15e      	cbz	r6, 80090c2 <_dtoa_r+0x74a>
 80090aa:	9b08      	ldr	r3, [sp, #32]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	dd08      	ble.n	80090c2 <_dtoa_r+0x74a>
 80090b0:	42b3      	cmp	r3, r6
 80090b2:	9a08      	ldr	r2, [sp, #32]
 80090b4:	bfa8      	it	ge
 80090b6:	4633      	movge	r3, r6
 80090b8:	eba8 0803 	sub.w	r8, r8, r3
 80090bc:	1af6      	subs	r6, r6, r3
 80090be:	1ad3      	subs	r3, r2, r3
 80090c0:	9308      	str	r3, [sp, #32]
 80090c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80090c4:	b1f3      	cbz	r3, 8009104 <_dtoa_r+0x78c>
 80090c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	f000 80b7 	beq.w	800923c <_dtoa_r+0x8c4>
 80090ce:	b18c      	cbz	r4, 80090f4 <_dtoa_r+0x77c>
 80090d0:	4629      	mov	r1, r5
 80090d2:	4622      	mov	r2, r4
 80090d4:	4658      	mov	r0, fp
 80090d6:	f000 fcc7 	bl	8009a68 <__pow5mult>
 80090da:	464a      	mov	r2, r9
 80090dc:	4601      	mov	r1, r0
 80090de:	4605      	mov	r5, r0
 80090e0:	4658      	mov	r0, fp
 80090e2:	f000 fc17 	bl	8009914 <__multiply>
 80090e6:	4649      	mov	r1, r9
 80090e8:	9004      	str	r0, [sp, #16]
 80090ea:	4658      	mov	r0, fp
 80090ec:	f000 fb48 	bl	8009780 <_Bfree>
 80090f0:	9b04      	ldr	r3, [sp, #16]
 80090f2:	4699      	mov	r9, r3
 80090f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80090f6:	1b1a      	subs	r2, r3, r4
 80090f8:	d004      	beq.n	8009104 <_dtoa_r+0x78c>
 80090fa:	4649      	mov	r1, r9
 80090fc:	4658      	mov	r0, fp
 80090fe:	f000 fcb3 	bl	8009a68 <__pow5mult>
 8009102:	4681      	mov	r9, r0
 8009104:	2101      	movs	r1, #1
 8009106:	4658      	mov	r0, fp
 8009108:	f000 fbee 	bl	80098e8 <__i2b>
 800910c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800910e:	4604      	mov	r4, r0
 8009110:	2b00      	cmp	r3, #0
 8009112:	f000 81cf 	beq.w	80094b4 <_dtoa_r+0xb3c>
 8009116:	461a      	mov	r2, r3
 8009118:	4601      	mov	r1, r0
 800911a:	4658      	mov	r0, fp
 800911c:	f000 fca4 	bl	8009a68 <__pow5mult>
 8009120:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009122:	2b01      	cmp	r3, #1
 8009124:	4604      	mov	r4, r0
 8009126:	f300 8095 	bgt.w	8009254 <_dtoa_r+0x8dc>
 800912a:	9b02      	ldr	r3, [sp, #8]
 800912c:	2b00      	cmp	r3, #0
 800912e:	f040 8087 	bne.w	8009240 <_dtoa_r+0x8c8>
 8009132:	9b03      	ldr	r3, [sp, #12]
 8009134:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009138:	2b00      	cmp	r3, #0
 800913a:	f040 8089 	bne.w	8009250 <_dtoa_r+0x8d8>
 800913e:	9b03      	ldr	r3, [sp, #12]
 8009140:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009144:	0d1b      	lsrs	r3, r3, #20
 8009146:	051b      	lsls	r3, r3, #20
 8009148:	b12b      	cbz	r3, 8009156 <_dtoa_r+0x7de>
 800914a:	9b08      	ldr	r3, [sp, #32]
 800914c:	3301      	adds	r3, #1
 800914e:	9308      	str	r3, [sp, #32]
 8009150:	f108 0801 	add.w	r8, r8, #1
 8009154:	2301      	movs	r3, #1
 8009156:	930a      	str	r3, [sp, #40]	@ 0x28
 8009158:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800915a:	2b00      	cmp	r3, #0
 800915c:	f000 81b0 	beq.w	80094c0 <_dtoa_r+0xb48>
 8009160:	6923      	ldr	r3, [r4, #16]
 8009162:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009166:	6918      	ldr	r0, [r3, #16]
 8009168:	f000 fb72 	bl	8009850 <__hi0bits>
 800916c:	f1c0 0020 	rsb	r0, r0, #32
 8009170:	9b08      	ldr	r3, [sp, #32]
 8009172:	4418      	add	r0, r3
 8009174:	f010 001f 	ands.w	r0, r0, #31
 8009178:	d077      	beq.n	800926a <_dtoa_r+0x8f2>
 800917a:	f1c0 0320 	rsb	r3, r0, #32
 800917e:	2b04      	cmp	r3, #4
 8009180:	dd6b      	ble.n	800925a <_dtoa_r+0x8e2>
 8009182:	9b08      	ldr	r3, [sp, #32]
 8009184:	f1c0 001c 	rsb	r0, r0, #28
 8009188:	4403      	add	r3, r0
 800918a:	4480      	add	r8, r0
 800918c:	4406      	add	r6, r0
 800918e:	9308      	str	r3, [sp, #32]
 8009190:	f1b8 0f00 	cmp.w	r8, #0
 8009194:	dd05      	ble.n	80091a2 <_dtoa_r+0x82a>
 8009196:	4649      	mov	r1, r9
 8009198:	4642      	mov	r2, r8
 800919a:	4658      	mov	r0, fp
 800919c:	f000 fcbe 	bl	8009b1c <__lshift>
 80091a0:	4681      	mov	r9, r0
 80091a2:	9b08      	ldr	r3, [sp, #32]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	dd05      	ble.n	80091b4 <_dtoa_r+0x83c>
 80091a8:	4621      	mov	r1, r4
 80091aa:	461a      	mov	r2, r3
 80091ac:	4658      	mov	r0, fp
 80091ae:	f000 fcb5 	bl	8009b1c <__lshift>
 80091b2:	4604      	mov	r4, r0
 80091b4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d059      	beq.n	800926e <_dtoa_r+0x8f6>
 80091ba:	4621      	mov	r1, r4
 80091bc:	4648      	mov	r0, r9
 80091be:	f000 fd19 	bl	8009bf4 <__mcmp>
 80091c2:	2800      	cmp	r0, #0
 80091c4:	da53      	bge.n	800926e <_dtoa_r+0x8f6>
 80091c6:	1e7b      	subs	r3, r7, #1
 80091c8:	9304      	str	r3, [sp, #16]
 80091ca:	4649      	mov	r1, r9
 80091cc:	2300      	movs	r3, #0
 80091ce:	220a      	movs	r2, #10
 80091d0:	4658      	mov	r0, fp
 80091d2:	f000 faf7 	bl	80097c4 <__multadd>
 80091d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80091d8:	4681      	mov	r9, r0
 80091da:	2b00      	cmp	r3, #0
 80091dc:	f000 8172 	beq.w	80094c4 <_dtoa_r+0xb4c>
 80091e0:	2300      	movs	r3, #0
 80091e2:	4629      	mov	r1, r5
 80091e4:	220a      	movs	r2, #10
 80091e6:	4658      	mov	r0, fp
 80091e8:	f000 faec 	bl	80097c4 <__multadd>
 80091ec:	9b00      	ldr	r3, [sp, #0]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	4605      	mov	r5, r0
 80091f2:	dc67      	bgt.n	80092c4 <_dtoa_r+0x94c>
 80091f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091f6:	2b02      	cmp	r3, #2
 80091f8:	dc41      	bgt.n	800927e <_dtoa_r+0x906>
 80091fa:	e063      	b.n	80092c4 <_dtoa_r+0x94c>
 80091fc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80091fe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009202:	e746      	b.n	8009092 <_dtoa_r+0x71a>
 8009204:	9b07      	ldr	r3, [sp, #28]
 8009206:	1e5c      	subs	r4, r3, #1
 8009208:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800920a:	42a3      	cmp	r3, r4
 800920c:	bfbf      	itttt	lt
 800920e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009210:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009212:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009214:	1ae3      	sublt	r3, r4, r3
 8009216:	bfb4      	ite	lt
 8009218:	18d2      	addlt	r2, r2, r3
 800921a:	1b1c      	subge	r4, r3, r4
 800921c:	9b07      	ldr	r3, [sp, #28]
 800921e:	bfbc      	itt	lt
 8009220:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009222:	2400      	movlt	r4, #0
 8009224:	2b00      	cmp	r3, #0
 8009226:	bfb5      	itete	lt
 8009228:	eba8 0603 	sublt.w	r6, r8, r3
 800922c:	9b07      	ldrge	r3, [sp, #28]
 800922e:	2300      	movlt	r3, #0
 8009230:	4646      	movge	r6, r8
 8009232:	e730      	b.n	8009096 <_dtoa_r+0x71e>
 8009234:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009236:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009238:	4646      	mov	r6, r8
 800923a:	e735      	b.n	80090a8 <_dtoa_r+0x730>
 800923c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800923e:	e75c      	b.n	80090fa <_dtoa_r+0x782>
 8009240:	2300      	movs	r3, #0
 8009242:	e788      	b.n	8009156 <_dtoa_r+0x7de>
 8009244:	3fe00000 	.word	0x3fe00000
 8009248:	40240000 	.word	0x40240000
 800924c:	40140000 	.word	0x40140000
 8009250:	9b02      	ldr	r3, [sp, #8]
 8009252:	e780      	b.n	8009156 <_dtoa_r+0x7de>
 8009254:	2300      	movs	r3, #0
 8009256:	930a      	str	r3, [sp, #40]	@ 0x28
 8009258:	e782      	b.n	8009160 <_dtoa_r+0x7e8>
 800925a:	d099      	beq.n	8009190 <_dtoa_r+0x818>
 800925c:	9a08      	ldr	r2, [sp, #32]
 800925e:	331c      	adds	r3, #28
 8009260:	441a      	add	r2, r3
 8009262:	4498      	add	r8, r3
 8009264:	441e      	add	r6, r3
 8009266:	9208      	str	r2, [sp, #32]
 8009268:	e792      	b.n	8009190 <_dtoa_r+0x818>
 800926a:	4603      	mov	r3, r0
 800926c:	e7f6      	b.n	800925c <_dtoa_r+0x8e4>
 800926e:	9b07      	ldr	r3, [sp, #28]
 8009270:	9704      	str	r7, [sp, #16]
 8009272:	2b00      	cmp	r3, #0
 8009274:	dc20      	bgt.n	80092b8 <_dtoa_r+0x940>
 8009276:	9300      	str	r3, [sp, #0]
 8009278:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800927a:	2b02      	cmp	r3, #2
 800927c:	dd1e      	ble.n	80092bc <_dtoa_r+0x944>
 800927e:	9b00      	ldr	r3, [sp, #0]
 8009280:	2b00      	cmp	r3, #0
 8009282:	f47f aec0 	bne.w	8009006 <_dtoa_r+0x68e>
 8009286:	4621      	mov	r1, r4
 8009288:	2205      	movs	r2, #5
 800928a:	4658      	mov	r0, fp
 800928c:	f000 fa9a 	bl	80097c4 <__multadd>
 8009290:	4601      	mov	r1, r0
 8009292:	4604      	mov	r4, r0
 8009294:	4648      	mov	r0, r9
 8009296:	f000 fcad 	bl	8009bf4 <__mcmp>
 800929a:	2800      	cmp	r0, #0
 800929c:	f77f aeb3 	ble.w	8009006 <_dtoa_r+0x68e>
 80092a0:	4656      	mov	r6, sl
 80092a2:	2331      	movs	r3, #49	@ 0x31
 80092a4:	f806 3b01 	strb.w	r3, [r6], #1
 80092a8:	9b04      	ldr	r3, [sp, #16]
 80092aa:	3301      	adds	r3, #1
 80092ac:	9304      	str	r3, [sp, #16]
 80092ae:	e6ae      	b.n	800900e <_dtoa_r+0x696>
 80092b0:	9c07      	ldr	r4, [sp, #28]
 80092b2:	9704      	str	r7, [sp, #16]
 80092b4:	4625      	mov	r5, r4
 80092b6:	e7f3      	b.n	80092a0 <_dtoa_r+0x928>
 80092b8:	9b07      	ldr	r3, [sp, #28]
 80092ba:	9300      	str	r3, [sp, #0]
 80092bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80092be:	2b00      	cmp	r3, #0
 80092c0:	f000 8104 	beq.w	80094cc <_dtoa_r+0xb54>
 80092c4:	2e00      	cmp	r6, #0
 80092c6:	dd05      	ble.n	80092d4 <_dtoa_r+0x95c>
 80092c8:	4629      	mov	r1, r5
 80092ca:	4632      	mov	r2, r6
 80092cc:	4658      	mov	r0, fp
 80092ce:	f000 fc25 	bl	8009b1c <__lshift>
 80092d2:	4605      	mov	r5, r0
 80092d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d05a      	beq.n	8009390 <_dtoa_r+0xa18>
 80092da:	6869      	ldr	r1, [r5, #4]
 80092dc:	4658      	mov	r0, fp
 80092de:	f000 fa0f 	bl	8009700 <_Balloc>
 80092e2:	4606      	mov	r6, r0
 80092e4:	b928      	cbnz	r0, 80092f2 <_dtoa_r+0x97a>
 80092e6:	4b84      	ldr	r3, [pc, #528]	@ (80094f8 <_dtoa_r+0xb80>)
 80092e8:	4602      	mov	r2, r0
 80092ea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80092ee:	f7ff bb5a 	b.w	80089a6 <_dtoa_r+0x2e>
 80092f2:	692a      	ldr	r2, [r5, #16]
 80092f4:	3202      	adds	r2, #2
 80092f6:	0092      	lsls	r2, r2, #2
 80092f8:	f105 010c 	add.w	r1, r5, #12
 80092fc:	300c      	adds	r0, #12
 80092fe:	f7ff faa4 	bl	800884a <memcpy>
 8009302:	2201      	movs	r2, #1
 8009304:	4631      	mov	r1, r6
 8009306:	4658      	mov	r0, fp
 8009308:	f000 fc08 	bl	8009b1c <__lshift>
 800930c:	f10a 0301 	add.w	r3, sl, #1
 8009310:	9307      	str	r3, [sp, #28]
 8009312:	9b00      	ldr	r3, [sp, #0]
 8009314:	4453      	add	r3, sl
 8009316:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009318:	9b02      	ldr	r3, [sp, #8]
 800931a:	f003 0301 	and.w	r3, r3, #1
 800931e:	462f      	mov	r7, r5
 8009320:	930a      	str	r3, [sp, #40]	@ 0x28
 8009322:	4605      	mov	r5, r0
 8009324:	9b07      	ldr	r3, [sp, #28]
 8009326:	4621      	mov	r1, r4
 8009328:	3b01      	subs	r3, #1
 800932a:	4648      	mov	r0, r9
 800932c:	9300      	str	r3, [sp, #0]
 800932e:	f7ff fa9a 	bl	8008866 <quorem>
 8009332:	4639      	mov	r1, r7
 8009334:	9002      	str	r0, [sp, #8]
 8009336:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800933a:	4648      	mov	r0, r9
 800933c:	f000 fc5a 	bl	8009bf4 <__mcmp>
 8009340:	462a      	mov	r2, r5
 8009342:	9008      	str	r0, [sp, #32]
 8009344:	4621      	mov	r1, r4
 8009346:	4658      	mov	r0, fp
 8009348:	f000 fc70 	bl	8009c2c <__mdiff>
 800934c:	68c2      	ldr	r2, [r0, #12]
 800934e:	4606      	mov	r6, r0
 8009350:	bb02      	cbnz	r2, 8009394 <_dtoa_r+0xa1c>
 8009352:	4601      	mov	r1, r0
 8009354:	4648      	mov	r0, r9
 8009356:	f000 fc4d 	bl	8009bf4 <__mcmp>
 800935a:	4602      	mov	r2, r0
 800935c:	4631      	mov	r1, r6
 800935e:	4658      	mov	r0, fp
 8009360:	920e      	str	r2, [sp, #56]	@ 0x38
 8009362:	f000 fa0d 	bl	8009780 <_Bfree>
 8009366:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009368:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800936a:	9e07      	ldr	r6, [sp, #28]
 800936c:	ea43 0102 	orr.w	r1, r3, r2
 8009370:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009372:	4319      	orrs	r1, r3
 8009374:	d110      	bne.n	8009398 <_dtoa_r+0xa20>
 8009376:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800937a:	d029      	beq.n	80093d0 <_dtoa_r+0xa58>
 800937c:	9b08      	ldr	r3, [sp, #32]
 800937e:	2b00      	cmp	r3, #0
 8009380:	dd02      	ble.n	8009388 <_dtoa_r+0xa10>
 8009382:	9b02      	ldr	r3, [sp, #8]
 8009384:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009388:	9b00      	ldr	r3, [sp, #0]
 800938a:	f883 8000 	strb.w	r8, [r3]
 800938e:	e63f      	b.n	8009010 <_dtoa_r+0x698>
 8009390:	4628      	mov	r0, r5
 8009392:	e7bb      	b.n	800930c <_dtoa_r+0x994>
 8009394:	2201      	movs	r2, #1
 8009396:	e7e1      	b.n	800935c <_dtoa_r+0x9e4>
 8009398:	9b08      	ldr	r3, [sp, #32]
 800939a:	2b00      	cmp	r3, #0
 800939c:	db04      	blt.n	80093a8 <_dtoa_r+0xa30>
 800939e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80093a0:	430b      	orrs	r3, r1
 80093a2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80093a4:	430b      	orrs	r3, r1
 80093a6:	d120      	bne.n	80093ea <_dtoa_r+0xa72>
 80093a8:	2a00      	cmp	r2, #0
 80093aa:	dded      	ble.n	8009388 <_dtoa_r+0xa10>
 80093ac:	4649      	mov	r1, r9
 80093ae:	2201      	movs	r2, #1
 80093b0:	4658      	mov	r0, fp
 80093b2:	f000 fbb3 	bl	8009b1c <__lshift>
 80093b6:	4621      	mov	r1, r4
 80093b8:	4681      	mov	r9, r0
 80093ba:	f000 fc1b 	bl	8009bf4 <__mcmp>
 80093be:	2800      	cmp	r0, #0
 80093c0:	dc03      	bgt.n	80093ca <_dtoa_r+0xa52>
 80093c2:	d1e1      	bne.n	8009388 <_dtoa_r+0xa10>
 80093c4:	f018 0f01 	tst.w	r8, #1
 80093c8:	d0de      	beq.n	8009388 <_dtoa_r+0xa10>
 80093ca:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80093ce:	d1d8      	bne.n	8009382 <_dtoa_r+0xa0a>
 80093d0:	9a00      	ldr	r2, [sp, #0]
 80093d2:	2339      	movs	r3, #57	@ 0x39
 80093d4:	7013      	strb	r3, [r2, #0]
 80093d6:	4633      	mov	r3, r6
 80093d8:	461e      	mov	r6, r3
 80093da:	3b01      	subs	r3, #1
 80093dc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80093e0:	2a39      	cmp	r2, #57	@ 0x39
 80093e2:	d052      	beq.n	800948a <_dtoa_r+0xb12>
 80093e4:	3201      	adds	r2, #1
 80093e6:	701a      	strb	r2, [r3, #0]
 80093e8:	e612      	b.n	8009010 <_dtoa_r+0x698>
 80093ea:	2a00      	cmp	r2, #0
 80093ec:	dd07      	ble.n	80093fe <_dtoa_r+0xa86>
 80093ee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80093f2:	d0ed      	beq.n	80093d0 <_dtoa_r+0xa58>
 80093f4:	9a00      	ldr	r2, [sp, #0]
 80093f6:	f108 0301 	add.w	r3, r8, #1
 80093fa:	7013      	strb	r3, [r2, #0]
 80093fc:	e608      	b.n	8009010 <_dtoa_r+0x698>
 80093fe:	9b07      	ldr	r3, [sp, #28]
 8009400:	9a07      	ldr	r2, [sp, #28]
 8009402:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009406:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009408:	4293      	cmp	r3, r2
 800940a:	d028      	beq.n	800945e <_dtoa_r+0xae6>
 800940c:	4649      	mov	r1, r9
 800940e:	2300      	movs	r3, #0
 8009410:	220a      	movs	r2, #10
 8009412:	4658      	mov	r0, fp
 8009414:	f000 f9d6 	bl	80097c4 <__multadd>
 8009418:	42af      	cmp	r7, r5
 800941a:	4681      	mov	r9, r0
 800941c:	f04f 0300 	mov.w	r3, #0
 8009420:	f04f 020a 	mov.w	r2, #10
 8009424:	4639      	mov	r1, r7
 8009426:	4658      	mov	r0, fp
 8009428:	d107      	bne.n	800943a <_dtoa_r+0xac2>
 800942a:	f000 f9cb 	bl	80097c4 <__multadd>
 800942e:	4607      	mov	r7, r0
 8009430:	4605      	mov	r5, r0
 8009432:	9b07      	ldr	r3, [sp, #28]
 8009434:	3301      	adds	r3, #1
 8009436:	9307      	str	r3, [sp, #28]
 8009438:	e774      	b.n	8009324 <_dtoa_r+0x9ac>
 800943a:	f000 f9c3 	bl	80097c4 <__multadd>
 800943e:	4629      	mov	r1, r5
 8009440:	4607      	mov	r7, r0
 8009442:	2300      	movs	r3, #0
 8009444:	220a      	movs	r2, #10
 8009446:	4658      	mov	r0, fp
 8009448:	f000 f9bc 	bl	80097c4 <__multadd>
 800944c:	4605      	mov	r5, r0
 800944e:	e7f0      	b.n	8009432 <_dtoa_r+0xaba>
 8009450:	9b00      	ldr	r3, [sp, #0]
 8009452:	2b00      	cmp	r3, #0
 8009454:	bfcc      	ite	gt
 8009456:	461e      	movgt	r6, r3
 8009458:	2601      	movle	r6, #1
 800945a:	4456      	add	r6, sl
 800945c:	2700      	movs	r7, #0
 800945e:	4649      	mov	r1, r9
 8009460:	2201      	movs	r2, #1
 8009462:	4658      	mov	r0, fp
 8009464:	f000 fb5a 	bl	8009b1c <__lshift>
 8009468:	4621      	mov	r1, r4
 800946a:	4681      	mov	r9, r0
 800946c:	f000 fbc2 	bl	8009bf4 <__mcmp>
 8009470:	2800      	cmp	r0, #0
 8009472:	dcb0      	bgt.n	80093d6 <_dtoa_r+0xa5e>
 8009474:	d102      	bne.n	800947c <_dtoa_r+0xb04>
 8009476:	f018 0f01 	tst.w	r8, #1
 800947a:	d1ac      	bne.n	80093d6 <_dtoa_r+0xa5e>
 800947c:	4633      	mov	r3, r6
 800947e:	461e      	mov	r6, r3
 8009480:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009484:	2a30      	cmp	r2, #48	@ 0x30
 8009486:	d0fa      	beq.n	800947e <_dtoa_r+0xb06>
 8009488:	e5c2      	b.n	8009010 <_dtoa_r+0x698>
 800948a:	459a      	cmp	sl, r3
 800948c:	d1a4      	bne.n	80093d8 <_dtoa_r+0xa60>
 800948e:	9b04      	ldr	r3, [sp, #16]
 8009490:	3301      	adds	r3, #1
 8009492:	9304      	str	r3, [sp, #16]
 8009494:	2331      	movs	r3, #49	@ 0x31
 8009496:	f88a 3000 	strb.w	r3, [sl]
 800949a:	e5b9      	b.n	8009010 <_dtoa_r+0x698>
 800949c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800949e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80094fc <_dtoa_r+0xb84>
 80094a2:	b11b      	cbz	r3, 80094ac <_dtoa_r+0xb34>
 80094a4:	f10a 0308 	add.w	r3, sl, #8
 80094a8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80094aa:	6013      	str	r3, [r2, #0]
 80094ac:	4650      	mov	r0, sl
 80094ae:	b019      	add	sp, #100	@ 0x64
 80094b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094b6:	2b01      	cmp	r3, #1
 80094b8:	f77f ae37 	ble.w	800912a <_dtoa_r+0x7b2>
 80094bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80094be:	930a      	str	r3, [sp, #40]	@ 0x28
 80094c0:	2001      	movs	r0, #1
 80094c2:	e655      	b.n	8009170 <_dtoa_r+0x7f8>
 80094c4:	9b00      	ldr	r3, [sp, #0]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	f77f aed6 	ble.w	8009278 <_dtoa_r+0x900>
 80094cc:	4656      	mov	r6, sl
 80094ce:	4621      	mov	r1, r4
 80094d0:	4648      	mov	r0, r9
 80094d2:	f7ff f9c8 	bl	8008866 <quorem>
 80094d6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80094da:	f806 8b01 	strb.w	r8, [r6], #1
 80094de:	9b00      	ldr	r3, [sp, #0]
 80094e0:	eba6 020a 	sub.w	r2, r6, sl
 80094e4:	4293      	cmp	r3, r2
 80094e6:	ddb3      	ble.n	8009450 <_dtoa_r+0xad8>
 80094e8:	4649      	mov	r1, r9
 80094ea:	2300      	movs	r3, #0
 80094ec:	220a      	movs	r2, #10
 80094ee:	4658      	mov	r0, fp
 80094f0:	f000 f968 	bl	80097c4 <__multadd>
 80094f4:	4681      	mov	r9, r0
 80094f6:	e7ea      	b.n	80094ce <_dtoa_r+0xb56>
 80094f8:	0800afb0 	.word	0x0800afb0
 80094fc:	0800af34 	.word	0x0800af34

08009500 <_free_r>:
 8009500:	b538      	push	{r3, r4, r5, lr}
 8009502:	4605      	mov	r5, r0
 8009504:	2900      	cmp	r1, #0
 8009506:	d041      	beq.n	800958c <_free_r+0x8c>
 8009508:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800950c:	1f0c      	subs	r4, r1, #4
 800950e:	2b00      	cmp	r3, #0
 8009510:	bfb8      	it	lt
 8009512:	18e4      	addlt	r4, r4, r3
 8009514:	f000 f8e8 	bl	80096e8 <__malloc_lock>
 8009518:	4a1d      	ldr	r2, [pc, #116]	@ (8009590 <_free_r+0x90>)
 800951a:	6813      	ldr	r3, [r2, #0]
 800951c:	b933      	cbnz	r3, 800952c <_free_r+0x2c>
 800951e:	6063      	str	r3, [r4, #4]
 8009520:	6014      	str	r4, [r2, #0]
 8009522:	4628      	mov	r0, r5
 8009524:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009528:	f000 b8e4 	b.w	80096f4 <__malloc_unlock>
 800952c:	42a3      	cmp	r3, r4
 800952e:	d908      	bls.n	8009542 <_free_r+0x42>
 8009530:	6820      	ldr	r0, [r4, #0]
 8009532:	1821      	adds	r1, r4, r0
 8009534:	428b      	cmp	r3, r1
 8009536:	bf01      	itttt	eq
 8009538:	6819      	ldreq	r1, [r3, #0]
 800953a:	685b      	ldreq	r3, [r3, #4]
 800953c:	1809      	addeq	r1, r1, r0
 800953e:	6021      	streq	r1, [r4, #0]
 8009540:	e7ed      	b.n	800951e <_free_r+0x1e>
 8009542:	461a      	mov	r2, r3
 8009544:	685b      	ldr	r3, [r3, #4]
 8009546:	b10b      	cbz	r3, 800954c <_free_r+0x4c>
 8009548:	42a3      	cmp	r3, r4
 800954a:	d9fa      	bls.n	8009542 <_free_r+0x42>
 800954c:	6811      	ldr	r1, [r2, #0]
 800954e:	1850      	adds	r0, r2, r1
 8009550:	42a0      	cmp	r0, r4
 8009552:	d10b      	bne.n	800956c <_free_r+0x6c>
 8009554:	6820      	ldr	r0, [r4, #0]
 8009556:	4401      	add	r1, r0
 8009558:	1850      	adds	r0, r2, r1
 800955a:	4283      	cmp	r3, r0
 800955c:	6011      	str	r1, [r2, #0]
 800955e:	d1e0      	bne.n	8009522 <_free_r+0x22>
 8009560:	6818      	ldr	r0, [r3, #0]
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	6053      	str	r3, [r2, #4]
 8009566:	4408      	add	r0, r1
 8009568:	6010      	str	r0, [r2, #0]
 800956a:	e7da      	b.n	8009522 <_free_r+0x22>
 800956c:	d902      	bls.n	8009574 <_free_r+0x74>
 800956e:	230c      	movs	r3, #12
 8009570:	602b      	str	r3, [r5, #0]
 8009572:	e7d6      	b.n	8009522 <_free_r+0x22>
 8009574:	6820      	ldr	r0, [r4, #0]
 8009576:	1821      	adds	r1, r4, r0
 8009578:	428b      	cmp	r3, r1
 800957a:	bf04      	itt	eq
 800957c:	6819      	ldreq	r1, [r3, #0]
 800957e:	685b      	ldreq	r3, [r3, #4]
 8009580:	6063      	str	r3, [r4, #4]
 8009582:	bf04      	itt	eq
 8009584:	1809      	addeq	r1, r1, r0
 8009586:	6021      	streq	r1, [r4, #0]
 8009588:	6054      	str	r4, [r2, #4]
 800958a:	e7ca      	b.n	8009522 <_free_r+0x22>
 800958c:	bd38      	pop	{r3, r4, r5, pc}
 800958e:	bf00      	nop
 8009590:	20004f80 	.word	0x20004f80

08009594 <malloc>:
 8009594:	4b02      	ldr	r3, [pc, #8]	@ (80095a0 <malloc+0xc>)
 8009596:	4601      	mov	r1, r0
 8009598:	6818      	ldr	r0, [r3, #0]
 800959a:	f000 b825 	b.w	80095e8 <_malloc_r>
 800959e:	bf00      	nop
 80095a0:	20000028 	.word	0x20000028

080095a4 <sbrk_aligned>:
 80095a4:	b570      	push	{r4, r5, r6, lr}
 80095a6:	4e0f      	ldr	r6, [pc, #60]	@ (80095e4 <sbrk_aligned+0x40>)
 80095a8:	460c      	mov	r4, r1
 80095aa:	6831      	ldr	r1, [r6, #0]
 80095ac:	4605      	mov	r5, r0
 80095ae:	b911      	cbnz	r1, 80095b6 <sbrk_aligned+0x12>
 80095b0:	f000 fcd4 	bl	8009f5c <_sbrk_r>
 80095b4:	6030      	str	r0, [r6, #0]
 80095b6:	4621      	mov	r1, r4
 80095b8:	4628      	mov	r0, r5
 80095ba:	f000 fccf 	bl	8009f5c <_sbrk_r>
 80095be:	1c43      	adds	r3, r0, #1
 80095c0:	d103      	bne.n	80095ca <sbrk_aligned+0x26>
 80095c2:	f04f 34ff 	mov.w	r4, #4294967295
 80095c6:	4620      	mov	r0, r4
 80095c8:	bd70      	pop	{r4, r5, r6, pc}
 80095ca:	1cc4      	adds	r4, r0, #3
 80095cc:	f024 0403 	bic.w	r4, r4, #3
 80095d0:	42a0      	cmp	r0, r4
 80095d2:	d0f8      	beq.n	80095c6 <sbrk_aligned+0x22>
 80095d4:	1a21      	subs	r1, r4, r0
 80095d6:	4628      	mov	r0, r5
 80095d8:	f000 fcc0 	bl	8009f5c <_sbrk_r>
 80095dc:	3001      	adds	r0, #1
 80095de:	d1f2      	bne.n	80095c6 <sbrk_aligned+0x22>
 80095e0:	e7ef      	b.n	80095c2 <sbrk_aligned+0x1e>
 80095e2:	bf00      	nop
 80095e4:	20004f7c 	.word	0x20004f7c

080095e8 <_malloc_r>:
 80095e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095ec:	1ccd      	adds	r5, r1, #3
 80095ee:	f025 0503 	bic.w	r5, r5, #3
 80095f2:	3508      	adds	r5, #8
 80095f4:	2d0c      	cmp	r5, #12
 80095f6:	bf38      	it	cc
 80095f8:	250c      	movcc	r5, #12
 80095fa:	2d00      	cmp	r5, #0
 80095fc:	4606      	mov	r6, r0
 80095fe:	db01      	blt.n	8009604 <_malloc_r+0x1c>
 8009600:	42a9      	cmp	r1, r5
 8009602:	d904      	bls.n	800960e <_malloc_r+0x26>
 8009604:	230c      	movs	r3, #12
 8009606:	6033      	str	r3, [r6, #0]
 8009608:	2000      	movs	r0, #0
 800960a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800960e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80096e4 <_malloc_r+0xfc>
 8009612:	f000 f869 	bl	80096e8 <__malloc_lock>
 8009616:	f8d8 3000 	ldr.w	r3, [r8]
 800961a:	461c      	mov	r4, r3
 800961c:	bb44      	cbnz	r4, 8009670 <_malloc_r+0x88>
 800961e:	4629      	mov	r1, r5
 8009620:	4630      	mov	r0, r6
 8009622:	f7ff ffbf 	bl	80095a4 <sbrk_aligned>
 8009626:	1c43      	adds	r3, r0, #1
 8009628:	4604      	mov	r4, r0
 800962a:	d158      	bne.n	80096de <_malloc_r+0xf6>
 800962c:	f8d8 4000 	ldr.w	r4, [r8]
 8009630:	4627      	mov	r7, r4
 8009632:	2f00      	cmp	r7, #0
 8009634:	d143      	bne.n	80096be <_malloc_r+0xd6>
 8009636:	2c00      	cmp	r4, #0
 8009638:	d04b      	beq.n	80096d2 <_malloc_r+0xea>
 800963a:	6823      	ldr	r3, [r4, #0]
 800963c:	4639      	mov	r1, r7
 800963e:	4630      	mov	r0, r6
 8009640:	eb04 0903 	add.w	r9, r4, r3
 8009644:	f000 fc8a 	bl	8009f5c <_sbrk_r>
 8009648:	4581      	cmp	r9, r0
 800964a:	d142      	bne.n	80096d2 <_malloc_r+0xea>
 800964c:	6821      	ldr	r1, [r4, #0]
 800964e:	1a6d      	subs	r5, r5, r1
 8009650:	4629      	mov	r1, r5
 8009652:	4630      	mov	r0, r6
 8009654:	f7ff ffa6 	bl	80095a4 <sbrk_aligned>
 8009658:	3001      	adds	r0, #1
 800965a:	d03a      	beq.n	80096d2 <_malloc_r+0xea>
 800965c:	6823      	ldr	r3, [r4, #0]
 800965e:	442b      	add	r3, r5
 8009660:	6023      	str	r3, [r4, #0]
 8009662:	f8d8 3000 	ldr.w	r3, [r8]
 8009666:	685a      	ldr	r2, [r3, #4]
 8009668:	bb62      	cbnz	r2, 80096c4 <_malloc_r+0xdc>
 800966a:	f8c8 7000 	str.w	r7, [r8]
 800966e:	e00f      	b.n	8009690 <_malloc_r+0xa8>
 8009670:	6822      	ldr	r2, [r4, #0]
 8009672:	1b52      	subs	r2, r2, r5
 8009674:	d420      	bmi.n	80096b8 <_malloc_r+0xd0>
 8009676:	2a0b      	cmp	r2, #11
 8009678:	d917      	bls.n	80096aa <_malloc_r+0xc2>
 800967a:	1961      	adds	r1, r4, r5
 800967c:	42a3      	cmp	r3, r4
 800967e:	6025      	str	r5, [r4, #0]
 8009680:	bf18      	it	ne
 8009682:	6059      	strne	r1, [r3, #4]
 8009684:	6863      	ldr	r3, [r4, #4]
 8009686:	bf08      	it	eq
 8009688:	f8c8 1000 	streq.w	r1, [r8]
 800968c:	5162      	str	r2, [r4, r5]
 800968e:	604b      	str	r3, [r1, #4]
 8009690:	4630      	mov	r0, r6
 8009692:	f000 f82f 	bl	80096f4 <__malloc_unlock>
 8009696:	f104 000b 	add.w	r0, r4, #11
 800969a:	1d23      	adds	r3, r4, #4
 800969c:	f020 0007 	bic.w	r0, r0, #7
 80096a0:	1ac2      	subs	r2, r0, r3
 80096a2:	bf1c      	itt	ne
 80096a4:	1a1b      	subne	r3, r3, r0
 80096a6:	50a3      	strne	r3, [r4, r2]
 80096a8:	e7af      	b.n	800960a <_malloc_r+0x22>
 80096aa:	6862      	ldr	r2, [r4, #4]
 80096ac:	42a3      	cmp	r3, r4
 80096ae:	bf0c      	ite	eq
 80096b0:	f8c8 2000 	streq.w	r2, [r8]
 80096b4:	605a      	strne	r2, [r3, #4]
 80096b6:	e7eb      	b.n	8009690 <_malloc_r+0xa8>
 80096b8:	4623      	mov	r3, r4
 80096ba:	6864      	ldr	r4, [r4, #4]
 80096bc:	e7ae      	b.n	800961c <_malloc_r+0x34>
 80096be:	463c      	mov	r4, r7
 80096c0:	687f      	ldr	r7, [r7, #4]
 80096c2:	e7b6      	b.n	8009632 <_malloc_r+0x4a>
 80096c4:	461a      	mov	r2, r3
 80096c6:	685b      	ldr	r3, [r3, #4]
 80096c8:	42a3      	cmp	r3, r4
 80096ca:	d1fb      	bne.n	80096c4 <_malloc_r+0xdc>
 80096cc:	2300      	movs	r3, #0
 80096ce:	6053      	str	r3, [r2, #4]
 80096d0:	e7de      	b.n	8009690 <_malloc_r+0xa8>
 80096d2:	230c      	movs	r3, #12
 80096d4:	6033      	str	r3, [r6, #0]
 80096d6:	4630      	mov	r0, r6
 80096d8:	f000 f80c 	bl	80096f4 <__malloc_unlock>
 80096dc:	e794      	b.n	8009608 <_malloc_r+0x20>
 80096de:	6005      	str	r5, [r0, #0]
 80096e0:	e7d6      	b.n	8009690 <_malloc_r+0xa8>
 80096e2:	bf00      	nop
 80096e4:	20004f80 	.word	0x20004f80

080096e8 <__malloc_lock>:
 80096e8:	4801      	ldr	r0, [pc, #4]	@ (80096f0 <__malloc_lock+0x8>)
 80096ea:	f7ff b8ac 	b.w	8008846 <__retarget_lock_acquire_recursive>
 80096ee:	bf00      	nop
 80096f0:	20004f78 	.word	0x20004f78

080096f4 <__malloc_unlock>:
 80096f4:	4801      	ldr	r0, [pc, #4]	@ (80096fc <__malloc_unlock+0x8>)
 80096f6:	f7ff b8a7 	b.w	8008848 <__retarget_lock_release_recursive>
 80096fa:	bf00      	nop
 80096fc:	20004f78 	.word	0x20004f78

08009700 <_Balloc>:
 8009700:	b570      	push	{r4, r5, r6, lr}
 8009702:	69c6      	ldr	r6, [r0, #28]
 8009704:	4604      	mov	r4, r0
 8009706:	460d      	mov	r5, r1
 8009708:	b976      	cbnz	r6, 8009728 <_Balloc+0x28>
 800970a:	2010      	movs	r0, #16
 800970c:	f7ff ff42 	bl	8009594 <malloc>
 8009710:	4602      	mov	r2, r0
 8009712:	61e0      	str	r0, [r4, #28]
 8009714:	b920      	cbnz	r0, 8009720 <_Balloc+0x20>
 8009716:	4b18      	ldr	r3, [pc, #96]	@ (8009778 <_Balloc+0x78>)
 8009718:	4818      	ldr	r0, [pc, #96]	@ (800977c <_Balloc+0x7c>)
 800971a:	216b      	movs	r1, #107	@ 0x6b
 800971c:	f000 fc2e 	bl	8009f7c <__assert_func>
 8009720:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009724:	6006      	str	r6, [r0, #0]
 8009726:	60c6      	str	r6, [r0, #12]
 8009728:	69e6      	ldr	r6, [r4, #28]
 800972a:	68f3      	ldr	r3, [r6, #12]
 800972c:	b183      	cbz	r3, 8009750 <_Balloc+0x50>
 800972e:	69e3      	ldr	r3, [r4, #28]
 8009730:	68db      	ldr	r3, [r3, #12]
 8009732:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009736:	b9b8      	cbnz	r0, 8009768 <_Balloc+0x68>
 8009738:	2101      	movs	r1, #1
 800973a:	fa01 f605 	lsl.w	r6, r1, r5
 800973e:	1d72      	adds	r2, r6, #5
 8009740:	0092      	lsls	r2, r2, #2
 8009742:	4620      	mov	r0, r4
 8009744:	f000 fc38 	bl	8009fb8 <_calloc_r>
 8009748:	b160      	cbz	r0, 8009764 <_Balloc+0x64>
 800974a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800974e:	e00e      	b.n	800976e <_Balloc+0x6e>
 8009750:	2221      	movs	r2, #33	@ 0x21
 8009752:	2104      	movs	r1, #4
 8009754:	4620      	mov	r0, r4
 8009756:	f000 fc2f 	bl	8009fb8 <_calloc_r>
 800975a:	69e3      	ldr	r3, [r4, #28]
 800975c:	60f0      	str	r0, [r6, #12]
 800975e:	68db      	ldr	r3, [r3, #12]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d1e4      	bne.n	800972e <_Balloc+0x2e>
 8009764:	2000      	movs	r0, #0
 8009766:	bd70      	pop	{r4, r5, r6, pc}
 8009768:	6802      	ldr	r2, [r0, #0]
 800976a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800976e:	2300      	movs	r3, #0
 8009770:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009774:	e7f7      	b.n	8009766 <_Balloc+0x66>
 8009776:	bf00      	nop
 8009778:	0800af41 	.word	0x0800af41
 800977c:	0800afc1 	.word	0x0800afc1

08009780 <_Bfree>:
 8009780:	b570      	push	{r4, r5, r6, lr}
 8009782:	69c6      	ldr	r6, [r0, #28]
 8009784:	4605      	mov	r5, r0
 8009786:	460c      	mov	r4, r1
 8009788:	b976      	cbnz	r6, 80097a8 <_Bfree+0x28>
 800978a:	2010      	movs	r0, #16
 800978c:	f7ff ff02 	bl	8009594 <malloc>
 8009790:	4602      	mov	r2, r0
 8009792:	61e8      	str	r0, [r5, #28]
 8009794:	b920      	cbnz	r0, 80097a0 <_Bfree+0x20>
 8009796:	4b09      	ldr	r3, [pc, #36]	@ (80097bc <_Bfree+0x3c>)
 8009798:	4809      	ldr	r0, [pc, #36]	@ (80097c0 <_Bfree+0x40>)
 800979a:	218f      	movs	r1, #143	@ 0x8f
 800979c:	f000 fbee 	bl	8009f7c <__assert_func>
 80097a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80097a4:	6006      	str	r6, [r0, #0]
 80097a6:	60c6      	str	r6, [r0, #12]
 80097a8:	b13c      	cbz	r4, 80097ba <_Bfree+0x3a>
 80097aa:	69eb      	ldr	r3, [r5, #28]
 80097ac:	6862      	ldr	r2, [r4, #4]
 80097ae:	68db      	ldr	r3, [r3, #12]
 80097b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80097b4:	6021      	str	r1, [r4, #0]
 80097b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80097ba:	bd70      	pop	{r4, r5, r6, pc}
 80097bc:	0800af41 	.word	0x0800af41
 80097c0:	0800afc1 	.word	0x0800afc1

080097c4 <__multadd>:
 80097c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097c8:	690d      	ldr	r5, [r1, #16]
 80097ca:	4607      	mov	r7, r0
 80097cc:	460c      	mov	r4, r1
 80097ce:	461e      	mov	r6, r3
 80097d0:	f101 0c14 	add.w	ip, r1, #20
 80097d4:	2000      	movs	r0, #0
 80097d6:	f8dc 3000 	ldr.w	r3, [ip]
 80097da:	b299      	uxth	r1, r3
 80097dc:	fb02 6101 	mla	r1, r2, r1, r6
 80097e0:	0c1e      	lsrs	r6, r3, #16
 80097e2:	0c0b      	lsrs	r3, r1, #16
 80097e4:	fb02 3306 	mla	r3, r2, r6, r3
 80097e8:	b289      	uxth	r1, r1
 80097ea:	3001      	adds	r0, #1
 80097ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80097f0:	4285      	cmp	r5, r0
 80097f2:	f84c 1b04 	str.w	r1, [ip], #4
 80097f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80097fa:	dcec      	bgt.n	80097d6 <__multadd+0x12>
 80097fc:	b30e      	cbz	r6, 8009842 <__multadd+0x7e>
 80097fe:	68a3      	ldr	r3, [r4, #8]
 8009800:	42ab      	cmp	r3, r5
 8009802:	dc19      	bgt.n	8009838 <__multadd+0x74>
 8009804:	6861      	ldr	r1, [r4, #4]
 8009806:	4638      	mov	r0, r7
 8009808:	3101      	adds	r1, #1
 800980a:	f7ff ff79 	bl	8009700 <_Balloc>
 800980e:	4680      	mov	r8, r0
 8009810:	b928      	cbnz	r0, 800981e <__multadd+0x5a>
 8009812:	4602      	mov	r2, r0
 8009814:	4b0c      	ldr	r3, [pc, #48]	@ (8009848 <__multadd+0x84>)
 8009816:	480d      	ldr	r0, [pc, #52]	@ (800984c <__multadd+0x88>)
 8009818:	21ba      	movs	r1, #186	@ 0xba
 800981a:	f000 fbaf 	bl	8009f7c <__assert_func>
 800981e:	6922      	ldr	r2, [r4, #16]
 8009820:	3202      	adds	r2, #2
 8009822:	f104 010c 	add.w	r1, r4, #12
 8009826:	0092      	lsls	r2, r2, #2
 8009828:	300c      	adds	r0, #12
 800982a:	f7ff f80e 	bl	800884a <memcpy>
 800982e:	4621      	mov	r1, r4
 8009830:	4638      	mov	r0, r7
 8009832:	f7ff ffa5 	bl	8009780 <_Bfree>
 8009836:	4644      	mov	r4, r8
 8009838:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800983c:	3501      	adds	r5, #1
 800983e:	615e      	str	r6, [r3, #20]
 8009840:	6125      	str	r5, [r4, #16]
 8009842:	4620      	mov	r0, r4
 8009844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009848:	0800afb0 	.word	0x0800afb0
 800984c:	0800afc1 	.word	0x0800afc1

08009850 <__hi0bits>:
 8009850:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009854:	4603      	mov	r3, r0
 8009856:	bf36      	itet	cc
 8009858:	0403      	lslcc	r3, r0, #16
 800985a:	2000      	movcs	r0, #0
 800985c:	2010      	movcc	r0, #16
 800985e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009862:	bf3c      	itt	cc
 8009864:	021b      	lslcc	r3, r3, #8
 8009866:	3008      	addcc	r0, #8
 8009868:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800986c:	bf3c      	itt	cc
 800986e:	011b      	lslcc	r3, r3, #4
 8009870:	3004      	addcc	r0, #4
 8009872:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009876:	bf3c      	itt	cc
 8009878:	009b      	lslcc	r3, r3, #2
 800987a:	3002      	addcc	r0, #2
 800987c:	2b00      	cmp	r3, #0
 800987e:	db05      	blt.n	800988c <__hi0bits+0x3c>
 8009880:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009884:	f100 0001 	add.w	r0, r0, #1
 8009888:	bf08      	it	eq
 800988a:	2020      	moveq	r0, #32
 800988c:	4770      	bx	lr

0800988e <__lo0bits>:
 800988e:	6803      	ldr	r3, [r0, #0]
 8009890:	4602      	mov	r2, r0
 8009892:	f013 0007 	ands.w	r0, r3, #7
 8009896:	d00b      	beq.n	80098b0 <__lo0bits+0x22>
 8009898:	07d9      	lsls	r1, r3, #31
 800989a:	d421      	bmi.n	80098e0 <__lo0bits+0x52>
 800989c:	0798      	lsls	r0, r3, #30
 800989e:	bf49      	itett	mi
 80098a0:	085b      	lsrmi	r3, r3, #1
 80098a2:	089b      	lsrpl	r3, r3, #2
 80098a4:	2001      	movmi	r0, #1
 80098a6:	6013      	strmi	r3, [r2, #0]
 80098a8:	bf5c      	itt	pl
 80098aa:	6013      	strpl	r3, [r2, #0]
 80098ac:	2002      	movpl	r0, #2
 80098ae:	4770      	bx	lr
 80098b0:	b299      	uxth	r1, r3
 80098b2:	b909      	cbnz	r1, 80098b8 <__lo0bits+0x2a>
 80098b4:	0c1b      	lsrs	r3, r3, #16
 80098b6:	2010      	movs	r0, #16
 80098b8:	b2d9      	uxtb	r1, r3
 80098ba:	b909      	cbnz	r1, 80098c0 <__lo0bits+0x32>
 80098bc:	3008      	adds	r0, #8
 80098be:	0a1b      	lsrs	r3, r3, #8
 80098c0:	0719      	lsls	r1, r3, #28
 80098c2:	bf04      	itt	eq
 80098c4:	091b      	lsreq	r3, r3, #4
 80098c6:	3004      	addeq	r0, #4
 80098c8:	0799      	lsls	r1, r3, #30
 80098ca:	bf04      	itt	eq
 80098cc:	089b      	lsreq	r3, r3, #2
 80098ce:	3002      	addeq	r0, #2
 80098d0:	07d9      	lsls	r1, r3, #31
 80098d2:	d403      	bmi.n	80098dc <__lo0bits+0x4e>
 80098d4:	085b      	lsrs	r3, r3, #1
 80098d6:	f100 0001 	add.w	r0, r0, #1
 80098da:	d003      	beq.n	80098e4 <__lo0bits+0x56>
 80098dc:	6013      	str	r3, [r2, #0]
 80098de:	4770      	bx	lr
 80098e0:	2000      	movs	r0, #0
 80098e2:	4770      	bx	lr
 80098e4:	2020      	movs	r0, #32
 80098e6:	4770      	bx	lr

080098e8 <__i2b>:
 80098e8:	b510      	push	{r4, lr}
 80098ea:	460c      	mov	r4, r1
 80098ec:	2101      	movs	r1, #1
 80098ee:	f7ff ff07 	bl	8009700 <_Balloc>
 80098f2:	4602      	mov	r2, r0
 80098f4:	b928      	cbnz	r0, 8009902 <__i2b+0x1a>
 80098f6:	4b05      	ldr	r3, [pc, #20]	@ (800990c <__i2b+0x24>)
 80098f8:	4805      	ldr	r0, [pc, #20]	@ (8009910 <__i2b+0x28>)
 80098fa:	f240 1145 	movw	r1, #325	@ 0x145
 80098fe:	f000 fb3d 	bl	8009f7c <__assert_func>
 8009902:	2301      	movs	r3, #1
 8009904:	6144      	str	r4, [r0, #20]
 8009906:	6103      	str	r3, [r0, #16]
 8009908:	bd10      	pop	{r4, pc}
 800990a:	bf00      	nop
 800990c:	0800afb0 	.word	0x0800afb0
 8009910:	0800afc1 	.word	0x0800afc1

08009914 <__multiply>:
 8009914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009918:	4614      	mov	r4, r2
 800991a:	690a      	ldr	r2, [r1, #16]
 800991c:	6923      	ldr	r3, [r4, #16]
 800991e:	429a      	cmp	r2, r3
 8009920:	bfa8      	it	ge
 8009922:	4623      	movge	r3, r4
 8009924:	460f      	mov	r7, r1
 8009926:	bfa4      	itt	ge
 8009928:	460c      	movge	r4, r1
 800992a:	461f      	movge	r7, r3
 800992c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009930:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009934:	68a3      	ldr	r3, [r4, #8]
 8009936:	6861      	ldr	r1, [r4, #4]
 8009938:	eb0a 0609 	add.w	r6, sl, r9
 800993c:	42b3      	cmp	r3, r6
 800993e:	b085      	sub	sp, #20
 8009940:	bfb8      	it	lt
 8009942:	3101      	addlt	r1, #1
 8009944:	f7ff fedc 	bl	8009700 <_Balloc>
 8009948:	b930      	cbnz	r0, 8009958 <__multiply+0x44>
 800994a:	4602      	mov	r2, r0
 800994c:	4b44      	ldr	r3, [pc, #272]	@ (8009a60 <__multiply+0x14c>)
 800994e:	4845      	ldr	r0, [pc, #276]	@ (8009a64 <__multiply+0x150>)
 8009950:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009954:	f000 fb12 	bl	8009f7c <__assert_func>
 8009958:	f100 0514 	add.w	r5, r0, #20
 800995c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009960:	462b      	mov	r3, r5
 8009962:	2200      	movs	r2, #0
 8009964:	4543      	cmp	r3, r8
 8009966:	d321      	bcc.n	80099ac <__multiply+0x98>
 8009968:	f107 0114 	add.w	r1, r7, #20
 800996c:	f104 0214 	add.w	r2, r4, #20
 8009970:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009974:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009978:	9302      	str	r3, [sp, #8]
 800997a:	1b13      	subs	r3, r2, r4
 800997c:	3b15      	subs	r3, #21
 800997e:	f023 0303 	bic.w	r3, r3, #3
 8009982:	3304      	adds	r3, #4
 8009984:	f104 0715 	add.w	r7, r4, #21
 8009988:	42ba      	cmp	r2, r7
 800998a:	bf38      	it	cc
 800998c:	2304      	movcc	r3, #4
 800998e:	9301      	str	r3, [sp, #4]
 8009990:	9b02      	ldr	r3, [sp, #8]
 8009992:	9103      	str	r1, [sp, #12]
 8009994:	428b      	cmp	r3, r1
 8009996:	d80c      	bhi.n	80099b2 <__multiply+0x9e>
 8009998:	2e00      	cmp	r6, #0
 800999a:	dd03      	ble.n	80099a4 <__multiply+0x90>
 800999c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d05b      	beq.n	8009a5c <__multiply+0x148>
 80099a4:	6106      	str	r6, [r0, #16]
 80099a6:	b005      	add	sp, #20
 80099a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099ac:	f843 2b04 	str.w	r2, [r3], #4
 80099b0:	e7d8      	b.n	8009964 <__multiply+0x50>
 80099b2:	f8b1 a000 	ldrh.w	sl, [r1]
 80099b6:	f1ba 0f00 	cmp.w	sl, #0
 80099ba:	d024      	beq.n	8009a06 <__multiply+0xf2>
 80099bc:	f104 0e14 	add.w	lr, r4, #20
 80099c0:	46a9      	mov	r9, r5
 80099c2:	f04f 0c00 	mov.w	ip, #0
 80099c6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80099ca:	f8d9 3000 	ldr.w	r3, [r9]
 80099ce:	fa1f fb87 	uxth.w	fp, r7
 80099d2:	b29b      	uxth	r3, r3
 80099d4:	fb0a 330b 	mla	r3, sl, fp, r3
 80099d8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80099dc:	f8d9 7000 	ldr.w	r7, [r9]
 80099e0:	4463      	add	r3, ip
 80099e2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80099e6:	fb0a c70b 	mla	r7, sl, fp, ip
 80099ea:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80099ee:	b29b      	uxth	r3, r3
 80099f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80099f4:	4572      	cmp	r2, lr
 80099f6:	f849 3b04 	str.w	r3, [r9], #4
 80099fa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80099fe:	d8e2      	bhi.n	80099c6 <__multiply+0xb2>
 8009a00:	9b01      	ldr	r3, [sp, #4]
 8009a02:	f845 c003 	str.w	ip, [r5, r3]
 8009a06:	9b03      	ldr	r3, [sp, #12]
 8009a08:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009a0c:	3104      	adds	r1, #4
 8009a0e:	f1b9 0f00 	cmp.w	r9, #0
 8009a12:	d021      	beq.n	8009a58 <__multiply+0x144>
 8009a14:	682b      	ldr	r3, [r5, #0]
 8009a16:	f104 0c14 	add.w	ip, r4, #20
 8009a1a:	46ae      	mov	lr, r5
 8009a1c:	f04f 0a00 	mov.w	sl, #0
 8009a20:	f8bc b000 	ldrh.w	fp, [ip]
 8009a24:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009a28:	fb09 770b 	mla	r7, r9, fp, r7
 8009a2c:	4457      	add	r7, sl
 8009a2e:	b29b      	uxth	r3, r3
 8009a30:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009a34:	f84e 3b04 	str.w	r3, [lr], #4
 8009a38:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009a3c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009a40:	f8be 3000 	ldrh.w	r3, [lr]
 8009a44:	fb09 330a 	mla	r3, r9, sl, r3
 8009a48:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009a4c:	4562      	cmp	r2, ip
 8009a4e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009a52:	d8e5      	bhi.n	8009a20 <__multiply+0x10c>
 8009a54:	9f01      	ldr	r7, [sp, #4]
 8009a56:	51eb      	str	r3, [r5, r7]
 8009a58:	3504      	adds	r5, #4
 8009a5a:	e799      	b.n	8009990 <__multiply+0x7c>
 8009a5c:	3e01      	subs	r6, #1
 8009a5e:	e79b      	b.n	8009998 <__multiply+0x84>
 8009a60:	0800afb0 	.word	0x0800afb0
 8009a64:	0800afc1 	.word	0x0800afc1

08009a68 <__pow5mult>:
 8009a68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a6c:	4615      	mov	r5, r2
 8009a6e:	f012 0203 	ands.w	r2, r2, #3
 8009a72:	4607      	mov	r7, r0
 8009a74:	460e      	mov	r6, r1
 8009a76:	d007      	beq.n	8009a88 <__pow5mult+0x20>
 8009a78:	4c25      	ldr	r4, [pc, #148]	@ (8009b10 <__pow5mult+0xa8>)
 8009a7a:	3a01      	subs	r2, #1
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009a82:	f7ff fe9f 	bl	80097c4 <__multadd>
 8009a86:	4606      	mov	r6, r0
 8009a88:	10ad      	asrs	r5, r5, #2
 8009a8a:	d03d      	beq.n	8009b08 <__pow5mult+0xa0>
 8009a8c:	69fc      	ldr	r4, [r7, #28]
 8009a8e:	b97c      	cbnz	r4, 8009ab0 <__pow5mult+0x48>
 8009a90:	2010      	movs	r0, #16
 8009a92:	f7ff fd7f 	bl	8009594 <malloc>
 8009a96:	4602      	mov	r2, r0
 8009a98:	61f8      	str	r0, [r7, #28]
 8009a9a:	b928      	cbnz	r0, 8009aa8 <__pow5mult+0x40>
 8009a9c:	4b1d      	ldr	r3, [pc, #116]	@ (8009b14 <__pow5mult+0xac>)
 8009a9e:	481e      	ldr	r0, [pc, #120]	@ (8009b18 <__pow5mult+0xb0>)
 8009aa0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009aa4:	f000 fa6a 	bl	8009f7c <__assert_func>
 8009aa8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009aac:	6004      	str	r4, [r0, #0]
 8009aae:	60c4      	str	r4, [r0, #12]
 8009ab0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009ab4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009ab8:	b94c      	cbnz	r4, 8009ace <__pow5mult+0x66>
 8009aba:	f240 2171 	movw	r1, #625	@ 0x271
 8009abe:	4638      	mov	r0, r7
 8009ac0:	f7ff ff12 	bl	80098e8 <__i2b>
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	f8c8 0008 	str.w	r0, [r8, #8]
 8009aca:	4604      	mov	r4, r0
 8009acc:	6003      	str	r3, [r0, #0]
 8009ace:	f04f 0900 	mov.w	r9, #0
 8009ad2:	07eb      	lsls	r3, r5, #31
 8009ad4:	d50a      	bpl.n	8009aec <__pow5mult+0x84>
 8009ad6:	4631      	mov	r1, r6
 8009ad8:	4622      	mov	r2, r4
 8009ada:	4638      	mov	r0, r7
 8009adc:	f7ff ff1a 	bl	8009914 <__multiply>
 8009ae0:	4631      	mov	r1, r6
 8009ae2:	4680      	mov	r8, r0
 8009ae4:	4638      	mov	r0, r7
 8009ae6:	f7ff fe4b 	bl	8009780 <_Bfree>
 8009aea:	4646      	mov	r6, r8
 8009aec:	106d      	asrs	r5, r5, #1
 8009aee:	d00b      	beq.n	8009b08 <__pow5mult+0xa0>
 8009af0:	6820      	ldr	r0, [r4, #0]
 8009af2:	b938      	cbnz	r0, 8009b04 <__pow5mult+0x9c>
 8009af4:	4622      	mov	r2, r4
 8009af6:	4621      	mov	r1, r4
 8009af8:	4638      	mov	r0, r7
 8009afa:	f7ff ff0b 	bl	8009914 <__multiply>
 8009afe:	6020      	str	r0, [r4, #0]
 8009b00:	f8c0 9000 	str.w	r9, [r0]
 8009b04:	4604      	mov	r4, r0
 8009b06:	e7e4      	b.n	8009ad2 <__pow5mult+0x6a>
 8009b08:	4630      	mov	r0, r6
 8009b0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b0e:	bf00      	nop
 8009b10:	0800b01c 	.word	0x0800b01c
 8009b14:	0800af41 	.word	0x0800af41
 8009b18:	0800afc1 	.word	0x0800afc1

08009b1c <__lshift>:
 8009b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b20:	460c      	mov	r4, r1
 8009b22:	6849      	ldr	r1, [r1, #4]
 8009b24:	6923      	ldr	r3, [r4, #16]
 8009b26:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009b2a:	68a3      	ldr	r3, [r4, #8]
 8009b2c:	4607      	mov	r7, r0
 8009b2e:	4691      	mov	r9, r2
 8009b30:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009b34:	f108 0601 	add.w	r6, r8, #1
 8009b38:	42b3      	cmp	r3, r6
 8009b3a:	db0b      	blt.n	8009b54 <__lshift+0x38>
 8009b3c:	4638      	mov	r0, r7
 8009b3e:	f7ff fddf 	bl	8009700 <_Balloc>
 8009b42:	4605      	mov	r5, r0
 8009b44:	b948      	cbnz	r0, 8009b5a <__lshift+0x3e>
 8009b46:	4602      	mov	r2, r0
 8009b48:	4b28      	ldr	r3, [pc, #160]	@ (8009bec <__lshift+0xd0>)
 8009b4a:	4829      	ldr	r0, [pc, #164]	@ (8009bf0 <__lshift+0xd4>)
 8009b4c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009b50:	f000 fa14 	bl	8009f7c <__assert_func>
 8009b54:	3101      	adds	r1, #1
 8009b56:	005b      	lsls	r3, r3, #1
 8009b58:	e7ee      	b.n	8009b38 <__lshift+0x1c>
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	f100 0114 	add.w	r1, r0, #20
 8009b60:	f100 0210 	add.w	r2, r0, #16
 8009b64:	4618      	mov	r0, r3
 8009b66:	4553      	cmp	r3, sl
 8009b68:	db33      	blt.n	8009bd2 <__lshift+0xb6>
 8009b6a:	6920      	ldr	r0, [r4, #16]
 8009b6c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009b70:	f104 0314 	add.w	r3, r4, #20
 8009b74:	f019 091f 	ands.w	r9, r9, #31
 8009b78:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009b7c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009b80:	d02b      	beq.n	8009bda <__lshift+0xbe>
 8009b82:	f1c9 0e20 	rsb	lr, r9, #32
 8009b86:	468a      	mov	sl, r1
 8009b88:	2200      	movs	r2, #0
 8009b8a:	6818      	ldr	r0, [r3, #0]
 8009b8c:	fa00 f009 	lsl.w	r0, r0, r9
 8009b90:	4310      	orrs	r0, r2
 8009b92:	f84a 0b04 	str.w	r0, [sl], #4
 8009b96:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b9a:	459c      	cmp	ip, r3
 8009b9c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009ba0:	d8f3      	bhi.n	8009b8a <__lshift+0x6e>
 8009ba2:	ebac 0304 	sub.w	r3, ip, r4
 8009ba6:	3b15      	subs	r3, #21
 8009ba8:	f023 0303 	bic.w	r3, r3, #3
 8009bac:	3304      	adds	r3, #4
 8009bae:	f104 0015 	add.w	r0, r4, #21
 8009bb2:	4584      	cmp	ip, r0
 8009bb4:	bf38      	it	cc
 8009bb6:	2304      	movcc	r3, #4
 8009bb8:	50ca      	str	r2, [r1, r3]
 8009bba:	b10a      	cbz	r2, 8009bc0 <__lshift+0xa4>
 8009bbc:	f108 0602 	add.w	r6, r8, #2
 8009bc0:	3e01      	subs	r6, #1
 8009bc2:	4638      	mov	r0, r7
 8009bc4:	612e      	str	r6, [r5, #16]
 8009bc6:	4621      	mov	r1, r4
 8009bc8:	f7ff fdda 	bl	8009780 <_Bfree>
 8009bcc:	4628      	mov	r0, r5
 8009bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bd2:	f842 0f04 	str.w	r0, [r2, #4]!
 8009bd6:	3301      	adds	r3, #1
 8009bd8:	e7c5      	b.n	8009b66 <__lshift+0x4a>
 8009bda:	3904      	subs	r1, #4
 8009bdc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009be0:	f841 2f04 	str.w	r2, [r1, #4]!
 8009be4:	459c      	cmp	ip, r3
 8009be6:	d8f9      	bhi.n	8009bdc <__lshift+0xc0>
 8009be8:	e7ea      	b.n	8009bc0 <__lshift+0xa4>
 8009bea:	bf00      	nop
 8009bec:	0800afb0 	.word	0x0800afb0
 8009bf0:	0800afc1 	.word	0x0800afc1

08009bf4 <__mcmp>:
 8009bf4:	690a      	ldr	r2, [r1, #16]
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	6900      	ldr	r0, [r0, #16]
 8009bfa:	1a80      	subs	r0, r0, r2
 8009bfc:	b530      	push	{r4, r5, lr}
 8009bfe:	d10e      	bne.n	8009c1e <__mcmp+0x2a>
 8009c00:	3314      	adds	r3, #20
 8009c02:	3114      	adds	r1, #20
 8009c04:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009c08:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009c0c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009c10:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009c14:	4295      	cmp	r5, r2
 8009c16:	d003      	beq.n	8009c20 <__mcmp+0x2c>
 8009c18:	d205      	bcs.n	8009c26 <__mcmp+0x32>
 8009c1a:	f04f 30ff 	mov.w	r0, #4294967295
 8009c1e:	bd30      	pop	{r4, r5, pc}
 8009c20:	42a3      	cmp	r3, r4
 8009c22:	d3f3      	bcc.n	8009c0c <__mcmp+0x18>
 8009c24:	e7fb      	b.n	8009c1e <__mcmp+0x2a>
 8009c26:	2001      	movs	r0, #1
 8009c28:	e7f9      	b.n	8009c1e <__mcmp+0x2a>
	...

08009c2c <__mdiff>:
 8009c2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c30:	4689      	mov	r9, r1
 8009c32:	4606      	mov	r6, r0
 8009c34:	4611      	mov	r1, r2
 8009c36:	4648      	mov	r0, r9
 8009c38:	4614      	mov	r4, r2
 8009c3a:	f7ff ffdb 	bl	8009bf4 <__mcmp>
 8009c3e:	1e05      	subs	r5, r0, #0
 8009c40:	d112      	bne.n	8009c68 <__mdiff+0x3c>
 8009c42:	4629      	mov	r1, r5
 8009c44:	4630      	mov	r0, r6
 8009c46:	f7ff fd5b 	bl	8009700 <_Balloc>
 8009c4a:	4602      	mov	r2, r0
 8009c4c:	b928      	cbnz	r0, 8009c5a <__mdiff+0x2e>
 8009c4e:	4b3f      	ldr	r3, [pc, #252]	@ (8009d4c <__mdiff+0x120>)
 8009c50:	f240 2137 	movw	r1, #567	@ 0x237
 8009c54:	483e      	ldr	r0, [pc, #248]	@ (8009d50 <__mdiff+0x124>)
 8009c56:	f000 f991 	bl	8009f7c <__assert_func>
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009c60:	4610      	mov	r0, r2
 8009c62:	b003      	add	sp, #12
 8009c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c68:	bfbc      	itt	lt
 8009c6a:	464b      	movlt	r3, r9
 8009c6c:	46a1      	movlt	r9, r4
 8009c6e:	4630      	mov	r0, r6
 8009c70:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009c74:	bfba      	itte	lt
 8009c76:	461c      	movlt	r4, r3
 8009c78:	2501      	movlt	r5, #1
 8009c7a:	2500      	movge	r5, #0
 8009c7c:	f7ff fd40 	bl	8009700 <_Balloc>
 8009c80:	4602      	mov	r2, r0
 8009c82:	b918      	cbnz	r0, 8009c8c <__mdiff+0x60>
 8009c84:	4b31      	ldr	r3, [pc, #196]	@ (8009d4c <__mdiff+0x120>)
 8009c86:	f240 2145 	movw	r1, #581	@ 0x245
 8009c8a:	e7e3      	b.n	8009c54 <__mdiff+0x28>
 8009c8c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009c90:	6926      	ldr	r6, [r4, #16]
 8009c92:	60c5      	str	r5, [r0, #12]
 8009c94:	f109 0310 	add.w	r3, r9, #16
 8009c98:	f109 0514 	add.w	r5, r9, #20
 8009c9c:	f104 0e14 	add.w	lr, r4, #20
 8009ca0:	f100 0b14 	add.w	fp, r0, #20
 8009ca4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009ca8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009cac:	9301      	str	r3, [sp, #4]
 8009cae:	46d9      	mov	r9, fp
 8009cb0:	f04f 0c00 	mov.w	ip, #0
 8009cb4:	9b01      	ldr	r3, [sp, #4]
 8009cb6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009cba:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009cbe:	9301      	str	r3, [sp, #4]
 8009cc0:	fa1f f38a 	uxth.w	r3, sl
 8009cc4:	4619      	mov	r1, r3
 8009cc6:	b283      	uxth	r3, r0
 8009cc8:	1acb      	subs	r3, r1, r3
 8009cca:	0c00      	lsrs	r0, r0, #16
 8009ccc:	4463      	add	r3, ip
 8009cce:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009cd2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009cd6:	b29b      	uxth	r3, r3
 8009cd8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009cdc:	4576      	cmp	r6, lr
 8009cde:	f849 3b04 	str.w	r3, [r9], #4
 8009ce2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009ce6:	d8e5      	bhi.n	8009cb4 <__mdiff+0x88>
 8009ce8:	1b33      	subs	r3, r6, r4
 8009cea:	3b15      	subs	r3, #21
 8009cec:	f023 0303 	bic.w	r3, r3, #3
 8009cf0:	3415      	adds	r4, #21
 8009cf2:	3304      	adds	r3, #4
 8009cf4:	42a6      	cmp	r6, r4
 8009cf6:	bf38      	it	cc
 8009cf8:	2304      	movcc	r3, #4
 8009cfa:	441d      	add	r5, r3
 8009cfc:	445b      	add	r3, fp
 8009cfe:	461e      	mov	r6, r3
 8009d00:	462c      	mov	r4, r5
 8009d02:	4544      	cmp	r4, r8
 8009d04:	d30e      	bcc.n	8009d24 <__mdiff+0xf8>
 8009d06:	f108 0103 	add.w	r1, r8, #3
 8009d0a:	1b49      	subs	r1, r1, r5
 8009d0c:	f021 0103 	bic.w	r1, r1, #3
 8009d10:	3d03      	subs	r5, #3
 8009d12:	45a8      	cmp	r8, r5
 8009d14:	bf38      	it	cc
 8009d16:	2100      	movcc	r1, #0
 8009d18:	440b      	add	r3, r1
 8009d1a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009d1e:	b191      	cbz	r1, 8009d46 <__mdiff+0x11a>
 8009d20:	6117      	str	r7, [r2, #16]
 8009d22:	e79d      	b.n	8009c60 <__mdiff+0x34>
 8009d24:	f854 1b04 	ldr.w	r1, [r4], #4
 8009d28:	46e6      	mov	lr, ip
 8009d2a:	0c08      	lsrs	r0, r1, #16
 8009d2c:	fa1c fc81 	uxtah	ip, ip, r1
 8009d30:	4471      	add	r1, lr
 8009d32:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009d36:	b289      	uxth	r1, r1
 8009d38:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009d3c:	f846 1b04 	str.w	r1, [r6], #4
 8009d40:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009d44:	e7dd      	b.n	8009d02 <__mdiff+0xd6>
 8009d46:	3f01      	subs	r7, #1
 8009d48:	e7e7      	b.n	8009d1a <__mdiff+0xee>
 8009d4a:	bf00      	nop
 8009d4c:	0800afb0 	.word	0x0800afb0
 8009d50:	0800afc1 	.word	0x0800afc1

08009d54 <__d2b>:
 8009d54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009d58:	460f      	mov	r7, r1
 8009d5a:	2101      	movs	r1, #1
 8009d5c:	ec59 8b10 	vmov	r8, r9, d0
 8009d60:	4616      	mov	r6, r2
 8009d62:	f7ff fccd 	bl	8009700 <_Balloc>
 8009d66:	4604      	mov	r4, r0
 8009d68:	b930      	cbnz	r0, 8009d78 <__d2b+0x24>
 8009d6a:	4602      	mov	r2, r0
 8009d6c:	4b23      	ldr	r3, [pc, #140]	@ (8009dfc <__d2b+0xa8>)
 8009d6e:	4824      	ldr	r0, [pc, #144]	@ (8009e00 <__d2b+0xac>)
 8009d70:	f240 310f 	movw	r1, #783	@ 0x30f
 8009d74:	f000 f902 	bl	8009f7c <__assert_func>
 8009d78:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009d7c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009d80:	b10d      	cbz	r5, 8009d86 <__d2b+0x32>
 8009d82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009d86:	9301      	str	r3, [sp, #4]
 8009d88:	f1b8 0300 	subs.w	r3, r8, #0
 8009d8c:	d023      	beq.n	8009dd6 <__d2b+0x82>
 8009d8e:	4668      	mov	r0, sp
 8009d90:	9300      	str	r3, [sp, #0]
 8009d92:	f7ff fd7c 	bl	800988e <__lo0bits>
 8009d96:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009d9a:	b1d0      	cbz	r0, 8009dd2 <__d2b+0x7e>
 8009d9c:	f1c0 0320 	rsb	r3, r0, #32
 8009da0:	fa02 f303 	lsl.w	r3, r2, r3
 8009da4:	430b      	orrs	r3, r1
 8009da6:	40c2      	lsrs	r2, r0
 8009da8:	6163      	str	r3, [r4, #20]
 8009daa:	9201      	str	r2, [sp, #4]
 8009dac:	9b01      	ldr	r3, [sp, #4]
 8009dae:	61a3      	str	r3, [r4, #24]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	bf0c      	ite	eq
 8009db4:	2201      	moveq	r2, #1
 8009db6:	2202      	movne	r2, #2
 8009db8:	6122      	str	r2, [r4, #16]
 8009dba:	b1a5      	cbz	r5, 8009de6 <__d2b+0x92>
 8009dbc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009dc0:	4405      	add	r5, r0
 8009dc2:	603d      	str	r5, [r7, #0]
 8009dc4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009dc8:	6030      	str	r0, [r6, #0]
 8009dca:	4620      	mov	r0, r4
 8009dcc:	b003      	add	sp, #12
 8009dce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009dd2:	6161      	str	r1, [r4, #20]
 8009dd4:	e7ea      	b.n	8009dac <__d2b+0x58>
 8009dd6:	a801      	add	r0, sp, #4
 8009dd8:	f7ff fd59 	bl	800988e <__lo0bits>
 8009ddc:	9b01      	ldr	r3, [sp, #4]
 8009dde:	6163      	str	r3, [r4, #20]
 8009de0:	3020      	adds	r0, #32
 8009de2:	2201      	movs	r2, #1
 8009de4:	e7e8      	b.n	8009db8 <__d2b+0x64>
 8009de6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009dea:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009dee:	6038      	str	r0, [r7, #0]
 8009df0:	6918      	ldr	r0, [r3, #16]
 8009df2:	f7ff fd2d 	bl	8009850 <__hi0bits>
 8009df6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009dfa:	e7e5      	b.n	8009dc8 <__d2b+0x74>
 8009dfc:	0800afb0 	.word	0x0800afb0
 8009e00:	0800afc1 	.word	0x0800afc1

08009e04 <__sflush_r>:
 8009e04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e0c:	0716      	lsls	r6, r2, #28
 8009e0e:	4605      	mov	r5, r0
 8009e10:	460c      	mov	r4, r1
 8009e12:	d454      	bmi.n	8009ebe <__sflush_r+0xba>
 8009e14:	684b      	ldr	r3, [r1, #4]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	dc02      	bgt.n	8009e20 <__sflush_r+0x1c>
 8009e1a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	dd48      	ble.n	8009eb2 <__sflush_r+0xae>
 8009e20:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009e22:	2e00      	cmp	r6, #0
 8009e24:	d045      	beq.n	8009eb2 <__sflush_r+0xae>
 8009e26:	2300      	movs	r3, #0
 8009e28:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009e2c:	682f      	ldr	r7, [r5, #0]
 8009e2e:	6a21      	ldr	r1, [r4, #32]
 8009e30:	602b      	str	r3, [r5, #0]
 8009e32:	d030      	beq.n	8009e96 <__sflush_r+0x92>
 8009e34:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009e36:	89a3      	ldrh	r3, [r4, #12]
 8009e38:	0759      	lsls	r1, r3, #29
 8009e3a:	d505      	bpl.n	8009e48 <__sflush_r+0x44>
 8009e3c:	6863      	ldr	r3, [r4, #4]
 8009e3e:	1ad2      	subs	r2, r2, r3
 8009e40:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009e42:	b10b      	cbz	r3, 8009e48 <__sflush_r+0x44>
 8009e44:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009e46:	1ad2      	subs	r2, r2, r3
 8009e48:	2300      	movs	r3, #0
 8009e4a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009e4c:	6a21      	ldr	r1, [r4, #32]
 8009e4e:	4628      	mov	r0, r5
 8009e50:	47b0      	blx	r6
 8009e52:	1c43      	adds	r3, r0, #1
 8009e54:	89a3      	ldrh	r3, [r4, #12]
 8009e56:	d106      	bne.n	8009e66 <__sflush_r+0x62>
 8009e58:	6829      	ldr	r1, [r5, #0]
 8009e5a:	291d      	cmp	r1, #29
 8009e5c:	d82b      	bhi.n	8009eb6 <__sflush_r+0xb2>
 8009e5e:	4a2a      	ldr	r2, [pc, #168]	@ (8009f08 <__sflush_r+0x104>)
 8009e60:	410a      	asrs	r2, r1
 8009e62:	07d6      	lsls	r6, r2, #31
 8009e64:	d427      	bmi.n	8009eb6 <__sflush_r+0xb2>
 8009e66:	2200      	movs	r2, #0
 8009e68:	6062      	str	r2, [r4, #4]
 8009e6a:	04d9      	lsls	r1, r3, #19
 8009e6c:	6922      	ldr	r2, [r4, #16]
 8009e6e:	6022      	str	r2, [r4, #0]
 8009e70:	d504      	bpl.n	8009e7c <__sflush_r+0x78>
 8009e72:	1c42      	adds	r2, r0, #1
 8009e74:	d101      	bne.n	8009e7a <__sflush_r+0x76>
 8009e76:	682b      	ldr	r3, [r5, #0]
 8009e78:	b903      	cbnz	r3, 8009e7c <__sflush_r+0x78>
 8009e7a:	6560      	str	r0, [r4, #84]	@ 0x54
 8009e7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009e7e:	602f      	str	r7, [r5, #0]
 8009e80:	b1b9      	cbz	r1, 8009eb2 <__sflush_r+0xae>
 8009e82:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009e86:	4299      	cmp	r1, r3
 8009e88:	d002      	beq.n	8009e90 <__sflush_r+0x8c>
 8009e8a:	4628      	mov	r0, r5
 8009e8c:	f7ff fb38 	bl	8009500 <_free_r>
 8009e90:	2300      	movs	r3, #0
 8009e92:	6363      	str	r3, [r4, #52]	@ 0x34
 8009e94:	e00d      	b.n	8009eb2 <__sflush_r+0xae>
 8009e96:	2301      	movs	r3, #1
 8009e98:	4628      	mov	r0, r5
 8009e9a:	47b0      	blx	r6
 8009e9c:	4602      	mov	r2, r0
 8009e9e:	1c50      	adds	r0, r2, #1
 8009ea0:	d1c9      	bne.n	8009e36 <__sflush_r+0x32>
 8009ea2:	682b      	ldr	r3, [r5, #0]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d0c6      	beq.n	8009e36 <__sflush_r+0x32>
 8009ea8:	2b1d      	cmp	r3, #29
 8009eaa:	d001      	beq.n	8009eb0 <__sflush_r+0xac>
 8009eac:	2b16      	cmp	r3, #22
 8009eae:	d11e      	bne.n	8009eee <__sflush_r+0xea>
 8009eb0:	602f      	str	r7, [r5, #0]
 8009eb2:	2000      	movs	r0, #0
 8009eb4:	e022      	b.n	8009efc <__sflush_r+0xf8>
 8009eb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009eba:	b21b      	sxth	r3, r3
 8009ebc:	e01b      	b.n	8009ef6 <__sflush_r+0xf2>
 8009ebe:	690f      	ldr	r7, [r1, #16]
 8009ec0:	2f00      	cmp	r7, #0
 8009ec2:	d0f6      	beq.n	8009eb2 <__sflush_r+0xae>
 8009ec4:	0793      	lsls	r3, r2, #30
 8009ec6:	680e      	ldr	r6, [r1, #0]
 8009ec8:	bf08      	it	eq
 8009eca:	694b      	ldreq	r3, [r1, #20]
 8009ecc:	600f      	str	r7, [r1, #0]
 8009ece:	bf18      	it	ne
 8009ed0:	2300      	movne	r3, #0
 8009ed2:	eba6 0807 	sub.w	r8, r6, r7
 8009ed6:	608b      	str	r3, [r1, #8]
 8009ed8:	f1b8 0f00 	cmp.w	r8, #0
 8009edc:	dde9      	ble.n	8009eb2 <__sflush_r+0xae>
 8009ede:	6a21      	ldr	r1, [r4, #32]
 8009ee0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009ee2:	4643      	mov	r3, r8
 8009ee4:	463a      	mov	r2, r7
 8009ee6:	4628      	mov	r0, r5
 8009ee8:	47b0      	blx	r6
 8009eea:	2800      	cmp	r0, #0
 8009eec:	dc08      	bgt.n	8009f00 <__sflush_r+0xfc>
 8009eee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ef2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ef6:	81a3      	strh	r3, [r4, #12]
 8009ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8009efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f00:	4407      	add	r7, r0
 8009f02:	eba8 0800 	sub.w	r8, r8, r0
 8009f06:	e7e7      	b.n	8009ed8 <__sflush_r+0xd4>
 8009f08:	dfbffffe 	.word	0xdfbffffe

08009f0c <_fflush_r>:
 8009f0c:	b538      	push	{r3, r4, r5, lr}
 8009f0e:	690b      	ldr	r3, [r1, #16]
 8009f10:	4605      	mov	r5, r0
 8009f12:	460c      	mov	r4, r1
 8009f14:	b913      	cbnz	r3, 8009f1c <_fflush_r+0x10>
 8009f16:	2500      	movs	r5, #0
 8009f18:	4628      	mov	r0, r5
 8009f1a:	bd38      	pop	{r3, r4, r5, pc}
 8009f1c:	b118      	cbz	r0, 8009f26 <_fflush_r+0x1a>
 8009f1e:	6a03      	ldr	r3, [r0, #32]
 8009f20:	b90b      	cbnz	r3, 8009f26 <_fflush_r+0x1a>
 8009f22:	f7fe fb43 	bl	80085ac <__sinit>
 8009f26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d0f3      	beq.n	8009f16 <_fflush_r+0xa>
 8009f2e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009f30:	07d0      	lsls	r0, r2, #31
 8009f32:	d404      	bmi.n	8009f3e <_fflush_r+0x32>
 8009f34:	0599      	lsls	r1, r3, #22
 8009f36:	d402      	bmi.n	8009f3e <_fflush_r+0x32>
 8009f38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009f3a:	f7fe fc84 	bl	8008846 <__retarget_lock_acquire_recursive>
 8009f3e:	4628      	mov	r0, r5
 8009f40:	4621      	mov	r1, r4
 8009f42:	f7ff ff5f 	bl	8009e04 <__sflush_r>
 8009f46:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009f48:	07da      	lsls	r2, r3, #31
 8009f4a:	4605      	mov	r5, r0
 8009f4c:	d4e4      	bmi.n	8009f18 <_fflush_r+0xc>
 8009f4e:	89a3      	ldrh	r3, [r4, #12]
 8009f50:	059b      	lsls	r3, r3, #22
 8009f52:	d4e1      	bmi.n	8009f18 <_fflush_r+0xc>
 8009f54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009f56:	f7fe fc77 	bl	8008848 <__retarget_lock_release_recursive>
 8009f5a:	e7dd      	b.n	8009f18 <_fflush_r+0xc>

08009f5c <_sbrk_r>:
 8009f5c:	b538      	push	{r3, r4, r5, lr}
 8009f5e:	4d06      	ldr	r5, [pc, #24]	@ (8009f78 <_sbrk_r+0x1c>)
 8009f60:	2300      	movs	r3, #0
 8009f62:	4604      	mov	r4, r0
 8009f64:	4608      	mov	r0, r1
 8009f66:	602b      	str	r3, [r5, #0]
 8009f68:	f7f8 fb9c 	bl	80026a4 <_sbrk>
 8009f6c:	1c43      	adds	r3, r0, #1
 8009f6e:	d102      	bne.n	8009f76 <_sbrk_r+0x1a>
 8009f70:	682b      	ldr	r3, [r5, #0]
 8009f72:	b103      	cbz	r3, 8009f76 <_sbrk_r+0x1a>
 8009f74:	6023      	str	r3, [r4, #0]
 8009f76:	bd38      	pop	{r3, r4, r5, pc}
 8009f78:	20004f74 	.word	0x20004f74

08009f7c <__assert_func>:
 8009f7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009f7e:	4614      	mov	r4, r2
 8009f80:	461a      	mov	r2, r3
 8009f82:	4b09      	ldr	r3, [pc, #36]	@ (8009fa8 <__assert_func+0x2c>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	4605      	mov	r5, r0
 8009f88:	68d8      	ldr	r0, [r3, #12]
 8009f8a:	b954      	cbnz	r4, 8009fa2 <__assert_func+0x26>
 8009f8c:	4b07      	ldr	r3, [pc, #28]	@ (8009fac <__assert_func+0x30>)
 8009f8e:	461c      	mov	r4, r3
 8009f90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009f94:	9100      	str	r1, [sp, #0]
 8009f96:	462b      	mov	r3, r5
 8009f98:	4905      	ldr	r1, [pc, #20]	@ (8009fb0 <__assert_func+0x34>)
 8009f9a:	f000 f841 	bl	800a020 <fiprintf>
 8009f9e:	f000 f851 	bl	800a044 <abort>
 8009fa2:	4b04      	ldr	r3, [pc, #16]	@ (8009fb4 <__assert_func+0x38>)
 8009fa4:	e7f4      	b.n	8009f90 <__assert_func+0x14>
 8009fa6:	bf00      	nop
 8009fa8:	20000028 	.word	0x20000028
 8009fac:	0800b15d 	.word	0x0800b15d
 8009fb0:	0800b12f 	.word	0x0800b12f
 8009fb4:	0800b122 	.word	0x0800b122

08009fb8 <_calloc_r>:
 8009fb8:	b570      	push	{r4, r5, r6, lr}
 8009fba:	fba1 5402 	umull	r5, r4, r1, r2
 8009fbe:	b93c      	cbnz	r4, 8009fd0 <_calloc_r+0x18>
 8009fc0:	4629      	mov	r1, r5
 8009fc2:	f7ff fb11 	bl	80095e8 <_malloc_r>
 8009fc6:	4606      	mov	r6, r0
 8009fc8:	b928      	cbnz	r0, 8009fd6 <_calloc_r+0x1e>
 8009fca:	2600      	movs	r6, #0
 8009fcc:	4630      	mov	r0, r6
 8009fce:	bd70      	pop	{r4, r5, r6, pc}
 8009fd0:	220c      	movs	r2, #12
 8009fd2:	6002      	str	r2, [r0, #0]
 8009fd4:	e7f9      	b.n	8009fca <_calloc_r+0x12>
 8009fd6:	462a      	mov	r2, r5
 8009fd8:	4621      	mov	r1, r4
 8009fda:	f7fe fb60 	bl	800869e <memset>
 8009fde:	e7f5      	b.n	8009fcc <_calloc_r+0x14>

08009fe0 <__ascii_mbtowc>:
 8009fe0:	b082      	sub	sp, #8
 8009fe2:	b901      	cbnz	r1, 8009fe6 <__ascii_mbtowc+0x6>
 8009fe4:	a901      	add	r1, sp, #4
 8009fe6:	b142      	cbz	r2, 8009ffa <__ascii_mbtowc+0x1a>
 8009fe8:	b14b      	cbz	r3, 8009ffe <__ascii_mbtowc+0x1e>
 8009fea:	7813      	ldrb	r3, [r2, #0]
 8009fec:	600b      	str	r3, [r1, #0]
 8009fee:	7812      	ldrb	r2, [r2, #0]
 8009ff0:	1e10      	subs	r0, r2, #0
 8009ff2:	bf18      	it	ne
 8009ff4:	2001      	movne	r0, #1
 8009ff6:	b002      	add	sp, #8
 8009ff8:	4770      	bx	lr
 8009ffa:	4610      	mov	r0, r2
 8009ffc:	e7fb      	b.n	8009ff6 <__ascii_mbtowc+0x16>
 8009ffe:	f06f 0001 	mvn.w	r0, #1
 800a002:	e7f8      	b.n	8009ff6 <__ascii_mbtowc+0x16>

0800a004 <__ascii_wctomb>:
 800a004:	4603      	mov	r3, r0
 800a006:	4608      	mov	r0, r1
 800a008:	b141      	cbz	r1, 800a01c <__ascii_wctomb+0x18>
 800a00a:	2aff      	cmp	r2, #255	@ 0xff
 800a00c:	d904      	bls.n	800a018 <__ascii_wctomb+0x14>
 800a00e:	228a      	movs	r2, #138	@ 0x8a
 800a010:	601a      	str	r2, [r3, #0]
 800a012:	f04f 30ff 	mov.w	r0, #4294967295
 800a016:	4770      	bx	lr
 800a018:	700a      	strb	r2, [r1, #0]
 800a01a:	2001      	movs	r0, #1
 800a01c:	4770      	bx	lr
	...

0800a020 <fiprintf>:
 800a020:	b40e      	push	{r1, r2, r3}
 800a022:	b503      	push	{r0, r1, lr}
 800a024:	4601      	mov	r1, r0
 800a026:	ab03      	add	r3, sp, #12
 800a028:	4805      	ldr	r0, [pc, #20]	@ (800a040 <fiprintf+0x20>)
 800a02a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a02e:	6800      	ldr	r0, [r0, #0]
 800a030:	9301      	str	r3, [sp, #4]
 800a032:	f000 f837 	bl	800a0a4 <_vfiprintf_r>
 800a036:	b002      	add	sp, #8
 800a038:	f85d eb04 	ldr.w	lr, [sp], #4
 800a03c:	b003      	add	sp, #12
 800a03e:	4770      	bx	lr
 800a040:	20000028 	.word	0x20000028

0800a044 <abort>:
 800a044:	b508      	push	{r3, lr}
 800a046:	2006      	movs	r0, #6
 800a048:	f000 fa00 	bl	800a44c <raise>
 800a04c:	2001      	movs	r0, #1
 800a04e:	f7f8 fab1 	bl	80025b4 <_exit>

0800a052 <__sfputc_r>:
 800a052:	6893      	ldr	r3, [r2, #8]
 800a054:	3b01      	subs	r3, #1
 800a056:	2b00      	cmp	r3, #0
 800a058:	b410      	push	{r4}
 800a05a:	6093      	str	r3, [r2, #8]
 800a05c:	da08      	bge.n	800a070 <__sfputc_r+0x1e>
 800a05e:	6994      	ldr	r4, [r2, #24]
 800a060:	42a3      	cmp	r3, r4
 800a062:	db01      	blt.n	800a068 <__sfputc_r+0x16>
 800a064:	290a      	cmp	r1, #10
 800a066:	d103      	bne.n	800a070 <__sfputc_r+0x1e>
 800a068:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a06c:	f000 b932 	b.w	800a2d4 <__swbuf_r>
 800a070:	6813      	ldr	r3, [r2, #0]
 800a072:	1c58      	adds	r0, r3, #1
 800a074:	6010      	str	r0, [r2, #0]
 800a076:	7019      	strb	r1, [r3, #0]
 800a078:	4608      	mov	r0, r1
 800a07a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a07e:	4770      	bx	lr

0800a080 <__sfputs_r>:
 800a080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a082:	4606      	mov	r6, r0
 800a084:	460f      	mov	r7, r1
 800a086:	4614      	mov	r4, r2
 800a088:	18d5      	adds	r5, r2, r3
 800a08a:	42ac      	cmp	r4, r5
 800a08c:	d101      	bne.n	800a092 <__sfputs_r+0x12>
 800a08e:	2000      	movs	r0, #0
 800a090:	e007      	b.n	800a0a2 <__sfputs_r+0x22>
 800a092:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a096:	463a      	mov	r2, r7
 800a098:	4630      	mov	r0, r6
 800a09a:	f7ff ffda 	bl	800a052 <__sfputc_r>
 800a09e:	1c43      	adds	r3, r0, #1
 800a0a0:	d1f3      	bne.n	800a08a <__sfputs_r+0xa>
 800a0a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a0a4 <_vfiprintf_r>:
 800a0a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0a8:	460d      	mov	r5, r1
 800a0aa:	b09d      	sub	sp, #116	@ 0x74
 800a0ac:	4614      	mov	r4, r2
 800a0ae:	4698      	mov	r8, r3
 800a0b0:	4606      	mov	r6, r0
 800a0b2:	b118      	cbz	r0, 800a0bc <_vfiprintf_r+0x18>
 800a0b4:	6a03      	ldr	r3, [r0, #32]
 800a0b6:	b90b      	cbnz	r3, 800a0bc <_vfiprintf_r+0x18>
 800a0b8:	f7fe fa78 	bl	80085ac <__sinit>
 800a0bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a0be:	07d9      	lsls	r1, r3, #31
 800a0c0:	d405      	bmi.n	800a0ce <_vfiprintf_r+0x2a>
 800a0c2:	89ab      	ldrh	r3, [r5, #12]
 800a0c4:	059a      	lsls	r2, r3, #22
 800a0c6:	d402      	bmi.n	800a0ce <_vfiprintf_r+0x2a>
 800a0c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a0ca:	f7fe fbbc 	bl	8008846 <__retarget_lock_acquire_recursive>
 800a0ce:	89ab      	ldrh	r3, [r5, #12]
 800a0d0:	071b      	lsls	r3, r3, #28
 800a0d2:	d501      	bpl.n	800a0d8 <_vfiprintf_r+0x34>
 800a0d4:	692b      	ldr	r3, [r5, #16]
 800a0d6:	b99b      	cbnz	r3, 800a100 <_vfiprintf_r+0x5c>
 800a0d8:	4629      	mov	r1, r5
 800a0da:	4630      	mov	r0, r6
 800a0dc:	f000 f938 	bl	800a350 <__swsetup_r>
 800a0e0:	b170      	cbz	r0, 800a100 <_vfiprintf_r+0x5c>
 800a0e2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a0e4:	07dc      	lsls	r4, r3, #31
 800a0e6:	d504      	bpl.n	800a0f2 <_vfiprintf_r+0x4e>
 800a0e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a0ec:	b01d      	add	sp, #116	@ 0x74
 800a0ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0f2:	89ab      	ldrh	r3, [r5, #12]
 800a0f4:	0598      	lsls	r0, r3, #22
 800a0f6:	d4f7      	bmi.n	800a0e8 <_vfiprintf_r+0x44>
 800a0f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a0fa:	f7fe fba5 	bl	8008848 <__retarget_lock_release_recursive>
 800a0fe:	e7f3      	b.n	800a0e8 <_vfiprintf_r+0x44>
 800a100:	2300      	movs	r3, #0
 800a102:	9309      	str	r3, [sp, #36]	@ 0x24
 800a104:	2320      	movs	r3, #32
 800a106:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a10a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a10e:	2330      	movs	r3, #48	@ 0x30
 800a110:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a2c0 <_vfiprintf_r+0x21c>
 800a114:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a118:	f04f 0901 	mov.w	r9, #1
 800a11c:	4623      	mov	r3, r4
 800a11e:	469a      	mov	sl, r3
 800a120:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a124:	b10a      	cbz	r2, 800a12a <_vfiprintf_r+0x86>
 800a126:	2a25      	cmp	r2, #37	@ 0x25
 800a128:	d1f9      	bne.n	800a11e <_vfiprintf_r+0x7a>
 800a12a:	ebba 0b04 	subs.w	fp, sl, r4
 800a12e:	d00b      	beq.n	800a148 <_vfiprintf_r+0xa4>
 800a130:	465b      	mov	r3, fp
 800a132:	4622      	mov	r2, r4
 800a134:	4629      	mov	r1, r5
 800a136:	4630      	mov	r0, r6
 800a138:	f7ff ffa2 	bl	800a080 <__sfputs_r>
 800a13c:	3001      	adds	r0, #1
 800a13e:	f000 80a7 	beq.w	800a290 <_vfiprintf_r+0x1ec>
 800a142:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a144:	445a      	add	r2, fp
 800a146:	9209      	str	r2, [sp, #36]	@ 0x24
 800a148:	f89a 3000 	ldrb.w	r3, [sl]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	f000 809f 	beq.w	800a290 <_vfiprintf_r+0x1ec>
 800a152:	2300      	movs	r3, #0
 800a154:	f04f 32ff 	mov.w	r2, #4294967295
 800a158:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a15c:	f10a 0a01 	add.w	sl, sl, #1
 800a160:	9304      	str	r3, [sp, #16]
 800a162:	9307      	str	r3, [sp, #28]
 800a164:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a168:	931a      	str	r3, [sp, #104]	@ 0x68
 800a16a:	4654      	mov	r4, sl
 800a16c:	2205      	movs	r2, #5
 800a16e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a172:	4853      	ldr	r0, [pc, #332]	@ (800a2c0 <_vfiprintf_r+0x21c>)
 800a174:	f7f6 f82c 	bl	80001d0 <memchr>
 800a178:	9a04      	ldr	r2, [sp, #16]
 800a17a:	b9d8      	cbnz	r0, 800a1b4 <_vfiprintf_r+0x110>
 800a17c:	06d1      	lsls	r1, r2, #27
 800a17e:	bf44      	itt	mi
 800a180:	2320      	movmi	r3, #32
 800a182:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a186:	0713      	lsls	r3, r2, #28
 800a188:	bf44      	itt	mi
 800a18a:	232b      	movmi	r3, #43	@ 0x2b
 800a18c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a190:	f89a 3000 	ldrb.w	r3, [sl]
 800a194:	2b2a      	cmp	r3, #42	@ 0x2a
 800a196:	d015      	beq.n	800a1c4 <_vfiprintf_r+0x120>
 800a198:	9a07      	ldr	r2, [sp, #28]
 800a19a:	4654      	mov	r4, sl
 800a19c:	2000      	movs	r0, #0
 800a19e:	f04f 0c0a 	mov.w	ip, #10
 800a1a2:	4621      	mov	r1, r4
 800a1a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1a8:	3b30      	subs	r3, #48	@ 0x30
 800a1aa:	2b09      	cmp	r3, #9
 800a1ac:	d94b      	bls.n	800a246 <_vfiprintf_r+0x1a2>
 800a1ae:	b1b0      	cbz	r0, 800a1de <_vfiprintf_r+0x13a>
 800a1b0:	9207      	str	r2, [sp, #28]
 800a1b2:	e014      	b.n	800a1de <_vfiprintf_r+0x13a>
 800a1b4:	eba0 0308 	sub.w	r3, r0, r8
 800a1b8:	fa09 f303 	lsl.w	r3, r9, r3
 800a1bc:	4313      	orrs	r3, r2
 800a1be:	9304      	str	r3, [sp, #16]
 800a1c0:	46a2      	mov	sl, r4
 800a1c2:	e7d2      	b.n	800a16a <_vfiprintf_r+0xc6>
 800a1c4:	9b03      	ldr	r3, [sp, #12]
 800a1c6:	1d19      	adds	r1, r3, #4
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	9103      	str	r1, [sp, #12]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	bfbb      	ittet	lt
 800a1d0:	425b      	neglt	r3, r3
 800a1d2:	f042 0202 	orrlt.w	r2, r2, #2
 800a1d6:	9307      	strge	r3, [sp, #28]
 800a1d8:	9307      	strlt	r3, [sp, #28]
 800a1da:	bfb8      	it	lt
 800a1dc:	9204      	strlt	r2, [sp, #16]
 800a1de:	7823      	ldrb	r3, [r4, #0]
 800a1e0:	2b2e      	cmp	r3, #46	@ 0x2e
 800a1e2:	d10a      	bne.n	800a1fa <_vfiprintf_r+0x156>
 800a1e4:	7863      	ldrb	r3, [r4, #1]
 800a1e6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a1e8:	d132      	bne.n	800a250 <_vfiprintf_r+0x1ac>
 800a1ea:	9b03      	ldr	r3, [sp, #12]
 800a1ec:	1d1a      	adds	r2, r3, #4
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	9203      	str	r2, [sp, #12]
 800a1f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a1f6:	3402      	adds	r4, #2
 800a1f8:	9305      	str	r3, [sp, #20]
 800a1fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a2d0 <_vfiprintf_r+0x22c>
 800a1fe:	7821      	ldrb	r1, [r4, #0]
 800a200:	2203      	movs	r2, #3
 800a202:	4650      	mov	r0, sl
 800a204:	f7f5 ffe4 	bl	80001d0 <memchr>
 800a208:	b138      	cbz	r0, 800a21a <_vfiprintf_r+0x176>
 800a20a:	9b04      	ldr	r3, [sp, #16]
 800a20c:	eba0 000a 	sub.w	r0, r0, sl
 800a210:	2240      	movs	r2, #64	@ 0x40
 800a212:	4082      	lsls	r2, r0
 800a214:	4313      	orrs	r3, r2
 800a216:	3401      	adds	r4, #1
 800a218:	9304      	str	r3, [sp, #16]
 800a21a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a21e:	4829      	ldr	r0, [pc, #164]	@ (800a2c4 <_vfiprintf_r+0x220>)
 800a220:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a224:	2206      	movs	r2, #6
 800a226:	f7f5 ffd3 	bl	80001d0 <memchr>
 800a22a:	2800      	cmp	r0, #0
 800a22c:	d03f      	beq.n	800a2ae <_vfiprintf_r+0x20a>
 800a22e:	4b26      	ldr	r3, [pc, #152]	@ (800a2c8 <_vfiprintf_r+0x224>)
 800a230:	bb1b      	cbnz	r3, 800a27a <_vfiprintf_r+0x1d6>
 800a232:	9b03      	ldr	r3, [sp, #12]
 800a234:	3307      	adds	r3, #7
 800a236:	f023 0307 	bic.w	r3, r3, #7
 800a23a:	3308      	adds	r3, #8
 800a23c:	9303      	str	r3, [sp, #12]
 800a23e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a240:	443b      	add	r3, r7
 800a242:	9309      	str	r3, [sp, #36]	@ 0x24
 800a244:	e76a      	b.n	800a11c <_vfiprintf_r+0x78>
 800a246:	fb0c 3202 	mla	r2, ip, r2, r3
 800a24a:	460c      	mov	r4, r1
 800a24c:	2001      	movs	r0, #1
 800a24e:	e7a8      	b.n	800a1a2 <_vfiprintf_r+0xfe>
 800a250:	2300      	movs	r3, #0
 800a252:	3401      	adds	r4, #1
 800a254:	9305      	str	r3, [sp, #20]
 800a256:	4619      	mov	r1, r3
 800a258:	f04f 0c0a 	mov.w	ip, #10
 800a25c:	4620      	mov	r0, r4
 800a25e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a262:	3a30      	subs	r2, #48	@ 0x30
 800a264:	2a09      	cmp	r2, #9
 800a266:	d903      	bls.n	800a270 <_vfiprintf_r+0x1cc>
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d0c6      	beq.n	800a1fa <_vfiprintf_r+0x156>
 800a26c:	9105      	str	r1, [sp, #20]
 800a26e:	e7c4      	b.n	800a1fa <_vfiprintf_r+0x156>
 800a270:	fb0c 2101 	mla	r1, ip, r1, r2
 800a274:	4604      	mov	r4, r0
 800a276:	2301      	movs	r3, #1
 800a278:	e7f0      	b.n	800a25c <_vfiprintf_r+0x1b8>
 800a27a:	ab03      	add	r3, sp, #12
 800a27c:	9300      	str	r3, [sp, #0]
 800a27e:	462a      	mov	r2, r5
 800a280:	4b12      	ldr	r3, [pc, #72]	@ (800a2cc <_vfiprintf_r+0x228>)
 800a282:	a904      	add	r1, sp, #16
 800a284:	4630      	mov	r0, r6
 800a286:	f7fd fd4d 	bl	8007d24 <_printf_float>
 800a28a:	4607      	mov	r7, r0
 800a28c:	1c78      	adds	r0, r7, #1
 800a28e:	d1d6      	bne.n	800a23e <_vfiprintf_r+0x19a>
 800a290:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a292:	07d9      	lsls	r1, r3, #31
 800a294:	d405      	bmi.n	800a2a2 <_vfiprintf_r+0x1fe>
 800a296:	89ab      	ldrh	r3, [r5, #12]
 800a298:	059a      	lsls	r2, r3, #22
 800a29a:	d402      	bmi.n	800a2a2 <_vfiprintf_r+0x1fe>
 800a29c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a29e:	f7fe fad3 	bl	8008848 <__retarget_lock_release_recursive>
 800a2a2:	89ab      	ldrh	r3, [r5, #12]
 800a2a4:	065b      	lsls	r3, r3, #25
 800a2a6:	f53f af1f 	bmi.w	800a0e8 <_vfiprintf_r+0x44>
 800a2aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a2ac:	e71e      	b.n	800a0ec <_vfiprintf_r+0x48>
 800a2ae:	ab03      	add	r3, sp, #12
 800a2b0:	9300      	str	r3, [sp, #0]
 800a2b2:	462a      	mov	r2, r5
 800a2b4:	4b05      	ldr	r3, [pc, #20]	@ (800a2cc <_vfiprintf_r+0x228>)
 800a2b6:	a904      	add	r1, sp, #16
 800a2b8:	4630      	mov	r0, r6
 800a2ba:	f7fd ffcb 	bl	8008254 <_printf_i>
 800a2be:	e7e4      	b.n	800a28a <_vfiprintf_r+0x1e6>
 800a2c0:	0800b25f 	.word	0x0800b25f
 800a2c4:	0800b269 	.word	0x0800b269
 800a2c8:	08007d25 	.word	0x08007d25
 800a2cc:	0800a081 	.word	0x0800a081
 800a2d0:	0800b265 	.word	0x0800b265

0800a2d4 <__swbuf_r>:
 800a2d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2d6:	460e      	mov	r6, r1
 800a2d8:	4614      	mov	r4, r2
 800a2da:	4605      	mov	r5, r0
 800a2dc:	b118      	cbz	r0, 800a2e6 <__swbuf_r+0x12>
 800a2de:	6a03      	ldr	r3, [r0, #32]
 800a2e0:	b90b      	cbnz	r3, 800a2e6 <__swbuf_r+0x12>
 800a2e2:	f7fe f963 	bl	80085ac <__sinit>
 800a2e6:	69a3      	ldr	r3, [r4, #24]
 800a2e8:	60a3      	str	r3, [r4, #8]
 800a2ea:	89a3      	ldrh	r3, [r4, #12]
 800a2ec:	071a      	lsls	r2, r3, #28
 800a2ee:	d501      	bpl.n	800a2f4 <__swbuf_r+0x20>
 800a2f0:	6923      	ldr	r3, [r4, #16]
 800a2f2:	b943      	cbnz	r3, 800a306 <__swbuf_r+0x32>
 800a2f4:	4621      	mov	r1, r4
 800a2f6:	4628      	mov	r0, r5
 800a2f8:	f000 f82a 	bl	800a350 <__swsetup_r>
 800a2fc:	b118      	cbz	r0, 800a306 <__swbuf_r+0x32>
 800a2fe:	f04f 37ff 	mov.w	r7, #4294967295
 800a302:	4638      	mov	r0, r7
 800a304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a306:	6823      	ldr	r3, [r4, #0]
 800a308:	6922      	ldr	r2, [r4, #16]
 800a30a:	1a98      	subs	r0, r3, r2
 800a30c:	6963      	ldr	r3, [r4, #20]
 800a30e:	b2f6      	uxtb	r6, r6
 800a310:	4283      	cmp	r3, r0
 800a312:	4637      	mov	r7, r6
 800a314:	dc05      	bgt.n	800a322 <__swbuf_r+0x4e>
 800a316:	4621      	mov	r1, r4
 800a318:	4628      	mov	r0, r5
 800a31a:	f7ff fdf7 	bl	8009f0c <_fflush_r>
 800a31e:	2800      	cmp	r0, #0
 800a320:	d1ed      	bne.n	800a2fe <__swbuf_r+0x2a>
 800a322:	68a3      	ldr	r3, [r4, #8]
 800a324:	3b01      	subs	r3, #1
 800a326:	60a3      	str	r3, [r4, #8]
 800a328:	6823      	ldr	r3, [r4, #0]
 800a32a:	1c5a      	adds	r2, r3, #1
 800a32c:	6022      	str	r2, [r4, #0]
 800a32e:	701e      	strb	r6, [r3, #0]
 800a330:	6962      	ldr	r2, [r4, #20]
 800a332:	1c43      	adds	r3, r0, #1
 800a334:	429a      	cmp	r2, r3
 800a336:	d004      	beq.n	800a342 <__swbuf_r+0x6e>
 800a338:	89a3      	ldrh	r3, [r4, #12]
 800a33a:	07db      	lsls	r3, r3, #31
 800a33c:	d5e1      	bpl.n	800a302 <__swbuf_r+0x2e>
 800a33e:	2e0a      	cmp	r6, #10
 800a340:	d1df      	bne.n	800a302 <__swbuf_r+0x2e>
 800a342:	4621      	mov	r1, r4
 800a344:	4628      	mov	r0, r5
 800a346:	f7ff fde1 	bl	8009f0c <_fflush_r>
 800a34a:	2800      	cmp	r0, #0
 800a34c:	d0d9      	beq.n	800a302 <__swbuf_r+0x2e>
 800a34e:	e7d6      	b.n	800a2fe <__swbuf_r+0x2a>

0800a350 <__swsetup_r>:
 800a350:	b538      	push	{r3, r4, r5, lr}
 800a352:	4b29      	ldr	r3, [pc, #164]	@ (800a3f8 <__swsetup_r+0xa8>)
 800a354:	4605      	mov	r5, r0
 800a356:	6818      	ldr	r0, [r3, #0]
 800a358:	460c      	mov	r4, r1
 800a35a:	b118      	cbz	r0, 800a364 <__swsetup_r+0x14>
 800a35c:	6a03      	ldr	r3, [r0, #32]
 800a35e:	b90b      	cbnz	r3, 800a364 <__swsetup_r+0x14>
 800a360:	f7fe f924 	bl	80085ac <__sinit>
 800a364:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a368:	0719      	lsls	r1, r3, #28
 800a36a:	d422      	bmi.n	800a3b2 <__swsetup_r+0x62>
 800a36c:	06da      	lsls	r2, r3, #27
 800a36e:	d407      	bmi.n	800a380 <__swsetup_r+0x30>
 800a370:	2209      	movs	r2, #9
 800a372:	602a      	str	r2, [r5, #0]
 800a374:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a378:	81a3      	strh	r3, [r4, #12]
 800a37a:	f04f 30ff 	mov.w	r0, #4294967295
 800a37e:	e033      	b.n	800a3e8 <__swsetup_r+0x98>
 800a380:	0758      	lsls	r0, r3, #29
 800a382:	d512      	bpl.n	800a3aa <__swsetup_r+0x5a>
 800a384:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a386:	b141      	cbz	r1, 800a39a <__swsetup_r+0x4a>
 800a388:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a38c:	4299      	cmp	r1, r3
 800a38e:	d002      	beq.n	800a396 <__swsetup_r+0x46>
 800a390:	4628      	mov	r0, r5
 800a392:	f7ff f8b5 	bl	8009500 <_free_r>
 800a396:	2300      	movs	r3, #0
 800a398:	6363      	str	r3, [r4, #52]	@ 0x34
 800a39a:	89a3      	ldrh	r3, [r4, #12]
 800a39c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a3a0:	81a3      	strh	r3, [r4, #12]
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	6063      	str	r3, [r4, #4]
 800a3a6:	6923      	ldr	r3, [r4, #16]
 800a3a8:	6023      	str	r3, [r4, #0]
 800a3aa:	89a3      	ldrh	r3, [r4, #12]
 800a3ac:	f043 0308 	orr.w	r3, r3, #8
 800a3b0:	81a3      	strh	r3, [r4, #12]
 800a3b2:	6923      	ldr	r3, [r4, #16]
 800a3b4:	b94b      	cbnz	r3, 800a3ca <__swsetup_r+0x7a>
 800a3b6:	89a3      	ldrh	r3, [r4, #12]
 800a3b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a3bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a3c0:	d003      	beq.n	800a3ca <__swsetup_r+0x7a>
 800a3c2:	4621      	mov	r1, r4
 800a3c4:	4628      	mov	r0, r5
 800a3c6:	f000 f883 	bl	800a4d0 <__smakebuf_r>
 800a3ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3ce:	f013 0201 	ands.w	r2, r3, #1
 800a3d2:	d00a      	beq.n	800a3ea <__swsetup_r+0x9a>
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	60a2      	str	r2, [r4, #8]
 800a3d8:	6962      	ldr	r2, [r4, #20]
 800a3da:	4252      	negs	r2, r2
 800a3dc:	61a2      	str	r2, [r4, #24]
 800a3de:	6922      	ldr	r2, [r4, #16]
 800a3e0:	b942      	cbnz	r2, 800a3f4 <__swsetup_r+0xa4>
 800a3e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a3e6:	d1c5      	bne.n	800a374 <__swsetup_r+0x24>
 800a3e8:	bd38      	pop	{r3, r4, r5, pc}
 800a3ea:	0799      	lsls	r1, r3, #30
 800a3ec:	bf58      	it	pl
 800a3ee:	6962      	ldrpl	r2, [r4, #20]
 800a3f0:	60a2      	str	r2, [r4, #8]
 800a3f2:	e7f4      	b.n	800a3de <__swsetup_r+0x8e>
 800a3f4:	2000      	movs	r0, #0
 800a3f6:	e7f7      	b.n	800a3e8 <__swsetup_r+0x98>
 800a3f8:	20000028 	.word	0x20000028

0800a3fc <_raise_r>:
 800a3fc:	291f      	cmp	r1, #31
 800a3fe:	b538      	push	{r3, r4, r5, lr}
 800a400:	4605      	mov	r5, r0
 800a402:	460c      	mov	r4, r1
 800a404:	d904      	bls.n	800a410 <_raise_r+0x14>
 800a406:	2316      	movs	r3, #22
 800a408:	6003      	str	r3, [r0, #0]
 800a40a:	f04f 30ff 	mov.w	r0, #4294967295
 800a40e:	bd38      	pop	{r3, r4, r5, pc}
 800a410:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a412:	b112      	cbz	r2, 800a41a <_raise_r+0x1e>
 800a414:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a418:	b94b      	cbnz	r3, 800a42e <_raise_r+0x32>
 800a41a:	4628      	mov	r0, r5
 800a41c:	f000 f830 	bl	800a480 <_getpid_r>
 800a420:	4622      	mov	r2, r4
 800a422:	4601      	mov	r1, r0
 800a424:	4628      	mov	r0, r5
 800a426:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a42a:	f000 b817 	b.w	800a45c <_kill_r>
 800a42e:	2b01      	cmp	r3, #1
 800a430:	d00a      	beq.n	800a448 <_raise_r+0x4c>
 800a432:	1c59      	adds	r1, r3, #1
 800a434:	d103      	bne.n	800a43e <_raise_r+0x42>
 800a436:	2316      	movs	r3, #22
 800a438:	6003      	str	r3, [r0, #0]
 800a43a:	2001      	movs	r0, #1
 800a43c:	e7e7      	b.n	800a40e <_raise_r+0x12>
 800a43e:	2100      	movs	r1, #0
 800a440:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a444:	4620      	mov	r0, r4
 800a446:	4798      	blx	r3
 800a448:	2000      	movs	r0, #0
 800a44a:	e7e0      	b.n	800a40e <_raise_r+0x12>

0800a44c <raise>:
 800a44c:	4b02      	ldr	r3, [pc, #8]	@ (800a458 <raise+0xc>)
 800a44e:	4601      	mov	r1, r0
 800a450:	6818      	ldr	r0, [r3, #0]
 800a452:	f7ff bfd3 	b.w	800a3fc <_raise_r>
 800a456:	bf00      	nop
 800a458:	20000028 	.word	0x20000028

0800a45c <_kill_r>:
 800a45c:	b538      	push	{r3, r4, r5, lr}
 800a45e:	4d07      	ldr	r5, [pc, #28]	@ (800a47c <_kill_r+0x20>)
 800a460:	2300      	movs	r3, #0
 800a462:	4604      	mov	r4, r0
 800a464:	4608      	mov	r0, r1
 800a466:	4611      	mov	r1, r2
 800a468:	602b      	str	r3, [r5, #0]
 800a46a:	f7f8 f893 	bl	8002594 <_kill>
 800a46e:	1c43      	adds	r3, r0, #1
 800a470:	d102      	bne.n	800a478 <_kill_r+0x1c>
 800a472:	682b      	ldr	r3, [r5, #0]
 800a474:	b103      	cbz	r3, 800a478 <_kill_r+0x1c>
 800a476:	6023      	str	r3, [r4, #0]
 800a478:	bd38      	pop	{r3, r4, r5, pc}
 800a47a:	bf00      	nop
 800a47c:	20004f74 	.word	0x20004f74

0800a480 <_getpid_r>:
 800a480:	f7f8 b880 	b.w	8002584 <_getpid>

0800a484 <__swhatbuf_r>:
 800a484:	b570      	push	{r4, r5, r6, lr}
 800a486:	460c      	mov	r4, r1
 800a488:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a48c:	2900      	cmp	r1, #0
 800a48e:	b096      	sub	sp, #88	@ 0x58
 800a490:	4615      	mov	r5, r2
 800a492:	461e      	mov	r6, r3
 800a494:	da0d      	bge.n	800a4b2 <__swhatbuf_r+0x2e>
 800a496:	89a3      	ldrh	r3, [r4, #12]
 800a498:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a49c:	f04f 0100 	mov.w	r1, #0
 800a4a0:	bf14      	ite	ne
 800a4a2:	2340      	movne	r3, #64	@ 0x40
 800a4a4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a4a8:	2000      	movs	r0, #0
 800a4aa:	6031      	str	r1, [r6, #0]
 800a4ac:	602b      	str	r3, [r5, #0]
 800a4ae:	b016      	add	sp, #88	@ 0x58
 800a4b0:	bd70      	pop	{r4, r5, r6, pc}
 800a4b2:	466a      	mov	r2, sp
 800a4b4:	f000 f848 	bl	800a548 <_fstat_r>
 800a4b8:	2800      	cmp	r0, #0
 800a4ba:	dbec      	blt.n	800a496 <__swhatbuf_r+0x12>
 800a4bc:	9901      	ldr	r1, [sp, #4]
 800a4be:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a4c2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a4c6:	4259      	negs	r1, r3
 800a4c8:	4159      	adcs	r1, r3
 800a4ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a4ce:	e7eb      	b.n	800a4a8 <__swhatbuf_r+0x24>

0800a4d0 <__smakebuf_r>:
 800a4d0:	898b      	ldrh	r3, [r1, #12]
 800a4d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a4d4:	079d      	lsls	r5, r3, #30
 800a4d6:	4606      	mov	r6, r0
 800a4d8:	460c      	mov	r4, r1
 800a4da:	d507      	bpl.n	800a4ec <__smakebuf_r+0x1c>
 800a4dc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a4e0:	6023      	str	r3, [r4, #0]
 800a4e2:	6123      	str	r3, [r4, #16]
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	6163      	str	r3, [r4, #20]
 800a4e8:	b003      	add	sp, #12
 800a4ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4ec:	ab01      	add	r3, sp, #4
 800a4ee:	466a      	mov	r2, sp
 800a4f0:	f7ff ffc8 	bl	800a484 <__swhatbuf_r>
 800a4f4:	9f00      	ldr	r7, [sp, #0]
 800a4f6:	4605      	mov	r5, r0
 800a4f8:	4639      	mov	r1, r7
 800a4fa:	4630      	mov	r0, r6
 800a4fc:	f7ff f874 	bl	80095e8 <_malloc_r>
 800a500:	b948      	cbnz	r0, 800a516 <__smakebuf_r+0x46>
 800a502:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a506:	059a      	lsls	r2, r3, #22
 800a508:	d4ee      	bmi.n	800a4e8 <__smakebuf_r+0x18>
 800a50a:	f023 0303 	bic.w	r3, r3, #3
 800a50e:	f043 0302 	orr.w	r3, r3, #2
 800a512:	81a3      	strh	r3, [r4, #12]
 800a514:	e7e2      	b.n	800a4dc <__smakebuf_r+0xc>
 800a516:	89a3      	ldrh	r3, [r4, #12]
 800a518:	6020      	str	r0, [r4, #0]
 800a51a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a51e:	81a3      	strh	r3, [r4, #12]
 800a520:	9b01      	ldr	r3, [sp, #4]
 800a522:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a526:	b15b      	cbz	r3, 800a540 <__smakebuf_r+0x70>
 800a528:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a52c:	4630      	mov	r0, r6
 800a52e:	f000 f81d 	bl	800a56c <_isatty_r>
 800a532:	b128      	cbz	r0, 800a540 <__smakebuf_r+0x70>
 800a534:	89a3      	ldrh	r3, [r4, #12]
 800a536:	f023 0303 	bic.w	r3, r3, #3
 800a53a:	f043 0301 	orr.w	r3, r3, #1
 800a53e:	81a3      	strh	r3, [r4, #12]
 800a540:	89a3      	ldrh	r3, [r4, #12]
 800a542:	431d      	orrs	r5, r3
 800a544:	81a5      	strh	r5, [r4, #12]
 800a546:	e7cf      	b.n	800a4e8 <__smakebuf_r+0x18>

0800a548 <_fstat_r>:
 800a548:	b538      	push	{r3, r4, r5, lr}
 800a54a:	4d07      	ldr	r5, [pc, #28]	@ (800a568 <_fstat_r+0x20>)
 800a54c:	2300      	movs	r3, #0
 800a54e:	4604      	mov	r4, r0
 800a550:	4608      	mov	r0, r1
 800a552:	4611      	mov	r1, r2
 800a554:	602b      	str	r3, [r5, #0]
 800a556:	f7f8 f87d 	bl	8002654 <_fstat>
 800a55a:	1c43      	adds	r3, r0, #1
 800a55c:	d102      	bne.n	800a564 <_fstat_r+0x1c>
 800a55e:	682b      	ldr	r3, [r5, #0]
 800a560:	b103      	cbz	r3, 800a564 <_fstat_r+0x1c>
 800a562:	6023      	str	r3, [r4, #0]
 800a564:	bd38      	pop	{r3, r4, r5, pc}
 800a566:	bf00      	nop
 800a568:	20004f74 	.word	0x20004f74

0800a56c <_isatty_r>:
 800a56c:	b538      	push	{r3, r4, r5, lr}
 800a56e:	4d06      	ldr	r5, [pc, #24]	@ (800a588 <_isatty_r+0x1c>)
 800a570:	2300      	movs	r3, #0
 800a572:	4604      	mov	r4, r0
 800a574:	4608      	mov	r0, r1
 800a576:	602b      	str	r3, [r5, #0]
 800a578:	f7f8 f87c 	bl	8002674 <_isatty>
 800a57c:	1c43      	adds	r3, r0, #1
 800a57e:	d102      	bne.n	800a586 <_isatty_r+0x1a>
 800a580:	682b      	ldr	r3, [r5, #0]
 800a582:	b103      	cbz	r3, 800a586 <_isatty_r+0x1a>
 800a584:	6023      	str	r3, [r4, #0]
 800a586:	bd38      	pop	{r3, r4, r5, pc}
 800a588:	20004f74 	.word	0x20004f74

0800a58c <_init>:
 800a58c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a58e:	bf00      	nop
 800a590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a592:	bc08      	pop	{r3}
 800a594:	469e      	mov	lr, r3
 800a596:	4770      	bx	lr

0800a598 <_fini>:
 800a598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a59a:	bf00      	nop
 800a59c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a59e:	bc08      	pop	{r3}
 800a5a0:	469e      	mov	lr, r3
 800a5a2:	4770      	bx	lr
