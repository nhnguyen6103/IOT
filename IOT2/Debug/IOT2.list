
IOT2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009140  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b98  080092d0  080092d0  0000a2d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e68  08009e68  0000b1e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009e68  08009e68  0000ae68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e70  08009e70  0000b1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e70  08009e70  0000ae70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009e74  08009e74  0000ae74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  08009e78  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b1e0  2**0
                  CONTENTS
 10 .bss          000043cc  200001e0  200001e0  0000b1e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200045ac  200045ac  0000b1e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b1e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001752a  00000000  00000000  0000b210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000037a7  00000000  00000000  0002273a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001620  00000000  00000000  00025ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000233a5  00000000  00000000  00027508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a51f  00000000  00000000  0004a8ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9a3c  00000000  00000000  00064dcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013e808  2**0
                  CONTENTS, READONLY
 20 .debug_rnglists 0000111e  00000000  00000000  0013e84b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006ea4  00000000  00000000  0013f96c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000040  00000000  00000000  00146810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080092b8 	.word	0x080092b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	080092b8 	.word	0x080092b8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	4a07      	ldr	r2, [pc, #28]	@ (8000f64 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f48:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	4a06      	ldr	r2, [pc, #24]	@ (8000f68 <vApplicationGetIdleTaskMemory+0x30>)
 8000f4e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2280      	movs	r2, #128	@ 0x80
 8000f54:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f56:	bf00      	nop
 8000f58:	3714      	adds	r7, #20
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	200001fc 	.word	0x200001fc
 8000f68:	2000029c 	.word	0x2000029c

08000f6c <ILI9341_Select>:
/* vim: set ai et ts=4 sw=4: */
#include "stm32f4xx_hal.h"
#include "ili9341.h"
#include "stdio.h"

static void ILI9341_Select() {
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 8000f70:	2200      	movs	r2, #0
 8000f72:	2140      	movs	r1, #64	@ 0x40
 8000f74:	4802      	ldr	r0, [pc, #8]	@ (8000f80 <ILI9341_Select+0x14>)
 8000f76:	f002 f9ab 	bl	80032d0 <HAL_GPIO_WritePin>
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40020400 	.word	0x40020400

08000f84 <ILI9341_Unselect>:

void ILI9341_Unselect() {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 8000f88:	2201      	movs	r2, #1
 8000f8a:	2140      	movs	r1, #64	@ 0x40
 8000f8c:	4802      	ldr	r0, [pc, #8]	@ (8000f98 <ILI9341_Unselect+0x14>)
 8000f8e:	f002 f99f 	bl	80032d0 <HAL_GPIO_WritePin>
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40020400 	.word	0x40020400

08000f9c <ILI9341_WriteCommand>:
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
    HAL_Delay(5);
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
}

static void ILI9341_WriteCommand(uint8_t cmd) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000fac:	4806      	ldr	r0, [pc, #24]	@ (8000fc8 <ILI9341_WriteCommand+0x2c>)
 8000fae:	f002 f98f 	bl	80032d0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ILI9341_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000fb2:	1df9      	adds	r1, r7, #7
 8000fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb8:	2201      	movs	r2, #1
 8000fba:	4804      	ldr	r0, [pc, #16]	@ (8000fcc <ILI9341_WriteCommand+0x30>)
 8000fbc:	f003 fb7d 	bl	80046ba <HAL_SPI_Transmit>
}
 8000fc0:	bf00      	nop
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40020000 	.word	0x40020000
 8000fcc:	20000658 	.word	0x20000658

08000fd0 <ILI9341_WriteData>:

static void ILI9341_WriteData(uint8_t* buff, size_t buff_size) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8000fda:	2201      	movs	r2, #1
 8000fdc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000fe0:	4810      	ldr	r0, [pc, #64]	@ (8001024 <ILI9341_WriteData+0x54>)
 8000fe2:	f002 f975 	bl	80032d0 <HAL_GPIO_WritePin>

    // split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
 8000fe6:	e015      	b.n	8001014 <ILI9341_WriteData+0x44>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000fee:	bf28      	it	cs
 8000ff0:	f44f 4300 	movcs.w	r3, #32768	@ 0x8000
 8000ff4:	81fb      	strh	r3, [r7, #14]
        HAL_SPI_Transmit(&ILI9341_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8000ff6:	89fa      	ldrh	r2, [r7, #14]
 8000ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffc:	6879      	ldr	r1, [r7, #4]
 8000ffe:	480a      	ldr	r0, [pc, #40]	@ (8001028 <ILI9341_WriteData+0x58>)
 8001000:	f003 fb5b 	bl	80046ba <HAL_SPI_Transmit>
        buff += chunk_size;
 8001004:	89fb      	ldrh	r3, [r7, #14]
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	4413      	add	r3, r2
 800100a:	607b      	str	r3, [r7, #4]
        buff_size -= chunk_size;
 800100c:	89fb      	ldrh	r3, [r7, #14]
 800100e:	683a      	ldr	r2, [r7, #0]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d1e6      	bne.n	8000fe8 <ILI9341_WriteData+0x18>
    }
}
 800101a:	bf00      	nop
 800101c:	bf00      	nop
 800101e:	3710      	adds	r7, #16
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40020000 	.word	0x40020000
 8001028:	20000658 	.word	0x20000658

0800102c <ILI9341_SetAddressWindow>:

static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 800102c:	b590      	push	{r4, r7, lr}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	4604      	mov	r4, r0
 8001034:	4608      	mov	r0, r1
 8001036:	4611      	mov	r1, r2
 8001038:	461a      	mov	r2, r3
 800103a:	4623      	mov	r3, r4
 800103c:	80fb      	strh	r3, [r7, #6]
 800103e:	4603      	mov	r3, r0
 8001040:	80bb      	strh	r3, [r7, #4]
 8001042:	460b      	mov	r3, r1
 8001044:	807b      	strh	r3, [r7, #2]
 8001046:	4613      	mov	r3, r2
 8001048:	803b      	strh	r3, [r7, #0]
    // column address set
    ILI9341_WriteCommand(0x2A); // CASET
 800104a:	202a      	movs	r0, #42	@ 0x2a
 800104c:	f7ff ffa6 	bl	8000f9c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 8001050:	88fb      	ldrh	r3, [r7, #6]
 8001052:	0a1b      	lsrs	r3, r3, #8
 8001054:	b29b      	uxth	r3, r3
 8001056:	b2db      	uxtb	r3, r3
 8001058:	733b      	strb	r3, [r7, #12]
 800105a:	88fb      	ldrh	r3, [r7, #6]
 800105c:	b2db      	uxtb	r3, r3
 800105e:	737b      	strb	r3, [r7, #13]
 8001060:	887b      	ldrh	r3, [r7, #2]
 8001062:	0a1b      	lsrs	r3, r3, #8
 8001064:	b29b      	uxth	r3, r3
 8001066:	b2db      	uxtb	r3, r3
 8001068:	73bb      	strb	r3, [r7, #14]
 800106a:	887b      	ldrh	r3, [r7, #2]
 800106c:	b2db      	uxtb	r3, r3
 800106e:	73fb      	strb	r3, [r7, #15]
        ILI9341_WriteData(data, sizeof(data));
 8001070:	f107 030c 	add.w	r3, r7, #12
 8001074:	2104      	movs	r1, #4
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff ffaa 	bl	8000fd0 <ILI9341_WriteData>
    }

    // row address set
    ILI9341_WriteCommand(0x2B); // RASET
 800107c:	202b      	movs	r0, #43	@ 0x2b
 800107e:	f7ff ff8d 	bl	8000f9c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 8001082:	88bb      	ldrh	r3, [r7, #4]
 8001084:	0a1b      	lsrs	r3, r3, #8
 8001086:	b29b      	uxth	r3, r3
 8001088:	b2db      	uxtb	r3, r3
 800108a:	723b      	strb	r3, [r7, #8]
 800108c:	88bb      	ldrh	r3, [r7, #4]
 800108e:	b2db      	uxtb	r3, r3
 8001090:	727b      	strb	r3, [r7, #9]
 8001092:	883b      	ldrh	r3, [r7, #0]
 8001094:	0a1b      	lsrs	r3, r3, #8
 8001096:	b29b      	uxth	r3, r3
 8001098:	b2db      	uxtb	r3, r3
 800109a:	72bb      	strb	r3, [r7, #10]
 800109c:	883b      	ldrh	r3, [r7, #0]
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	72fb      	strb	r3, [r7, #11]
        ILI9341_WriteData(data, sizeof(data));
 80010a2:	f107 0308 	add.w	r3, r7, #8
 80010a6:	2104      	movs	r1, #4
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff ff91 	bl	8000fd0 <ILI9341_WriteData>
    }

    // write to RAM
    ILI9341_WriteCommand(0x2C); // RAMWR
 80010ae:	202c      	movs	r0, #44	@ 0x2c
 80010b0:	f7ff ff74 	bl	8000f9c <ILI9341_WriteCommand>
}
 80010b4:	bf00      	nop
 80010b6:	3714      	adds	r7, #20
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd90      	pop	{r4, r7, pc}

080010bc <ILI9341_WriteChar>:
    ILI9341_WriteData(data, sizeof(data));

    ILI9341_Unselect();
}

static void ILI9341_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80010bc:	b082      	sub	sp, #8
 80010be:	b580      	push	{r7, lr}
 80010c0:	b088      	sub	sp, #32
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80010c6:	4603      	mov	r3, r0
 80010c8:	80fb      	strh	r3, [r7, #6]
 80010ca:	460b      	mov	r3, r1
 80010cc:	80bb      	strh	r3, [r7, #4]
 80010ce:	4613      	mov	r3, r2
 80010d0:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ILI9341_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80010d2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80010d6:	461a      	mov	r2, r3
 80010d8:	88fb      	ldrh	r3, [r7, #6]
 80010da:	4413      	add	r3, r2
 80010dc:	b29b      	uxth	r3, r3
 80010de:	3b01      	subs	r3, #1
 80010e0:	b29a      	uxth	r2, r3
 80010e2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80010e6:	4619      	mov	r1, r3
 80010e8:	88bb      	ldrh	r3, [r7, #4]
 80010ea:	440b      	add	r3, r1
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	3b01      	subs	r3, #1
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	88b9      	ldrh	r1, [r7, #4]
 80010f4:	88f8      	ldrh	r0, [r7, #6]
 80010f6:	f7ff ff99 	bl	800102c <ILI9341_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
 80010fe:	e041      	b.n	8001184 <ILI9341_WriteChar+0xc8>
        b = font.data[(ch - 32) * font.height + i];
 8001100:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001102:	78fb      	ldrb	r3, [r7, #3]
 8001104:	3b20      	subs	r3, #32
 8001106:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 800110a:	fb01 f303 	mul.w	r3, r1, r3
 800110e:	4619      	mov	r1, r3
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	440b      	add	r3, r1
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	4413      	add	r3, r2
 8001118:	881b      	ldrh	r3, [r3, #0]
 800111a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 800111c:	2300      	movs	r3, #0
 800111e:	61bb      	str	r3, [r7, #24]
 8001120:	e027      	b.n	8001172 <ILI9341_WriteChar+0xb6>
            if((b << j) & 0x8000)  {
 8001122:	697a      	ldr	r2, [r7, #20]
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d00e      	beq.n	8001150 <ILI9341_WriteChar+0x94>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8001132:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001134:	0a1b      	lsrs	r3, r3, #8
 8001136:	b29b      	uxth	r3, r3
 8001138:	b2db      	uxtb	r3, r3
 800113a:	743b      	strb	r3, [r7, #16]
 800113c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800113e:	b2db      	uxtb	r3, r3
 8001140:	747b      	strb	r3, [r7, #17]
                ILI9341_WriteData(data, sizeof(data));
 8001142:	f107 0310 	add.w	r3, r7, #16
 8001146:	2102      	movs	r1, #2
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff ff41 	bl	8000fd0 <ILI9341_WriteData>
 800114e:	e00d      	b.n	800116c <ILI9341_WriteChar+0xb0>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8001150:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001152:	0a1b      	lsrs	r3, r3, #8
 8001154:	b29b      	uxth	r3, r3
 8001156:	b2db      	uxtb	r3, r3
 8001158:	733b      	strb	r3, [r7, #12]
 800115a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800115c:	b2db      	uxtb	r3, r3
 800115e:	737b      	strb	r3, [r7, #13]
                ILI9341_WriteData(data, sizeof(data));
 8001160:	f107 030c 	add.w	r3, r7, #12
 8001164:	2102      	movs	r1, #2
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff ff32 	bl	8000fd0 <ILI9341_WriteData>
        for(j = 0; j < font.width; j++) {
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	3301      	adds	r3, #1
 8001170:	61bb      	str	r3, [r7, #24]
 8001172:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001176:	461a      	mov	r2, r3
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	4293      	cmp	r3, r2
 800117c:	d3d1      	bcc.n	8001122 <ILI9341_WriteChar+0x66>
    for(i = 0; i < font.height; i++) {
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	3301      	adds	r3, #1
 8001182:	61fb      	str	r3, [r7, #28]
 8001184:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001188:	461a      	mov	r2, r3
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	4293      	cmp	r3, r2
 800118e:	d3b7      	bcc.n	8001100 <ILI9341_WriteChar+0x44>
            }
        }
    }
}
 8001190:	bf00      	nop
 8001192:	bf00      	nop
 8001194:	3720      	adds	r7, #32
 8001196:	46bd      	mov	sp, r7
 8001198:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800119c:	b002      	add	sp, #8
 800119e:	4770      	bx	lr

080011a0 <ILI9341_WriteString>:

void ILI9341_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80011a0:	b082      	sub	sp, #8
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b086      	sub	sp, #24
 80011a6:	af04      	add	r7, sp, #16
 80011a8:	603a      	str	r2, [r7, #0]
 80011aa:	617b      	str	r3, [r7, #20]
 80011ac:	4603      	mov	r3, r0
 80011ae:	80fb      	strh	r3, [r7, #6]
 80011b0:	460b      	mov	r3, r1
 80011b2:	80bb      	strh	r3, [r7, #4]
    ILI9341_Select();
 80011b4:	f7ff feda 	bl	8000f6c <ILI9341_Select>

    while(*str) {
 80011b8:	e02e      	b.n	8001218 <ILI9341_WriteString+0x78>
        if(x + font.width >= ILI9341_WIDTH) {
 80011ba:	88fb      	ldrh	r3, [r7, #6]
 80011bc:	7d3a      	ldrb	r2, [r7, #20]
 80011be:	4413      	add	r3, r2
 80011c0:	2bef      	cmp	r3, #239	@ 0xef
 80011c2:	dd14      	ble.n	80011ee <ILI9341_WriteString+0x4e>
            x = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80011c8:	7d7b      	ldrb	r3, [r7, #21]
 80011ca:	461a      	mov	r2, r3
 80011cc:	88bb      	ldrh	r3, [r7, #4]
 80011ce:	4413      	add	r3, r2
 80011d0:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ILI9341_HEIGHT) {
 80011d2:	88bb      	ldrh	r3, [r7, #4]
 80011d4:	7d7a      	ldrb	r2, [r7, #21]
 80011d6:	4413      	add	r3, r2
 80011d8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80011dc:	da21      	bge.n	8001222 <ILI9341_WriteString+0x82>
                break;
            }

            if(*str == ' ') {
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	2b20      	cmp	r3, #32
 80011e4:	d103      	bne.n	80011ee <ILI9341_WriteString+0x4e>
                // skip spaces in the beginning of the new line
                str++;
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	3301      	adds	r3, #1
 80011ea:	603b      	str	r3, [r7, #0]
                continue;
 80011ec:	e014      	b.n	8001218 <ILI9341_WriteString+0x78>
            }
        }

        ILI9341_WriteChar(x, y, *str, font, color, bgcolor);
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	781a      	ldrb	r2, [r3, #0]
 80011f2:	88b9      	ldrh	r1, [r7, #4]
 80011f4:	88f8      	ldrh	r0, [r7, #6]
 80011f6:	8c3b      	ldrh	r3, [r7, #32]
 80011f8:	9302      	str	r3, [sp, #8]
 80011fa:	8bbb      	ldrh	r3, [r7, #28]
 80011fc:	9301      	str	r3, [sp, #4]
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	f7ff ff5a 	bl	80010bc <ILI9341_WriteChar>
        x += font.width;
 8001208:	7d3b      	ldrb	r3, [r7, #20]
 800120a:	461a      	mov	r2, r3
 800120c:	88fb      	ldrh	r3, [r7, #6]
 800120e:	4413      	add	r3, r2
 8001210:	80fb      	strh	r3, [r7, #6]
        str++;
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	3301      	adds	r3, #1
 8001216:	603b      	str	r3, [r7, #0]
    while(*str) {
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d1cc      	bne.n	80011ba <ILI9341_WriteString+0x1a>
 8001220:	e000      	b.n	8001224 <ILI9341_WriteString+0x84>
                break;
 8001222:	bf00      	nop
    }

    ILI9341_Unselect();
 8001224:	f7ff feae 	bl	8000f84 <ILI9341_Unselect>
}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001232:	b002      	add	sp, #8
 8001234:	4770      	bx	lr
	...

08001238 <GetTemperature>:
void StartTask01(void const * argument);
void StartTask02(void const * argument);
void StartTask03(void const * argument);

/* USER CODE BEGIN PFP */
float GetTemperature(void) {
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
    uint32_t adcValue;
    float temperature;

    HAL_ADC_Start(&hadc1);
 800123e:	482e      	ldr	r0, [pc, #184]	@ (80012f8 <GetTemperature+0xc0>)
 8001240:	f000 ff0a 	bl	8002058 <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 8001244:	f04f 31ff 	mov.w	r1, #4294967295
 8001248:	482b      	ldr	r0, [pc, #172]	@ (80012f8 <GetTemperature+0xc0>)
 800124a:	f001 f80a 	bl	8002262 <HAL_ADC_PollForConversion>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d137      	bne.n	80012c4 <GetTemperature+0x8c>
        adcValue = HAL_ADC_GetValue(&hadc1);
 8001254:	4828      	ldr	r0, [pc, #160]	@ (80012f8 <GetTemperature+0xc0>)
 8001256:	f001 f88f 	bl	8002378 <HAL_ADC_GetValue>
 800125a:	6038      	str	r0, [r7, #0]
        temperature = ((adcValue * 3.3 / 4096) - 0.76) / 0.0025 + 25.0; // Công thức từ datasheet
 800125c:	6838      	ldr	r0, [r7, #0]
 800125e:	f7ff f951 	bl	8000504 <__aeabi_ui2d>
 8001262:	a31f      	add	r3, pc, #124	@ (adr r3, 80012e0 <GetTemperature+0xa8>)
 8001264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001268:	f7ff f9c6 	bl	80005f8 <__aeabi_dmul>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	4610      	mov	r0, r2
 8001272:	4619      	mov	r1, r3
 8001274:	f04f 0200 	mov.w	r2, #0
 8001278:	4b20      	ldr	r3, [pc, #128]	@ (80012fc <GetTemperature+0xc4>)
 800127a:	f7ff fae7 	bl	800084c <__aeabi_ddiv>
 800127e:	4602      	mov	r2, r0
 8001280:	460b      	mov	r3, r1
 8001282:	4610      	mov	r0, r2
 8001284:	4619      	mov	r1, r3
 8001286:	a318      	add	r3, pc, #96	@ (adr r3, 80012e8 <GetTemperature+0xb0>)
 8001288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128c:	f7fe fffc 	bl	8000288 <__aeabi_dsub>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	4610      	mov	r0, r2
 8001296:	4619      	mov	r1, r3
 8001298:	a315      	add	r3, pc, #84	@ (adr r3, 80012f0 <GetTemperature+0xb8>)
 800129a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129e:	f7ff fad5 	bl	800084c <__aeabi_ddiv>
 80012a2:	4602      	mov	r2, r0
 80012a4:	460b      	mov	r3, r1
 80012a6:	4610      	mov	r0, r2
 80012a8:	4619      	mov	r1, r3
 80012aa:	f04f 0200 	mov.w	r2, #0
 80012ae:	4b14      	ldr	r3, [pc, #80]	@ (8001300 <GetTemperature+0xc8>)
 80012b0:	f7fe ffec 	bl	800028c <__adddf3>
 80012b4:	4602      	mov	r2, r0
 80012b6:	460b      	mov	r3, r1
 80012b8:	4610      	mov	r0, r2
 80012ba:	4619      	mov	r1, r3
 80012bc:	f7ff fc74 	bl	8000ba8 <__aeabi_d2f>
 80012c0:	4603      	mov	r3, r0
 80012c2:	607b      	str	r3, [r7, #4]
    }
    HAL_ADC_Stop(&hadc1);
 80012c4:	480c      	ldr	r0, [pc, #48]	@ (80012f8 <GetTemperature+0xc0>)
 80012c6:	f000 ff99 	bl	80021fc <HAL_ADC_Stop>

    return temperature;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	ee07 3a90 	vmov	s15, r3
}
 80012d0:	eeb0 0a67 	vmov.f32	s0, s15
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	f3af 8000 	nop.w
 80012e0:	66666666 	.word	0x66666666
 80012e4:	400a6666 	.word	0x400a6666
 80012e8:	851eb852 	.word	0x851eb852
 80012ec:	3fe851eb 	.word	0x3fe851eb
 80012f0:	47ae147b 	.word	0x47ae147b
 80012f4:	3f647ae1 	.word	0x3f647ae1
 80012f8:	2000049c 	.word	0x2000049c
 80012fc:	40b00000 	.word	0x40b00000
 8001300:	40390000 	.word	0x40390000

08001304 <WriteTemperatureToEEPROM>:

void WriteTemperatureToEEPROM(float temperature) {
 8001304:	b580      	push	{r7, lr}
 8001306:	b08a      	sub	sp, #40	@ 0x28
 8001308:	af04      	add	r7, sp, #16
 800130a:	ed87 0a01 	vstr	s0, [r7, #4]
    uint8_t data[4];
    uint32_t eepromAddress = 0xA0;
 800130e:	23a0      	movs	r3, #160	@ 0xa0
 8001310:	617b      	str	r3, [r7, #20]
    uint16_t memAddress = 0x0000;
 8001312:	2300      	movs	r3, #0
 8001314:	827b      	strh	r3, [r7, #18]

    memcpy(data, &temperature, sizeof(float));
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	60fb      	str	r3, [r7, #12]

    HAL_I2C_Mem_Write(&hi2c1, eepromAddress, memAddress, I2C_MEMADD_SIZE_16BIT, data, sizeof(data), HAL_MAX_DELAY);
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	b299      	uxth	r1, r3
 800131e:	8a7a      	ldrh	r2, [r7, #18]
 8001320:	f04f 33ff 	mov.w	r3, #4294967295
 8001324:	9302      	str	r3, [sp, #8]
 8001326:	2304      	movs	r3, #4
 8001328:	9301      	str	r3, [sp, #4]
 800132a:	f107 030c 	add.w	r3, r7, #12
 800132e:	9300      	str	r3, [sp, #0]
 8001330:	2310      	movs	r3, #16
 8001332:	4803      	ldr	r0, [pc, #12]	@ (8001340 <WriteTemperatureToEEPROM+0x3c>)
 8001334:	f002 f944 	bl	80035c0 <HAL_I2C_Mem_Write>
}
 8001338:	bf00      	nop
 800133a:	3718      	adds	r7, #24
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000544 	.word	0x20000544

08001344 <DisplayTemperatureOnLCD>:


void DisplayTemperatureOnLCD(float temperature) {
 8001344:	b580      	push	{r7, lr}
 8001346:	b08a      	sub	sp, #40	@ 0x28
 8001348:	af04      	add	r7, sp, #16
 800134a:	ed87 0a01 	vstr	s0, [r7, #4]
    char tempStr[16];

    // Tạo chuỗi nhiệt độ
    sprintf(tempStr, "Temp: %.2f C", temperature);
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f7ff f8fa 	bl	8000548 <__aeabi_f2d>
 8001354:	4602      	mov	r2, r0
 8001356:	460b      	mov	r3, r1
 8001358:	f107 0008 	add.w	r0, r7, #8
 800135c:	490b      	ldr	r1, [pc, #44]	@ (800138c <DisplayTemperatureOnLCD+0x48>)
 800135e:	f005 fe25 	bl	8006fac <siprintf>

    // Thay vì dùng ILI9341_BLACK, ILI9341_WHITE, bạn có thể dùng giá trị màu trực tiếp
    ILI9341_WriteString(10, 10, tempStr, Font_7x10, 0x0000, 0xFFFF);  // �?en chữ, trắng n�?n
 8001362:	4b0b      	ldr	r3, [pc, #44]	@ (8001390 <DisplayTemperatureOnLCD+0x4c>)
 8001364:	f107 0108 	add.w	r1, r7, #8
 8001368:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800136c:	9202      	str	r2, [sp, #8]
 800136e:	2200      	movs	r2, #0
 8001370:	9201      	str	r2, [sp, #4]
 8001372:	685a      	ldr	r2, [r3, #4]
 8001374:	9200      	str	r2, [sp, #0]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	460a      	mov	r2, r1
 800137a:	210a      	movs	r1, #10
 800137c:	200a      	movs	r0, #10
 800137e:	f7ff ff0f 	bl	80011a0 <ILI9341_WriteString>
}
 8001382:	bf00      	nop
 8001384:	3718      	adds	r7, #24
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	080092d0 	.word	0x080092d0
 8001390:	20000000 	.word	0x20000000

08001394 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001394:	b5b0      	push	{r4, r5, r7, lr}
 8001396:	b096      	sub	sp, #88	@ 0x58
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800139a:	f000 fdd7 	bl	8001f4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800139e:	f000 f851 	bl	8001444 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013a2:	f000 f9a1 	bl	80016e8 <MX_GPIO_Init>
  MX_DMA_Init();
 80013a6:	f000 f961 	bl	800166c <MX_DMA_Init>
  MX_ADC1_Init();
 80013aa:	f000 f8a9 	bl	8001500 <MX_ADC1_Init>
  MX_SPI1_Init();
 80013ae:	f000 f927 	bl	8001600 <MX_SPI1_Init>
  MX_I2C1_Init();
 80013b2:	f000 f8f7 	bl	80015a4 <MX_I2C1_Init>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task01 */
  osThreadDef(Task01, StartTask01, osPriorityNormal, 0, 128);
 80013b6:	4b1d      	ldr	r3, [pc, #116]	@ (800142c <main+0x98>)
 80013b8:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80013bc:	461d      	mov	r5, r3
 80013be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task01Handle = osThreadCreate(osThread(Task01), NULL);
 80013ca:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80013ce:	2100      	movs	r1, #0
 80013d0:	4618      	mov	r0, r3
 80013d2:	f003 fe54 	bl	800507e <osThreadCreate>
 80013d6:	4603      	mov	r3, r0
 80013d8:	4a15      	ldr	r2, [pc, #84]	@ (8001430 <main+0x9c>)
 80013da:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task02 */
  osThreadDef(Task02, StartTask02, osPriorityNormal, 0, 128);
 80013dc:	4b15      	ldr	r3, [pc, #84]	@ (8001434 <main+0xa0>)
 80013de:	f107 0420 	add.w	r4, r7, #32
 80013e2:	461d      	mov	r5, r3
 80013e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task02Handle = osThreadCreate(osThread(Task02), NULL);
 80013f0:	f107 0320 	add.w	r3, r7, #32
 80013f4:	2100      	movs	r1, #0
 80013f6:	4618      	mov	r0, r3
 80013f8:	f003 fe41 	bl	800507e <osThreadCreate>
 80013fc:	4603      	mov	r3, r0
 80013fe:	4a0e      	ldr	r2, [pc, #56]	@ (8001438 <main+0xa4>)
 8001400:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task03 */
  osThreadDef(Task03, StartTask03, osPriorityNormal, 0, 128);
 8001402:	4b0e      	ldr	r3, [pc, #56]	@ (800143c <main+0xa8>)
 8001404:	1d3c      	adds	r4, r7, #4
 8001406:	461d      	mov	r5, r3
 8001408:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800140a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800140c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001410:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task03Handle = osThreadCreate(osThread(Task03), NULL);
 8001414:	1d3b      	adds	r3, r7, #4
 8001416:	2100      	movs	r1, #0
 8001418:	4618      	mov	r0, r3
 800141a:	f003 fe30 	bl	800507e <osThreadCreate>
 800141e:	4603      	mov	r3, r0
 8001420:	4a07      	ldr	r2, [pc, #28]	@ (8001440 <main+0xac>)
 8001422:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001424:	f003 fe24 	bl	8005070 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001428:	bf00      	nop
 800142a:	e7fd      	b.n	8001428 <main+0x94>
 800142c:	080092e8 	.word	0x080092e8
 8001430:	200006b0 	.word	0x200006b0
 8001434:	0800930c 	.word	0x0800930c
 8001438:	200006b4 	.word	0x200006b4
 800143c:	08009330 	.word	0x08009330
 8001440:	200006b8 	.word	0x200006b8

08001444 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b094      	sub	sp, #80	@ 0x50
 8001448:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800144a:	f107 0320 	add.w	r3, r7, #32
 800144e:	2230      	movs	r2, #48	@ 0x30
 8001450:	2100      	movs	r1, #0
 8001452:	4618      	mov	r0, r3
 8001454:	f005 fe0d 	bl	8007072 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001458:	f107 030c 	add.w	r3, r7, #12
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001468:	2300      	movs	r3, #0
 800146a:	60bb      	str	r3, [r7, #8]
 800146c:	4b22      	ldr	r3, [pc, #136]	@ (80014f8 <SystemClock_Config+0xb4>)
 800146e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001470:	4a21      	ldr	r2, [pc, #132]	@ (80014f8 <SystemClock_Config+0xb4>)
 8001472:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001476:	6413      	str	r3, [r2, #64]	@ 0x40
 8001478:	4b1f      	ldr	r3, [pc, #124]	@ (80014f8 <SystemClock_Config+0xb4>)
 800147a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001480:	60bb      	str	r3, [r7, #8]
 8001482:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001484:	2300      	movs	r3, #0
 8001486:	607b      	str	r3, [r7, #4]
 8001488:	4b1c      	ldr	r3, [pc, #112]	@ (80014fc <SystemClock_Config+0xb8>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a1b      	ldr	r2, [pc, #108]	@ (80014fc <SystemClock_Config+0xb8>)
 800148e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001492:	6013      	str	r3, [r2, #0]
 8001494:	4b19      	ldr	r3, [pc, #100]	@ (80014fc <SystemClock_Config+0xb8>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800149c:	607b      	str	r3, [r7, #4]
 800149e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014a0:	2302      	movs	r3, #2
 80014a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014a4:	2301      	movs	r3, #1
 80014a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014a8:	2310      	movs	r3, #16
 80014aa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014ac:	2300      	movs	r3, #0
 80014ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014b0:	f107 0320 	add.w	r3, r7, #32
 80014b4:	4618      	mov	r0, r3
 80014b6:	f002 fbed 	bl	8003c94 <HAL_RCC_OscConfig>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80014c0:	f000 f9e8 	bl	8001894 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014c4:	230f      	movs	r3, #15
 80014c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014c8:	2300      	movs	r3, #0
 80014ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014d0:	2300      	movs	r3, #0
 80014d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014d4:	2300      	movs	r3, #0
 80014d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014d8:	f107 030c 	add.w	r3, r7, #12
 80014dc:	2100      	movs	r1, #0
 80014de:	4618      	mov	r0, r3
 80014e0:	f002 fe50 	bl	8004184 <HAL_RCC_ClockConfig>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80014ea:	f000 f9d3 	bl	8001894 <Error_Handler>
  }
}
 80014ee:	bf00      	nop
 80014f0:	3750      	adds	r7, #80	@ 0x50
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40023800 	.word	0x40023800
 80014fc:	40007000 	.word	0x40007000

08001500 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001506:	463b      	mov	r3, r7
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001512:	4b21      	ldr	r3, [pc, #132]	@ (8001598 <MX_ADC1_Init+0x98>)
 8001514:	4a21      	ldr	r2, [pc, #132]	@ (800159c <MX_ADC1_Init+0x9c>)
 8001516:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001518:	4b1f      	ldr	r3, [pc, #124]	@ (8001598 <MX_ADC1_Init+0x98>)
 800151a:	2200      	movs	r2, #0
 800151c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800151e:	4b1e      	ldr	r3, [pc, #120]	@ (8001598 <MX_ADC1_Init+0x98>)
 8001520:	2200      	movs	r2, #0
 8001522:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001524:	4b1c      	ldr	r3, [pc, #112]	@ (8001598 <MX_ADC1_Init+0x98>)
 8001526:	2200      	movs	r2, #0
 8001528:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800152a:	4b1b      	ldr	r3, [pc, #108]	@ (8001598 <MX_ADC1_Init+0x98>)
 800152c:	2200      	movs	r2, #0
 800152e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001530:	4b19      	ldr	r3, [pc, #100]	@ (8001598 <MX_ADC1_Init+0x98>)
 8001532:	2200      	movs	r2, #0
 8001534:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001538:	4b17      	ldr	r3, [pc, #92]	@ (8001598 <MX_ADC1_Init+0x98>)
 800153a:	2200      	movs	r2, #0
 800153c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800153e:	4b16      	ldr	r3, [pc, #88]	@ (8001598 <MX_ADC1_Init+0x98>)
 8001540:	4a17      	ldr	r2, [pc, #92]	@ (80015a0 <MX_ADC1_Init+0xa0>)
 8001542:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001544:	4b14      	ldr	r3, [pc, #80]	@ (8001598 <MX_ADC1_Init+0x98>)
 8001546:	2200      	movs	r2, #0
 8001548:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800154a:	4b13      	ldr	r3, [pc, #76]	@ (8001598 <MX_ADC1_Init+0x98>)
 800154c:	2201      	movs	r2, #1
 800154e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001550:	4b11      	ldr	r3, [pc, #68]	@ (8001598 <MX_ADC1_Init+0x98>)
 8001552:	2200      	movs	r2, #0
 8001554:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001558:	4b0f      	ldr	r3, [pc, #60]	@ (8001598 <MX_ADC1_Init+0x98>)
 800155a:	2201      	movs	r2, #1
 800155c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800155e:	480e      	ldr	r0, [pc, #56]	@ (8001598 <MX_ADC1_Init+0x98>)
 8001560:	f000 fd36 	bl	8001fd0 <HAL_ADC_Init>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800156a:	f000 f993 	bl	8001894 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800156e:	2310      	movs	r3, #16
 8001570:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001572:	2301      	movs	r3, #1
 8001574:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001576:	2300      	movs	r3, #0
 8001578:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800157a:	463b      	mov	r3, r7
 800157c:	4619      	mov	r1, r3
 800157e:	4806      	ldr	r0, [pc, #24]	@ (8001598 <MX_ADC1_Init+0x98>)
 8001580:	f000 ff08 	bl	8002394 <HAL_ADC_ConfigChannel>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800158a:	f000 f983 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800158e:	bf00      	nop
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	2000049c 	.word	0x2000049c
 800159c:	40012000 	.word	0x40012000
 80015a0:	0f000001 	.word	0x0f000001

080015a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015a8:	4b12      	ldr	r3, [pc, #72]	@ (80015f4 <MX_I2C1_Init+0x50>)
 80015aa:	4a13      	ldr	r2, [pc, #76]	@ (80015f8 <MX_I2C1_Init+0x54>)
 80015ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015ae:	4b11      	ldr	r3, [pc, #68]	@ (80015f4 <MX_I2C1_Init+0x50>)
 80015b0:	4a12      	ldr	r2, [pc, #72]	@ (80015fc <MX_I2C1_Init+0x58>)
 80015b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015b4:	4b0f      	ldr	r3, [pc, #60]	@ (80015f4 <MX_I2C1_Init+0x50>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015ba:	4b0e      	ldr	r3, [pc, #56]	@ (80015f4 <MX_I2C1_Init+0x50>)
 80015bc:	2200      	movs	r2, #0
 80015be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015c0:	4b0c      	ldr	r3, [pc, #48]	@ (80015f4 <MX_I2C1_Init+0x50>)
 80015c2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015c8:	4b0a      	ldr	r3, [pc, #40]	@ (80015f4 <MX_I2C1_Init+0x50>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015ce:	4b09      	ldr	r3, [pc, #36]	@ (80015f4 <MX_I2C1_Init+0x50>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015d4:	4b07      	ldr	r3, [pc, #28]	@ (80015f4 <MX_I2C1_Init+0x50>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015da:	4b06      	ldr	r3, [pc, #24]	@ (80015f4 <MX_I2C1_Init+0x50>)
 80015dc:	2200      	movs	r2, #0
 80015de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015e0:	4804      	ldr	r0, [pc, #16]	@ (80015f4 <MX_I2C1_Init+0x50>)
 80015e2:	f001 fea9 	bl	8003338 <HAL_I2C_Init>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015ec:	f000 f952 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015f0:	bf00      	nop
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	20000544 	.word	0x20000544
 80015f8:	40005400 	.word	0x40005400
 80015fc:	000186a0 	.word	0x000186a0

08001600 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001604:	4b17      	ldr	r3, [pc, #92]	@ (8001664 <MX_SPI1_Init+0x64>)
 8001606:	4a18      	ldr	r2, [pc, #96]	@ (8001668 <MX_SPI1_Init+0x68>)
 8001608:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800160a:	4b16      	ldr	r3, [pc, #88]	@ (8001664 <MX_SPI1_Init+0x64>)
 800160c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001610:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001612:	4b14      	ldr	r3, [pc, #80]	@ (8001664 <MX_SPI1_Init+0x64>)
 8001614:	2200      	movs	r2, #0
 8001616:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001618:	4b12      	ldr	r3, [pc, #72]	@ (8001664 <MX_SPI1_Init+0x64>)
 800161a:	2200      	movs	r2, #0
 800161c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800161e:	4b11      	ldr	r3, [pc, #68]	@ (8001664 <MX_SPI1_Init+0x64>)
 8001620:	2200      	movs	r2, #0
 8001622:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001624:	4b0f      	ldr	r3, [pc, #60]	@ (8001664 <MX_SPI1_Init+0x64>)
 8001626:	2200      	movs	r2, #0
 8001628:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800162a:	4b0e      	ldr	r3, [pc, #56]	@ (8001664 <MX_SPI1_Init+0x64>)
 800162c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001630:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001632:	4b0c      	ldr	r3, [pc, #48]	@ (8001664 <MX_SPI1_Init+0x64>)
 8001634:	2200      	movs	r2, #0
 8001636:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001638:	4b0a      	ldr	r3, [pc, #40]	@ (8001664 <MX_SPI1_Init+0x64>)
 800163a:	2200      	movs	r2, #0
 800163c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800163e:	4b09      	ldr	r3, [pc, #36]	@ (8001664 <MX_SPI1_Init+0x64>)
 8001640:	2200      	movs	r2, #0
 8001642:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001644:	4b07      	ldr	r3, [pc, #28]	@ (8001664 <MX_SPI1_Init+0x64>)
 8001646:	2200      	movs	r2, #0
 8001648:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800164a:	4b06      	ldr	r3, [pc, #24]	@ (8001664 <MX_SPI1_Init+0x64>)
 800164c:	220a      	movs	r2, #10
 800164e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001650:	4804      	ldr	r0, [pc, #16]	@ (8001664 <MX_SPI1_Init+0x64>)
 8001652:	f002 ffa9 	bl	80045a8 <HAL_SPI_Init>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800165c:	f000 f91a 	bl	8001894 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20000658 	.word	0x20000658
 8001668:	40013000 	.word	0x40013000

0800166c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	607b      	str	r3, [r7, #4]
 8001676:	4b1b      	ldr	r3, [pc, #108]	@ (80016e4 <MX_DMA_Init+0x78>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167a:	4a1a      	ldr	r2, [pc, #104]	@ (80016e4 <MX_DMA_Init+0x78>)
 800167c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001680:	6313      	str	r3, [r2, #48]	@ 0x30
 8001682:	4b18      	ldr	r3, [pc, #96]	@ (80016e4 <MX_DMA_Init+0x78>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001686:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800168a:	607b      	str	r3, [r7, #4]
 800168c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	603b      	str	r3, [r7, #0]
 8001692:	4b14      	ldr	r3, [pc, #80]	@ (80016e4 <MX_DMA_Init+0x78>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001696:	4a13      	ldr	r2, [pc, #76]	@ (80016e4 <MX_DMA_Init+0x78>)
 8001698:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800169c:	6313      	str	r3, [r2, #48]	@ 0x30
 800169e:	4b11      	ldr	r3, [pc, #68]	@ (80016e4 <MX_DMA_Init+0x78>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016a6:	603b      	str	r3, [r7, #0]
 80016a8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80016aa:	2200      	movs	r2, #0
 80016ac:	2105      	movs	r1, #5
 80016ae:	200b      	movs	r0, #11
 80016b0:	f001 f946 	bl	8002940 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80016b4:	200b      	movs	r0, #11
 80016b6:	f001 f95f 	bl	8002978 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80016ba:	2200      	movs	r2, #0
 80016bc:	2100      	movs	r1, #0
 80016be:	2011      	movs	r0, #17
 80016c0:	f001 f93e 	bl	8002940 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80016c4:	2011      	movs	r0, #17
 80016c6:	f001 f957 	bl	8002978 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80016ca:	2200      	movs	r2, #0
 80016cc:	2105      	movs	r1, #5
 80016ce:	2038      	movs	r0, #56	@ 0x38
 80016d0:	f001 f936 	bl	8002940 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80016d4:	2038      	movs	r0, #56	@ 0x38
 80016d6:	f001 f94f 	bl	8002978 <HAL_NVIC_EnableIRQ>

}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40023800 	.word	0x40023800

080016e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b088      	sub	sp, #32
 80016ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ee:	f107 030c 	add.w	r3, r7, #12
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	605a      	str	r2, [r3, #4]
 80016f8:	609a      	str	r2, [r3, #8]
 80016fa:	60da      	str	r2, [r3, #12]
 80016fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	60bb      	str	r3, [r7, #8]
 8001702:	4b2a      	ldr	r3, [pc, #168]	@ (80017ac <MX_GPIO_Init+0xc4>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001706:	4a29      	ldr	r2, [pc, #164]	@ (80017ac <MX_GPIO_Init+0xc4>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	6313      	str	r3, [r2, #48]	@ 0x30
 800170e:	4b27      	ldr	r3, [pc, #156]	@ (80017ac <MX_GPIO_Init+0xc4>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	60bb      	str	r3, [r7, #8]
 8001718:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	607b      	str	r3, [r7, #4]
 800171e:	4b23      	ldr	r3, [pc, #140]	@ (80017ac <MX_GPIO_Init+0xc4>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001722:	4a22      	ldr	r2, [pc, #136]	@ (80017ac <MX_GPIO_Init+0xc4>)
 8001724:	f043 0302 	orr.w	r3, r3, #2
 8001728:	6313      	str	r3, [r2, #48]	@ 0x30
 800172a:	4b20      	ldr	r3, [pc, #128]	@ (80017ac <MX_GPIO_Init+0xc4>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	607b      	str	r3, [r7, #4]
 8001734:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|LCD_CS_Pin
 8001736:	2200      	movs	r2, #0
 8001738:	f240 1187 	movw	r1, #391	@ 0x187
 800173c:	481c      	ldr	r0, [pc, #112]	@ (80017b0 <MX_GPIO_Init+0xc8>)
 800173e:	f001 fdc7 	bl	80032d0 <HAL_GPIO_WritePin>
                          |LCD_RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8001742:	2200      	movs	r2, #0
 8001744:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001748:	481a      	ldr	r0, [pc, #104]	@ (80017b4 <MX_GPIO_Init+0xcc>)
 800174a:	f001 fdc1 	bl	80032d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800174e:	2302      	movs	r3, #2
 8001750:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001752:	2300      	movs	r3, #0
 8001754:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175a:	f107 030c 	add.w	r3, r7, #12
 800175e:	4619      	mov	r1, r3
 8001760:	4814      	ldr	r0, [pc, #80]	@ (80017b4 <MX_GPIO_Init+0xcc>)
 8001762:	f001 fc01 	bl	8002f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 LCD_CS_Pin
                           LCD_RS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|LCD_CS_Pin
 8001766:	f240 1387 	movw	r3, #391	@ 0x187
 800176a:	60fb      	str	r3, [r7, #12]
                          |LCD_RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176c:	2301      	movs	r3, #1
 800176e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001774:	2300      	movs	r3, #0
 8001776:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001778:	f107 030c 	add.w	r3, r7, #12
 800177c:	4619      	mov	r1, r3
 800177e:	480c      	ldr	r0, [pc, #48]	@ (80017b0 <MX_GPIO_Init+0xc8>)
 8001780:	f001 fbf2 	bl	8002f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 8001784:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001788:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800178a:	2301      	movs	r3, #1
 800178c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178e:	2300      	movs	r3, #0
 8001790:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001792:	2300      	movs	r3, #0
 8001794:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 8001796:	f107 030c 	add.w	r3, r7, #12
 800179a:	4619      	mov	r1, r3
 800179c:	4805      	ldr	r0, [pc, #20]	@ (80017b4 <MX_GPIO_Init+0xcc>)
 800179e:	f001 fbe3 	bl	8002f68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017a2:	bf00      	nop
 80017a4:	3720      	adds	r7, #32
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40023800 	.word	0x40023800
 80017b0:	40020400 	.word	0x40020400
 80017b4:	40020000 	.word	0x40020000

080017b8 <StartTask01>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask01 */
void StartTask01(void const * argument)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
    while (1) {
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80017c0:	2101      	movs	r1, #1
 80017c2:	4804      	ldr	r0, [pc, #16]	@ (80017d4 <StartTask01+0x1c>)
 80017c4:	f001 fd9d 	bl	8003302 <HAL_GPIO_TogglePin>
        osDelay(1000); // Toggle LED every 1000 ms
 80017c8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017cc:	f003 fca3 	bl	8005116 <osDelay>
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80017d0:	bf00      	nop
 80017d2:	e7f5      	b.n	80017c0 <StartTask01+0x8>
 80017d4:	40020400 	.word	0x40020400

080017d8 <StartTask02>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	/* Infinite loop */

    while (1) {
        float temperature = GetTemperature();  // �?�?c giá trị nhiệt độ
 80017e0:	f7ff fd2a 	bl	8001238 <GetTemperature>
 80017e4:	ed87 0a03 	vstr	s0, [r7, #12]
        WriteTemperatureToEEPROM(temperature);  // Ghi vào EEPROM
 80017e8:	ed97 0a03 	vldr	s0, [r7, #12]
 80017ec:	f7ff fd8a 	bl	8001304 <WriteTemperatureToEEPROM>
        printf("Temperature: %.2f°C\n", temperature);
 80017f0:	68f8      	ldr	r0, [r7, #12]
 80017f2:	f7fe fea9 	bl	8000548 <__aeabi_f2d>
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	4804      	ldr	r0, [pc, #16]	@ (800180c <StartTask02+0x34>)
 80017fc:	f005 fbc4 	bl	8006f88 <iprintf>
        osDelay(5000);  // Delay 5000 ms
 8001800:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001804:	f003 fc87 	bl	8005116 <osDelay>
    while (1) {
 8001808:	bf00      	nop
 800180a:	e7e9      	b.n	80017e0 <StartTask02+0x8>
 800180c:	0800934c 	.word	0x0800934c

08001810 <StartTask03>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
	/* Infinite loop */
    uint32_t buttonState, lastButtonState = GPIO_PIN_RESET;
 8001818:	2300      	movs	r3, #0
 800181a:	617b      	str	r3, [r7, #20]
    uint32_t lastDebounceTime = 0;
 800181c:	2300      	movs	r3, #0
 800181e:	613b      	str	r3, [r7, #16]

    while (1) {
        buttonState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);  // Kiểm tra trạng thái nút
 8001820:	2102      	movs	r1, #2
 8001822:	4812      	ldr	r0, [pc, #72]	@ (800186c <StartTask03+0x5c>)
 8001824:	f001 fd3c 	bl	80032a0 <HAL_GPIO_ReadPin>
 8001828:	4603      	mov	r3, r0
 800182a:	60fb      	str	r3, [r7, #12]
        if (buttonState != lastButtonState) {
 800182c:	68fa      	ldr	r2, [r7, #12]
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	429a      	cmp	r2, r3
 8001832:	d002      	beq.n	800183a <StartTask03+0x2a>
            lastDebounceTime = HAL_GetTick();
 8001834:	f000 fbc0 	bl	8001fb8 <HAL_GetTick>
 8001838:	6138      	str	r0, [r7, #16]
        }

        if ((HAL_GetTick() - lastDebounceTime) > DEBOUNCE_DELAY) {
 800183a:	f000 fbbd 	bl	8001fb8 <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b32      	cmp	r3, #50	@ 0x32
 8001846:	d90a      	bls.n	800185e <StartTask03+0x4e>
            if (buttonState == GPIO_PIN_SET) {
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	2b01      	cmp	r3, #1
 800184c:	d107      	bne.n	800185e <StartTask03+0x4e>
                float temperature = GetTemperature();  // �?�?c nhiệt độ
 800184e:	f7ff fcf3 	bl	8001238 <GetTemperature>
 8001852:	ed87 0a02 	vstr	s0, [r7, #8]
                DisplayTemperatureOnLCD(temperature);  // Hiển thị trên LCD
 8001856:	ed97 0a02 	vldr	s0, [r7, #8]
 800185a:	f7ff fd73 	bl	8001344 <DisplayTemperatureOnLCD>
            }
        }

        lastButtonState = buttonState;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	617b      	str	r3, [r7, #20]
        osDelay(10); // Kiểm tra mỗi 10ms
 8001862:	200a      	movs	r0, #10
 8001864:	f003 fc57 	bl	8005116 <osDelay>
        buttonState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);  // Kiểm tra trạng thái nút
 8001868:	e7da      	b.n	8001820 <StartTask03+0x10>
 800186a:	bf00      	nop
 800186c:	40020000 	.word	0x40020000

08001870 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a04      	ldr	r2, [pc, #16]	@ (8001890 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d101      	bne.n	8001886 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001882:	f000 fb85 	bl	8001f90 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001886:	bf00      	nop
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	40010000 	.word	0x40010000

08001894 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001898:	b672      	cpsid	i
}
 800189a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800189c:	bf00      	nop
 800189e:	e7fd      	b.n	800189c <Error_Handler+0x8>

080018a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	607b      	str	r3, [r7, #4]
 80018aa:	4b12      	ldr	r3, [pc, #72]	@ (80018f4 <HAL_MspInit+0x54>)
 80018ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ae:	4a11      	ldr	r2, [pc, #68]	@ (80018f4 <HAL_MspInit+0x54>)
 80018b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80018b6:	4b0f      	ldr	r3, [pc, #60]	@ (80018f4 <HAL_MspInit+0x54>)
 80018b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018be:	607b      	str	r3, [r7, #4]
 80018c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	603b      	str	r3, [r7, #0]
 80018c6:	4b0b      	ldr	r3, [pc, #44]	@ (80018f4 <HAL_MspInit+0x54>)
 80018c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ca:	4a0a      	ldr	r2, [pc, #40]	@ (80018f4 <HAL_MspInit+0x54>)
 80018cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80018d2:	4b08      	ldr	r3, [pc, #32]	@ (80018f4 <HAL_MspInit+0x54>)
 80018d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018da:	603b      	str	r3, [r7, #0]
 80018dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018de:	2200      	movs	r2, #0
 80018e0:	210f      	movs	r1, #15
 80018e2:	f06f 0001 	mvn.w	r0, #1
 80018e6:	f001 f82b 	bl	8002940 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ea:	bf00      	nop
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40023800 	.word	0x40023800

080018f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a26      	ldr	r2, [pc, #152]	@ (80019a0 <HAL_ADC_MspInit+0xa8>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d145      	bne.n	8001996 <HAL_ADC_MspInit+0x9e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	60fb      	str	r3, [r7, #12]
 800190e:	4b25      	ldr	r3, [pc, #148]	@ (80019a4 <HAL_ADC_MspInit+0xac>)
 8001910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001912:	4a24      	ldr	r2, [pc, #144]	@ (80019a4 <HAL_ADC_MspInit+0xac>)
 8001914:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001918:	6453      	str	r3, [r2, #68]	@ 0x44
 800191a:	4b22      	ldr	r3, [pc, #136]	@ (80019a4 <HAL_ADC_MspInit+0xac>)
 800191c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800191e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001926:	4b20      	ldr	r3, [pc, #128]	@ (80019a8 <HAL_ADC_MspInit+0xb0>)
 8001928:	4a20      	ldr	r2, [pc, #128]	@ (80019ac <HAL_ADC_MspInit+0xb4>)
 800192a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800192c:	4b1e      	ldr	r3, [pc, #120]	@ (80019a8 <HAL_ADC_MspInit+0xb0>)
 800192e:	2200      	movs	r2, #0
 8001930:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001932:	4b1d      	ldr	r3, [pc, #116]	@ (80019a8 <HAL_ADC_MspInit+0xb0>)
 8001934:	2200      	movs	r2, #0
 8001936:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001938:	4b1b      	ldr	r3, [pc, #108]	@ (80019a8 <HAL_ADC_MspInit+0xb0>)
 800193a:	2200      	movs	r2, #0
 800193c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800193e:	4b1a      	ldr	r3, [pc, #104]	@ (80019a8 <HAL_ADC_MspInit+0xb0>)
 8001940:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001944:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001946:	4b18      	ldr	r3, [pc, #96]	@ (80019a8 <HAL_ADC_MspInit+0xb0>)
 8001948:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800194c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800194e:	4b16      	ldr	r3, [pc, #88]	@ (80019a8 <HAL_ADC_MspInit+0xb0>)
 8001950:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001954:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001956:	4b14      	ldr	r3, [pc, #80]	@ (80019a8 <HAL_ADC_MspInit+0xb0>)
 8001958:	2200      	movs	r2, #0
 800195a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800195c:	4b12      	ldr	r3, [pc, #72]	@ (80019a8 <HAL_ADC_MspInit+0xb0>)
 800195e:	2200      	movs	r2, #0
 8001960:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001962:	4b11      	ldr	r3, [pc, #68]	@ (80019a8 <HAL_ADC_MspInit+0xb0>)
 8001964:	2204      	movs	r2, #4
 8001966:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001968:	4b0f      	ldr	r3, [pc, #60]	@ (80019a8 <HAL_ADC_MspInit+0xb0>)
 800196a:	2203      	movs	r2, #3
 800196c:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 800196e:	4b0e      	ldr	r3, [pc, #56]	@ (80019a8 <HAL_ADC_MspInit+0xb0>)
 8001970:	2200      	movs	r2, #0
 8001972:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001974:	4b0c      	ldr	r3, [pc, #48]	@ (80019a8 <HAL_ADC_MspInit+0xb0>)
 8001976:	2200      	movs	r2, #0
 8001978:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800197a:	480b      	ldr	r0, [pc, #44]	@ (80019a8 <HAL_ADC_MspInit+0xb0>)
 800197c:	f001 f80a 	bl	8002994 <HAL_DMA_Init>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <HAL_ADC_MspInit+0x92>
    {
      Error_Handler();
 8001986:	f7ff ff85 	bl	8001894 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a06      	ldr	r2, [pc, #24]	@ (80019a8 <HAL_ADC_MspInit+0xb0>)
 800198e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001990:	4a05      	ldr	r2, [pc, #20]	@ (80019a8 <HAL_ADC_MspInit+0xb0>)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001996:	bf00      	nop
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40012000 	.word	0x40012000
 80019a4:	40023800 	.word	0x40023800
 80019a8:	200004e4 	.word	0x200004e4
 80019ac:	40026410 	.word	0x40026410

080019b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b08a      	sub	sp, #40	@ 0x28
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b8:	f107 0314 	add.w	r3, r7, #20
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	605a      	str	r2, [r3, #4]
 80019c2:	609a      	str	r2, [r3, #8]
 80019c4:	60da      	str	r2, [r3, #12]
 80019c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a48      	ldr	r2, [pc, #288]	@ (8001af0 <HAL_I2C_MspInit+0x140>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	f040 8089 	bne.w	8001ae6 <HAL_I2C_MspInit+0x136>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d4:	2300      	movs	r3, #0
 80019d6:	613b      	str	r3, [r7, #16]
 80019d8:	4b46      	ldr	r3, [pc, #280]	@ (8001af4 <HAL_I2C_MspInit+0x144>)
 80019da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019dc:	4a45      	ldr	r2, [pc, #276]	@ (8001af4 <HAL_I2C_MspInit+0x144>)
 80019de:	f043 0302 	orr.w	r3, r3, #2
 80019e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80019e4:	4b43      	ldr	r3, [pc, #268]	@ (8001af4 <HAL_I2C_MspInit+0x144>)
 80019e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e8:	f003 0302 	and.w	r3, r3, #2
 80019ec:	613b      	str	r3, [r7, #16]
 80019ee:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80019f0:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80019f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019f6:	2312      	movs	r3, #18
 80019f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019fe:	2303      	movs	r3, #3
 8001a00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a02:	2304      	movs	r3, #4
 8001a04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a06:	f107 0314 	add.w	r3, r7, #20
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	483a      	ldr	r0, [pc, #232]	@ (8001af8 <HAL_I2C_MspInit+0x148>)
 8001a0e:	f001 faab 	bl	8002f68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	4b37      	ldr	r3, [pc, #220]	@ (8001af4 <HAL_I2C_MspInit+0x144>)
 8001a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a1a:	4a36      	ldr	r2, [pc, #216]	@ (8001af4 <HAL_I2C_MspInit+0x144>)
 8001a1c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a20:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a22:	4b34      	ldr	r3, [pc, #208]	@ (8001af4 <HAL_I2C_MspInit+0x144>)
 8001a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8001a2e:	4b33      	ldr	r3, [pc, #204]	@ (8001afc <HAL_I2C_MspInit+0x14c>)
 8001a30:	4a33      	ldr	r2, [pc, #204]	@ (8001b00 <HAL_I2C_MspInit+0x150>)
 8001a32:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8001a34:	4b31      	ldr	r3, [pc, #196]	@ (8001afc <HAL_I2C_MspInit+0x14c>)
 8001a36:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a3a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a3c:	4b2f      	ldr	r3, [pc, #188]	@ (8001afc <HAL_I2C_MspInit+0x14c>)
 8001a3e:	2240      	movs	r2, #64	@ 0x40
 8001a40:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a42:	4b2e      	ldr	r3, [pc, #184]	@ (8001afc <HAL_I2C_MspInit+0x14c>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a48:	4b2c      	ldr	r3, [pc, #176]	@ (8001afc <HAL_I2C_MspInit+0x14c>)
 8001a4a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a4e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a50:	4b2a      	ldr	r3, [pc, #168]	@ (8001afc <HAL_I2C_MspInit+0x14c>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a56:	4b29      	ldr	r3, [pc, #164]	@ (8001afc <HAL_I2C_MspInit+0x14c>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001a5c:	4b27      	ldr	r3, [pc, #156]	@ (8001afc <HAL_I2C_MspInit+0x14c>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a62:	4b26      	ldr	r3, [pc, #152]	@ (8001afc <HAL_I2C_MspInit+0x14c>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a68:	4b24      	ldr	r3, [pc, #144]	@ (8001afc <HAL_I2C_MspInit+0x14c>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001a6e:	4823      	ldr	r0, [pc, #140]	@ (8001afc <HAL_I2C_MspInit+0x14c>)
 8001a70:	f000 ff90 	bl	8002994 <HAL_DMA_Init>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8001a7a:	f7ff ff0b 	bl	8001894 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a1e      	ldr	r2, [pc, #120]	@ (8001afc <HAL_I2C_MspInit+0x14c>)
 8001a82:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a84:	4a1d      	ldr	r2, [pc, #116]	@ (8001afc <HAL_I2C_MspInit+0x14c>)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001a8a:	4b1e      	ldr	r3, [pc, #120]	@ (8001b04 <HAL_I2C_MspInit+0x154>)
 8001a8c:	4a1e      	ldr	r2, [pc, #120]	@ (8001b08 <HAL_I2C_MspInit+0x158>)
 8001a8e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001a90:	4b1c      	ldr	r3, [pc, #112]	@ (8001b04 <HAL_I2C_MspInit+0x154>)
 8001a92:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a96:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a98:	4b1a      	ldr	r3, [pc, #104]	@ (8001b04 <HAL_I2C_MspInit+0x154>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a9e:	4b19      	ldr	r3, [pc, #100]	@ (8001b04 <HAL_I2C_MspInit+0x154>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001aa4:	4b17      	ldr	r3, [pc, #92]	@ (8001b04 <HAL_I2C_MspInit+0x154>)
 8001aa6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001aaa:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001aac:	4b15      	ldr	r3, [pc, #84]	@ (8001b04 <HAL_I2C_MspInit+0x154>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ab2:	4b14      	ldr	r3, [pc, #80]	@ (8001b04 <HAL_I2C_MspInit+0x154>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001ab8:	4b12      	ldr	r3, [pc, #72]	@ (8001b04 <HAL_I2C_MspInit+0x154>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001abe:	4b11      	ldr	r3, [pc, #68]	@ (8001b04 <HAL_I2C_MspInit+0x154>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ac4:	4b0f      	ldr	r3, [pc, #60]	@ (8001b04 <HAL_I2C_MspInit+0x154>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001aca:	480e      	ldr	r0, [pc, #56]	@ (8001b04 <HAL_I2C_MspInit+0x154>)
 8001acc:	f000 ff62 	bl	8002994 <HAL_DMA_Init>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 8001ad6:	f7ff fedd 	bl	8001894 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a09      	ldr	r2, [pc, #36]	@ (8001b04 <HAL_I2C_MspInit+0x154>)
 8001ade:	639a      	str	r2, [r3, #56]	@ 0x38
 8001ae0:	4a08      	ldr	r2, [pc, #32]	@ (8001b04 <HAL_I2C_MspInit+0x154>)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001ae6:	bf00      	nop
 8001ae8:	3728      	adds	r7, #40	@ 0x28
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40005400 	.word	0x40005400
 8001af4:	40023800 	.word	0x40023800
 8001af8:	40020400 	.word	0x40020400
 8001afc:	20000598 	.word	0x20000598
 8001b00:	400260a0 	.word	0x400260a0
 8001b04:	200005f8 	.word	0x200005f8
 8001b08:	40026010 	.word	0x40026010

08001b0c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b08a      	sub	sp, #40	@ 0x28
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b14:	f107 0314 	add.w	r3, r7, #20
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	605a      	str	r2, [r3, #4]
 8001b1e:	609a      	str	r2, [r3, #8]
 8001b20:	60da      	str	r2, [r3, #12]
 8001b22:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a28      	ldr	r2, [pc, #160]	@ (8001bcc <HAL_SPI_MspInit+0xc0>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d149      	bne.n	8001bc2 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	613b      	str	r3, [r7, #16]
 8001b32:	4b27      	ldr	r3, [pc, #156]	@ (8001bd0 <HAL_SPI_MspInit+0xc4>)
 8001b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b36:	4a26      	ldr	r2, [pc, #152]	@ (8001bd0 <HAL_SPI_MspInit+0xc4>)
 8001b38:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b3e:	4b24      	ldr	r3, [pc, #144]	@ (8001bd0 <HAL_SPI_MspInit+0xc4>)
 8001b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b42:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b46:	613b      	str	r3, [r7, #16]
 8001b48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60fb      	str	r3, [r7, #12]
 8001b4e:	4b20      	ldr	r3, [pc, #128]	@ (8001bd0 <HAL_SPI_MspInit+0xc4>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b52:	4a1f      	ldr	r2, [pc, #124]	@ (8001bd0 <HAL_SPI_MspInit+0xc4>)
 8001b54:	f043 0301 	orr.w	r3, r3, #1
 8001b58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b5a:	4b1d      	ldr	r3, [pc, #116]	@ (8001bd0 <HAL_SPI_MspInit+0xc4>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	60bb      	str	r3, [r7, #8]
 8001b6a:	4b19      	ldr	r3, [pc, #100]	@ (8001bd0 <HAL_SPI_MspInit+0xc4>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b6e:	4a18      	ldr	r2, [pc, #96]	@ (8001bd0 <HAL_SPI_MspInit+0xc4>)
 8001b70:	f043 0302 	orr.w	r3, r3, #2
 8001b74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b76:	4b16      	ldr	r3, [pc, #88]	@ (8001bd0 <HAL_SPI_MspInit+0xc4>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	60bb      	str	r3, [r7, #8]
 8001b80:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b82:	23c0      	movs	r3, #192	@ 0xc0
 8001b84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b86:	2302      	movs	r3, #2
 8001b88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b92:	2305      	movs	r3, #5
 8001b94:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b96:	f107 0314 	add.w	r3, r7, #20
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	480d      	ldr	r0, [pc, #52]	@ (8001bd4 <HAL_SPI_MspInit+0xc8>)
 8001b9e:	f001 f9e3 	bl	8002f68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ba2:	2308      	movs	r3, #8
 8001ba4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001baa:	2300      	movs	r3, #0
 8001bac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001bb2:	2305      	movs	r3, #5
 8001bb4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb6:	f107 0314 	add.w	r3, r7, #20
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4806      	ldr	r0, [pc, #24]	@ (8001bd8 <HAL_SPI_MspInit+0xcc>)
 8001bbe:	f001 f9d3 	bl	8002f68 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001bc2:	bf00      	nop
 8001bc4:	3728      	adds	r7, #40	@ 0x28
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40013000 	.word	0x40013000
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	40020000 	.word	0x40020000
 8001bd8:	40020400 	.word	0x40020400

08001bdc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b08c      	sub	sp, #48	@ 0x30
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001be4:	2300      	movs	r3, #0
 8001be6:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001be8:	2300      	movs	r3, #0
 8001bea:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001bec:	2300      	movs	r3, #0
 8001bee:	60bb      	str	r3, [r7, #8]
 8001bf0:	4b2e      	ldr	r3, [pc, #184]	@ (8001cac <HAL_InitTick+0xd0>)
 8001bf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bf4:	4a2d      	ldr	r2, [pc, #180]	@ (8001cac <HAL_InitTick+0xd0>)
 8001bf6:	f043 0301 	orr.w	r3, r3, #1
 8001bfa:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bfc:	4b2b      	ldr	r3, [pc, #172]	@ (8001cac <HAL_InitTick+0xd0>)
 8001bfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c00:	f003 0301 	and.w	r3, r3, #1
 8001c04:	60bb      	str	r3, [r7, #8]
 8001c06:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c08:	f107 020c 	add.w	r2, r7, #12
 8001c0c:	f107 0310 	add.w	r3, r7, #16
 8001c10:	4611      	mov	r1, r2
 8001c12:	4618      	mov	r0, r3
 8001c14:	f002 fc96 	bl	8004544 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001c18:	f002 fc80 	bl	800451c <HAL_RCC_GetPCLK2Freq>
 8001c1c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c20:	4a23      	ldr	r2, [pc, #140]	@ (8001cb0 <HAL_InitTick+0xd4>)
 8001c22:	fba2 2303 	umull	r2, r3, r2, r3
 8001c26:	0c9b      	lsrs	r3, r3, #18
 8001c28:	3b01      	subs	r3, #1
 8001c2a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001c2c:	4b21      	ldr	r3, [pc, #132]	@ (8001cb4 <HAL_InitTick+0xd8>)
 8001c2e:	4a22      	ldr	r2, [pc, #136]	@ (8001cb8 <HAL_InitTick+0xdc>)
 8001c30:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001c32:	4b20      	ldr	r3, [pc, #128]	@ (8001cb4 <HAL_InitTick+0xd8>)
 8001c34:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001c38:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001c3a:	4a1e      	ldr	r2, [pc, #120]	@ (8001cb4 <HAL_InitTick+0xd8>)
 8001c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c3e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001c40:	4b1c      	ldr	r3, [pc, #112]	@ (8001cb4 <HAL_InitTick+0xd8>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c46:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb4 <HAL_InitTick+0xd8>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c4c:	4b19      	ldr	r3, [pc, #100]	@ (8001cb4 <HAL_InitTick+0xd8>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001c52:	4818      	ldr	r0, [pc, #96]	@ (8001cb4 <HAL_InitTick+0xd8>)
 8001c54:	f002 ff52 	bl	8004afc <HAL_TIM_Base_Init>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001c5e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d11b      	bne.n	8001c9e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001c66:	4813      	ldr	r0, [pc, #76]	@ (8001cb4 <HAL_InitTick+0xd8>)
 8001c68:	f002 ffa2 	bl	8004bb0 <HAL_TIM_Base_Start_IT>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001c72:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d111      	bne.n	8001c9e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001c7a:	2019      	movs	r0, #25
 8001c7c:	f000 fe7c 	bl	8002978 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2b0f      	cmp	r3, #15
 8001c84:	d808      	bhi.n	8001c98 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001c86:	2200      	movs	r2, #0
 8001c88:	6879      	ldr	r1, [r7, #4]
 8001c8a:	2019      	movs	r0, #25
 8001c8c:	f000 fe58 	bl	8002940 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c90:	4a0a      	ldr	r2, [pc, #40]	@ (8001cbc <HAL_InitTick+0xe0>)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6013      	str	r3, [r2, #0]
 8001c96:	e002      	b.n	8001c9e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001c9e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3730      	adds	r7, #48	@ 0x30
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	431bde83 	.word	0x431bde83
 8001cb4:	200006bc 	.word	0x200006bc
 8001cb8:	40010000 	.word	0x40010000
 8001cbc:	2000000c 	.word	0x2000000c

08001cc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cc4:	bf00      	nop
 8001cc6:	e7fd      	b.n	8001cc4 <NMI_Handler+0x4>

08001cc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ccc:	bf00      	nop
 8001cce:	e7fd      	b.n	8001ccc <HardFault_Handler+0x4>

08001cd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cd4:	bf00      	nop
 8001cd6:	e7fd      	b.n	8001cd4 <MemManage_Handler+0x4>

08001cd8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cdc:	bf00      	nop
 8001cde:	e7fd      	b.n	8001cdc <BusFault_Handler+0x4>

08001ce0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ce4:	bf00      	nop
 8001ce6:	e7fd      	b.n	8001ce4 <UsageFault_Handler+0x4>

08001ce8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cec:	bf00      	nop
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
	...

08001cf8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001cfc:	4802      	ldr	r0, [pc, #8]	@ (8001d08 <DMA1_Stream0_IRQHandler+0x10>)
 8001cfe:	f000 fef7 	bl	8002af0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	200005f8 	.word	0x200005f8

08001d0c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001d10:	4802      	ldr	r0, [pc, #8]	@ (8001d1c <DMA1_Stream6_IRQHandler+0x10>)
 8001d12:	f000 feed 	bl	8002af0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001d16:	bf00      	nop
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	20000598 	.word	0x20000598

08001d20 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d24:	4802      	ldr	r0, [pc, #8]	@ (8001d30 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001d26:	f002 ffb3 	bl	8004c90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	200006bc 	.word	0x200006bc

08001d34 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d38:	4802      	ldr	r0, [pc, #8]	@ (8001d44 <DMA2_Stream0_IRQHandler+0x10>)
 8001d3a:	f000 fed9 	bl	8002af0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	200004e4 	.word	0x200004e4

08001d48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  return 1;
 8001d4c:	2301      	movs	r3, #1
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <_kill>:

int _kill(int pid, int sig)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d62:	f005 fa2f 	bl	80071c4 <__errno>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2216      	movs	r2, #22
 8001d6a:	601a      	str	r2, [r3, #0]
  return -1;
 8001d6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3708      	adds	r7, #8
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <_exit>:

void _exit (int status)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d80:	f04f 31ff 	mov.w	r1, #4294967295
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f7ff ffe7 	bl	8001d58 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d8a:	bf00      	nop
 8001d8c:	e7fd      	b.n	8001d8a <_exit+0x12>

08001d8e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b086      	sub	sp, #24
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	60f8      	str	r0, [r7, #12]
 8001d96:	60b9      	str	r1, [r7, #8]
 8001d98:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	617b      	str	r3, [r7, #20]
 8001d9e:	e00a      	b.n	8001db6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001da0:	f3af 8000 	nop.w
 8001da4:	4601      	mov	r1, r0
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	1c5a      	adds	r2, r3, #1
 8001daa:	60ba      	str	r2, [r7, #8]
 8001dac:	b2ca      	uxtb	r2, r1
 8001dae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	3301      	adds	r3, #1
 8001db4:	617b      	str	r3, [r7, #20]
 8001db6:	697a      	ldr	r2, [r7, #20]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	dbf0      	blt.n	8001da0 <_read+0x12>
  }

  return len;
 8001dbe:	687b      	ldr	r3, [r7, #4]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3718      	adds	r7, #24
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	617b      	str	r3, [r7, #20]
 8001dd8:	e009      	b.n	8001dee <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	1c5a      	adds	r2, r3, #1
 8001dde:	60ba      	str	r2, [r7, #8]
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	3301      	adds	r3, #1
 8001dec:	617b      	str	r3, [r7, #20]
 8001dee:	697a      	ldr	r2, [r7, #20]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	dbf1      	blt.n	8001dda <_write+0x12>
  }
  return len;
 8001df6:	687b      	ldr	r3, [r7, #4]
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3718      	adds	r7, #24
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <_close>:

int _close(int file)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e28:	605a      	str	r2, [r3, #4]
  return 0;
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <_isatty>:

int _isatty(int file)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e40:	2301      	movs	r3, #1
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr

08001e4e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	b085      	sub	sp, #20
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	60f8      	str	r0, [r7, #12]
 8001e56:	60b9      	str	r1, [r7, #8]
 8001e58:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e5a:	2300      	movs	r3, #0
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3714      	adds	r7, #20
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e70:	4a14      	ldr	r2, [pc, #80]	@ (8001ec4 <_sbrk+0x5c>)
 8001e72:	4b15      	ldr	r3, [pc, #84]	@ (8001ec8 <_sbrk+0x60>)
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e7c:	4b13      	ldr	r3, [pc, #76]	@ (8001ecc <_sbrk+0x64>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d102      	bne.n	8001e8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e84:	4b11      	ldr	r3, [pc, #68]	@ (8001ecc <_sbrk+0x64>)
 8001e86:	4a12      	ldr	r2, [pc, #72]	@ (8001ed0 <_sbrk+0x68>)
 8001e88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e8a:	4b10      	ldr	r3, [pc, #64]	@ (8001ecc <_sbrk+0x64>)
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4413      	add	r3, r2
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d207      	bcs.n	8001ea8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e98:	f005 f994 	bl	80071c4 <__errno>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	220c      	movs	r2, #12
 8001ea0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ea6:	e009      	b.n	8001ebc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ea8:	4b08      	ldr	r3, [pc, #32]	@ (8001ecc <_sbrk+0x64>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eae:	4b07      	ldr	r3, [pc, #28]	@ (8001ecc <_sbrk+0x64>)
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	4a05      	ldr	r2, [pc, #20]	@ (8001ecc <_sbrk+0x64>)
 8001eb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eba:	68fb      	ldr	r3, [r7, #12]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3718      	adds	r7, #24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	20020000 	.word	0x20020000
 8001ec8:	00000400 	.word	0x00000400
 8001ecc:	20000704 	.word	0x20000704
 8001ed0:	200045b0 	.word	0x200045b0

08001ed4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ed8:	4b06      	ldr	r3, [pc, #24]	@ (8001ef4 <SystemInit+0x20>)
 8001eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ede:	4a05      	ldr	r2, [pc, #20]	@ (8001ef4 <SystemInit+0x20>)
 8001ee0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ee4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ee8:	bf00      	nop
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	e000ed00 	.word	0xe000ed00

08001ef8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ef8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f30 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001efc:	f7ff ffea 	bl	8001ed4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f00:	480c      	ldr	r0, [pc, #48]	@ (8001f34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f02:	490d      	ldr	r1, [pc, #52]	@ (8001f38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f04:	4a0d      	ldr	r2, [pc, #52]	@ (8001f3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f08:	e002      	b.n	8001f10 <LoopCopyDataInit>

08001f0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f0e:	3304      	adds	r3, #4

08001f10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f14:	d3f9      	bcc.n	8001f0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f16:	4a0a      	ldr	r2, [pc, #40]	@ (8001f40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f18:	4c0a      	ldr	r4, [pc, #40]	@ (8001f44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f1c:	e001      	b.n	8001f22 <LoopFillZerobss>

08001f1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f20:	3204      	adds	r2, #4

08001f22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f24:	d3fb      	bcc.n	8001f1e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001f26:	f005 f953 	bl	80071d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f2a:	f7ff fa33 	bl	8001394 <main>
  bx  lr    
 8001f2e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001f30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f38:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001f3c:	08009e78 	.word	0x08009e78
  ldr r2, =_sbss
 8001f40:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001f44:	200045ac 	.word	0x200045ac

08001f48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f48:	e7fe      	b.n	8001f48 <ADC_IRQHandler>
	...

08001f4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f50:	4b0e      	ldr	r3, [pc, #56]	@ (8001f8c <HAL_Init+0x40>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a0d      	ldr	r2, [pc, #52]	@ (8001f8c <HAL_Init+0x40>)
 8001f56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f8c <HAL_Init+0x40>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a0a      	ldr	r2, [pc, #40]	@ (8001f8c <HAL_Init+0x40>)
 8001f62:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f68:	4b08      	ldr	r3, [pc, #32]	@ (8001f8c <HAL_Init+0x40>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a07      	ldr	r2, [pc, #28]	@ (8001f8c <HAL_Init+0x40>)
 8001f6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f74:	2003      	movs	r0, #3
 8001f76:	f000 fcd8 	bl	800292a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f7a:	200f      	movs	r0, #15
 8001f7c:	f7ff fe2e 	bl	8001bdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f80:	f7ff fc8e 	bl	80018a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40023c00 	.word	0x40023c00

08001f90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f94:	4b06      	ldr	r3, [pc, #24]	@ (8001fb0 <HAL_IncTick+0x20>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	461a      	mov	r2, r3
 8001f9a:	4b06      	ldr	r3, [pc, #24]	@ (8001fb4 <HAL_IncTick+0x24>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	4a04      	ldr	r2, [pc, #16]	@ (8001fb4 <HAL_IncTick+0x24>)
 8001fa2:	6013      	str	r3, [r2, #0]
}
 8001fa4:	bf00      	nop
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	20000010 	.word	0x20000010
 8001fb4:	20000708 	.word	0x20000708

08001fb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  return uwTick;
 8001fbc:	4b03      	ldr	r3, [pc, #12]	@ (8001fcc <HAL_GetTick+0x14>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	20000708 	.word	0x20000708

08001fd0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d101      	bne.n	8001fe6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e033      	b.n	800204e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d109      	bne.n	8002002 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f7ff fc82 	bl	80018f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002006:	f003 0310 	and.w	r3, r3, #16
 800200a:	2b00      	cmp	r3, #0
 800200c:	d118      	bne.n	8002040 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002012:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002016:	f023 0302 	bic.w	r3, r3, #2
 800201a:	f043 0202 	orr.w	r2, r3, #2
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 fad8 	bl	80025d8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002032:	f023 0303 	bic.w	r3, r3, #3
 8002036:	f043 0201 	orr.w	r2, r3, #1
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	641a      	str	r2, [r3, #64]	@ 0x40
 800203e:	e001      	b.n	8002044 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800204c:	7bfb      	ldrb	r3, [r7, #15]
}
 800204e:	4618      	mov	r0, r3
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
	...

08002058 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002058:	b480      	push	{r7}
 800205a:	b085      	sub	sp, #20
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002060:	2300      	movs	r3, #0
 8002062:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800206a:	2b01      	cmp	r3, #1
 800206c:	d101      	bne.n	8002072 <HAL_ADC_Start+0x1a>
 800206e:	2302      	movs	r3, #2
 8002070:	e0b2      	b.n	80021d8 <HAL_ADC_Start+0x180>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2201      	movs	r2, #1
 8002076:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	2b01      	cmp	r3, #1
 8002086:	d018      	beq.n	80020ba <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	689a      	ldr	r2, [r3, #8]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f042 0201 	orr.w	r2, r2, #1
 8002096:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002098:	4b52      	ldr	r3, [pc, #328]	@ (80021e4 <HAL_ADC_Start+0x18c>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a52      	ldr	r2, [pc, #328]	@ (80021e8 <HAL_ADC_Start+0x190>)
 800209e:	fba2 2303 	umull	r2, r3, r2, r3
 80020a2:	0c9a      	lsrs	r2, r3, #18
 80020a4:	4613      	mov	r3, r2
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	4413      	add	r3, r2
 80020aa:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80020ac:	e002      	b.n	80020b4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	3b01      	subs	r3, #1
 80020b2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1f9      	bne.n	80020ae <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f003 0301 	and.w	r3, r3, #1
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d17a      	bne.n	80021be <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020cc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80020d0:	f023 0301 	bic.w	r3, r3, #1
 80020d4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d007      	beq.n	80020fa <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ee:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80020f2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002102:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002106:	d106      	bne.n	8002116 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800210c:	f023 0206 	bic.w	r2, r3, #6
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	645a      	str	r2, [r3, #68]	@ 0x44
 8002114:	e002      	b.n	800211c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002124:	4b31      	ldr	r3, [pc, #196]	@ (80021ec <HAL_ADC_Start+0x194>)
 8002126:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002130:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f003 031f 	and.w	r3, r3, #31
 800213a:	2b00      	cmp	r3, #0
 800213c:	d12a      	bne.n	8002194 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a2b      	ldr	r2, [pc, #172]	@ (80021f0 <HAL_ADC_Start+0x198>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d015      	beq.n	8002174 <HAL_ADC_Start+0x11c>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a29      	ldr	r2, [pc, #164]	@ (80021f4 <HAL_ADC_Start+0x19c>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d105      	bne.n	800215e <HAL_ADC_Start+0x106>
 8002152:	4b26      	ldr	r3, [pc, #152]	@ (80021ec <HAL_ADC_Start+0x194>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f003 031f 	and.w	r3, r3, #31
 800215a:	2b00      	cmp	r3, #0
 800215c:	d00a      	beq.n	8002174 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a25      	ldr	r2, [pc, #148]	@ (80021f8 <HAL_ADC_Start+0x1a0>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d136      	bne.n	80021d6 <HAL_ADC_Start+0x17e>
 8002168:	4b20      	ldr	r3, [pc, #128]	@ (80021ec <HAL_ADC_Start+0x194>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f003 0310 	and.w	r3, r3, #16
 8002170:	2b00      	cmp	r3, #0
 8002172:	d130      	bne.n	80021d6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d129      	bne.n	80021d6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002190:	609a      	str	r2, [r3, #8]
 8002192:	e020      	b.n	80021d6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a15      	ldr	r2, [pc, #84]	@ (80021f0 <HAL_ADC_Start+0x198>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d11b      	bne.n	80021d6 <HAL_ADC_Start+0x17e>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d114      	bne.n	80021d6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	689a      	ldr	r2, [r3, #8]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80021ba:	609a      	str	r2, [r3, #8]
 80021bc:	e00b      	b.n	80021d6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c2:	f043 0210 	orr.w	r2, r3, #16
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ce:	f043 0201 	orr.w	r2, r3, #1
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3714      	adds	r7, #20
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	20000008 	.word	0x20000008
 80021e8:	431bde83 	.word	0x431bde83
 80021ec:	40012300 	.word	0x40012300
 80021f0:	40012000 	.word	0x40012000
 80021f4:	40012100 	.word	0x40012100
 80021f8:	40012200 	.word	0x40012200

080021fc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800220a:	2b01      	cmp	r3, #1
 800220c:	d101      	bne.n	8002212 <HAL_ADC_Stop+0x16>
 800220e:	2302      	movs	r3, #2
 8002210:	e021      	b.n	8002256 <HAL_ADC_Stop+0x5a>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	689a      	ldr	r2, [r3, #8]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 0201 	bic.w	r2, r2, #1
 8002228:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f003 0301 	and.w	r3, r3, #1
 8002234:	2b00      	cmp	r3, #0
 8002236:	d109      	bne.n	800224c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002240:	f023 0301 	bic.w	r3, r3, #1
 8002244:	f043 0201 	orr.w	r2, r3, #1
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	b084      	sub	sp, #16
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
 800226a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800226c:	2300      	movs	r3, #0
 800226e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800227a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800227e:	d113      	bne.n	80022a8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800228a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800228e:	d10b      	bne.n	80022a8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002294:	f043 0220 	orr.w	r2, r3, #32
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e063      	b.n	8002370 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80022a8:	f7ff fe86 	bl	8001fb8 <HAL_GetTick>
 80022ac:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80022ae:	e021      	b.n	80022f4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022b6:	d01d      	beq.n	80022f4 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d007      	beq.n	80022ce <HAL_ADC_PollForConversion+0x6c>
 80022be:	f7ff fe7b 	bl	8001fb8 <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d212      	bcs.n	80022f4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d00b      	beq.n	80022f4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e0:	f043 0204 	orr.w	r2, r3, #4
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e03d      	b.n	8002370 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d1d6      	bne.n	80022b0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f06f 0212 	mvn.w	r2, #18
 800230a:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002310:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d123      	bne.n	800236e <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800232a:	2b00      	cmp	r3, #0
 800232c:	d11f      	bne.n	800236e <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002334:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002338:	2b00      	cmp	r3, #0
 800233a:	d006      	beq.n	800234a <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002346:	2b00      	cmp	r3, #0
 8002348:	d111      	bne.n	800236e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800235a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d105      	bne.n	800236e <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002366:	f043 0201 	orr.w	r2, r3, #1
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3710      	adds	r7, #16
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002386:	4618      	mov	r0, r3
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
	...

08002394 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800239e:	2300      	movs	r3, #0
 80023a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d101      	bne.n	80023b0 <HAL_ADC_ConfigChannel+0x1c>
 80023ac:	2302      	movs	r3, #2
 80023ae:	e105      	b.n	80025bc <HAL_ADC_ConfigChannel+0x228>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2b09      	cmp	r3, #9
 80023be:	d925      	bls.n	800240c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	68d9      	ldr	r1, [r3, #12]
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	461a      	mov	r2, r3
 80023ce:	4613      	mov	r3, r2
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	4413      	add	r3, r2
 80023d4:	3b1e      	subs	r3, #30
 80023d6:	2207      	movs	r2, #7
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	43da      	mvns	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	400a      	ands	r2, r1
 80023e4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68d9      	ldr	r1, [r3, #12]
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	4618      	mov	r0, r3
 80023f8:	4603      	mov	r3, r0
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	4403      	add	r3, r0
 80023fe:	3b1e      	subs	r3, #30
 8002400:	409a      	lsls	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	430a      	orrs	r2, r1
 8002408:	60da      	str	r2, [r3, #12]
 800240a:	e022      	b.n	8002452 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	6919      	ldr	r1, [r3, #16]
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	b29b      	uxth	r3, r3
 8002418:	461a      	mov	r2, r3
 800241a:	4613      	mov	r3, r2
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	4413      	add	r3, r2
 8002420:	2207      	movs	r2, #7
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	43da      	mvns	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	400a      	ands	r2, r1
 800242e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6919      	ldr	r1, [r3, #16]
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	689a      	ldr	r2, [r3, #8]
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	b29b      	uxth	r3, r3
 8002440:	4618      	mov	r0, r3
 8002442:	4603      	mov	r3, r0
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	4403      	add	r3, r0
 8002448:	409a      	lsls	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	430a      	orrs	r2, r1
 8002450:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	2b06      	cmp	r3, #6
 8002458:	d824      	bhi.n	80024a4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685a      	ldr	r2, [r3, #4]
 8002464:	4613      	mov	r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	4413      	add	r3, r2
 800246a:	3b05      	subs	r3, #5
 800246c:	221f      	movs	r2, #31
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	43da      	mvns	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	400a      	ands	r2, r1
 800247a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	b29b      	uxth	r3, r3
 8002488:	4618      	mov	r0, r3
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685a      	ldr	r2, [r3, #4]
 800248e:	4613      	mov	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4413      	add	r3, r2
 8002494:	3b05      	subs	r3, #5
 8002496:	fa00 f203 	lsl.w	r2, r0, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	430a      	orrs	r2, r1
 80024a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80024a2:	e04c      	b.n	800253e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	2b0c      	cmp	r3, #12
 80024aa:	d824      	bhi.n	80024f6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685a      	ldr	r2, [r3, #4]
 80024b6:	4613      	mov	r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	4413      	add	r3, r2
 80024bc:	3b23      	subs	r3, #35	@ 0x23
 80024be:	221f      	movs	r2, #31
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	43da      	mvns	r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	400a      	ands	r2, r1
 80024cc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	b29b      	uxth	r3, r3
 80024da:	4618      	mov	r0, r3
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685a      	ldr	r2, [r3, #4]
 80024e0:	4613      	mov	r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	4413      	add	r3, r2
 80024e6:	3b23      	subs	r3, #35	@ 0x23
 80024e8:	fa00 f203 	lsl.w	r2, r0, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	430a      	orrs	r2, r1
 80024f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80024f4:	e023      	b.n	800253e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685a      	ldr	r2, [r3, #4]
 8002500:	4613      	mov	r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	4413      	add	r3, r2
 8002506:	3b41      	subs	r3, #65	@ 0x41
 8002508:	221f      	movs	r2, #31
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	43da      	mvns	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	400a      	ands	r2, r1
 8002516:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	b29b      	uxth	r3, r3
 8002524:	4618      	mov	r0, r3
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685a      	ldr	r2, [r3, #4]
 800252a:	4613      	mov	r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4413      	add	r3, r2
 8002530:	3b41      	subs	r3, #65	@ 0x41
 8002532:	fa00 f203 	lsl.w	r2, r0, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	430a      	orrs	r2, r1
 800253c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800253e:	4b22      	ldr	r3, [pc, #136]	@ (80025c8 <HAL_ADC_ConfigChannel+0x234>)
 8002540:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a21      	ldr	r2, [pc, #132]	@ (80025cc <HAL_ADC_ConfigChannel+0x238>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d109      	bne.n	8002560 <HAL_ADC_ConfigChannel+0x1cc>
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2b12      	cmp	r3, #18
 8002552:	d105      	bne.n	8002560 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a19      	ldr	r2, [pc, #100]	@ (80025cc <HAL_ADC_ConfigChannel+0x238>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d123      	bne.n	80025b2 <HAL_ADC_ConfigChannel+0x21e>
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2b10      	cmp	r3, #16
 8002570:	d003      	beq.n	800257a <HAL_ADC_ConfigChannel+0x1e6>
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2b11      	cmp	r3, #17
 8002578:	d11b      	bne.n	80025b2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2b10      	cmp	r3, #16
 800258c:	d111      	bne.n	80025b2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800258e:	4b10      	ldr	r3, [pc, #64]	@ (80025d0 <HAL_ADC_ConfigChannel+0x23c>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a10      	ldr	r2, [pc, #64]	@ (80025d4 <HAL_ADC_ConfigChannel+0x240>)
 8002594:	fba2 2303 	umull	r2, r3, r2, r3
 8002598:	0c9a      	lsrs	r2, r3, #18
 800259a:	4613      	mov	r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	4413      	add	r3, r2
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80025a4:	e002      	b.n	80025ac <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	3b01      	subs	r3, #1
 80025aa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1f9      	bne.n	80025a6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3714      	adds	r7, #20
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	40012300 	.word	0x40012300
 80025cc:	40012000 	.word	0x40012000
 80025d0:	20000008 	.word	0x20000008
 80025d4:	431bde83 	.word	0x431bde83

080025d8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025e0:	4b79      	ldr	r3, [pc, #484]	@ (80027c8 <ADC_Init+0x1f0>)
 80025e2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	685a      	ldr	r2, [r3, #4]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	431a      	orrs	r2, r3
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	685a      	ldr	r2, [r3, #4]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800260c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	6859      	ldr	r1, [r3, #4]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	021a      	lsls	r2, r3, #8
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	430a      	orrs	r2, r1
 8002620:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	685a      	ldr	r2, [r3, #4]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002630:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	6859      	ldr	r1, [r3, #4]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689a      	ldr	r2, [r3, #8]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	430a      	orrs	r2, r1
 8002642:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	689a      	ldr	r2, [r3, #8]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002652:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	6899      	ldr	r1, [r3, #8]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	68da      	ldr	r2, [r3, #12]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	430a      	orrs	r2, r1
 8002664:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800266a:	4a58      	ldr	r2, [pc, #352]	@ (80027cc <ADC_Init+0x1f4>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d022      	beq.n	80026b6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	689a      	ldr	r2, [r3, #8]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800267e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	6899      	ldr	r1, [r3, #8]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	430a      	orrs	r2, r1
 8002690:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	689a      	ldr	r2, [r3, #8]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80026a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	6899      	ldr	r1, [r3, #8]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	430a      	orrs	r2, r1
 80026b2:	609a      	str	r2, [r3, #8]
 80026b4:	e00f      	b.n	80026d6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80026c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80026d4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f022 0202 	bic.w	r2, r2, #2
 80026e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	6899      	ldr	r1, [r3, #8]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	7e1b      	ldrb	r3, [r3, #24]
 80026f0:	005a      	lsls	r2, r3, #1
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	430a      	orrs	r2, r1
 80026f8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d01b      	beq.n	800273c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	685a      	ldr	r2, [r3, #4]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002712:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	685a      	ldr	r2, [r3, #4]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002722:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6859      	ldr	r1, [r3, #4]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800272e:	3b01      	subs	r3, #1
 8002730:	035a      	lsls	r2, r3, #13
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	430a      	orrs	r2, r1
 8002738:	605a      	str	r2, [r3, #4]
 800273a:	e007      	b.n	800274c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	685a      	ldr	r2, [r3, #4]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800274a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800275a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	69db      	ldr	r3, [r3, #28]
 8002766:	3b01      	subs	r3, #1
 8002768:	051a      	lsls	r2, r3, #20
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	430a      	orrs	r2, r1
 8002770:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002780:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	6899      	ldr	r1, [r3, #8]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800278e:	025a      	lsls	r2, r3, #9
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	430a      	orrs	r2, r1
 8002796:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	689a      	ldr	r2, [r3, #8]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	6899      	ldr	r1, [r3, #8]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	029a      	lsls	r2, r3, #10
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	430a      	orrs	r2, r1
 80027ba:	609a      	str	r2, [r3, #8]
}
 80027bc:	bf00      	nop
 80027be:	3714      	adds	r7, #20
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr
 80027c8:	40012300 	.word	0x40012300
 80027cc:	0f000001 	.word	0x0f000001

080027d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f003 0307 	and.w	r3, r3, #7
 80027de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002814 <__NVIC_SetPriorityGrouping+0x44>)
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027e6:	68ba      	ldr	r2, [r7, #8]
 80027e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027ec:	4013      	ands	r3, r2
 80027ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80027fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002800:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002802:	4a04      	ldr	r2, [pc, #16]	@ (8002814 <__NVIC_SetPriorityGrouping+0x44>)
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	60d3      	str	r3, [r2, #12]
}
 8002808:	bf00      	nop
 800280a:	3714      	adds	r7, #20
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	e000ed00 	.word	0xe000ed00

08002818 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800281c:	4b04      	ldr	r3, [pc, #16]	@ (8002830 <__NVIC_GetPriorityGrouping+0x18>)
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	0a1b      	lsrs	r3, r3, #8
 8002822:	f003 0307 	and.w	r3, r3, #7
}
 8002826:	4618      	mov	r0, r3
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr
 8002830:	e000ed00 	.word	0xe000ed00

08002834 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	4603      	mov	r3, r0
 800283c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800283e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002842:	2b00      	cmp	r3, #0
 8002844:	db0b      	blt.n	800285e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002846:	79fb      	ldrb	r3, [r7, #7]
 8002848:	f003 021f 	and.w	r2, r3, #31
 800284c:	4907      	ldr	r1, [pc, #28]	@ (800286c <__NVIC_EnableIRQ+0x38>)
 800284e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002852:	095b      	lsrs	r3, r3, #5
 8002854:	2001      	movs	r0, #1
 8002856:	fa00 f202 	lsl.w	r2, r0, r2
 800285a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800285e:	bf00      	nop
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	e000e100 	.word	0xe000e100

08002870 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	4603      	mov	r3, r0
 8002878:	6039      	str	r1, [r7, #0]
 800287a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800287c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002880:	2b00      	cmp	r3, #0
 8002882:	db0a      	blt.n	800289a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	b2da      	uxtb	r2, r3
 8002888:	490c      	ldr	r1, [pc, #48]	@ (80028bc <__NVIC_SetPriority+0x4c>)
 800288a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288e:	0112      	lsls	r2, r2, #4
 8002890:	b2d2      	uxtb	r2, r2
 8002892:	440b      	add	r3, r1
 8002894:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002898:	e00a      	b.n	80028b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	b2da      	uxtb	r2, r3
 800289e:	4908      	ldr	r1, [pc, #32]	@ (80028c0 <__NVIC_SetPriority+0x50>)
 80028a0:	79fb      	ldrb	r3, [r7, #7]
 80028a2:	f003 030f 	and.w	r3, r3, #15
 80028a6:	3b04      	subs	r3, #4
 80028a8:	0112      	lsls	r2, r2, #4
 80028aa:	b2d2      	uxtb	r2, r2
 80028ac:	440b      	add	r3, r1
 80028ae:	761a      	strb	r2, [r3, #24]
}
 80028b0:	bf00      	nop
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr
 80028bc:	e000e100 	.word	0xe000e100
 80028c0:	e000ed00 	.word	0xe000ed00

080028c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b089      	sub	sp, #36	@ 0x24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f003 0307 	and.w	r3, r3, #7
 80028d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	f1c3 0307 	rsb	r3, r3, #7
 80028de:	2b04      	cmp	r3, #4
 80028e0:	bf28      	it	cs
 80028e2:	2304      	movcs	r3, #4
 80028e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	3304      	adds	r3, #4
 80028ea:	2b06      	cmp	r3, #6
 80028ec:	d902      	bls.n	80028f4 <NVIC_EncodePriority+0x30>
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	3b03      	subs	r3, #3
 80028f2:	e000      	b.n	80028f6 <NVIC_EncodePriority+0x32>
 80028f4:	2300      	movs	r3, #0
 80028f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028f8:	f04f 32ff 	mov.w	r2, #4294967295
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002902:	43da      	mvns	r2, r3
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	401a      	ands	r2, r3
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800290c:	f04f 31ff 	mov.w	r1, #4294967295
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	fa01 f303 	lsl.w	r3, r1, r3
 8002916:	43d9      	mvns	r1, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800291c:	4313      	orrs	r3, r2
         );
}
 800291e:	4618      	mov	r0, r3
 8002920:	3724      	adds	r7, #36	@ 0x24
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr

0800292a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b082      	sub	sp, #8
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f7ff ff4c 	bl	80027d0 <__NVIC_SetPriorityGrouping>
}
 8002938:	bf00      	nop
 800293a:	3708      	adds	r7, #8
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af00      	add	r7, sp, #0
 8002946:	4603      	mov	r3, r0
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
 800294c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800294e:	2300      	movs	r3, #0
 8002950:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002952:	f7ff ff61 	bl	8002818 <__NVIC_GetPriorityGrouping>
 8002956:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	68b9      	ldr	r1, [r7, #8]
 800295c:	6978      	ldr	r0, [r7, #20]
 800295e:	f7ff ffb1 	bl	80028c4 <NVIC_EncodePriority>
 8002962:	4602      	mov	r2, r0
 8002964:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002968:	4611      	mov	r1, r2
 800296a:	4618      	mov	r0, r3
 800296c:	f7ff ff80 	bl	8002870 <__NVIC_SetPriority>
}
 8002970:	bf00      	nop
 8002972:	3718      	adds	r7, #24
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	4603      	mov	r3, r0
 8002980:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002986:	4618      	mov	r0, r3
 8002988:	f7ff ff54 	bl	8002834 <__NVIC_EnableIRQ>
}
 800298c:	bf00      	nop
 800298e:	3708      	adds	r7, #8
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800299c:	2300      	movs	r3, #0
 800299e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80029a0:	f7ff fb0a 	bl	8001fb8 <HAL_GetTick>
 80029a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d101      	bne.n	80029b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e099      	b.n	8002ae4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2202      	movs	r2, #2
 80029b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f022 0201 	bic.w	r2, r2, #1
 80029ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029d0:	e00f      	b.n	80029f2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029d2:	f7ff faf1 	bl	8001fb8 <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	2b05      	cmp	r3, #5
 80029de:	d908      	bls.n	80029f2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2220      	movs	r2, #32
 80029e4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2203      	movs	r2, #3
 80029ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e078      	b.n	8002ae4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d1e8      	bne.n	80029d2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a08:	697a      	ldr	r2, [r7, #20]
 8002a0a:	4b38      	ldr	r3, [pc, #224]	@ (8002aec <HAL_DMA_Init+0x158>)
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685a      	ldr	r2, [r3, #4]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a1b      	ldr	r3, [r3, #32]
 8002a3c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a48:	2b04      	cmp	r3, #4
 8002a4a:	d107      	bne.n	8002a5c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a54:	4313      	orrs	r3, r2
 8002a56:	697a      	ldr	r2, [r7, #20]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	697a      	ldr	r2, [r7, #20]
 8002a62:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	f023 0307 	bic.w	r3, r3, #7
 8002a72:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a78:	697a      	ldr	r2, [r7, #20]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a82:	2b04      	cmp	r3, #4
 8002a84:	d117      	bne.n	8002ab6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a8a:	697a      	ldr	r2, [r7, #20]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00e      	beq.n	8002ab6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f000 f9e9 	bl	8002e70 <DMA_CheckFifoParam>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d008      	beq.n	8002ab6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2240      	movs	r2, #64	@ 0x40
 8002aa8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2201      	movs	r2, #1
 8002aae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e016      	b.n	8002ae4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 f9a0 	bl	8002e04 <DMA_CalcBaseAndBitshift>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002acc:	223f      	movs	r2, #63	@ 0x3f
 8002ace:	409a      	lsls	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2201      	movs	r2, #1
 8002ade:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3718      	adds	r7, #24
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	f010803f 	.word	0xf010803f

08002af0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002af8:	2300      	movs	r3, #0
 8002afa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002afc:	4b8e      	ldr	r3, [pc, #568]	@ (8002d38 <HAL_DMA_IRQHandler+0x248>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a8e      	ldr	r2, [pc, #568]	@ (8002d3c <HAL_DMA_IRQHandler+0x24c>)
 8002b02:	fba2 2303 	umull	r2, r3, r2, r3
 8002b06:	0a9b      	lsrs	r3, r3, #10
 8002b08:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b0e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b1a:	2208      	movs	r2, #8
 8002b1c:	409a      	lsls	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	4013      	ands	r3, r2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d01a      	beq.n	8002b5c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0304 	and.w	r3, r3, #4
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d013      	beq.n	8002b5c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f022 0204 	bic.w	r2, r2, #4
 8002b42:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b48:	2208      	movs	r2, #8
 8002b4a:	409a      	lsls	r2, r3
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b54:	f043 0201 	orr.w	r2, r3, #1
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b60:	2201      	movs	r2, #1
 8002b62:	409a      	lsls	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	4013      	ands	r3, r2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d012      	beq.n	8002b92 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	695b      	ldr	r3, [r3, #20]
 8002b72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00b      	beq.n	8002b92 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b7e:	2201      	movs	r2, #1
 8002b80:	409a      	lsls	r2, r3
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b8a:	f043 0202 	orr.w	r2, r3, #2
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b96:	2204      	movs	r2, #4
 8002b98:	409a      	lsls	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d012      	beq.n	8002bc8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0302 	and.w	r3, r3, #2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d00b      	beq.n	8002bc8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bb4:	2204      	movs	r2, #4
 8002bb6:	409a      	lsls	r2, r3
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bc0:	f043 0204 	orr.w	r2, r3, #4
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bcc:	2210      	movs	r2, #16
 8002bce:	409a      	lsls	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d043      	beq.n	8002c60 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0308 	and.w	r3, r3, #8
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d03c      	beq.n	8002c60 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bea:	2210      	movs	r2, #16
 8002bec:	409a      	lsls	r2, r3
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d018      	beq.n	8002c32 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d108      	bne.n	8002c20 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d024      	beq.n	8002c60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	4798      	blx	r3
 8002c1e:	e01f      	b.n	8002c60 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d01b      	beq.n	8002c60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	4798      	blx	r3
 8002c30:	e016      	b.n	8002c60 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d107      	bne.n	8002c50 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f022 0208 	bic.w	r2, r2, #8
 8002c4e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d003      	beq.n	8002c60 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c64:	2220      	movs	r2, #32
 8002c66:	409a      	lsls	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f000 808f 	beq.w	8002d90 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0310 	and.w	r3, r3, #16
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f000 8087 	beq.w	8002d90 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c86:	2220      	movs	r2, #32
 8002c88:	409a      	lsls	r2, r3
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b05      	cmp	r3, #5
 8002c98:	d136      	bne.n	8002d08 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f022 0216 	bic.w	r2, r2, #22
 8002ca8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	695a      	ldr	r2, [r3, #20]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002cb8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d103      	bne.n	8002cca <HAL_DMA_IRQHandler+0x1da>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d007      	beq.n	8002cda <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f022 0208 	bic.w	r2, r2, #8
 8002cd8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cde:	223f      	movs	r2, #63	@ 0x3f
 8002ce0:	409a      	lsls	r2, r3
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d07e      	beq.n	8002dfc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	4798      	blx	r3
        }
        return;
 8002d06:	e079      	b.n	8002dfc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d01d      	beq.n	8002d52 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d10d      	bne.n	8002d40 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d031      	beq.n	8002d90 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	4798      	blx	r3
 8002d34:	e02c      	b.n	8002d90 <HAL_DMA_IRQHandler+0x2a0>
 8002d36:	bf00      	nop
 8002d38:	20000008 	.word	0x20000008
 8002d3c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d023      	beq.n	8002d90 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	4798      	blx	r3
 8002d50:	e01e      	b.n	8002d90 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d10f      	bne.n	8002d80 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f022 0210 	bic.w	r2, r2, #16
 8002d6e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d003      	beq.n	8002d90 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d032      	beq.n	8002dfe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d022      	beq.n	8002dea <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2205      	movs	r2, #5
 8002da8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f022 0201 	bic.w	r2, r2, #1
 8002dba:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	60bb      	str	r3, [r7, #8]
 8002dc2:	697a      	ldr	r2, [r7, #20]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d307      	bcc.n	8002dd8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1f2      	bne.n	8002dbc <HAL_DMA_IRQHandler+0x2cc>
 8002dd6:	e000      	b.n	8002dda <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002dd8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d005      	beq.n	8002dfe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	4798      	blx	r3
 8002dfa:	e000      	b.n	8002dfe <HAL_DMA_IRQHandler+0x30e>
        return;
 8002dfc:	bf00      	nop
    }
  }
}
 8002dfe:	3718      	adds	r7, #24
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	3b10      	subs	r3, #16
 8002e14:	4a14      	ldr	r2, [pc, #80]	@ (8002e68 <DMA_CalcBaseAndBitshift+0x64>)
 8002e16:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1a:	091b      	lsrs	r3, r3, #4
 8002e1c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e1e:	4a13      	ldr	r2, [pc, #76]	@ (8002e6c <DMA_CalcBaseAndBitshift+0x68>)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	4413      	add	r3, r2
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	461a      	mov	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2b03      	cmp	r3, #3
 8002e30:	d909      	bls.n	8002e46 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002e3a:	f023 0303 	bic.w	r3, r3, #3
 8002e3e:	1d1a      	adds	r2, r3, #4
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	659a      	str	r2, [r3, #88]	@ 0x58
 8002e44:	e007      	b.n	8002e56 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002e4e:	f023 0303 	bic.w	r3, r3, #3
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3714      	adds	r7, #20
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	aaaaaaab 	.word	0xaaaaaaab
 8002e6c:	08009af0 	.word	0x08009af0

08002e70 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e80:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d11f      	bne.n	8002eca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	2b03      	cmp	r3, #3
 8002e8e:	d856      	bhi.n	8002f3e <DMA_CheckFifoParam+0xce>
 8002e90:	a201      	add	r2, pc, #4	@ (adr r2, 8002e98 <DMA_CheckFifoParam+0x28>)
 8002e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e96:	bf00      	nop
 8002e98:	08002ea9 	.word	0x08002ea9
 8002e9c:	08002ebb 	.word	0x08002ebb
 8002ea0:	08002ea9 	.word	0x08002ea9
 8002ea4:	08002f3f 	.word	0x08002f3f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d046      	beq.n	8002f42 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eb8:	e043      	b.n	8002f42 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ebe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002ec2:	d140      	bne.n	8002f46 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ec8:	e03d      	b.n	8002f46 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ed2:	d121      	bne.n	8002f18 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	2b03      	cmp	r3, #3
 8002ed8:	d837      	bhi.n	8002f4a <DMA_CheckFifoParam+0xda>
 8002eda:	a201      	add	r2, pc, #4	@ (adr r2, 8002ee0 <DMA_CheckFifoParam+0x70>)
 8002edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee0:	08002ef1 	.word	0x08002ef1
 8002ee4:	08002ef7 	.word	0x08002ef7
 8002ee8:	08002ef1 	.word	0x08002ef1
 8002eec:	08002f09 	.word	0x08002f09
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ef4:	e030      	b.n	8002f58 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002efa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d025      	beq.n	8002f4e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f06:	e022      	b.n	8002f4e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f0c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002f10:	d11f      	bne.n	8002f52 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f16:	e01c      	b.n	8002f52 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d903      	bls.n	8002f26 <DMA_CheckFifoParam+0xb6>
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	2b03      	cmp	r3, #3
 8002f22:	d003      	beq.n	8002f2c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f24:	e018      	b.n	8002f58 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	73fb      	strb	r3, [r7, #15]
      break;
 8002f2a:	e015      	b.n	8002f58 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d00e      	beq.n	8002f56 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f3c:	e00b      	b.n	8002f56 <DMA_CheckFifoParam+0xe6>
      break;
 8002f3e:	bf00      	nop
 8002f40:	e00a      	b.n	8002f58 <DMA_CheckFifoParam+0xe8>
      break;
 8002f42:	bf00      	nop
 8002f44:	e008      	b.n	8002f58 <DMA_CheckFifoParam+0xe8>
      break;
 8002f46:	bf00      	nop
 8002f48:	e006      	b.n	8002f58 <DMA_CheckFifoParam+0xe8>
      break;
 8002f4a:	bf00      	nop
 8002f4c:	e004      	b.n	8002f58 <DMA_CheckFifoParam+0xe8>
      break;
 8002f4e:	bf00      	nop
 8002f50:	e002      	b.n	8002f58 <DMA_CheckFifoParam+0xe8>
      break;   
 8002f52:	bf00      	nop
 8002f54:	e000      	b.n	8002f58 <DMA_CheckFifoParam+0xe8>
      break;
 8002f56:	bf00      	nop
    }
  } 
  
  return status; 
 8002f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3714      	adds	r7, #20
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop

08002f68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b089      	sub	sp, #36	@ 0x24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f72:	2300      	movs	r3, #0
 8002f74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f76:	2300      	movs	r3, #0
 8002f78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f7e:	2300      	movs	r3, #0
 8002f80:	61fb      	str	r3, [r7, #28]
 8002f82:	e16b      	b.n	800325c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f84:	2201      	movs	r2, #1
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	697a      	ldr	r2, [r7, #20]
 8002f94:	4013      	ands	r3, r2
 8002f96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	f040 815a 	bne.w	8003256 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f003 0303 	and.w	r3, r3, #3
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d005      	beq.n	8002fba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d130      	bne.n	800301c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	005b      	lsls	r3, r3, #1
 8002fc4:	2203      	movs	r2, #3
 8002fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fca:	43db      	mvns	r3, r3
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	68da      	ldr	r2, [r3, #12]
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	fa02 f303 	lsl.w	r3, r2, r3
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	69ba      	ldr	r2, [r7, #24]
 8002fe8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	091b      	lsrs	r3, r3, #4
 8003006:	f003 0201 	and.w	r2, r3, #1
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	fa02 f303 	lsl.w	r3, r2, r3
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	4313      	orrs	r3, r2
 8003014:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f003 0303 	and.w	r3, r3, #3
 8003024:	2b03      	cmp	r3, #3
 8003026:	d017      	beq.n	8003058 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	005b      	lsls	r3, r3, #1
 8003032:	2203      	movs	r2, #3
 8003034:	fa02 f303 	lsl.w	r3, r2, r3
 8003038:	43db      	mvns	r3, r3
 800303a:	69ba      	ldr	r2, [r7, #24]
 800303c:	4013      	ands	r3, r2
 800303e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	689a      	ldr	r2, [r3, #8]
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	fa02 f303 	lsl.w	r3, r2, r3
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	4313      	orrs	r3, r2
 8003050:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f003 0303 	and.w	r3, r3, #3
 8003060:	2b02      	cmp	r3, #2
 8003062:	d123      	bne.n	80030ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	08da      	lsrs	r2, r3, #3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	3208      	adds	r2, #8
 800306c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003070:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	f003 0307 	and.w	r3, r3, #7
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	220f      	movs	r2, #15
 800307c:	fa02 f303 	lsl.w	r3, r2, r3
 8003080:	43db      	mvns	r3, r3
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	4013      	ands	r3, r2
 8003086:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	691a      	ldr	r2, [r3, #16]
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	f003 0307 	and.w	r3, r3, #7
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	4313      	orrs	r3, r2
 800309c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	08da      	lsrs	r2, r3, #3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	3208      	adds	r2, #8
 80030a6:	69b9      	ldr	r1, [r7, #24]
 80030a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	005b      	lsls	r3, r3, #1
 80030b6:	2203      	movs	r2, #3
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	43db      	mvns	r3, r3
 80030be:	69ba      	ldr	r2, [r7, #24]
 80030c0:	4013      	ands	r3, r2
 80030c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f003 0203 	and.w	r2, r3, #3
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	fa02 f303 	lsl.w	r3, r2, r3
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	f000 80b4 	beq.w	8003256 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030ee:	2300      	movs	r3, #0
 80030f0:	60fb      	str	r3, [r7, #12]
 80030f2:	4b60      	ldr	r3, [pc, #384]	@ (8003274 <HAL_GPIO_Init+0x30c>)
 80030f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030f6:	4a5f      	ldr	r2, [pc, #380]	@ (8003274 <HAL_GPIO_Init+0x30c>)
 80030f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80030fe:	4b5d      	ldr	r3, [pc, #372]	@ (8003274 <HAL_GPIO_Init+0x30c>)
 8003100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003102:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003106:	60fb      	str	r3, [r7, #12]
 8003108:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800310a:	4a5b      	ldr	r2, [pc, #364]	@ (8003278 <HAL_GPIO_Init+0x310>)
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	089b      	lsrs	r3, r3, #2
 8003110:	3302      	adds	r3, #2
 8003112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003116:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	f003 0303 	and.w	r3, r3, #3
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	220f      	movs	r2, #15
 8003122:	fa02 f303 	lsl.w	r3, r2, r3
 8003126:	43db      	mvns	r3, r3
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	4013      	ands	r3, r2
 800312c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a52      	ldr	r2, [pc, #328]	@ (800327c <HAL_GPIO_Init+0x314>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d02b      	beq.n	800318e <HAL_GPIO_Init+0x226>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a51      	ldr	r2, [pc, #324]	@ (8003280 <HAL_GPIO_Init+0x318>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d025      	beq.n	800318a <HAL_GPIO_Init+0x222>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a50      	ldr	r2, [pc, #320]	@ (8003284 <HAL_GPIO_Init+0x31c>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d01f      	beq.n	8003186 <HAL_GPIO_Init+0x21e>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a4f      	ldr	r2, [pc, #316]	@ (8003288 <HAL_GPIO_Init+0x320>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d019      	beq.n	8003182 <HAL_GPIO_Init+0x21a>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a4e      	ldr	r2, [pc, #312]	@ (800328c <HAL_GPIO_Init+0x324>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d013      	beq.n	800317e <HAL_GPIO_Init+0x216>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a4d      	ldr	r2, [pc, #308]	@ (8003290 <HAL_GPIO_Init+0x328>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d00d      	beq.n	800317a <HAL_GPIO_Init+0x212>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a4c      	ldr	r2, [pc, #304]	@ (8003294 <HAL_GPIO_Init+0x32c>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d007      	beq.n	8003176 <HAL_GPIO_Init+0x20e>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a4b      	ldr	r2, [pc, #300]	@ (8003298 <HAL_GPIO_Init+0x330>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d101      	bne.n	8003172 <HAL_GPIO_Init+0x20a>
 800316e:	2307      	movs	r3, #7
 8003170:	e00e      	b.n	8003190 <HAL_GPIO_Init+0x228>
 8003172:	2308      	movs	r3, #8
 8003174:	e00c      	b.n	8003190 <HAL_GPIO_Init+0x228>
 8003176:	2306      	movs	r3, #6
 8003178:	e00a      	b.n	8003190 <HAL_GPIO_Init+0x228>
 800317a:	2305      	movs	r3, #5
 800317c:	e008      	b.n	8003190 <HAL_GPIO_Init+0x228>
 800317e:	2304      	movs	r3, #4
 8003180:	e006      	b.n	8003190 <HAL_GPIO_Init+0x228>
 8003182:	2303      	movs	r3, #3
 8003184:	e004      	b.n	8003190 <HAL_GPIO_Init+0x228>
 8003186:	2302      	movs	r3, #2
 8003188:	e002      	b.n	8003190 <HAL_GPIO_Init+0x228>
 800318a:	2301      	movs	r3, #1
 800318c:	e000      	b.n	8003190 <HAL_GPIO_Init+0x228>
 800318e:	2300      	movs	r3, #0
 8003190:	69fa      	ldr	r2, [r7, #28]
 8003192:	f002 0203 	and.w	r2, r2, #3
 8003196:	0092      	lsls	r2, r2, #2
 8003198:	4093      	lsls	r3, r2
 800319a:	69ba      	ldr	r2, [r7, #24]
 800319c:	4313      	orrs	r3, r2
 800319e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031a0:	4935      	ldr	r1, [pc, #212]	@ (8003278 <HAL_GPIO_Init+0x310>)
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	089b      	lsrs	r3, r3, #2
 80031a6:	3302      	adds	r3, #2
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031ae:	4b3b      	ldr	r3, [pc, #236]	@ (800329c <HAL_GPIO_Init+0x334>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	43db      	mvns	r3, r3
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	4013      	ands	r3, r2
 80031bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d003      	beq.n	80031d2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031d2:	4a32      	ldr	r2, [pc, #200]	@ (800329c <HAL_GPIO_Init+0x334>)
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031d8:	4b30      	ldr	r3, [pc, #192]	@ (800329c <HAL_GPIO_Init+0x334>)
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	43db      	mvns	r3, r3
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	4013      	ands	r3, r2
 80031e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d003      	beq.n	80031fc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031fc:	4a27      	ldr	r2, [pc, #156]	@ (800329c <HAL_GPIO_Init+0x334>)
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003202:	4b26      	ldr	r3, [pc, #152]	@ (800329c <HAL_GPIO_Init+0x334>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	43db      	mvns	r3, r3
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	4013      	ands	r3, r2
 8003210:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d003      	beq.n	8003226 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	4313      	orrs	r3, r2
 8003224:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003226:	4a1d      	ldr	r2, [pc, #116]	@ (800329c <HAL_GPIO_Init+0x334>)
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800322c:	4b1b      	ldr	r3, [pc, #108]	@ (800329c <HAL_GPIO_Init+0x334>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	43db      	mvns	r3, r3
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	4013      	ands	r3, r2
 800323a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d003      	beq.n	8003250 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	4313      	orrs	r3, r2
 800324e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003250:	4a12      	ldr	r2, [pc, #72]	@ (800329c <HAL_GPIO_Init+0x334>)
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	3301      	adds	r3, #1
 800325a:	61fb      	str	r3, [r7, #28]
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	2b0f      	cmp	r3, #15
 8003260:	f67f ae90 	bls.w	8002f84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003264:	bf00      	nop
 8003266:	bf00      	nop
 8003268:	3724      	adds	r7, #36	@ 0x24
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	40023800 	.word	0x40023800
 8003278:	40013800 	.word	0x40013800
 800327c:	40020000 	.word	0x40020000
 8003280:	40020400 	.word	0x40020400
 8003284:	40020800 	.word	0x40020800
 8003288:	40020c00 	.word	0x40020c00
 800328c:	40021000 	.word	0x40021000
 8003290:	40021400 	.word	0x40021400
 8003294:	40021800 	.word	0x40021800
 8003298:	40021c00 	.word	0x40021c00
 800329c:	40013c00 	.word	0x40013c00

080032a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b085      	sub	sp, #20
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	460b      	mov	r3, r1
 80032aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	691a      	ldr	r2, [r3, #16]
 80032b0:	887b      	ldrh	r3, [r7, #2]
 80032b2:	4013      	ands	r3, r2
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d002      	beq.n	80032be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80032b8:	2301      	movs	r3, #1
 80032ba:	73fb      	strb	r3, [r7, #15]
 80032bc:	e001      	b.n	80032c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80032be:	2300      	movs	r3, #0
 80032c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80032c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3714      	adds	r7, #20
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	460b      	mov	r3, r1
 80032da:	807b      	strh	r3, [r7, #2]
 80032dc:	4613      	mov	r3, r2
 80032de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032e0:	787b      	ldrb	r3, [r7, #1]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d003      	beq.n	80032ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032e6:	887a      	ldrh	r2, [r7, #2]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032ec:	e003      	b.n	80032f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032ee:	887b      	ldrh	r3, [r7, #2]
 80032f0:	041a      	lsls	r2, r3, #16
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	619a      	str	r2, [r3, #24]
}
 80032f6:	bf00      	nop
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr

08003302 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003302:	b480      	push	{r7}
 8003304:	b085      	sub	sp, #20
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
 800330a:	460b      	mov	r3, r1
 800330c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003314:	887a      	ldrh	r2, [r7, #2]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	4013      	ands	r3, r2
 800331a:	041a      	lsls	r2, r3, #16
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	43d9      	mvns	r1, r3
 8003320:	887b      	ldrh	r3, [r7, #2]
 8003322:	400b      	ands	r3, r1
 8003324:	431a      	orrs	r2, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	619a      	str	r2, [r3, #24]
}
 800332a:	bf00      	nop
 800332c:	3714      	adds	r7, #20
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
	...

08003338 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d101      	bne.n	800334a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e12b      	b.n	80035a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	d106      	bne.n	8003364 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f7fe fb26 	bl	80019b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2224      	movs	r2, #36	@ 0x24
 8003368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f022 0201 	bic.w	r2, r2, #1
 800337a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800338a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800339a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800339c:	f001 f8aa 	bl	80044f4 <HAL_RCC_GetPCLK1Freq>
 80033a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	4a81      	ldr	r2, [pc, #516]	@ (80035ac <HAL_I2C_Init+0x274>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d807      	bhi.n	80033bc <HAL_I2C_Init+0x84>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	4a80      	ldr	r2, [pc, #512]	@ (80035b0 <HAL_I2C_Init+0x278>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	bf94      	ite	ls
 80033b4:	2301      	movls	r3, #1
 80033b6:	2300      	movhi	r3, #0
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	e006      	b.n	80033ca <HAL_I2C_Init+0x92>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	4a7d      	ldr	r2, [pc, #500]	@ (80035b4 <HAL_I2C_Init+0x27c>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	bf94      	ite	ls
 80033c4:	2301      	movls	r3, #1
 80033c6:	2300      	movhi	r3, #0
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d001      	beq.n	80033d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e0e7      	b.n	80035a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	4a78      	ldr	r2, [pc, #480]	@ (80035b8 <HAL_I2C_Init+0x280>)
 80033d6:	fba2 2303 	umull	r2, r3, r2, r3
 80033da:	0c9b      	lsrs	r3, r3, #18
 80033dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68ba      	ldr	r2, [r7, #8]
 80033ee:	430a      	orrs	r2, r1
 80033f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	6a1b      	ldr	r3, [r3, #32]
 80033f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	4a6a      	ldr	r2, [pc, #424]	@ (80035ac <HAL_I2C_Init+0x274>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d802      	bhi.n	800340c <HAL_I2C_Init+0xd4>
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	3301      	adds	r3, #1
 800340a:	e009      	b.n	8003420 <HAL_I2C_Init+0xe8>
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003412:	fb02 f303 	mul.w	r3, r2, r3
 8003416:	4a69      	ldr	r2, [pc, #420]	@ (80035bc <HAL_I2C_Init+0x284>)
 8003418:	fba2 2303 	umull	r2, r3, r2, r3
 800341c:	099b      	lsrs	r3, r3, #6
 800341e:	3301      	adds	r3, #1
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	6812      	ldr	r2, [r2, #0]
 8003424:	430b      	orrs	r3, r1
 8003426:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003432:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	495c      	ldr	r1, [pc, #368]	@ (80035ac <HAL_I2C_Init+0x274>)
 800343c:	428b      	cmp	r3, r1
 800343e:	d819      	bhi.n	8003474 <HAL_I2C_Init+0x13c>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	1e59      	subs	r1, r3, #1
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	fbb1 f3f3 	udiv	r3, r1, r3
 800344e:	1c59      	adds	r1, r3, #1
 8003450:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003454:	400b      	ands	r3, r1
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00a      	beq.n	8003470 <HAL_I2C_Init+0x138>
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	1e59      	subs	r1, r3, #1
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	fbb1 f3f3 	udiv	r3, r1, r3
 8003468:	3301      	adds	r3, #1
 800346a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800346e:	e051      	b.n	8003514 <HAL_I2C_Init+0x1dc>
 8003470:	2304      	movs	r3, #4
 8003472:	e04f      	b.n	8003514 <HAL_I2C_Init+0x1dc>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d111      	bne.n	80034a0 <HAL_I2C_Init+0x168>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	1e58      	subs	r0, r3, #1
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6859      	ldr	r1, [r3, #4]
 8003484:	460b      	mov	r3, r1
 8003486:	005b      	lsls	r3, r3, #1
 8003488:	440b      	add	r3, r1
 800348a:	fbb0 f3f3 	udiv	r3, r0, r3
 800348e:	3301      	adds	r3, #1
 8003490:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003494:	2b00      	cmp	r3, #0
 8003496:	bf0c      	ite	eq
 8003498:	2301      	moveq	r3, #1
 800349a:	2300      	movne	r3, #0
 800349c:	b2db      	uxtb	r3, r3
 800349e:	e012      	b.n	80034c6 <HAL_I2C_Init+0x18e>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	1e58      	subs	r0, r3, #1
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6859      	ldr	r1, [r3, #4]
 80034a8:	460b      	mov	r3, r1
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	440b      	add	r3, r1
 80034ae:	0099      	lsls	r1, r3, #2
 80034b0:	440b      	add	r3, r1
 80034b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80034b6:	3301      	adds	r3, #1
 80034b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034bc:	2b00      	cmp	r3, #0
 80034be:	bf0c      	ite	eq
 80034c0:	2301      	moveq	r3, #1
 80034c2:	2300      	movne	r3, #0
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d001      	beq.n	80034ce <HAL_I2C_Init+0x196>
 80034ca:	2301      	movs	r3, #1
 80034cc:	e022      	b.n	8003514 <HAL_I2C_Init+0x1dc>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10e      	bne.n	80034f4 <HAL_I2C_Init+0x1bc>
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	1e58      	subs	r0, r3, #1
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6859      	ldr	r1, [r3, #4]
 80034de:	460b      	mov	r3, r1
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	440b      	add	r3, r1
 80034e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80034e8:	3301      	adds	r3, #1
 80034ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034f2:	e00f      	b.n	8003514 <HAL_I2C_Init+0x1dc>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	1e58      	subs	r0, r3, #1
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6859      	ldr	r1, [r3, #4]
 80034fc:	460b      	mov	r3, r1
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	440b      	add	r3, r1
 8003502:	0099      	lsls	r1, r3, #2
 8003504:	440b      	add	r3, r1
 8003506:	fbb0 f3f3 	udiv	r3, r0, r3
 800350a:	3301      	adds	r3, #1
 800350c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003510:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003514:	6879      	ldr	r1, [r7, #4]
 8003516:	6809      	ldr	r1, [r1, #0]
 8003518:	4313      	orrs	r3, r2
 800351a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	69da      	ldr	r2, [r3, #28]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	431a      	orrs	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	430a      	orrs	r2, r1
 8003536:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003542:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	6911      	ldr	r1, [r2, #16]
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	68d2      	ldr	r2, [r2, #12]
 800354e:	4311      	orrs	r1, r2
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	6812      	ldr	r2, [r2, #0]
 8003554:	430b      	orrs	r3, r1
 8003556:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	695a      	ldr	r2, [r3, #20]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	431a      	orrs	r2, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	430a      	orrs	r2, r1
 8003572:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f042 0201 	orr.w	r2, r2, #1
 8003582:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2220      	movs	r2, #32
 800358e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	000186a0 	.word	0x000186a0
 80035b0:	001e847f 	.word	0x001e847f
 80035b4:	003d08ff 	.word	0x003d08ff
 80035b8:	431bde83 	.word	0x431bde83
 80035bc:	10624dd3 	.word	0x10624dd3

080035c0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b088      	sub	sp, #32
 80035c4:	af02      	add	r7, sp, #8
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	4608      	mov	r0, r1
 80035ca:	4611      	mov	r1, r2
 80035cc:	461a      	mov	r2, r3
 80035ce:	4603      	mov	r3, r0
 80035d0:	817b      	strh	r3, [r7, #10]
 80035d2:	460b      	mov	r3, r1
 80035d4:	813b      	strh	r3, [r7, #8]
 80035d6:	4613      	mov	r3, r2
 80035d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035da:	f7fe fced 	bl	8001fb8 <HAL_GetTick>
 80035de:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	2b20      	cmp	r3, #32
 80035ea:	f040 80d9 	bne.w	80037a0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	9300      	str	r3, [sp, #0]
 80035f2:	2319      	movs	r3, #25
 80035f4:	2201      	movs	r2, #1
 80035f6:	496d      	ldr	r1, [pc, #436]	@ (80037ac <HAL_I2C_Mem_Write+0x1ec>)
 80035f8:	68f8      	ldr	r0, [r7, #12]
 80035fa:	f000 f971 	bl	80038e0 <I2C_WaitOnFlagUntilTimeout>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d001      	beq.n	8003608 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003604:	2302      	movs	r3, #2
 8003606:	e0cc      	b.n	80037a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800360e:	2b01      	cmp	r3, #1
 8003610:	d101      	bne.n	8003616 <HAL_I2C_Mem_Write+0x56>
 8003612:	2302      	movs	r3, #2
 8003614:	e0c5      	b.n	80037a2 <HAL_I2C_Mem_Write+0x1e2>
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2201      	movs	r2, #1
 800361a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0301 	and.w	r3, r3, #1
 8003628:	2b01      	cmp	r3, #1
 800362a:	d007      	beq.n	800363c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f042 0201 	orr.w	r2, r2, #1
 800363a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800364a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2221      	movs	r2, #33	@ 0x21
 8003650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2240      	movs	r2, #64	@ 0x40
 8003658:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6a3a      	ldr	r2, [r7, #32]
 8003666:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800366c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003672:	b29a      	uxth	r2, r3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	4a4d      	ldr	r2, [pc, #308]	@ (80037b0 <HAL_I2C_Mem_Write+0x1f0>)
 800367c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800367e:	88f8      	ldrh	r0, [r7, #6]
 8003680:	893a      	ldrh	r2, [r7, #8]
 8003682:	8979      	ldrh	r1, [r7, #10]
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	9301      	str	r3, [sp, #4]
 8003688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800368a:	9300      	str	r3, [sp, #0]
 800368c:	4603      	mov	r3, r0
 800368e:	68f8      	ldr	r0, [r7, #12]
 8003690:	f000 f890 	bl	80037b4 <I2C_RequestMemoryWrite>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d052      	beq.n	8003740 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e081      	b.n	80037a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	f000 fa36 	bl	8003b14 <I2C_WaitOnTXEFlagUntilTimeout>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d00d      	beq.n	80036ca <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b2:	2b04      	cmp	r3, #4
 80036b4:	d107      	bne.n	80036c6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e06b      	b.n	80037a2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ce:	781a      	ldrb	r2, [r3, #0]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036da:	1c5a      	adds	r2, r3, #1
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036e4:	3b01      	subs	r3, #1
 80036e6:	b29a      	uxth	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	3b01      	subs	r3, #1
 80036f4:	b29a      	uxth	r2, r3
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	695b      	ldr	r3, [r3, #20]
 8003700:	f003 0304 	and.w	r3, r3, #4
 8003704:	2b04      	cmp	r3, #4
 8003706:	d11b      	bne.n	8003740 <HAL_I2C_Mem_Write+0x180>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800370c:	2b00      	cmp	r3, #0
 800370e:	d017      	beq.n	8003740 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003714:	781a      	ldrb	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003720:	1c5a      	adds	r2, r3, #1
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800372a:	3b01      	subs	r3, #1
 800372c:	b29a      	uxth	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003736:	b29b      	uxth	r3, r3
 8003738:	3b01      	subs	r3, #1
 800373a:	b29a      	uxth	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003744:	2b00      	cmp	r3, #0
 8003746:	d1aa      	bne.n	800369e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003748:	697a      	ldr	r2, [r7, #20]
 800374a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800374c:	68f8      	ldr	r0, [r7, #12]
 800374e:	f000 fa29 	bl	8003ba4 <I2C_WaitOnBTFFlagUntilTimeout>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00d      	beq.n	8003774 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375c:	2b04      	cmp	r3, #4
 800375e:	d107      	bne.n	8003770 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800376e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e016      	b.n	80037a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003782:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2220      	movs	r2, #32
 8003788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800379c:	2300      	movs	r3, #0
 800379e:	e000      	b.n	80037a2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80037a0:	2302      	movs	r3, #2
  }
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3718      	adds	r7, #24
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	00100002 	.word	0x00100002
 80037b0:	ffff0000 	.word	0xffff0000

080037b4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b088      	sub	sp, #32
 80037b8:	af02      	add	r7, sp, #8
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	4608      	mov	r0, r1
 80037be:	4611      	mov	r1, r2
 80037c0:	461a      	mov	r2, r3
 80037c2:	4603      	mov	r3, r0
 80037c4:	817b      	strh	r3, [r7, #10]
 80037c6:	460b      	mov	r3, r1
 80037c8:	813b      	strh	r3, [r7, #8]
 80037ca:	4613      	mov	r3, r2
 80037cc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	6a3b      	ldr	r3, [r7, #32]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80037ea:	68f8      	ldr	r0, [r7, #12]
 80037ec:	f000 f878 	bl	80038e0 <I2C_WaitOnFlagUntilTimeout>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00d      	beq.n	8003812 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003800:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003804:	d103      	bne.n	800380e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800380c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e05f      	b.n	80038d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003812:	897b      	ldrh	r3, [r7, #10]
 8003814:	b2db      	uxtb	r3, r3
 8003816:	461a      	mov	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003820:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003824:	6a3a      	ldr	r2, [r7, #32]
 8003826:	492d      	ldr	r1, [pc, #180]	@ (80038dc <I2C_RequestMemoryWrite+0x128>)
 8003828:	68f8      	ldr	r0, [r7, #12]
 800382a:	f000 f8d3 	bl	80039d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d001      	beq.n	8003838 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e04c      	b.n	80038d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003838:	2300      	movs	r3, #0
 800383a:	617b      	str	r3, [r7, #20]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	617b      	str	r3, [r7, #20]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	617b      	str	r3, [r7, #20]
 800384c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800384e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003850:	6a39      	ldr	r1, [r7, #32]
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f000 f95e 	bl	8003b14 <I2C_WaitOnTXEFlagUntilTimeout>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00d      	beq.n	800387a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003862:	2b04      	cmp	r3, #4
 8003864:	d107      	bne.n	8003876 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003874:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e02b      	b.n	80038d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800387a:	88fb      	ldrh	r3, [r7, #6]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d105      	bne.n	800388c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003880:	893b      	ldrh	r3, [r7, #8]
 8003882:	b2da      	uxtb	r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	611a      	str	r2, [r3, #16]
 800388a:	e021      	b.n	80038d0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800388c:	893b      	ldrh	r3, [r7, #8]
 800388e:	0a1b      	lsrs	r3, r3, #8
 8003890:	b29b      	uxth	r3, r3
 8003892:	b2da      	uxtb	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800389a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800389c:	6a39      	ldr	r1, [r7, #32]
 800389e:	68f8      	ldr	r0, [r7, #12]
 80038a0:	f000 f938 	bl	8003b14 <I2C_WaitOnTXEFlagUntilTimeout>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00d      	beq.n	80038c6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ae:	2b04      	cmp	r3, #4
 80038b0:	d107      	bne.n	80038c2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e005      	b.n	80038d2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038c6:	893b      	ldrh	r3, [r7, #8]
 80038c8:	b2da      	uxtb	r2, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3718      	adds	r7, #24
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	00010002 	.word	0x00010002

080038e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	603b      	str	r3, [r7, #0]
 80038ec:	4613      	mov	r3, r2
 80038ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038f0:	e048      	b.n	8003984 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f8:	d044      	beq.n	8003984 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038fa:	f7fe fb5d 	bl	8001fb8 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	683a      	ldr	r2, [r7, #0]
 8003906:	429a      	cmp	r2, r3
 8003908:	d302      	bcc.n	8003910 <I2C_WaitOnFlagUntilTimeout+0x30>
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d139      	bne.n	8003984 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	0c1b      	lsrs	r3, r3, #16
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b01      	cmp	r3, #1
 8003918:	d10d      	bne.n	8003936 <I2C_WaitOnFlagUntilTimeout+0x56>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	695b      	ldr	r3, [r3, #20]
 8003920:	43da      	mvns	r2, r3
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	4013      	ands	r3, r2
 8003926:	b29b      	uxth	r3, r3
 8003928:	2b00      	cmp	r3, #0
 800392a:	bf0c      	ite	eq
 800392c:	2301      	moveq	r3, #1
 800392e:	2300      	movne	r3, #0
 8003930:	b2db      	uxtb	r3, r3
 8003932:	461a      	mov	r2, r3
 8003934:	e00c      	b.n	8003950 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	699b      	ldr	r3, [r3, #24]
 800393c:	43da      	mvns	r2, r3
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	4013      	ands	r3, r2
 8003942:	b29b      	uxth	r3, r3
 8003944:	2b00      	cmp	r3, #0
 8003946:	bf0c      	ite	eq
 8003948:	2301      	moveq	r3, #1
 800394a:	2300      	movne	r3, #0
 800394c:	b2db      	uxtb	r3, r3
 800394e:	461a      	mov	r2, r3
 8003950:	79fb      	ldrb	r3, [r7, #7]
 8003952:	429a      	cmp	r2, r3
 8003954:	d116      	bne.n	8003984 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2220      	movs	r2, #32
 8003960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003970:	f043 0220 	orr.w	r2, r3, #32
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e023      	b.n	80039cc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	0c1b      	lsrs	r3, r3, #16
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b01      	cmp	r3, #1
 800398c:	d10d      	bne.n	80039aa <I2C_WaitOnFlagUntilTimeout+0xca>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	695b      	ldr	r3, [r3, #20]
 8003994:	43da      	mvns	r2, r3
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	4013      	ands	r3, r2
 800399a:	b29b      	uxth	r3, r3
 800399c:	2b00      	cmp	r3, #0
 800399e:	bf0c      	ite	eq
 80039a0:	2301      	moveq	r3, #1
 80039a2:	2300      	movne	r3, #0
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	461a      	mov	r2, r3
 80039a8:	e00c      	b.n	80039c4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	43da      	mvns	r2, r3
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	4013      	ands	r3, r2
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	bf0c      	ite	eq
 80039bc:	2301      	moveq	r3, #1
 80039be:	2300      	movne	r3, #0
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	461a      	mov	r2, r3
 80039c4:	79fb      	ldrb	r3, [r7, #7]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d093      	beq.n	80038f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3710      	adds	r7, #16
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
 80039e0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039e2:	e071      	b.n	8003ac8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039f2:	d123      	bne.n	8003a3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a02:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003a0c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2220      	movs	r2, #32
 8003a18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a28:	f043 0204 	orr.w	r2, r3, #4
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e067      	b.n	8003b0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a42:	d041      	beq.n	8003ac8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a44:	f7fe fab8 	bl	8001fb8 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d302      	bcc.n	8003a5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d136      	bne.n	8003ac8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	0c1b      	lsrs	r3, r3, #16
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d10c      	bne.n	8003a7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	43da      	mvns	r2, r3
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	4013      	ands	r3, r2
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	bf14      	ite	ne
 8003a76:	2301      	movne	r3, #1
 8003a78:	2300      	moveq	r3, #0
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	e00b      	b.n	8003a96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	43da      	mvns	r2, r3
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	4013      	ands	r3, r2
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	bf14      	ite	ne
 8003a90:	2301      	movne	r3, #1
 8003a92:	2300      	moveq	r3, #0
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d016      	beq.n	8003ac8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2220      	movs	r2, #32
 8003aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab4:	f043 0220 	orr.w	r2, r3, #32
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e021      	b.n	8003b0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	0c1b      	lsrs	r3, r3, #16
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d10c      	bne.n	8003aec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	695b      	ldr	r3, [r3, #20]
 8003ad8:	43da      	mvns	r2, r3
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	4013      	ands	r3, r2
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	bf14      	ite	ne
 8003ae4:	2301      	movne	r3, #1
 8003ae6:	2300      	moveq	r3, #0
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	e00b      	b.n	8003b04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	43da      	mvns	r2, r3
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	4013      	ands	r3, r2
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	bf14      	ite	ne
 8003afe:	2301      	movne	r3, #1
 8003b00:	2300      	moveq	r3, #0
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f47f af6d 	bne.w	80039e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b20:	e034      	b.n	8003b8c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b22:	68f8      	ldr	r0, [r7, #12]
 8003b24:	f000 f886 	bl	8003c34 <I2C_IsAcknowledgeFailed>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d001      	beq.n	8003b32 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e034      	b.n	8003b9c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b38:	d028      	beq.n	8003b8c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b3a:	f7fe fa3d 	bl	8001fb8 <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	68ba      	ldr	r2, [r7, #8]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d302      	bcc.n	8003b50 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d11d      	bne.n	8003b8c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b5a:	2b80      	cmp	r3, #128	@ 0x80
 8003b5c:	d016      	beq.n	8003b8c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2220      	movs	r2, #32
 8003b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b78:	f043 0220 	orr.w	r2, r3, #32
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e007      	b.n	8003b9c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b96:	2b80      	cmp	r3, #128	@ 0x80
 8003b98:	d1c3      	bne.n	8003b22 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3710      	adds	r7, #16
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bb0:	e034      	b.n	8003c1c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003bb2:	68f8      	ldr	r0, [r7, #12]
 8003bb4:	f000 f83e 	bl	8003c34 <I2C_IsAcknowledgeFailed>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e034      	b.n	8003c2c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc8:	d028      	beq.n	8003c1c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bca:	f7fe f9f5 	bl	8001fb8 <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	68ba      	ldr	r2, [r7, #8]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d302      	bcc.n	8003be0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d11d      	bne.n	8003c1c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	f003 0304 	and.w	r3, r3, #4
 8003bea:	2b04      	cmp	r3, #4
 8003bec:	d016      	beq.n	8003c1c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2220      	movs	r2, #32
 8003bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c08:	f043 0220 	orr.w	r2, r3, #32
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e007      	b.n	8003c2c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	f003 0304 	and.w	r3, r3, #4
 8003c26:	2b04      	cmp	r3, #4
 8003c28:	d1c3      	bne.n	8003bb2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3710      	adds	r7, #16
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c4a:	d11b      	bne.n	8003c84 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003c54:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2220      	movs	r2, #32
 8003c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c70:	f043 0204 	orr.w	r2, r3, #4
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e000      	b.n	8003c86 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	370c      	adds	r7, #12
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
	...

08003c94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b086      	sub	sp, #24
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e267      	b.n	8004176 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d075      	beq.n	8003d9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003cb2:	4b88      	ldr	r3, [pc, #544]	@ (8003ed4 <HAL_RCC_OscConfig+0x240>)
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f003 030c 	and.w	r3, r3, #12
 8003cba:	2b04      	cmp	r3, #4
 8003cbc:	d00c      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cbe:	4b85      	ldr	r3, [pc, #532]	@ (8003ed4 <HAL_RCC_OscConfig+0x240>)
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003cc6:	2b08      	cmp	r3, #8
 8003cc8:	d112      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cca:	4b82      	ldr	r3, [pc, #520]	@ (8003ed4 <HAL_RCC_OscConfig+0x240>)
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cd2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003cd6:	d10b      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cd8:	4b7e      	ldr	r3, [pc, #504]	@ (8003ed4 <HAL_RCC_OscConfig+0x240>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d05b      	beq.n	8003d9c <HAL_RCC_OscConfig+0x108>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d157      	bne.n	8003d9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e242      	b.n	8004176 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cf8:	d106      	bne.n	8003d08 <HAL_RCC_OscConfig+0x74>
 8003cfa:	4b76      	ldr	r3, [pc, #472]	@ (8003ed4 <HAL_RCC_OscConfig+0x240>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a75      	ldr	r2, [pc, #468]	@ (8003ed4 <HAL_RCC_OscConfig+0x240>)
 8003d00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d04:	6013      	str	r3, [r2, #0]
 8003d06:	e01d      	b.n	8003d44 <HAL_RCC_OscConfig+0xb0>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d10:	d10c      	bne.n	8003d2c <HAL_RCC_OscConfig+0x98>
 8003d12:	4b70      	ldr	r3, [pc, #448]	@ (8003ed4 <HAL_RCC_OscConfig+0x240>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a6f      	ldr	r2, [pc, #444]	@ (8003ed4 <HAL_RCC_OscConfig+0x240>)
 8003d18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d1c:	6013      	str	r3, [r2, #0]
 8003d1e:	4b6d      	ldr	r3, [pc, #436]	@ (8003ed4 <HAL_RCC_OscConfig+0x240>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a6c      	ldr	r2, [pc, #432]	@ (8003ed4 <HAL_RCC_OscConfig+0x240>)
 8003d24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d28:	6013      	str	r3, [r2, #0]
 8003d2a:	e00b      	b.n	8003d44 <HAL_RCC_OscConfig+0xb0>
 8003d2c:	4b69      	ldr	r3, [pc, #420]	@ (8003ed4 <HAL_RCC_OscConfig+0x240>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a68      	ldr	r2, [pc, #416]	@ (8003ed4 <HAL_RCC_OscConfig+0x240>)
 8003d32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d36:	6013      	str	r3, [r2, #0]
 8003d38:	4b66      	ldr	r3, [pc, #408]	@ (8003ed4 <HAL_RCC_OscConfig+0x240>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a65      	ldr	r2, [pc, #404]	@ (8003ed4 <HAL_RCC_OscConfig+0x240>)
 8003d3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d013      	beq.n	8003d74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d4c:	f7fe f934 	bl	8001fb8 <HAL_GetTick>
 8003d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d52:	e008      	b.n	8003d66 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d54:	f7fe f930 	bl	8001fb8 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b64      	cmp	r3, #100	@ 0x64
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e207      	b.n	8004176 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d66:	4b5b      	ldr	r3, [pc, #364]	@ (8003ed4 <HAL_RCC_OscConfig+0x240>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d0f0      	beq.n	8003d54 <HAL_RCC_OscConfig+0xc0>
 8003d72:	e014      	b.n	8003d9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d74:	f7fe f920 	bl	8001fb8 <HAL_GetTick>
 8003d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d7a:	e008      	b.n	8003d8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d7c:	f7fe f91c 	bl	8001fb8 <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	2b64      	cmp	r3, #100	@ 0x64
 8003d88:	d901      	bls.n	8003d8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e1f3      	b.n	8004176 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d8e:	4b51      	ldr	r3, [pc, #324]	@ (8003ed4 <HAL_RCC_OscConfig+0x240>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d1f0      	bne.n	8003d7c <HAL_RCC_OscConfig+0xe8>
 8003d9a:	e000      	b.n	8003d9e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d063      	beq.n	8003e72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003daa:	4b4a      	ldr	r3, [pc, #296]	@ (8003ed4 <HAL_RCC_OscConfig+0x240>)
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f003 030c 	and.w	r3, r3, #12
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00b      	beq.n	8003dce <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003db6:	4b47      	ldr	r3, [pc, #284]	@ (8003ed4 <HAL_RCC_OscConfig+0x240>)
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003dbe:	2b08      	cmp	r3, #8
 8003dc0:	d11c      	bne.n	8003dfc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dc2:	4b44      	ldr	r3, [pc, #272]	@ (8003ed4 <HAL_RCC_OscConfig+0x240>)
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d116      	bne.n	8003dfc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dce:	4b41      	ldr	r3, [pc, #260]	@ (8003ed4 <HAL_RCC_OscConfig+0x240>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d005      	beq.n	8003de6 <HAL_RCC_OscConfig+0x152>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d001      	beq.n	8003de6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e1c7      	b.n	8004176 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003de6:	4b3b      	ldr	r3, [pc, #236]	@ (8003ed4 <HAL_RCC_OscConfig+0x240>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	00db      	lsls	r3, r3, #3
 8003df4:	4937      	ldr	r1, [pc, #220]	@ (8003ed4 <HAL_RCC_OscConfig+0x240>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dfa:	e03a      	b.n	8003e72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d020      	beq.n	8003e46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e04:	4b34      	ldr	r3, [pc, #208]	@ (8003ed8 <HAL_RCC_OscConfig+0x244>)
 8003e06:	2201      	movs	r2, #1
 8003e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e0a:	f7fe f8d5 	bl	8001fb8 <HAL_GetTick>
 8003e0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e10:	e008      	b.n	8003e24 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e12:	f7fe f8d1 	bl	8001fb8 <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d901      	bls.n	8003e24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e1a8      	b.n	8004176 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e24:	4b2b      	ldr	r3, [pc, #172]	@ (8003ed4 <HAL_RCC_OscConfig+0x240>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0302 	and.w	r3, r3, #2
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d0f0      	beq.n	8003e12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e30:	4b28      	ldr	r3, [pc, #160]	@ (8003ed4 <HAL_RCC_OscConfig+0x240>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	00db      	lsls	r3, r3, #3
 8003e3e:	4925      	ldr	r1, [pc, #148]	@ (8003ed4 <HAL_RCC_OscConfig+0x240>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	600b      	str	r3, [r1, #0]
 8003e44:	e015      	b.n	8003e72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e46:	4b24      	ldr	r3, [pc, #144]	@ (8003ed8 <HAL_RCC_OscConfig+0x244>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e4c:	f7fe f8b4 	bl	8001fb8 <HAL_GetTick>
 8003e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e52:	e008      	b.n	8003e66 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e54:	f7fe f8b0 	bl	8001fb8 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e187      	b.n	8004176 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e66:	4b1b      	ldr	r3, [pc, #108]	@ (8003ed4 <HAL_RCC_OscConfig+0x240>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1f0      	bne.n	8003e54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0308 	and.w	r3, r3, #8
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d036      	beq.n	8003eec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d016      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e86:	4b15      	ldr	r3, [pc, #84]	@ (8003edc <HAL_RCC_OscConfig+0x248>)
 8003e88:	2201      	movs	r2, #1
 8003e8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e8c:	f7fe f894 	bl	8001fb8 <HAL_GetTick>
 8003e90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e92:	e008      	b.n	8003ea6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e94:	f7fe f890 	bl	8001fb8 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d901      	bls.n	8003ea6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e167      	b.n	8004176 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ea6:	4b0b      	ldr	r3, [pc, #44]	@ (8003ed4 <HAL_RCC_OscConfig+0x240>)
 8003ea8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d0f0      	beq.n	8003e94 <HAL_RCC_OscConfig+0x200>
 8003eb2:	e01b      	b.n	8003eec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003eb4:	4b09      	ldr	r3, [pc, #36]	@ (8003edc <HAL_RCC_OscConfig+0x248>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eba:	f7fe f87d 	bl	8001fb8 <HAL_GetTick>
 8003ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ec0:	e00e      	b.n	8003ee0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ec2:	f7fe f879 	bl	8001fb8 <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d907      	bls.n	8003ee0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e150      	b.n	8004176 <HAL_RCC_OscConfig+0x4e2>
 8003ed4:	40023800 	.word	0x40023800
 8003ed8:	42470000 	.word	0x42470000
 8003edc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ee0:	4b88      	ldr	r3, [pc, #544]	@ (8004104 <HAL_RCC_OscConfig+0x470>)
 8003ee2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ee4:	f003 0302 	and.w	r3, r3, #2
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d1ea      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0304 	and.w	r3, r3, #4
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	f000 8097 	beq.w	8004028 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003efa:	2300      	movs	r3, #0
 8003efc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003efe:	4b81      	ldr	r3, [pc, #516]	@ (8004104 <HAL_RCC_OscConfig+0x470>)
 8003f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d10f      	bne.n	8003f2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	60bb      	str	r3, [r7, #8]
 8003f0e:	4b7d      	ldr	r3, [pc, #500]	@ (8004104 <HAL_RCC_OscConfig+0x470>)
 8003f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f12:	4a7c      	ldr	r2, [pc, #496]	@ (8004104 <HAL_RCC_OscConfig+0x470>)
 8003f14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f18:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f1a:	4b7a      	ldr	r3, [pc, #488]	@ (8004104 <HAL_RCC_OscConfig+0x470>)
 8003f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f22:	60bb      	str	r3, [r7, #8]
 8003f24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f26:	2301      	movs	r3, #1
 8003f28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f2a:	4b77      	ldr	r3, [pc, #476]	@ (8004108 <HAL_RCC_OscConfig+0x474>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d118      	bne.n	8003f68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f36:	4b74      	ldr	r3, [pc, #464]	@ (8004108 <HAL_RCC_OscConfig+0x474>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a73      	ldr	r2, [pc, #460]	@ (8004108 <HAL_RCC_OscConfig+0x474>)
 8003f3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f42:	f7fe f839 	bl	8001fb8 <HAL_GetTick>
 8003f46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f48:	e008      	b.n	8003f5c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f4a:	f7fe f835 	bl	8001fb8 <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d901      	bls.n	8003f5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e10c      	b.n	8004176 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f5c:	4b6a      	ldr	r3, [pc, #424]	@ (8004108 <HAL_RCC_OscConfig+0x474>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d0f0      	beq.n	8003f4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d106      	bne.n	8003f7e <HAL_RCC_OscConfig+0x2ea>
 8003f70:	4b64      	ldr	r3, [pc, #400]	@ (8004104 <HAL_RCC_OscConfig+0x470>)
 8003f72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f74:	4a63      	ldr	r2, [pc, #396]	@ (8004104 <HAL_RCC_OscConfig+0x470>)
 8003f76:	f043 0301 	orr.w	r3, r3, #1
 8003f7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f7c:	e01c      	b.n	8003fb8 <HAL_RCC_OscConfig+0x324>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	2b05      	cmp	r3, #5
 8003f84:	d10c      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x30c>
 8003f86:	4b5f      	ldr	r3, [pc, #380]	@ (8004104 <HAL_RCC_OscConfig+0x470>)
 8003f88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f8a:	4a5e      	ldr	r2, [pc, #376]	@ (8004104 <HAL_RCC_OscConfig+0x470>)
 8003f8c:	f043 0304 	orr.w	r3, r3, #4
 8003f90:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f92:	4b5c      	ldr	r3, [pc, #368]	@ (8004104 <HAL_RCC_OscConfig+0x470>)
 8003f94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f96:	4a5b      	ldr	r2, [pc, #364]	@ (8004104 <HAL_RCC_OscConfig+0x470>)
 8003f98:	f043 0301 	orr.w	r3, r3, #1
 8003f9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f9e:	e00b      	b.n	8003fb8 <HAL_RCC_OscConfig+0x324>
 8003fa0:	4b58      	ldr	r3, [pc, #352]	@ (8004104 <HAL_RCC_OscConfig+0x470>)
 8003fa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fa4:	4a57      	ldr	r2, [pc, #348]	@ (8004104 <HAL_RCC_OscConfig+0x470>)
 8003fa6:	f023 0301 	bic.w	r3, r3, #1
 8003faa:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fac:	4b55      	ldr	r3, [pc, #340]	@ (8004104 <HAL_RCC_OscConfig+0x470>)
 8003fae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fb0:	4a54      	ldr	r2, [pc, #336]	@ (8004104 <HAL_RCC_OscConfig+0x470>)
 8003fb2:	f023 0304 	bic.w	r3, r3, #4
 8003fb6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d015      	beq.n	8003fec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fc0:	f7fd fffa 	bl	8001fb8 <HAL_GetTick>
 8003fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fc6:	e00a      	b.n	8003fde <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fc8:	f7fd fff6 	bl	8001fb8 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d901      	bls.n	8003fde <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e0cb      	b.n	8004176 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fde:	4b49      	ldr	r3, [pc, #292]	@ (8004104 <HAL_RCC_OscConfig+0x470>)
 8003fe0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d0ee      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x334>
 8003fea:	e014      	b.n	8004016 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fec:	f7fd ffe4 	bl	8001fb8 <HAL_GetTick>
 8003ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ff2:	e00a      	b.n	800400a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ff4:	f7fd ffe0 	bl	8001fb8 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004002:	4293      	cmp	r3, r2
 8004004:	d901      	bls.n	800400a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e0b5      	b.n	8004176 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800400a:	4b3e      	ldr	r3, [pc, #248]	@ (8004104 <HAL_RCC_OscConfig+0x470>)
 800400c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1ee      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004016:	7dfb      	ldrb	r3, [r7, #23]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d105      	bne.n	8004028 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800401c:	4b39      	ldr	r3, [pc, #228]	@ (8004104 <HAL_RCC_OscConfig+0x470>)
 800401e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004020:	4a38      	ldr	r2, [pc, #224]	@ (8004104 <HAL_RCC_OscConfig+0x470>)
 8004022:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004026:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	2b00      	cmp	r3, #0
 800402e:	f000 80a1 	beq.w	8004174 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004032:	4b34      	ldr	r3, [pc, #208]	@ (8004104 <HAL_RCC_OscConfig+0x470>)
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f003 030c 	and.w	r3, r3, #12
 800403a:	2b08      	cmp	r3, #8
 800403c:	d05c      	beq.n	80040f8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	2b02      	cmp	r3, #2
 8004044:	d141      	bne.n	80040ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004046:	4b31      	ldr	r3, [pc, #196]	@ (800410c <HAL_RCC_OscConfig+0x478>)
 8004048:	2200      	movs	r2, #0
 800404a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800404c:	f7fd ffb4 	bl	8001fb8 <HAL_GetTick>
 8004050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004052:	e008      	b.n	8004066 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004054:	f7fd ffb0 	bl	8001fb8 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	2b02      	cmp	r3, #2
 8004060:	d901      	bls.n	8004066 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e087      	b.n	8004176 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004066:	4b27      	ldr	r3, [pc, #156]	@ (8004104 <HAL_RCC_OscConfig+0x470>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d1f0      	bne.n	8004054 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	69da      	ldr	r2, [r3, #28]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a1b      	ldr	r3, [r3, #32]
 800407a:	431a      	orrs	r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004080:	019b      	lsls	r3, r3, #6
 8004082:	431a      	orrs	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004088:	085b      	lsrs	r3, r3, #1
 800408a:	3b01      	subs	r3, #1
 800408c:	041b      	lsls	r3, r3, #16
 800408e:	431a      	orrs	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004094:	061b      	lsls	r3, r3, #24
 8004096:	491b      	ldr	r1, [pc, #108]	@ (8004104 <HAL_RCC_OscConfig+0x470>)
 8004098:	4313      	orrs	r3, r2
 800409a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800409c:	4b1b      	ldr	r3, [pc, #108]	@ (800410c <HAL_RCC_OscConfig+0x478>)
 800409e:	2201      	movs	r2, #1
 80040a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a2:	f7fd ff89 	bl	8001fb8 <HAL_GetTick>
 80040a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040a8:	e008      	b.n	80040bc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040aa:	f7fd ff85 	bl	8001fb8 <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d901      	bls.n	80040bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e05c      	b.n	8004176 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040bc:	4b11      	ldr	r3, [pc, #68]	@ (8004104 <HAL_RCC_OscConfig+0x470>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d0f0      	beq.n	80040aa <HAL_RCC_OscConfig+0x416>
 80040c8:	e054      	b.n	8004174 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ca:	4b10      	ldr	r3, [pc, #64]	@ (800410c <HAL_RCC_OscConfig+0x478>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d0:	f7fd ff72 	bl	8001fb8 <HAL_GetTick>
 80040d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040d6:	e008      	b.n	80040ea <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040d8:	f7fd ff6e 	bl	8001fb8 <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d901      	bls.n	80040ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e045      	b.n	8004176 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ea:	4b06      	ldr	r3, [pc, #24]	@ (8004104 <HAL_RCC_OscConfig+0x470>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1f0      	bne.n	80040d8 <HAL_RCC_OscConfig+0x444>
 80040f6:	e03d      	b.n	8004174 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d107      	bne.n	8004110 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e038      	b.n	8004176 <HAL_RCC_OscConfig+0x4e2>
 8004104:	40023800 	.word	0x40023800
 8004108:	40007000 	.word	0x40007000
 800410c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004110:	4b1b      	ldr	r3, [pc, #108]	@ (8004180 <HAL_RCC_OscConfig+0x4ec>)
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d028      	beq.n	8004170 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004128:	429a      	cmp	r2, r3
 800412a:	d121      	bne.n	8004170 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004136:	429a      	cmp	r2, r3
 8004138:	d11a      	bne.n	8004170 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004140:	4013      	ands	r3, r2
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004146:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004148:	4293      	cmp	r3, r2
 800414a:	d111      	bne.n	8004170 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004156:	085b      	lsrs	r3, r3, #1
 8004158:	3b01      	subs	r3, #1
 800415a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800415c:	429a      	cmp	r2, r3
 800415e:	d107      	bne.n	8004170 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800416a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800416c:	429a      	cmp	r2, r3
 800416e:	d001      	beq.n	8004174 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e000      	b.n	8004176 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3718      	adds	r7, #24
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	40023800 	.word	0x40023800

08004184 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d101      	bne.n	8004198 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e0cc      	b.n	8004332 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004198:	4b68      	ldr	r3, [pc, #416]	@ (800433c <HAL_RCC_ClockConfig+0x1b8>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0307 	and.w	r3, r3, #7
 80041a0:	683a      	ldr	r2, [r7, #0]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d90c      	bls.n	80041c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041a6:	4b65      	ldr	r3, [pc, #404]	@ (800433c <HAL_RCC_ClockConfig+0x1b8>)
 80041a8:	683a      	ldr	r2, [r7, #0]
 80041aa:	b2d2      	uxtb	r2, r2
 80041ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ae:	4b63      	ldr	r3, [pc, #396]	@ (800433c <HAL_RCC_ClockConfig+0x1b8>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0307 	and.w	r3, r3, #7
 80041b6:	683a      	ldr	r2, [r7, #0]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d001      	beq.n	80041c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e0b8      	b.n	8004332 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0302 	and.w	r3, r3, #2
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d020      	beq.n	800420e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0304 	and.w	r3, r3, #4
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d005      	beq.n	80041e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041d8:	4b59      	ldr	r3, [pc, #356]	@ (8004340 <HAL_RCC_ClockConfig+0x1bc>)
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	4a58      	ldr	r2, [pc, #352]	@ (8004340 <HAL_RCC_ClockConfig+0x1bc>)
 80041de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80041e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0308 	and.w	r3, r3, #8
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d005      	beq.n	80041fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041f0:	4b53      	ldr	r3, [pc, #332]	@ (8004340 <HAL_RCC_ClockConfig+0x1bc>)
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	4a52      	ldr	r2, [pc, #328]	@ (8004340 <HAL_RCC_ClockConfig+0x1bc>)
 80041f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80041fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041fc:	4b50      	ldr	r3, [pc, #320]	@ (8004340 <HAL_RCC_ClockConfig+0x1bc>)
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	494d      	ldr	r1, [pc, #308]	@ (8004340 <HAL_RCC_ClockConfig+0x1bc>)
 800420a:	4313      	orrs	r3, r2
 800420c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	2b00      	cmp	r3, #0
 8004218:	d044      	beq.n	80042a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	2b01      	cmp	r3, #1
 8004220:	d107      	bne.n	8004232 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004222:	4b47      	ldr	r3, [pc, #284]	@ (8004340 <HAL_RCC_ClockConfig+0x1bc>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d119      	bne.n	8004262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e07f      	b.n	8004332 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	2b02      	cmp	r3, #2
 8004238:	d003      	beq.n	8004242 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800423e:	2b03      	cmp	r3, #3
 8004240:	d107      	bne.n	8004252 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004242:	4b3f      	ldr	r3, [pc, #252]	@ (8004340 <HAL_RCC_ClockConfig+0x1bc>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d109      	bne.n	8004262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e06f      	b.n	8004332 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004252:	4b3b      	ldr	r3, [pc, #236]	@ (8004340 <HAL_RCC_ClockConfig+0x1bc>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d101      	bne.n	8004262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e067      	b.n	8004332 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004262:	4b37      	ldr	r3, [pc, #220]	@ (8004340 <HAL_RCC_ClockConfig+0x1bc>)
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f023 0203 	bic.w	r2, r3, #3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	4934      	ldr	r1, [pc, #208]	@ (8004340 <HAL_RCC_ClockConfig+0x1bc>)
 8004270:	4313      	orrs	r3, r2
 8004272:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004274:	f7fd fea0 	bl	8001fb8 <HAL_GetTick>
 8004278:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800427a:	e00a      	b.n	8004292 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800427c:	f7fd fe9c 	bl	8001fb8 <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	f241 3288 	movw	r2, #5000	@ 0x1388
 800428a:	4293      	cmp	r3, r2
 800428c:	d901      	bls.n	8004292 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e04f      	b.n	8004332 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004292:	4b2b      	ldr	r3, [pc, #172]	@ (8004340 <HAL_RCC_ClockConfig+0x1bc>)
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f003 020c 	and.w	r2, r3, #12
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d1eb      	bne.n	800427c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042a4:	4b25      	ldr	r3, [pc, #148]	@ (800433c <HAL_RCC_ClockConfig+0x1b8>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0307 	and.w	r3, r3, #7
 80042ac:	683a      	ldr	r2, [r7, #0]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d20c      	bcs.n	80042cc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042b2:	4b22      	ldr	r3, [pc, #136]	@ (800433c <HAL_RCC_ClockConfig+0x1b8>)
 80042b4:	683a      	ldr	r2, [r7, #0]
 80042b6:	b2d2      	uxtb	r2, r2
 80042b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ba:	4b20      	ldr	r3, [pc, #128]	@ (800433c <HAL_RCC_ClockConfig+0x1b8>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0307 	and.w	r3, r3, #7
 80042c2:	683a      	ldr	r2, [r7, #0]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d001      	beq.n	80042cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e032      	b.n	8004332 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0304 	and.w	r3, r3, #4
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d008      	beq.n	80042ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042d8:	4b19      	ldr	r3, [pc, #100]	@ (8004340 <HAL_RCC_ClockConfig+0x1bc>)
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	4916      	ldr	r1, [pc, #88]	@ (8004340 <HAL_RCC_ClockConfig+0x1bc>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0308 	and.w	r3, r3, #8
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d009      	beq.n	800430a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042f6:	4b12      	ldr	r3, [pc, #72]	@ (8004340 <HAL_RCC_ClockConfig+0x1bc>)
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	00db      	lsls	r3, r3, #3
 8004304:	490e      	ldr	r1, [pc, #56]	@ (8004340 <HAL_RCC_ClockConfig+0x1bc>)
 8004306:	4313      	orrs	r3, r2
 8004308:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800430a:	f000 f821 	bl	8004350 <HAL_RCC_GetSysClockFreq>
 800430e:	4602      	mov	r2, r0
 8004310:	4b0b      	ldr	r3, [pc, #44]	@ (8004340 <HAL_RCC_ClockConfig+0x1bc>)
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	091b      	lsrs	r3, r3, #4
 8004316:	f003 030f 	and.w	r3, r3, #15
 800431a:	490a      	ldr	r1, [pc, #40]	@ (8004344 <HAL_RCC_ClockConfig+0x1c0>)
 800431c:	5ccb      	ldrb	r3, [r1, r3]
 800431e:	fa22 f303 	lsr.w	r3, r2, r3
 8004322:	4a09      	ldr	r2, [pc, #36]	@ (8004348 <HAL_RCC_ClockConfig+0x1c4>)
 8004324:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004326:	4b09      	ldr	r3, [pc, #36]	@ (800434c <HAL_RCC_ClockConfig+0x1c8>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4618      	mov	r0, r3
 800432c:	f7fd fc56 	bl	8001bdc <HAL_InitTick>

  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3710      	adds	r7, #16
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	40023c00 	.word	0x40023c00
 8004340:	40023800 	.word	0x40023800
 8004344:	08009ad8 	.word	0x08009ad8
 8004348:	20000008 	.word	0x20000008
 800434c:	2000000c 	.word	0x2000000c

08004350 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004350:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004354:	b090      	sub	sp, #64	@ 0x40
 8004356:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004358:	2300      	movs	r3, #0
 800435a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800435c:	2300      	movs	r3, #0
 800435e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004360:	2300      	movs	r3, #0
 8004362:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004364:	2300      	movs	r3, #0
 8004366:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004368:	4b59      	ldr	r3, [pc, #356]	@ (80044d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f003 030c 	and.w	r3, r3, #12
 8004370:	2b08      	cmp	r3, #8
 8004372:	d00d      	beq.n	8004390 <HAL_RCC_GetSysClockFreq+0x40>
 8004374:	2b08      	cmp	r3, #8
 8004376:	f200 80a1 	bhi.w	80044bc <HAL_RCC_GetSysClockFreq+0x16c>
 800437a:	2b00      	cmp	r3, #0
 800437c:	d002      	beq.n	8004384 <HAL_RCC_GetSysClockFreq+0x34>
 800437e:	2b04      	cmp	r3, #4
 8004380:	d003      	beq.n	800438a <HAL_RCC_GetSysClockFreq+0x3a>
 8004382:	e09b      	b.n	80044bc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004384:	4b53      	ldr	r3, [pc, #332]	@ (80044d4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004386:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004388:	e09b      	b.n	80044c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800438a:	4b53      	ldr	r3, [pc, #332]	@ (80044d8 <HAL_RCC_GetSysClockFreq+0x188>)
 800438c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800438e:	e098      	b.n	80044c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004390:	4b4f      	ldr	r3, [pc, #316]	@ (80044d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004398:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800439a:	4b4d      	ldr	r3, [pc, #308]	@ (80044d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d028      	beq.n	80043f8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043a6:	4b4a      	ldr	r3, [pc, #296]	@ (80044d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	099b      	lsrs	r3, r3, #6
 80043ac:	2200      	movs	r2, #0
 80043ae:	623b      	str	r3, [r7, #32]
 80043b0:	627a      	str	r2, [r7, #36]	@ 0x24
 80043b2:	6a3b      	ldr	r3, [r7, #32]
 80043b4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80043b8:	2100      	movs	r1, #0
 80043ba:	4b47      	ldr	r3, [pc, #284]	@ (80044d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80043bc:	fb03 f201 	mul.w	r2, r3, r1
 80043c0:	2300      	movs	r3, #0
 80043c2:	fb00 f303 	mul.w	r3, r0, r3
 80043c6:	4413      	add	r3, r2
 80043c8:	4a43      	ldr	r2, [pc, #268]	@ (80044d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80043ca:	fba0 1202 	umull	r1, r2, r0, r2
 80043ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80043d0:	460a      	mov	r2, r1
 80043d2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80043d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043d6:	4413      	add	r3, r2
 80043d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043dc:	2200      	movs	r2, #0
 80043de:	61bb      	str	r3, [r7, #24]
 80043e0:	61fa      	str	r2, [r7, #28]
 80043e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80043ea:	f7fc fc2d 	bl	8000c48 <__aeabi_uldivmod>
 80043ee:	4602      	mov	r2, r0
 80043f0:	460b      	mov	r3, r1
 80043f2:	4613      	mov	r3, r2
 80043f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043f6:	e053      	b.n	80044a0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043f8:	4b35      	ldr	r3, [pc, #212]	@ (80044d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	099b      	lsrs	r3, r3, #6
 80043fe:	2200      	movs	r2, #0
 8004400:	613b      	str	r3, [r7, #16]
 8004402:	617a      	str	r2, [r7, #20]
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800440a:	f04f 0b00 	mov.w	fp, #0
 800440e:	4652      	mov	r2, sl
 8004410:	465b      	mov	r3, fp
 8004412:	f04f 0000 	mov.w	r0, #0
 8004416:	f04f 0100 	mov.w	r1, #0
 800441a:	0159      	lsls	r1, r3, #5
 800441c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004420:	0150      	lsls	r0, r2, #5
 8004422:	4602      	mov	r2, r0
 8004424:	460b      	mov	r3, r1
 8004426:	ebb2 080a 	subs.w	r8, r2, sl
 800442a:	eb63 090b 	sbc.w	r9, r3, fp
 800442e:	f04f 0200 	mov.w	r2, #0
 8004432:	f04f 0300 	mov.w	r3, #0
 8004436:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800443a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800443e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004442:	ebb2 0408 	subs.w	r4, r2, r8
 8004446:	eb63 0509 	sbc.w	r5, r3, r9
 800444a:	f04f 0200 	mov.w	r2, #0
 800444e:	f04f 0300 	mov.w	r3, #0
 8004452:	00eb      	lsls	r3, r5, #3
 8004454:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004458:	00e2      	lsls	r2, r4, #3
 800445a:	4614      	mov	r4, r2
 800445c:	461d      	mov	r5, r3
 800445e:	eb14 030a 	adds.w	r3, r4, sl
 8004462:	603b      	str	r3, [r7, #0]
 8004464:	eb45 030b 	adc.w	r3, r5, fp
 8004468:	607b      	str	r3, [r7, #4]
 800446a:	f04f 0200 	mov.w	r2, #0
 800446e:	f04f 0300 	mov.w	r3, #0
 8004472:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004476:	4629      	mov	r1, r5
 8004478:	028b      	lsls	r3, r1, #10
 800447a:	4621      	mov	r1, r4
 800447c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004480:	4621      	mov	r1, r4
 8004482:	028a      	lsls	r2, r1, #10
 8004484:	4610      	mov	r0, r2
 8004486:	4619      	mov	r1, r3
 8004488:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800448a:	2200      	movs	r2, #0
 800448c:	60bb      	str	r3, [r7, #8]
 800448e:	60fa      	str	r2, [r7, #12]
 8004490:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004494:	f7fc fbd8 	bl	8000c48 <__aeabi_uldivmod>
 8004498:	4602      	mov	r2, r0
 800449a:	460b      	mov	r3, r1
 800449c:	4613      	mov	r3, r2
 800449e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80044a0:	4b0b      	ldr	r3, [pc, #44]	@ (80044d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	0c1b      	lsrs	r3, r3, #16
 80044a6:	f003 0303 	and.w	r3, r3, #3
 80044aa:	3301      	adds	r3, #1
 80044ac:	005b      	lsls	r3, r3, #1
 80044ae:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80044b0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80044b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044b8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80044ba:	e002      	b.n	80044c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044bc:	4b05      	ldr	r3, [pc, #20]	@ (80044d4 <HAL_RCC_GetSysClockFreq+0x184>)
 80044be:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80044c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3740      	adds	r7, #64	@ 0x40
 80044c8:	46bd      	mov	sp, r7
 80044ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044ce:	bf00      	nop
 80044d0:	40023800 	.word	0x40023800
 80044d4:	00f42400 	.word	0x00f42400
 80044d8:	017d7840 	.word	0x017d7840

080044dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044dc:	b480      	push	{r7}
 80044de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044e0:	4b03      	ldr	r3, [pc, #12]	@ (80044f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80044e2:	681b      	ldr	r3, [r3, #0]
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop
 80044f0:	20000008 	.word	0x20000008

080044f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044f8:	f7ff fff0 	bl	80044dc <HAL_RCC_GetHCLKFreq>
 80044fc:	4602      	mov	r2, r0
 80044fe:	4b05      	ldr	r3, [pc, #20]	@ (8004514 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	0a9b      	lsrs	r3, r3, #10
 8004504:	f003 0307 	and.w	r3, r3, #7
 8004508:	4903      	ldr	r1, [pc, #12]	@ (8004518 <HAL_RCC_GetPCLK1Freq+0x24>)
 800450a:	5ccb      	ldrb	r3, [r1, r3]
 800450c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004510:	4618      	mov	r0, r3
 8004512:	bd80      	pop	{r7, pc}
 8004514:	40023800 	.word	0x40023800
 8004518:	08009ae8 	.word	0x08009ae8

0800451c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004520:	f7ff ffdc 	bl	80044dc <HAL_RCC_GetHCLKFreq>
 8004524:	4602      	mov	r2, r0
 8004526:	4b05      	ldr	r3, [pc, #20]	@ (800453c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	0b5b      	lsrs	r3, r3, #13
 800452c:	f003 0307 	and.w	r3, r3, #7
 8004530:	4903      	ldr	r1, [pc, #12]	@ (8004540 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004532:	5ccb      	ldrb	r3, [r1, r3]
 8004534:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004538:	4618      	mov	r0, r3
 800453a:	bd80      	pop	{r7, pc}
 800453c:	40023800 	.word	0x40023800
 8004540:	08009ae8 	.word	0x08009ae8

08004544 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	220f      	movs	r2, #15
 8004552:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004554:	4b12      	ldr	r3, [pc, #72]	@ (80045a0 <HAL_RCC_GetClockConfig+0x5c>)
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f003 0203 	and.w	r2, r3, #3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004560:	4b0f      	ldr	r3, [pc, #60]	@ (80045a0 <HAL_RCC_GetClockConfig+0x5c>)
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800456c:	4b0c      	ldr	r3, [pc, #48]	@ (80045a0 <HAL_RCC_GetClockConfig+0x5c>)
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004578:	4b09      	ldr	r3, [pc, #36]	@ (80045a0 <HAL_RCC_GetClockConfig+0x5c>)
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	08db      	lsrs	r3, r3, #3
 800457e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004586:	4b07      	ldr	r3, [pc, #28]	@ (80045a4 <HAL_RCC_GetClockConfig+0x60>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0207 	and.w	r2, r3, #7
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	601a      	str	r2, [r3, #0]
}
 8004592:	bf00      	nop
 8004594:	370c      	adds	r7, #12
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	40023800 	.word	0x40023800
 80045a4:	40023c00 	.word	0x40023c00

080045a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d101      	bne.n	80045ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e07b      	b.n	80046b2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d108      	bne.n	80045d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045ca:	d009      	beq.n	80045e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	61da      	str	r2, [r3, #28]
 80045d2:	e005      	b.n	80045e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d106      	bne.n	8004600 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f7fd fa86 	bl	8001b0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2202      	movs	r2, #2
 8004604:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004616:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004628:	431a      	orrs	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004632:	431a      	orrs	r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	f003 0302 	and.w	r3, r3, #2
 800463c:	431a      	orrs	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	431a      	orrs	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	699b      	ldr	r3, [r3, #24]
 800464c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004650:	431a      	orrs	r2, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	69db      	ldr	r3, [r3, #28]
 8004656:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800465a:	431a      	orrs	r2, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a1b      	ldr	r3, [r3, #32]
 8004660:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004664:	ea42 0103 	orr.w	r1, r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800466c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	430a      	orrs	r2, r1
 8004676:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	0c1b      	lsrs	r3, r3, #16
 800467e:	f003 0104 	and.w	r1, r3, #4
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004686:	f003 0210 	and.w	r2, r3, #16
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	430a      	orrs	r2, r1
 8004690:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	69da      	ldr	r2, [r3, #28]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80046a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3708      	adds	r7, #8
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}

080046ba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046ba:	b580      	push	{r7, lr}
 80046bc:	b088      	sub	sp, #32
 80046be:	af00      	add	r7, sp, #0
 80046c0:	60f8      	str	r0, [r7, #12]
 80046c2:	60b9      	str	r1, [r7, #8]
 80046c4:	603b      	str	r3, [r7, #0]
 80046c6:	4613      	mov	r3, r2
 80046c8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046ca:	f7fd fc75 	bl	8001fb8 <HAL_GetTick>
 80046ce:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80046d0:	88fb      	ldrh	r3, [r7, #6]
 80046d2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d001      	beq.n	80046e4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80046e0:	2302      	movs	r3, #2
 80046e2:	e12a      	b.n	800493a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d002      	beq.n	80046f0 <HAL_SPI_Transmit+0x36>
 80046ea:	88fb      	ldrh	r3, [r7, #6]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d101      	bne.n	80046f4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e122      	b.n	800493a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d101      	bne.n	8004702 <HAL_SPI_Transmit+0x48>
 80046fe:	2302      	movs	r3, #2
 8004700:	e11b      	b.n	800493a <HAL_SPI_Transmit+0x280>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2201      	movs	r2, #1
 8004706:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2203      	movs	r2, #3
 800470e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2200      	movs	r2, #0
 8004716:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	68ba      	ldr	r2, [r7, #8]
 800471c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	88fa      	ldrh	r2, [r7, #6]
 8004722:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	88fa      	ldrh	r2, [r7, #6]
 8004728:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2200      	movs	r2, #0
 800472e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2200      	movs	r2, #0
 8004734:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2200      	movs	r2, #0
 800473a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2200      	movs	r2, #0
 8004740:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2200      	movs	r2, #0
 8004746:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004750:	d10f      	bne.n	8004772 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004760:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004770:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800477c:	2b40      	cmp	r3, #64	@ 0x40
 800477e:	d007      	beq.n	8004790 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800478e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004798:	d152      	bne.n	8004840 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d002      	beq.n	80047a8 <HAL_SPI_Transmit+0xee>
 80047a2:	8b7b      	ldrh	r3, [r7, #26]
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d145      	bne.n	8004834 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ac:	881a      	ldrh	r2, [r3, #0]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047b8:	1c9a      	adds	r2, r3, #2
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	3b01      	subs	r3, #1
 80047c6:	b29a      	uxth	r2, r3
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80047cc:	e032      	b.n	8004834 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f003 0302 	and.w	r3, r3, #2
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d112      	bne.n	8004802 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047e0:	881a      	ldrh	r2, [r3, #0]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ec:	1c9a      	adds	r2, r3, #2
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	3b01      	subs	r3, #1
 80047fa:	b29a      	uxth	r2, r3
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004800:	e018      	b.n	8004834 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004802:	f7fd fbd9 	bl	8001fb8 <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	683a      	ldr	r2, [r7, #0]
 800480e:	429a      	cmp	r2, r3
 8004810:	d803      	bhi.n	800481a <HAL_SPI_Transmit+0x160>
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004818:	d102      	bne.n	8004820 <HAL_SPI_Transmit+0x166>
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d109      	bne.n	8004834 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2200      	movs	r2, #0
 800482c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	e082      	b.n	800493a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004838:	b29b      	uxth	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1c7      	bne.n	80047ce <HAL_SPI_Transmit+0x114>
 800483e:	e053      	b.n	80048e8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d002      	beq.n	800484e <HAL_SPI_Transmit+0x194>
 8004848:	8b7b      	ldrh	r3, [r7, #26]
 800484a:	2b01      	cmp	r3, #1
 800484c:	d147      	bne.n	80048de <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	330c      	adds	r3, #12
 8004858:	7812      	ldrb	r2, [r2, #0]
 800485a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004860:	1c5a      	adds	r2, r3, #1
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800486a:	b29b      	uxth	r3, r3
 800486c:	3b01      	subs	r3, #1
 800486e:	b29a      	uxth	r2, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004874:	e033      	b.n	80048de <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f003 0302 	and.w	r3, r3, #2
 8004880:	2b02      	cmp	r3, #2
 8004882:	d113      	bne.n	80048ac <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	330c      	adds	r3, #12
 800488e:	7812      	ldrb	r2, [r2, #0]
 8004890:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004896:	1c5a      	adds	r2, r3, #1
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	3b01      	subs	r3, #1
 80048a4:	b29a      	uxth	r2, r3
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80048aa:	e018      	b.n	80048de <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048ac:	f7fd fb84 	bl	8001fb8 <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	683a      	ldr	r2, [r7, #0]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d803      	bhi.n	80048c4 <HAL_SPI_Transmit+0x20a>
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c2:	d102      	bne.n	80048ca <HAL_SPI_Transmit+0x210>
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d109      	bne.n	80048de <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2201      	movs	r2, #1
 80048ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e02d      	b.n	800493a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d1c6      	bne.n	8004876 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048e8:	69fa      	ldr	r2, [r7, #28]
 80048ea:	6839      	ldr	r1, [r7, #0]
 80048ec:	68f8      	ldr	r0, [r7, #12]
 80048ee:	f000 f8b1 	bl	8004a54 <SPI_EndRxTxTransaction>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d002      	beq.n	80048fe <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2220      	movs	r2, #32
 80048fc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d10a      	bne.n	800491c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004906:	2300      	movs	r3, #0
 8004908:	617b      	str	r3, [r7, #20]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	617b      	str	r3, [r7, #20]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	617b      	str	r3, [r7, #20]
 800491a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2200      	movs	r2, #0
 8004928:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004930:	2b00      	cmp	r3, #0
 8004932:	d001      	beq.n	8004938 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e000      	b.n	800493a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004938:	2300      	movs	r3, #0
  }
}
 800493a:	4618      	mov	r0, r3
 800493c:	3720      	adds	r7, #32
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
	...

08004944 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b088      	sub	sp, #32
 8004948:	af00      	add	r7, sp, #0
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	603b      	str	r3, [r7, #0]
 8004950:	4613      	mov	r3, r2
 8004952:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004954:	f7fd fb30 	bl	8001fb8 <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800495c:	1a9b      	subs	r3, r3, r2
 800495e:	683a      	ldr	r2, [r7, #0]
 8004960:	4413      	add	r3, r2
 8004962:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004964:	f7fd fb28 	bl	8001fb8 <HAL_GetTick>
 8004968:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800496a:	4b39      	ldr	r3, [pc, #228]	@ (8004a50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	015b      	lsls	r3, r3, #5
 8004970:	0d1b      	lsrs	r3, r3, #20
 8004972:	69fa      	ldr	r2, [r7, #28]
 8004974:	fb02 f303 	mul.w	r3, r2, r3
 8004978:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800497a:	e054      	b.n	8004a26 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004982:	d050      	beq.n	8004a26 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004984:	f7fd fb18 	bl	8001fb8 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	69fa      	ldr	r2, [r7, #28]
 8004990:	429a      	cmp	r2, r3
 8004992:	d902      	bls.n	800499a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d13d      	bne.n	8004a16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	685a      	ldr	r2, [r3, #4]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80049a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80049b2:	d111      	bne.n	80049d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049bc:	d004      	beq.n	80049c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049c6:	d107      	bne.n	80049d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049e0:	d10f      	bne.n	8004a02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80049f0:	601a      	str	r2, [r3, #0]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004a00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2201      	movs	r2, #1
 8004a06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e017      	b.n	8004a46 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d101      	bne.n	8004a20 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	3b01      	subs	r3, #1
 8004a24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	689a      	ldr	r2, [r3, #8]
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	4013      	ands	r3, r2
 8004a30:	68ba      	ldr	r2, [r7, #8]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	bf0c      	ite	eq
 8004a36:	2301      	moveq	r3, #1
 8004a38:	2300      	movne	r3, #0
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	79fb      	ldrb	r3, [r7, #7]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d19b      	bne.n	800497c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3720      	adds	r7, #32
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	20000008 	.word	0x20000008

08004a54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b088      	sub	sp, #32
 8004a58:	af02      	add	r7, sp, #8
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	9300      	str	r3, [sp, #0]
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	2201      	movs	r2, #1
 8004a68:	2102      	movs	r1, #2
 8004a6a:	68f8      	ldr	r0, [r7, #12]
 8004a6c:	f7ff ff6a 	bl	8004944 <SPI_WaitFlagStateUntilTimeout>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d007      	beq.n	8004a86 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a7a:	f043 0220 	orr.w	r2, r3, #32
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e032      	b.n	8004aec <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004a86:	4b1b      	ldr	r3, [pc, #108]	@ (8004af4 <SPI_EndRxTxTransaction+0xa0>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a1b      	ldr	r2, [pc, #108]	@ (8004af8 <SPI_EndRxTxTransaction+0xa4>)
 8004a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a90:	0d5b      	lsrs	r3, r3, #21
 8004a92:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004a96:	fb02 f303 	mul.w	r3, r2, r3
 8004a9a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004aa4:	d112      	bne.n	8004acc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	9300      	str	r3, [sp, #0]
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	2200      	movs	r2, #0
 8004aae:	2180      	movs	r1, #128	@ 0x80
 8004ab0:	68f8      	ldr	r0, [r7, #12]
 8004ab2:	f7ff ff47 	bl	8004944 <SPI_WaitFlagStateUntilTimeout>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d016      	beq.n	8004aea <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ac0:	f043 0220 	orr.w	r2, r3, #32
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e00f      	b.n	8004aec <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00a      	beq.n	8004ae8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ae2:	2b80      	cmp	r3, #128	@ 0x80
 8004ae4:	d0f2      	beq.n	8004acc <SPI_EndRxTxTransaction+0x78>
 8004ae6:	e000      	b.n	8004aea <SPI_EndRxTxTransaction+0x96>
        break;
 8004ae8:	bf00      	nop
  }

  return HAL_OK;
 8004aea:	2300      	movs	r3, #0
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3718      	adds	r7, #24
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}
 8004af4:	20000008 	.word	0x20000008
 8004af8:	165e9f81 	.word	0x165e9f81

08004afc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d101      	bne.n	8004b0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e041      	b.n	8004b92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d106      	bne.n	8004b28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 f839 	bl	8004b9a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2202      	movs	r2, #2
 8004b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	3304      	adds	r3, #4
 8004b38:	4619      	mov	r1, r3
 8004b3a:	4610      	mov	r0, r2
 8004b3c:	f000 f9c0 	bl	8004ec0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3708      	adds	r7, #8
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b083      	sub	sp, #12
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004ba2:	bf00      	nop
 8004ba4:	370c      	adds	r7, #12
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr
	...

08004bb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d001      	beq.n	8004bc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e04e      	b.n	8004c66 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2202      	movs	r2, #2
 8004bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68da      	ldr	r2, [r3, #12]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f042 0201 	orr.w	r2, r2, #1
 8004bde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a23      	ldr	r2, [pc, #140]	@ (8004c74 <HAL_TIM_Base_Start_IT+0xc4>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d022      	beq.n	8004c30 <HAL_TIM_Base_Start_IT+0x80>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bf2:	d01d      	beq.n	8004c30 <HAL_TIM_Base_Start_IT+0x80>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a1f      	ldr	r2, [pc, #124]	@ (8004c78 <HAL_TIM_Base_Start_IT+0xc8>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d018      	beq.n	8004c30 <HAL_TIM_Base_Start_IT+0x80>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a1e      	ldr	r2, [pc, #120]	@ (8004c7c <HAL_TIM_Base_Start_IT+0xcc>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d013      	beq.n	8004c30 <HAL_TIM_Base_Start_IT+0x80>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a1c      	ldr	r2, [pc, #112]	@ (8004c80 <HAL_TIM_Base_Start_IT+0xd0>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d00e      	beq.n	8004c30 <HAL_TIM_Base_Start_IT+0x80>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a1b      	ldr	r2, [pc, #108]	@ (8004c84 <HAL_TIM_Base_Start_IT+0xd4>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d009      	beq.n	8004c30 <HAL_TIM_Base_Start_IT+0x80>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a19      	ldr	r2, [pc, #100]	@ (8004c88 <HAL_TIM_Base_Start_IT+0xd8>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d004      	beq.n	8004c30 <HAL_TIM_Base_Start_IT+0x80>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a18      	ldr	r2, [pc, #96]	@ (8004c8c <HAL_TIM_Base_Start_IT+0xdc>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d111      	bne.n	8004c54 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f003 0307 	and.w	r3, r3, #7
 8004c3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2b06      	cmp	r3, #6
 8004c40:	d010      	beq.n	8004c64 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f042 0201 	orr.w	r2, r2, #1
 8004c50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c52:	e007      	b.n	8004c64 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f042 0201 	orr.w	r2, r2, #1
 8004c62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3714      	adds	r7, #20
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	40010000 	.word	0x40010000
 8004c78:	40000400 	.word	0x40000400
 8004c7c:	40000800 	.word	0x40000800
 8004c80:	40000c00 	.word	0x40000c00
 8004c84:	40010400 	.word	0x40010400
 8004c88:	40014000 	.word	0x40014000
 8004c8c:	40001800 	.word	0x40001800

08004c90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	f003 0302 	and.w	r3, r3, #2
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d020      	beq.n	8004cf4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f003 0302 	and.w	r3, r3, #2
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d01b      	beq.n	8004cf4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f06f 0202 	mvn.w	r2, #2
 8004cc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	f003 0303 	and.w	r3, r3, #3
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d003      	beq.n	8004ce2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 f8d2 	bl	8004e84 <HAL_TIM_IC_CaptureCallback>
 8004ce0:	e005      	b.n	8004cee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 f8c4 	bl	8004e70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 f8d5 	bl	8004e98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	f003 0304 	and.w	r3, r3, #4
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d020      	beq.n	8004d40 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f003 0304 	and.w	r3, r3, #4
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d01b      	beq.n	8004d40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f06f 0204 	mvn.w	r2, #4
 8004d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2202      	movs	r2, #2
 8004d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	699b      	ldr	r3, [r3, #24]
 8004d1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d003      	beq.n	8004d2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 f8ac 	bl	8004e84 <HAL_TIM_IC_CaptureCallback>
 8004d2c:	e005      	b.n	8004d3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 f89e 	bl	8004e70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 f8af 	bl	8004e98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	f003 0308 	and.w	r3, r3, #8
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d020      	beq.n	8004d8c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f003 0308 	and.w	r3, r3, #8
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d01b      	beq.n	8004d8c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f06f 0208 	mvn.w	r2, #8
 8004d5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2204      	movs	r2, #4
 8004d62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	69db      	ldr	r3, [r3, #28]
 8004d6a:	f003 0303 	and.w	r3, r3, #3
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d003      	beq.n	8004d7a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 f886 	bl	8004e84 <HAL_TIM_IC_CaptureCallback>
 8004d78:	e005      	b.n	8004d86 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 f878 	bl	8004e70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f000 f889 	bl	8004e98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	f003 0310 	and.w	r3, r3, #16
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d020      	beq.n	8004dd8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f003 0310 	and.w	r3, r3, #16
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d01b      	beq.n	8004dd8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f06f 0210 	mvn.w	r2, #16
 8004da8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2208      	movs	r2, #8
 8004dae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	69db      	ldr	r3, [r3, #28]
 8004db6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d003      	beq.n	8004dc6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 f860 	bl	8004e84 <HAL_TIM_IC_CaptureCallback>
 8004dc4:	e005      	b.n	8004dd2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 f852 	bl	8004e70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f000 f863 	bl	8004e98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	f003 0301 	and.w	r3, r3, #1
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d00c      	beq.n	8004dfc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f003 0301 	and.w	r3, r3, #1
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d007      	beq.n	8004dfc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f06f 0201 	mvn.w	r2, #1
 8004df4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f7fc fd3a 	bl	8001870 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d00c      	beq.n	8004e20 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d007      	beq.n	8004e20 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004e18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 f906 	bl	800502c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00c      	beq.n	8004e44 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d007      	beq.n	8004e44 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 f834 	bl	8004eac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	f003 0320 	and.w	r3, r3, #32
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00c      	beq.n	8004e68 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f003 0320 	and.w	r3, r3, #32
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d007      	beq.n	8004e68 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f06f 0220 	mvn.w	r2, #32
 8004e60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 f8d8 	bl	8005018 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e68:	bf00      	nop
 8004e6a:	3710      	adds	r7, #16
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e78:	bf00      	nop
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e8c:	bf00      	nop
 8004e8e:	370c      	adds	r7, #12
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr

08004e98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ea0:	bf00      	nop
 8004ea2:	370c      	adds	r7, #12
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr

08004eac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004eb4:	bf00      	nop
 8004eb6:	370c      	adds	r7, #12
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b085      	sub	sp, #20
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4a46      	ldr	r2, [pc, #280]	@ (8004fec <TIM_Base_SetConfig+0x12c>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d013      	beq.n	8004f00 <TIM_Base_SetConfig+0x40>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ede:	d00f      	beq.n	8004f00 <TIM_Base_SetConfig+0x40>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a43      	ldr	r2, [pc, #268]	@ (8004ff0 <TIM_Base_SetConfig+0x130>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d00b      	beq.n	8004f00 <TIM_Base_SetConfig+0x40>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a42      	ldr	r2, [pc, #264]	@ (8004ff4 <TIM_Base_SetConfig+0x134>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d007      	beq.n	8004f00 <TIM_Base_SetConfig+0x40>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a41      	ldr	r2, [pc, #260]	@ (8004ff8 <TIM_Base_SetConfig+0x138>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d003      	beq.n	8004f00 <TIM_Base_SetConfig+0x40>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4a40      	ldr	r2, [pc, #256]	@ (8004ffc <TIM_Base_SetConfig+0x13c>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d108      	bne.n	8004f12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a35      	ldr	r2, [pc, #212]	@ (8004fec <TIM_Base_SetConfig+0x12c>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d02b      	beq.n	8004f72 <TIM_Base_SetConfig+0xb2>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f20:	d027      	beq.n	8004f72 <TIM_Base_SetConfig+0xb2>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a32      	ldr	r2, [pc, #200]	@ (8004ff0 <TIM_Base_SetConfig+0x130>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d023      	beq.n	8004f72 <TIM_Base_SetConfig+0xb2>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a31      	ldr	r2, [pc, #196]	@ (8004ff4 <TIM_Base_SetConfig+0x134>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d01f      	beq.n	8004f72 <TIM_Base_SetConfig+0xb2>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a30      	ldr	r2, [pc, #192]	@ (8004ff8 <TIM_Base_SetConfig+0x138>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d01b      	beq.n	8004f72 <TIM_Base_SetConfig+0xb2>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a2f      	ldr	r2, [pc, #188]	@ (8004ffc <TIM_Base_SetConfig+0x13c>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d017      	beq.n	8004f72 <TIM_Base_SetConfig+0xb2>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a2e      	ldr	r2, [pc, #184]	@ (8005000 <TIM_Base_SetConfig+0x140>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d013      	beq.n	8004f72 <TIM_Base_SetConfig+0xb2>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a2d      	ldr	r2, [pc, #180]	@ (8005004 <TIM_Base_SetConfig+0x144>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d00f      	beq.n	8004f72 <TIM_Base_SetConfig+0xb2>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a2c      	ldr	r2, [pc, #176]	@ (8005008 <TIM_Base_SetConfig+0x148>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d00b      	beq.n	8004f72 <TIM_Base_SetConfig+0xb2>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a2b      	ldr	r2, [pc, #172]	@ (800500c <TIM_Base_SetConfig+0x14c>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d007      	beq.n	8004f72 <TIM_Base_SetConfig+0xb2>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a2a      	ldr	r2, [pc, #168]	@ (8005010 <TIM_Base_SetConfig+0x150>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d003      	beq.n	8004f72 <TIM_Base_SetConfig+0xb2>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a29      	ldr	r2, [pc, #164]	@ (8005014 <TIM_Base_SetConfig+0x154>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d108      	bne.n	8004f84 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	689a      	ldr	r2, [r3, #8]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a10      	ldr	r2, [pc, #64]	@ (8004fec <TIM_Base_SetConfig+0x12c>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d003      	beq.n	8004fb8 <TIM_Base_SetConfig+0xf8>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a12      	ldr	r2, [pc, #72]	@ (8004ffc <TIM_Base_SetConfig+0x13c>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d103      	bne.n	8004fc0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	691a      	ldr	r2, [r3, #16]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d105      	bne.n	8004fde <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	f023 0201 	bic.w	r2, r3, #1
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	611a      	str	r2, [r3, #16]
  }
}
 8004fde:	bf00      	nop
 8004fe0:	3714      	adds	r7, #20
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	40010000 	.word	0x40010000
 8004ff0:	40000400 	.word	0x40000400
 8004ff4:	40000800 	.word	0x40000800
 8004ff8:	40000c00 	.word	0x40000c00
 8004ffc:	40010400 	.word	0x40010400
 8005000:	40014000 	.word	0x40014000
 8005004:	40014400 	.word	0x40014400
 8005008:	40014800 	.word	0x40014800
 800500c:	40001800 	.word	0x40001800
 8005010:	40001c00 	.word	0x40001c00
 8005014:	40002000 	.word	0x40002000

08005018 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005020:	bf00      	nop
 8005022:	370c      	adds	r7, #12
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005034:	bf00      	nop
 8005036:	370c      	adds	r7, #12
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005040:	b480      	push	{r7}
 8005042:	b085      	sub	sp, #20
 8005044:	af00      	add	r7, sp, #0
 8005046:	4603      	mov	r3, r0
 8005048:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800504a:	2300      	movs	r3, #0
 800504c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800504e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005052:	2b84      	cmp	r3, #132	@ 0x84
 8005054:	d005      	beq.n	8005062 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005056:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	4413      	add	r3, r2
 800505e:	3303      	adds	r3, #3
 8005060:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005062:	68fb      	ldr	r3, [r7, #12]
}
 8005064:	4618      	mov	r0, r3
 8005066:	3714      	adds	r7, #20
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr

08005070 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005074:	f000 fafc 	bl	8005670 <vTaskStartScheduler>
  
  return osOK;
 8005078:	2300      	movs	r3, #0
}
 800507a:	4618      	mov	r0, r3
 800507c:	bd80      	pop	{r7, pc}

0800507e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800507e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005080:	b089      	sub	sp, #36	@ 0x24
 8005082:	af04      	add	r7, sp, #16
 8005084:	6078      	str	r0, [r7, #4]
 8005086:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	695b      	ldr	r3, [r3, #20]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d020      	beq.n	80050d2 <osThreadCreate+0x54>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d01c      	beq.n	80050d2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685c      	ldr	r4, [r3, #4]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	691e      	ldr	r6, [r3, #16]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80050aa:	4618      	mov	r0, r3
 80050ac:	f7ff ffc8 	bl	8005040 <makeFreeRtosPriority>
 80050b0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	695b      	ldr	r3, [r3, #20]
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80050ba:	9202      	str	r2, [sp, #8]
 80050bc:	9301      	str	r3, [sp, #4]
 80050be:	9100      	str	r1, [sp, #0]
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	4632      	mov	r2, r6
 80050c4:	4629      	mov	r1, r5
 80050c6:	4620      	mov	r0, r4
 80050c8:	f000 f8ed 	bl	80052a6 <xTaskCreateStatic>
 80050cc:	4603      	mov	r3, r0
 80050ce:	60fb      	str	r3, [r7, #12]
 80050d0:	e01c      	b.n	800510c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685c      	ldr	r4, [r3, #4]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80050de:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80050e6:	4618      	mov	r0, r3
 80050e8:	f7ff ffaa 	bl	8005040 <makeFreeRtosPriority>
 80050ec:	4602      	mov	r2, r0
 80050ee:	f107 030c 	add.w	r3, r7, #12
 80050f2:	9301      	str	r3, [sp, #4]
 80050f4:	9200      	str	r2, [sp, #0]
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	4632      	mov	r2, r6
 80050fa:	4629      	mov	r1, r5
 80050fc:	4620      	mov	r0, r4
 80050fe:	f000 f932 	bl	8005366 <xTaskCreate>
 8005102:	4603      	mov	r3, r0
 8005104:	2b01      	cmp	r3, #1
 8005106:	d001      	beq.n	800510c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005108:	2300      	movs	r3, #0
 800510a:	e000      	b.n	800510e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800510c:	68fb      	ldr	r3, [r7, #12]
}
 800510e:	4618      	mov	r0, r3
 8005110:	3714      	adds	r7, #20
 8005112:	46bd      	mov	sp, r7
 8005114:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005116 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005116:	b580      	push	{r7, lr}
 8005118:	b084      	sub	sp, #16
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d001      	beq.n	800512c <osDelay+0x16>
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	e000      	b.n	800512e <osDelay+0x18>
 800512c:	2301      	movs	r3, #1
 800512e:	4618      	mov	r0, r3
 8005130:	f000 fa68 	bl	8005604 <vTaskDelay>
  
  return osOK;
 8005134:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005136:	4618      	mov	r0, r3
 8005138:	3710      	adds	r7, #16
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}

0800513e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800513e:	b480      	push	{r7}
 8005140:	b083      	sub	sp, #12
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f103 0208 	add.w	r2, r3, #8
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f04f 32ff 	mov.w	r2, #4294967295
 8005156:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f103 0208 	add.w	r2, r3, #8
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f103 0208 	add.w	r2, r3, #8
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005172:	bf00      	nop
 8005174:	370c      	adds	r7, #12
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr

0800517e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800517e:	b480      	push	{r7}
 8005180:	b083      	sub	sp, #12
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800518c:	bf00      	nop
 800518e:	370c      	adds	r7, #12
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005198:	b480      	push	{r7}
 800519a:	b085      	sub	sp, #20
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	689a      	ldr	r2, [r3, #8]
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	683a      	ldr	r2, [r7, #0]
 80051bc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	683a      	ldr	r2, [r7, #0]
 80051c2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	1c5a      	adds	r2, r3, #1
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	601a      	str	r2, [r3, #0]
}
 80051d4:	bf00      	nop
 80051d6:	3714      	adds	r7, #20
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051f6:	d103      	bne.n	8005200 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	691b      	ldr	r3, [r3, #16]
 80051fc:	60fb      	str	r3, [r7, #12]
 80051fe:	e00c      	b.n	800521a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	3308      	adds	r3, #8
 8005204:	60fb      	str	r3, [r7, #12]
 8005206:	e002      	b.n	800520e <vListInsert+0x2e>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	60fb      	str	r3, [r7, #12]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68ba      	ldr	r2, [r7, #8]
 8005216:	429a      	cmp	r2, r3
 8005218:	d2f6      	bcs.n	8005208 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	685a      	ldr	r2, [r3, #4]
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	683a      	ldr	r2, [r7, #0]
 8005228:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	683a      	ldr	r2, [r7, #0]
 8005234:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	1c5a      	adds	r2, r3, #1
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	601a      	str	r2, [r3, #0]
}
 8005246:	bf00      	nop
 8005248:	3714      	adds	r7, #20
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr

08005252 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005252:	b480      	push	{r7}
 8005254:	b085      	sub	sp, #20
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	6892      	ldr	r2, [r2, #8]
 8005268:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	6852      	ldr	r2, [r2, #4]
 8005272:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	429a      	cmp	r2, r3
 800527c:	d103      	bne.n	8005286 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	689a      	ldr	r2, [r3, #8]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	1e5a      	subs	r2, r3, #1
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
}
 800529a:	4618      	mov	r0, r3
 800529c:	3714      	adds	r7, #20
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr

080052a6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80052a6:	b580      	push	{r7, lr}
 80052a8:	b08e      	sub	sp, #56	@ 0x38
 80052aa:	af04      	add	r7, sp, #16
 80052ac:	60f8      	str	r0, [r7, #12]
 80052ae:	60b9      	str	r1, [r7, #8]
 80052b0:	607a      	str	r2, [r7, #4]
 80052b2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80052b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d10b      	bne.n	80052d2 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80052ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052be:	f383 8811 	msr	BASEPRI, r3
 80052c2:	f3bf 8f6f 	isb	sy
 80052c6:	f3bf 8f4f 	dsb	sy
 80052ca:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80052cc:	bf00      	nop
 80052ce:	bf00      	nop
 80052d0:	e7fd      	b.n	80052ce <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80052d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d10b      	bne.n	80052f0 <xTaskCreateStatic+0x4a>
	__asm volatile
 80052d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052dc:	f383 8811 	msr	BASEPRI, r3
 80052e0:	f3bf 8f6f 	isb	sy
 80052e4:	f3bf 8f4f 	dsb	sy
 80052e8:	61fb      	str	r3, [r7, #28]
}
 80052ea:	bf00      	nop
 80052ec:	bf00      	nop
 80052ee:	e7fd      	b.n	80052ec <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80052f0:	23a0      	movs	r3, #160	@ 0xa0
 80052f2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	2ba0      	cmp	r3, #160	@ 0xa0
 80052f8:	d00b      	beq.n	8005312 <xTaskCreateStatic+0x6c>
	__asm volatile
 80052fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052fe:	f383 8811 	msr	BASEPRI, r3
 8005302:	f3bf 8f6f 	isb	sy
 8005306:	f3bf 8f4f 	dsb	sy
 800530a:	61bb      	str	r3, [r7, #24]
}
 800530c:	bf00      	nop
 800530e:	bf00      	nop
 8005310:	e7fd      	b.n	800530e <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005312:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005316:	2b00      	cmp	r3, #0
 8005318:	d01e      	beq.n	8005358 <xTaskCreateStatic+0xb2>
 800531a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800531c:	2b00      	cmp	r3, #0
 800531e:	d01b      	beq.n	8005358 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005322:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005326:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005328:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800532a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800532c:	2202      	movs	r2, #2
 800532e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005332:	2300      	movs	r3, #0
 8005334:	9303      	str	r3, [sp, #12]
 8005336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005338:	9302      	str	r3, [sp, #8]
 800533a:	f107 0314 	add.w	r3, r7, #20
 800533e:	9301      	str	r3, [sp, #4]
 8005340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005342:	9300      	str	r3, [sp, #0]
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	68b9      	ldr	r1, [r7, #8]
 800534a:	68f8      	ldr	r0, [r7, #12]
 800534c:	f000 f850 	bl	80053f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005350:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005352:	f000 f8ed 	bl	8005530 <prvAddNewTaskToReadyList>
 8005356:	e001      	b.n	800535c <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005358:	2300      	movs	r3, #0
 800535a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800535c:	697b      	ldr	r3, [r7, #20]
	}
 800535e:	4618      	mov	r0, r3
 8005360:	3728      	adds	r7, #40	@ 0x28
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}

08005366 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005366:	b580      	push	{r7, lr}
 8005368:	b08c      	sub	sp, #48	@ 0x30
 800536a:	af04      	add	r7, sp, #16
 800536c:	60f8      	str	r0, [r7, #12]
 800536e:	60b9      	str	r1, [r7, #8]
 8005370:	603b      	str	r3, [r7, #0]
 8005372:	4613      	mov	r3, r2
 8005374:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005376:	88fb      	ldrh	r3, [r7, #6]
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	4618      	mov	r0, r3
 800537c:	f000 fefc 	bl	8006178 <pvPortMalloc>
 8005380:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00e      	beq.n	80053a6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005388:	20a0      	movs	r0, #160	@ 0xa0
 800538a:	f000 fef5 	bl	8006178 <pvPortMalloc>
 800538e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d003      	beq.n	800539e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	697a      	ldr	r2, [r7, #20]
 800539a:	631a      	str	r2, [r3, #48]	@ 0x30
 800539c:	e005      	b.n	80053aa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800539e:	6978      	ldr	r0, [r7, #20]
 80053a0:	f000 ffb8 	bl	8006314 <vPortFree>
 80053a4:	e001      	b.n	80053aa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80053a6:	2300      	movs	r3, #0
 80053a8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d017      	beq.n	80053e0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	2200      	movs	r2, #0
 80053b4:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80053b8:	88fa      	ldrh	r2, [r7, #6]
 80053ba:	2300      	movs	r3, #0
 80053bc:	9303      	str	r3, [sp, #12]
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	9302      	str	r3, [sp, #8]
 80053c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053c4:	9301      	str	r3, [sp, #4]
 80053c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053c8:	9300      	str	r3, [sp, #0]
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	68b9      	ldr	r1, [r7, #8]
 80053ce:	68f8      	ldr	r0, [r7, #12]
 80053d0:	f000 f80e 	bl	80053f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80053d4:	69f8      	ldr	r0, [r7, #28]
 80053d6:	f000 f8ab 	bl	8005530 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80053da:	2301      	movs	r3, #1
 80053dc:	61bb      	str	r3, [r7, #24]
 80053de:	e002      	b.n	80053e6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80053e0:	f04f 33ff 	mov.w	r3, #4294967295
 80053e4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80053e6:	69bb      	ldr	r3, [r7, #24]
	}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3720      	adds	r7, #32
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b088      	sub	sp, #32
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	607a      	str	r2, [r7, #4]
 80053fc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80053fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005400:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005408:	3b01      	subs	r3, #1
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	4413      	add	r3, r2
 800540e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	f023 0307 	bic.w	r3, r3, #7
 8005416:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	f003 0307 	and.w	r3, r3, #7
 800541e:	2b00      	cmp	r3, #0
 8005420:	d00b      	beq.n	800543a <prvInitialiseNewTask+0x4a>
	__asm volatile
 8005422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005426:	f383 8811 	msr	BASEPRI, r3
 800542a:	f3bf 8f6f 	isb	sy
 800542e:	f3bf 8f4f 	dsb	sy
 8005432:	617b      	str	r3, [r7, #20]
}
 8005434:	bf00      	nop
 8005436:	bf00      	nop
 8005438:	e7fd      	b.n	8005436 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d01f      	beq.n	8005480 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005440:	2300      	movs	r3, #0
 8005442:	61fb      	str	r3, [r7, #28]
 8005444:	e012      	b.n	800546c <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005446:	68ba      	ldr	r2, [r7, #8]
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	4413      	add	r3, r2
 800544c:	7819      	ldrb	r1, [r3, #0]
 800544e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	4413      	add	r3, r2
 8005454:	3334      	adds	r3, #52	@ 0x34
 8005456:	460a      	mov	r2, r1
 8005458:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800545a:	68ba      	ldr	r2, [r7, #8]
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	4413      	add	r3, r2
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d006      	beq.n	8005474 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	3301      	adds	r3, #1
 800546a:	61fb      	str	r3, [r7, #28]
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	2b0f      	cmp	r3, #15
 8005470:	d9e9      	bls.n	8005446 <prvInitialiseNewTask+0x56>
 8005472:	e000      	b.n	8005476 <prvInitialiseNewTask+0x86>
			{
				break;
 8005474:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005478:	2200      	movs	r2, #0
 800547a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800547e:	e003      	b.n	8005488 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005482:	2200      	movs	r2, #0
 8005484:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800548a:	2b06      	cmp	r3, #6
 800548c:	d901      	bls.n	8005492 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800548e:	2306      	movs	r3, #6
 8005490:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005494:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005496:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800549a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800549c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800549e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054a0:	2200      	movs	r2, #0
 80054a2:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80054a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054a6:	3304      	adds	r3, #4
 80054a8:	4618      	mov	r0, r3
 80054aa:	f7ff fe68 	bl	800517e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80054ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054b0:	3318      	adds	r3, #24
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7ff fe63 	bl	800517e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80054b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054bc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054c0:	f1c3 0207 	rsb	r2, r3, #7
 80054c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054c6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80054c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054cc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80054ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054d0:	2200      	movs	r2, #0
 80054d2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80054d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80054de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054e0:	334c      	adds	r3, #76	@ 0x4c
 80054e2:	224c      	movs	r2, #76	@ 0x4c
 80054e4:	2100      	movs	r1, #0
 80054e6:	4618      	mov	r0, r3
 80054e8:	f001 fdc3 	bl	8007072 <memset>
 80054ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ee:	4a0d      	ldr	r2, [pc, #52]	@ (8005524 <prvInitialiseNewTask+0x134>)
 80054f0:	651a      	str	r2, [r3, #80]	@ 0x50
 80054f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054f4:	4a0c      	ldr	r2, [pc, #48]	@ (8005528 <prvInitialiseNewTask+0x138>)
 80054f6:	655a      	str	r2, [r3, #84]	@ 0x54
 80054f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054fa:	4a0c      	ldr	r2, [pc, #48]	@ (800552c <prvInitialiseNewTask+0x13c>)
 80054fc:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80054fe:	683a      	ldr	r2, [r7, #0]
 8005500:	68f9      	ldr	r1, [r7, #12]
 8005502:	69b8      	ldr	r0, [r7, #24]
 8005504:	f000 fc2a 	bl	8005d5c <pxPortInitialiseStack>
 8005508:	4602      	mov	r2, r0
 800550a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800550c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800550e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005510:	2b00      	cmp	r3, #0
 8005512:	d002      	beq.n	800551a <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005516:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005518:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800551a:	bf00      	nop
 800551c:	3720      	adds	r7, #32
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop
 8005524:	20004460 	.word	0x20004460
 8005528:	200044c8 	.word	0x200044c8
 800552c:	20004530 	.word	0x20004530

08005530 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b082      	sub	sp, #8
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005538:	f000 fd3e 	bl	8005fb8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800553c:	4b2a      	ldr	r3, [pc, #168]	@ (80055e8 <prvAddNewTaskToReadyList+0xb8>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	3301      	adds	r3, #1
 8005542:	4a29      	ldr	r2, [pc, #164]	@ (80055e8 <prvAddNewTaskToReadyList+0xb8>)
 8005544:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005546:	4b29      	ldr	r3, [pc, #164]	@ (80055ec <prvAddNewTaskToReadyList+0xbc>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d109      	bne.n	8005562 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800554e:	4a27      	ldr	r2, [pc, #156]	@ (80055ec <prvAddNewTaskToReadyList+0xbc>)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005554:	4b24      	ldr	r3, [pc, #144]	@ (80055e8 <prvAddNewTaskToReadyList+0xb8>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2b01      	cmp	r3, #1
 800555a:	d110      	bne.n	800557e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800555c:	f000 fad4 	bl	8005b08 <prvInitialiseTaskLists>
 8005560:	e00d      	b.n	800557e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005562:	4b23      	ldr	r3, [pc, #140]	@ (80055f0 <prvAddNewTaskToReadyList+0xc0>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d109      	bne.n	800557e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800556a:	4b20      	ldr	r3, [pc, #128]	@ (80055ec <prvAddNewTaskToReadyList+0xbc>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005574:	429a      	cmp	r2, r3
 8005576:	d802      	bhi.n	800557e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005578:	4a1c      	ldr	r2, [pc, #112]	@ (80055ec <prvAddNewTaskToReadyList+0xbc>)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800557e:	4b1d      	ldr	r3, [pc, #116]	@ (80055f4 <prvAddNewTaskToReadyList+0xc4>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	3301      	adds	r3, #1
 8005584:	4a1b      	ldr	r2, [pc, #108]	@ (80055f4 <prvAddNewTaskToReadyList+0xc4>)
 8005586:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800558c:	2201      	movs	r2, #1
 800558e:	409a      	lsls	r2, r3
 8005590:	4b19      	ldr	r3, [pc, #100]	@ (80055f8 <prvAddNewTaskToReadyList+0xc8>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4313      	orrs	r3, r2
 8005596:	4a18      	ldr	r2, [pc, #96]	@ (80055f8 <prvAddNewTaskToReadyList+0xc8>)
 8005598:	6013      	str	r3, [r2, #0]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800559e:	4613      	mov	r3, r2
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	4413      	add	r3, r2
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	4a15      	ldr	r2, [pc, #84]	@ (80055fc <prvAddNewTaskToReadyList+0xcc>)
 80055a8:	441a      	add	r2, r3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	3304      	adds	r3, #4
 80055ae:	4619      	mov	r1, r3
 80055b0:	4610      	mov	r0, r2
 80055b2:	f7ff fdf1 	bl	8005198 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80055b6:	f000 fd31 	bl	800601c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80055ba:	4b0d      	ldr	r3, [pc, #52]	@ (80055f0 <prvAddNewTaskToReadyList+0xc0>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d00e      	beq.n	80055e0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80055c2:	4b0a      	ldr	r3, [pc, #40]	@ (80055ec <prvAddNewTaskToReadyList+0xbc>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d207      	bcs.n	80055e0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80055d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005600 <prvAddNewTaskToReadyList+0xd0>)
 80055d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055d6:	601a      	str	r2, [r3, #0]
 80055d8:	f3bf 8f4f 	dsb	sy
 80055dc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055e0:	bf00      	nop
 80055e2:	3708      	adds	r7, #8
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	2000080c 	.word	0x2000080c
 80055ec:	2000070c 	.word	0x2000070c
 80055f0:	20000818 	.word	0x20000818
 80055f4:	20000828 	.word	0x20000828
 80055f8:	20000814 	.word	0x20000814
 80055fc:	20000710 	.word	0x20000710
 8005600:	e000ed04 	.word	0xe000ed04

08005604 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005604:	b580      	push	{r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800560c:	2300      	movs	r3, #0
 800560e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d018      	beq.n	8005648 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005616:	4b14      	ldr	r3, [pc, #80]	@ (8005668 <vTaskDelay+0x64>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d00b      	beq.n	8005636 <vTaskDelay+0x32>
	__asm volatile
 800561e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005622:	f383 8811 	msr	BASEPRI, r3
 8005626:	f3bf 8f6f 	isb	sy
 800562a:	f3bf 8f4f 	dsb	sy
 800562e:	60bb      	str	r3, [r7, #8]
}
 8005630:	bf00      	nop
 8005632:	bf00      	nop
 8005634:	e7fd      	b.n	8005632 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005636:	f000 f885 	bl	8005744 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800563a:	2100      	movs	r1, #0
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f000 fb27 	bl	8005c90 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005642:	f000 f88d 	bl	8005760 <xTaskResumeAll>
 8005646:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d107      	bne.n	800565e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800564e:	4b07      	ldr	r3, [pc, #28]	@ (800566c <vTaskDelay+0x68>)
 8005650:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005654:	601a      	str	r2, [r3, #0]
 8005656:	f3bf 8f4f 	dsb	sy
 800565a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800565e:	bf00      	nop
 8005660:	3710      	adds	r7, #16
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	20000834 	.word	0x20000834
 800566c:	e000ed04 	.word	0xe000ed04

08005670 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b08a      	sub	sp, #40	@ 0x28
 8005674:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005676:	2300      	movs	r3, #0
 8005678:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800567a:	2300      	movs	r3, #0
 800567c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800567e:	463a      	mov	r2, r7
 8005680:	1d39      	adds	r1, r7, #4
 8005682:	f107 0308 	add.w	r3, r7, #8
 8005686:	4618      	mov	r0, r3
 8005688:	f7fb fc56 	bl	8000f38 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800568c:	6839      	ldr	r1, [r7, #0]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	68ba      	ldr	r2, [r7, #8]
 8005692:	9202      	str	r2, [sp, #8]
 8005694:	9301      	str	r3, [sp, #4]
 8005696:	2300      	movs	r3, #0
 8005698:	9300      	str	r3, [sp, #0]
 800569a:	2300      	movs	r3, #0
 800569c:	460a      	mov	r2, r1
 800569e:	4921      	ldr	r1, [pc, #132]	@ (8005724 <vTaskStartScheduler+0xb4>)
 80056a0:	4821      	ldr	r0, [pc, #132]	@ (8005728 <vTaskStartScheduler+0xb8>)
 80056a2:	f7ff fe00 	bl	80052a6 <xTaskCreateStatic>
 80056a6:	4603      	mov	r3, r0
 80056a8:	4a20      	ldr	r2, [pc, #128]	@ (800572c <vTaskStartScheduler+0xbc>)
 80056aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80056ac:	4b1f      	ldr	r3, [pc, #124]	@ (800572c <vTaskStartScheduler+0xbc>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d002      	beq.n	80056ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80056b4:	2301      	movs	r3, #1
 80056b6:	617b      	str	r3, [r7, #20]
 80056b8:	e001      	b.n	80056be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80056ba:	2300      	movs	r3, #0
 80056bc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d11b      	bne.n	80056fc <vTaskStartScheduler+0x8c>
	__asm volatile
 80056c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056c8:	f383 8811 	msr	BASEPRI, r3
 80056cc:	f3bf 8f6f 	isb	sy
 80056d0:	f3bf 8f4f 	dsb	sy
 80056d4:	613b      	str	r3, [r7, #16]
}
 80056d6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80056d8:	4b15      	ldr	r3, [pc, #84]	@ (8005730 <vTaskStartScheduler+0xc0>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	334c      	adds	r3, #76	@ 0x4c
 80056de:	4a15      	ldr	r2, [pc, #84]	@ (8005734 <vTaskStartScheduler+0xc4>)
 80056e0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80056e2:	4b15      	ldr	r3, [pc, #84]	@ (8005738 <vTaskStartScheduler+0xc8>)
 80056e4:	f04f 32ff 	mov.w	r2, #4294967295
 80056e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80056ea:	4b14      	ldr	r3, [pc, #80]	@ (800573c <vTaskStartScheduler+0xcc>)
 80056ec:	2201      	movs	r2, #1
 80056ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80056f0:	4b13      	ldr	r3, [pc, #76]	@ (8005740 <vTaskStartScheduler+0xd0>)
 80056f2:	2200      	movs	r2, #0
 80056f4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80056f6:	f000 fbbb 	bl	8005e70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80056fa:	e00f      	b.n	800571c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005702:	d10b      	bne.n	800571c <vTaskStartScheduler+0xac>
	__asm volatile
 8005704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005708:	f383 8811 	msr	BASEPRI, r3
 800570c:	f3bf 8f6f 	isb	sy
 8005710:	f3bf 8f4f 	dsb	sy
 8005714:	60fb      	str	r3, [r7, #12]
}
 8005716:	bf00      	nop
 8005718:	bf00      	nop
 800571a:	e7fd      	b.n	8005718 <vTaskStartScheduler+0xa8>
}
 800571c:	bf00      	nop
 800571e:	3718      	adds	r7, #24
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}
 8005724:	08009364 	.word	0x08009364
 8005728:	08005ad9 	.word	0x08005ad9
 800572c:	20000830 	.word	0x20000830
 8005730:	2000070c 	.word	0x2000070c
 8005734:	20000024 	.word	0x20000024
 8005738:	2000082c 	.word	0x2000082c
 800573c:	20000818 	.word	0x20000818
 8005740:	20000810 	.word	0x20000810

08005744 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005744:	b480      	push	{r7}
 8005746:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005748:	4b04      	ldr	r3, [pc, #16]	@ (800575c <vTaskSuspendAll+0x18>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	3301      	adds	r3, #1
 800574e:	4a03      	ldr	r2, [pc, #12]	@ (800575c <vTaskSuspendAll+0x18>)
 8005750:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005752:	bf00      	nop
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr
 800575c:	20000834 	.word	0x20000834

08005760 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005766:	2300      	movs	r3, #0
 8005768:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800576a:	2300      	movs	r3, #0
 800576c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800576e:	4b42      	ldr	r3, [pc, #264]	@ (8005878 <xTaskResumeAll+0x118>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d10b      	bne.n	800578e <xTaskResumeAll+0x2e>
	__asm volatile
 8005776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800577a:	f383 8811 	msr	BASEPRI, r3
 800577e:	f3bf 8f6f 	isb	sy
 8005782:	f3bf 8f4f 	dsb	sy
 8005786:	603b      	str	r3, [r7, #0]
}
 8005788:	bf00      	nop
 800578a:	bf00      	nop
 800578c:	e7fd      	b.n	800578a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800578e:	f000 fc13 	bl	8005fb8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005792:	4b39      	ldr	r3, [pc, #228]	@ (8005878 <xTaskResumeAll+0x118>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	3b01      	subs	r3, #1
 8005798:	4a37      	ldr	r2, [pc, #220]	@ (8005878 <xTaskResumeAll+0x118>)
 800579a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800579c:	4b36      	ldr	r3, [pc, #216]	@ (8005878 <xTaskResumeAll+0x118>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d161      	bne.n	8005868 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80057a4:	4b35      	ldr	r3, [pc, #212]	@ (800587c <xTaskResumeAll+0x11c>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d05d      	beq.n	8005868 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80057ac:	e02e      	b.n	800580c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057ae:	4b34      	ldr	r3, [pc, #208]	@ (8005880 <xTaskResumeAll+0x120>)
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	3318      	adds	r3, #24
 80057ba:	4618      	mov	r0, r3
 80057bc:	f7ff fd49 	bl	8005252 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	3304      	adds	r3, #4
 80057c4:	4618      	mov	r0, r3
 80057c6:	f7ff fd44 	bl	8005252 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ce:	2201      	movs	r2, #1
 80057d0:	409a      	lsls	r2, r3
 80057d2:	4b2c      	ldr	r3, [pc, #176]	@ (8005884 <xTaskResumeAll+0x124>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	4a2a      	ldr	r2, [pc, #168]	@ (8005884 <xTaskResumeAll+0x124>)
 80057da:	6013      	str	r3, [r2, #0]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057e0:	4613      	mov	r3, r2
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	4413      	add	r3, r2
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	4a27      	ldr	r2, [pc, #156]	@ (8005888 <xTaskResumeAll+0x128>)
 80057ea:	441a      	add	r2, r3
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	3304      	adds	r3, #4
 80057f0:	4619      	mov	r1, r3
 80057f2:	4610      	mov	r0, r2
 80057f4:	f7ff fcd0 	bl	8005198 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057fc:	4b23      	ldr	r3, [pc, #140]	@ (800588c <xTaskResumeAll+0x12c>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005802:	429a      	cmp	r2, r3
 8005804:	d302      	bcc.n	800580c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005806:	4b22      	ldr	r3, [pc, #136]	@ (8005890 <xTaskResumeAll+0x130>)
 8005808:	2201      	movs	r2, #1
 800580a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800580c:	4b1c      	ldr	r3, [pc, #112]	@ (8005880 <xTaskResumeAll+0x120>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d1cc      	bne.n	80057ae <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d001      	beq.n	800581e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800581a:	f000 fa19 	bl	8005c50 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800581e:	4b1d      	ldr	r3, [pc, #116]	@ (8005894 <xTaskResumeAll+0x134>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d010      	beq.n	800584c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800582a:	f000 f837 	bl	800589c <xTaskIncrementTick>
 800582e:	4603      	mov	r3, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d002      	beq.n	800583a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005834:	4b16      	ldr	r3, [pc, #88]	@ (8005890 <xTaskResumeAll+0x130>)
 8005836:	2201      	movs	r2, #1
 8005838:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	3b01      	subs	r3, #1
 800583e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d1f1      	bne.n	800582a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005846:	4b13      	ldr	r3, [pc, #76]	@ (8005894 <xTaskResumeAll+0x134>)
 8005848:	2200      	movs	r2, #0
 800584a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800584c:	4b10      	ldr	r3, [pc, #64]	@ (8005890 <xTaskResumeAll+0x130>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d009      	beq.n	8005868 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005854:	2301      	movs	r3, #1
 8005856:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005858:	4b0f      	ldr	r3, [pc, #60]	@ (8005898 <xTaskResumeAll+0x138>)
 800585a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800585e:	601a      	str	r2, [r3, #0]
 8005860:	f3bf 8f4f 	dsb	sy
 8005864:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005868:	f000 fbd8 	bl	800601c <vPortExitCritical>

	return xAlreadyYielded;
 800586c:	68bb      	ldr	r3, [r7, #8]
}
 800586e:	4618      	mov	r0, r3
 8005870:	3710      	adds	r7, #16
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	20000834 	.word	0x20000834
 800587c:	2000080c 	.word	0x2000080c
 8005880:	200007cc 	.word	0x200007cc
 8005884:	20000814 	.word	0x20000814
 8005888:	20000710 	.word	0x20000710
 800588c:	2000070c 	.word	0x2000070c
 8005890:	20000820 	.word	0x20000820
 8005894:	2000081c 	.word	0x2000081c
 8005898:	e000ed04 	.word	0xe000ed04

0800589c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b086      	sub	sp, #24
 80058a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80058a2:	2300      	movs	r3, #0
 80058a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058a6:	4b4f      	ldr	r3, [pc, #316]	@ (80059e4 <xTaskIncrementTick+0x148>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	f040 808f 	bne.w	80059ce <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80058b0:	4b4d      	ldr	r3, [pc, #308]	@ (80059e8 <xTaskIncrementTick+0x14c>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	3301      	adds	r3, #1
 80058b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80058b8:	4a4b      	ldr	r2, [pc, #300]	@ (80059e8 <xTaskIncrementTick+0x14c>)
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d121      	bne.n	8005908 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80058c4:	4b49      	ldr	r3, [pc, #292]	@ (80059ec <xTaskIncrementTick+0x150>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d00b      	beq.n	80058e6 <xTaskIncrementTick+0x4a>
	__asm volatile
 80058ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058d2:	f383 8811 	msr	BASEPRI, r3
 80058d6:	f3bf 8f6f 	isb	sy
 80058da:	f3bf 8f4f 	dsb	sy
 80058de:	603b      	str	r3, [r7, #0]
}
 80058e0:	bf00      	nop
 80058e2:	bf00      	nop
 80058e4:	e7fd      	b.n	80058e2 <xTaskIncrementTick+0x46>
 80058e6:	4b41      	ldr	r3, [pc, #260]	@ (80059ec <xTaskIncrementTick+0x150>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	60fb      	str	r3, [r7, #12]
 80058ec:	4b40      	ldr	r3, [pc, #256]	@ (80059f0 <xTaskIncrementTick+0x154>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a3e      	ldr	r2, [pc, #248]	@ (80059ec <xTaskIncrementTick+0x150>)
 80058f2:	6013      	str	r3, [r2, #0]
 80058f4:	4a3e      	ldr	r2, [pc, #248]	@ (80059f0 <xTaskIncrementTick+0x154>)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6013      	str	r3, [r2, #0]
 80058fa:	4b3e      	ldr	r3, [pc, #248]	@ (80059f4 <xTaskIncrementTick+0x158>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	3301      	adds	r3, #1
 8005900:	4a3c      	ldr	r2, [pc, #240]	@ (80059f4 <xTaskIncrementTick+0x158>)
 8005902:	6013      	str	r3, [r2, #0]
 8005904:	f000 f9a4 	bl	8005c50 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005908:	4b3b      	ldr	r3, [pc, #236]	@ (80059f8 <xTaskIncrementTick+0x15c>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	693a      	ldr	r2, [r7, #16]
 800590e:	429a      	cmp	r2, r3
 8005910:	d348      	bcc.n	80059a4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005912:	4b36      	ldr	r3, [pc, #216]	@ (80059ec <xTaskIncrementTick+0x150>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d104      	bne.n	8005926 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800591c:	4b36      	ldr	r3, [pc, #216]	@ (80059f8 <xTaskIncrementTick+0x15c>)
 800591e:	f04f 32ff 	mov.w	r2, #4294967295
 8005922:	601a      	str	r2, [r3, #0]
					break;
 8005924:	e03e      	b.n	80059a4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005926:	4b31      	ldr	r3, [pc, #196]	@ (80059ec <xTaskIncrementTick+0x150>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005936:	693a      	ldr	r2, [r7, #16]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	429a      	cmp	r2, r3
 800593c:	d203      	bcs.n	8005946 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800593e:	4a2e      	ldr	r2, [pc, #184]	@ (80059f8 <xTaskIncrementTick+0x15c>)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005944:	e02e      	b.n	80059a4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	3304      	adds	r3, #4
 800594a:	4618      	mov	r0, r3
 800594c:	f7ff fc81 	bl	8005252 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005954:	2b00      	cmp	r3, #0
 8005956:	d004      	beq.n	8005962 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	3318      	adds	r3, #24
 800595c:	4618      	mov	r0, r3
 800595e:	f7ff fc78 	bl	8005252 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005966:	2201      	movs	r2, #1
 8005968:	409a      	lsls	r2, r3
 800596a:	4b24      	ldr	r3, [pc, #144]	@ (80059fc <xTaskIncrementTick+0x160>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4313      	orrs	r3, r2
 8005970:	4a22      	ldr	r2, [pc, #136]	@ (80059fc <xTaskIncrementTick+0x160>)
 8005972:	6013      	str	r3, [r2, #0]
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005978:	4613      	mov	r3, r2
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	4413      	add	r3, r2
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	4a1f      	ldr	r2, [pc, #124]	@ (8005a00 <xTaskIncrementTick+0x164>)
 8005982:	441a      	add	r2, r3
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	3304      	adds	r3, #4
 8005988:	4619      	mov	r1, r3
 800598a:	4610      	mov	r0, r2
 800598c:	f7ff fc04 	bl	8005198 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005994:	4b1b      	ldr	r3, [pc, #108]	@ (8005a04 <xTaskIncrementTick+0x168>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800599a:	429a      	cmp	r2, r3
 800599c:	d3b9      	bcc.n	8005912 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800599e:	2301      	movs	r3, #1
 80059a0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059a2:	e7b6      	b.n	8005912 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80059a4:	4b17      	ldr	r3, [pc, #92]	@ (8005a04 <xTaskIncrementTick+0x168>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059aa:	4915      	ldr	r1, [pc, #84]	@ (8005a00 <xTaskIncrementTick+0x164>)
 80059ac:	4613      	mov	r3, r2
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	4413      	add	r3, r2
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	440b      	add	r3, r1
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d901      	bls.n	80059c0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80059bc:	2301      	movs	r3, #1
 80059be:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80059c0:	4b11      	ldr	r3, [pc, #68]	@ (8005a08 <xTaskIncrementTick+0x16c>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d007      	beq.n	80059d8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80059c8:	2301      	movs	r3, #1
 80059ca:	617b      	str	r3, [r7, #20]
 80059cc:	e004      	b.n	80059d8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80059ce:	4b0f      	ldr	r3, [pc, #60]	@ (8005a0c <xTaskIncrementTick+0x170>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	3301      	adds	r3, #1
 80059d4:	4a0d      	ldr	r2, [pc, #52]	@ (8005a0c <xTaskIncrementTick+0x170>)
 80059d6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80059d8:	697b      	ldr	r3, [r7, #20]
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3718      	adds	r7, #24
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	20000834 	.word	0x20000834
 80059e8:	20000810 	.word	0x20000810
 80059ec:	200007c4 	.word	0x200007c4
 80059f0:	200007c8 	.word	0x200007c8
 80059f4:	20000824 	.word	0x20000824
 80059f8:	2000082c 	.word	0x2000082c
 80059fc:	20000814 	.word	0x20000814
 8005a00:	20000710 	.word	0x20000710
 8005a04:	2000070c 	.word	0x2000070c
 8005a08:	20000820 	.word	0x20000820
 8005a0c:	2000081c 	.word	0x2000081c

08005a10 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005a10:	b480      	push	{r7}
 8005a12:	b087      	sub	sp, #28
 8005a14:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005a16:	4b2a      	ldr	r3, [pc, #168]	@ (8005ac0 <vTaskSwitchContext+0xb0>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d003      	beq.n	8005a26 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005a1e:	4b29      	ldr	r3, [pc, #164]	@ (8005ac4 <vTaskSwitchContext+0xb4>)
 8005a20:	2201      	movs	r2, #1
 8005a22:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005a24:	e045      	b.n	8005ab2 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8005a26:	4b27      	ldr	r3, [pc, #156]	@ (8005ac4 <vTaskSwitchContext+0xb4>)
 8005a28:	2200      	movs	r2, #0
 8005a2a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a2c:	4b26      	ldr	r3, [pc, #152]	@ (8005ac8 <vTaskSwitchContext+0xb8>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	fab3 f383 	clz	r3, r3
 8005a38:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005a3a:	7afb      	ldrb	r3, [r7, #11]
 8005a3c:	f1c3 031f 	rsb	r3, r3, #31
 8005a40:	617b      	str	r3, [r7, #20]
 8005a42:	4922      	ldr	r1, [pc, #136]	@ (8005acc <vTaskSwitchContext+0xbc>)
 8005a44:	697a      	ldr	r2, [r7, #20]
 8005a46:	4613      	mov	r3, r2
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	4413      	add	r3, r2
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	440b      	add	r3, r1
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d10b      	bne.n	8005a6e <vTaskSwitchContext+0x5e>
	__asm volatile
 8005a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a5a:	f383 8811 	msr	BASEPRI, r3
 8005a5e:	f3bf 8f6f 	isb	sy
 8005a62:	f3bf 8f4f 	dsb	sy
 8005a66:	607b      	str	r3, [r7, #4]
}
 8005a68:	bf00      	nop
 8005a6a:	bf00      	nop
 8005a6c:	e7fd      	b.n	8005a6a <vTaskSwitchContext+0x5a>
 8005a6e:	697a      	ldr	r2, [r7, #20]
 8005a70:	4613      	mov	r3, r2
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	4413      	add	r3, r2
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	4a14      	ldr	r2, [pc, #80]	@ (8005acc <vTaskSwitchContext+0xbc>)
 8005a7a:	4413      	add	r3, r2
 8005a7c:	613b      	str	r3, [r7, #16]
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	685a      	ldr	r2, [r3, #4]
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	605a      	str	r2, [r3, #4]
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	685a      	ldr	r2, [r3, #4]
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	3308      	adds	r3, #8
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d104      	bne.n	8005a9e <vTaskSwitchContext+0x8e>
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	685a      	ldr	r2, [r3, #4]
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	605a      	str	r2, [r3, #4]
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	4a0a      	ldr	r2, [pc, #40]	@ (8005ad0 <vTaskSwitchContext+0xc0>)
 8005aa6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005aa8:	4b09      	ldr	r3, [pc, #36]	@ (8005ad0 <vTaskSwitchContext+0xc0>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	334c      	adds	r3, #76	@ 0x4c
 8005aae:	4a09      	ldr	r2, [pc, #36]	@ (8005ad4 <vTaskSwitchContext+0xc4>)
 8005ab0:	6013      	str	r3, [r2, #0]
}
 8005ab2:	bf00      	nop
 8005ab4:	371c      	adds	r7, #28
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr
 8005abe:	bf00      	nop
 8005ac0:	20000834 	.word	0x20000834
 8005ac4:	20000820 	.word	0x20000820
 8005ac8:	20000814 	.word	0x20000814
 8005acc:	20000710 	.word	0x20000710
 8005ad0:	2000070c 	.word	0x2000070c
 8005ad4:	20000024 	.word	0x20000024

08005ad8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b082      	sub	sp, #8
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005ae0:	f000 f852 	bl	8005b88 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005ae4:	4b06      	ldr	r3, [pc, #24]	@ (8005b00 <prvIdleTask+0x28>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d9f9      	bls.n	8005ae0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005aec:	4b05      	ldr	r3, [pc, #20]	@ (8005b04 <prvIdleTask+0x2c>)
 8005aee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005af2:	601a      	str	r2, [r3, #0]
 8005af4:	f3bf 8f4f 	dsb	sy
 8005af8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005afc:	e7f0      	b.n	8005ae0 <prvIdleTask+0x8>
 8005afe:	bf00      	nop
 8005b00:	20000710 	.word	0x20000710
 8005b04:	e000ed04 	.word	0xe000ed04

08005b08 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b0e:	2300      	movs	r3, #0
 8005b10:	607b      	str	r3, [r7, #4]
 8005b12:	e00c      	b.n	8005b2e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	4613      	mov	r3, r2
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	4413      	add	r3, r2
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	4a12      	ldr	r2, [pc, #72]	@ (8005b68 <prvInitialiseTaskLists+0x60>)
 8005b20:	4413      	add	r3, r2
 8005b22:	4618      	mov	r0, r3
 8005b24:	f7ff fb0b 	bl	800513e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	607b      	str	r3, [r7, #4]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2b06      	cmp	r3, #6
 8005b32:	d9ef      	bls.n	8005b14 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005b34:	480d      	ldr	r0, [pc, #52]	@ (8005b6c <prvInitialiseTaskLists+0x64>)
 8005b36:	f7ff fb02 	bl	800513e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005b3a:	480d      	ldr	r0, [pc, #52]	@ (8005b70 <prvInitialiseTaskLists+0x68>)
 8005b3c:	f7ff faff 	bl	800513e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005b40:	480c      	ldr	r0, [pc, #48]	@ (8005b74 <prvInitialiseTaskLists+0x6c>)
 8005b42:	f7ff fafc 	bl	800513e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005b46:	480c      	ldr	r0, [pc, #48]	@ (8005b78 <prvInitialiseTaskLists+0x70>)
 8005b48:	f7ff faf9 	bl	800513e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005b4c:	480b      	ldr	r0, [pc, #44]	@ (8005b7c <prvInitialiseTaskLists+0x74>)
 8005b4e:	f7ff faf6 	bl	800513e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005b52:	4b0b      	ldr	r3, [pc, #44]	@ (8005b80 <prvInitialiseTaskLists+0x78>)
 8005b54:	4a05      	ldr	r2, [pc, #20]	@ (8005b6c <prvInitialiseTaskLists+0x64>)
 8005b56:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005b58:	4b0a      	ldr	r3, [pc, #40]	@ (8005b84 <prvInitialiseTaskLists+0x7c>)
 8005b5a:	4a05      	ldr	r2, [pc, #20]	@ (8005b70 <prvInitialiseTaskLists+0x68>)
 8005b5c:	601a      	str	r2, [r3, #0]
}
 8005b5e:	bf00      	nop
 8005b60:	3708      	adds	r7, #8
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	20000710 	.word	0x20000710
 8005b6c:	2000079c 	.word	0x2000079c
 8005b70:	200007b0 	.word	0x200007b0
 8005b74:	200007cc 	.word	0x200007cc
 8005b78:	200007e0 	.word	0x200007e0
 8005b7c:	200007f8 	.word	0x200007f8
 8005b80:	200007c4 	.word	0x200007c4
 8005b84:	200007c8 	.word	0x200007c8

08005b88 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b082      	sub	sp, #8
 8005b8c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b8e:	e019      	b.n	8005bc4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005b90:	f000 fa12 	bl	8005fb8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b94:	4b10      	ldr	r3, [pc, #64]	@ (8005bd8 <prvCheckTasksWaitingTermination+0x50>)
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	3304      	adds	r3, #4
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f7ff fb56 	bl	8005252 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8005bdc <prvCheckTasksWaitingTermination+0x54>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	3b01      	subs	r3, #1
 8005bac:	4a0b      	ldr	r2, [pc, #44]	@ (8005bdc <prvCheckTasksWaitingTermination+0x54>)
 8005bae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8005be0 <prvCheckTasksWaitingTermination+0x58>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	3b01      	subs	r3, #1
 8005bb6:	4a0a      	ldr	r2, [pc, #40]	@ (8005be0 <prvCheckTasksWaitingTermination+0x58>)
 8005bb8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005bba:	f000 fa2f 	bl	800601c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 f810 	bl	8005be4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005bc4:	4b06      	ldr	r3, [pc, #24]	@ (8005be0 <prvCheckTasksWaitingTermination+0x58>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d1e1      	bne.n	8005b90 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005bcc:	bf00      	nop
 8005bce:	bf00      	nop
 8005bd0:	3708      	adds	r7, #8
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	200007e0 	.word	0x200007e0
 8005bdc:	2000080c 	.word	0x2000080c
 8005be0:	200007f4 	.word	0x200007f4

08005be4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	334c      	adds	r3, #76	@ 0x4c
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f001 fa5b 	bl	80070ac <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d108      	bne.n	8005c12 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c04:	4618      	mov	r0, r3
 8005c06:	f000 fb85 	bl	8006314 <vPortFree>
				vPortFree( pxTCB );
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 fb82 	bl	8006314 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005c10:	e019      	b.n	8005c46 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d103      	bne.n	8005c24 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f000 fb79 	bl	8006314 <vPortFree>
	}
 8005c22:	e010      	b.n	8005c46 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005c2a:	2b02      	cmp	r3, #2
 8005c2c:	d00b      	beq.n	8005c46 <prvDeleteTCB+0x62>
	__asm volatile
 8005c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c32:	f383 8811 	msr	BASEPRI, r3
 8005c36:	f3bf 8f6f 	isb	sy
 8005c3a:	f3bf 8f4f 	dsb	sy
 8005c3e:	60fb      	str	r3, [r7, #12]
}
 8005c40:	bf00      	nop
 8005c42:	bf00      	nop
 8005c44:	e7fd      	b.n	8005c42 <prvDeleteTCB+0x5e>
	}
 8005c46:	bf00      	nop
 8005c48:	3710      	adds	r7, #16
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
	...

08005c50 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c56:	4b0c      	ldr	r3, [pc, #48]	@ (8005c88 <prvResetNextTaskUnblockTime+0x38>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d104      	bne.n	8005c6a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005c60:	4b0a      	ldr	r3, [pc, #40]	@ (8005c8c <prvResetNextTaskUnblockTime+0x3c>)
 8005c62:	f04f 32ff 	mov.w	r2, #4294967295
 8005c66:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005c68:	e008      	b.n	8005c7c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c6a:	4b07      	ldr	r3, [pc, #28]	@ (8005c88 <prvResetNextTaskUnblockTime+0x38>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	4a04      	ldr	r2, [pc, #16]	@ (8005c8c <prvResetNextTaskUnblockTime+0x3c>)
 8005c7a:	6013      	str	r3, [r2, #0]
}
 8005c7c:	bf00      	nop
 8005c7e:	370c      	adds	r7, #12
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr
 8005c88:	200007c4 	.word	0x200007c4
 8005c8c:	2000082c 	.word	0x2000082c

08005c90 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005c9a:	4b29      	ldr	r3, [pc, #164]	@ (8005d40 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ca0:	4b28      	ldr	r3, [pc, #160]	@ (8005d44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	3304      	adds	r3, #4
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f7ff fad3 	bl	8005252 <uxListRemove>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d10b      	bne.n	8005cca <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005cb2:	4b24      	ldr	r3, [pc, #144]	@ (8005d44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cb8:	2201      	movs	r2, #1
 8005cba:	fa02 f303 	lsl.w	r3, r2, r3
 8005cbe:	43da      	mvns	r2, r3
 8005cc0:	4b21      	ldr	r3, [pc, #132]	@ (8005d48 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	4a20      	ldr	r2, [pc, #128]	@ (8005d48 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005cc8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cd0:	d10a      	bne.n	8005ce8 <prvAddCurrentTaskToDelayedList+0x58>
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d007      	beq.n	8005ce8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005cd8:	4b1a      	ldr	r3, [pc, #104]	@ (8005d44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	3304      	adds	r3, #4
 8005cde:	4619      	mov	r1, r3
 8005ce0:	481a      	ldr	r0, [pc, #104]	@ (8005d4c <prvAddCurrentTaskToDelayedList+0xbc>)
 8005ce2:	f7ff fa59 	bl	8005198 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005ce6:	e026      	b.n	8005d36 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4413      	add	r3, r2
 8005cee:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005cf0:	4b14      	ldr	r3, [pc, #80]	@ (8005d44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68ba      	ldr	r2, [r7, #8]
 8005cf6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005cf8:	68ba      	ldr	r2, [r7, #8]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d209      	bcs.n	8005d14 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d00:	4b13      	ldr	r3, [pc, #76]	@ (8005d50 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	4b0f      	ldr	r3, [pc, #60]	@ (8005d44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	3304      	adds	r3, #4
 8005d0a:	4619      	mov	r1, r3
 8005d0c:	4610      	mov	r0, r2
 8005d0e:	f7ff fa67 	bl	80051e0 <vListInsert>
}
 8005d12:	e010      	b.n	8005d36 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d14:	4b0f      	ldr	r3, [pc, #60]	@ (8005d54 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	4b0a      	ldr	r3, [pc, #40]	@ (8005d44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	3304      	adds	r3, #4
 8005d1e:	4619      	mov	r1, r3
 8005d20:	4610      	mov	r0, r2
 8005d22:	f7ff fa5d 	bl	80051e0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005d26:	4b0c      	ldr	r3, [pc, #48]	@ (8005d58 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	68ba      	ldr	r2, [r7, #8]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d202      	bcs.n	8005d36 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005d30:	4a09      	ldr	r2, [pc, #36]	@ (8005d58 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	6013      	str	r3, [r2, #0]
}
 8005d36:	bf00      	nop
 8005d38:	3710      	adds	r7, #16
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	20000810 	.word	0x20000810
 8005d44:	2000070c 	.word	0x2000070c
 8005d48:	20000814 	.word	0x20000814
 8005d4c:	200007f8 	.word	0x200007f8
 8005d50:	200007c8 	.word	0x200007c8
 8005d54:	200007c4 	.word	0x200007c4
 8005d58:	2000082c 	.word	0x2000082c

08005d5c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b085      	sub	sp, #20
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	60b9      	str	r1, [r7, #8]
 8005d66:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	3b04      	subs	r3, #4
 8005d6c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005d74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	3b04      	subs	r3, #4
 8005d7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	f023 0201 	bic.w	r2, r3, #1
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	3b04      	subs	r3, #4
 8005d8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005d8c:	4a0c      	ldr	r2, [pc, #48]	@ (8005dc0 <pxPortInitialiseStack+0x64>)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	3b14      	subs	r3, #20
 8005d96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	3b04      	subs	r3, #4
 8005da2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f06f 0202 	mvn.w	r2, #2
 8005daa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	3b20      	subs	r3, #32
 8005db0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005db2:	68fb      	ldr	r3, [r7, #12]
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3714      	adds	r7, #20
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr
 8005dc0:	08005dc5 	.word	0x08005dc5

08005dc4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b085      	sub	sp, #20
 8005dc8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005dce:	4b13      	ldr	r3, [pc, #76]	@ (8005e1c <prvTaskExitError+0x58>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dd6:	d00b      	beq.n	8005df0 <prvTaskExitError+0x2c>
	__asm volatile
 8005dd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ddc:	f383 8811 	msr	BASEPRI, r3
 8005de0:	f3bf 8f6f 	isb	sy
 8005de4:	f3bf 8f4f 	dsb	sy
 8005de8:	60fb      	str	r3, [r7, #12]
}
 8005dea:	bf00      	nop
 8005dec:	bf00      	nop
 8005dee:	e7fd      	b.n	8005dec <prvTaskExitError+0x28>
	__asm volatile
 8005df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005df4:	f383 8811 	msr	BASEPRI, r3
 8005df8:	f3bf 8f6f 	isb	sy
 8005dfc:	f3bf 8f4f 	dsb	sy
 8005e00:	60bb      	str	r3, [r7, #8]
}
 8005e02:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005e04:	bf00      	nop
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d0fc      	beq.n	8005e06 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005e0c:	bf00      	nop
 8005e0e:	bf00      	nop
 8005e10:	3714      	adds	r7, #20
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr
 8005e1a:	bf00      	nop
 8005e1c:	20000014 	.word	0x20000014

08005e20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005e20:	4b07      	ldr	r3, [pc, #28]	@ (8005e40 <pxCurrentTCBConst2>)
 8005e22:	6819      	ldr	r1, [r3, #0]
 8005e24:	6808      	ldr	r0, [r1, #0]
 8005e26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e2a:	f380 8809 	msr	PSP, r0
 8005e2e:	f3bf 8f6f 	isb	sy
 8005e32:	f04f 0000 	mov.w	r0, #0
 8005e36:	f380 8811 	msr	BASEPRI, r0
 8005e3a:	4770      	bx	lr
 8005e3c:	f3af 8000 	nop.w

08005e40 <pxCurrentTCBConst2>:
 8005e40:	2000070c 	.word	0x2000070c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005e44:	bf00      	nop
 8005e46:	bf00      	nop

08005e48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005e48:	4808      	ldr	r0, [pc, #32]	@ (8005e6c <prvPortStartFirstTask+0x24>)
 8005e4a:	6800      	ldr	r0, [r0, #0]
 8005e4c:	6800      	ldr	r0, [r0, #0]
 8005e4e:	f380 8808 	msr	MSP, r0
 8005e52:	f04f 0000 	mov.w	r0, #0
 8005e56:	f380 8814 	msr	CONTROL, r0
 8005e5a:	b662      	cpsie	i
 8005e5c:	b661      	cpsie	f
 8005e5e:	f3bf 8f4f 	dsb	sy
 8005e62:	f3bf 8f6f 	isb	sy
 8005e66:	df00      	svc	0
 8005e68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005e6a:	bf00      	nop
 8005e6c:	e000ed08 	.word	0xe000ed08

08005e70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b086      	sub	sp, #24
 8005e74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005e76:	4b47      	ldr	r3, [pc, #284]	@ (8005f94 <xPortStartScheduler+0x124>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a47      	ldr	r2, [pc, #284]	@ (8005f98 <xPortStartScheduler+0x128>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d10b      	bne.n	8005e98 <xPortStartScheduler+0x28>
	__asm volatile
 8005e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e84:	f383 8811 	msr	BASEPRI, r3
 8005e88:	f3bf 8f6f 	isb	sy
 8005e8c:	f3bf 8f4f 	dsb	sy
 8005e90:	613b      	str	r3, [r7, #16]
}
 8005e92:	bf00      	nop
 8005e94:	bf00      	nop
 8005e96:	e7fd      	b.n	8005e94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005e98:	4b3e      	ldr	r3, [pc, #248]	@ (8005f94 <xPortStartScheduler+0x124>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a3f      	ldr	r2, [pc, #252]	@ (8005f9c <xPortStartScheduler+0x12c>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d10b      	bne.n	8005eba <xPortStartScheduler+0x4a>
	__asm volatile
 8005ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ea6:	f383 8811 	msr	BASEPRI, r3
 8005eaa:	f3bf 8f6f 	isb	sy
 8005eae:	f3bf 8f4f 	dsb	sy
 8005eb2:	60fb      	str	r3, [r7, #12]
}
 8005eb4:	bf00      	nop
 8005eb6:	bf00      	nop
 8005eb8:	e7fd      	b.n	8005eb6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005eba:	4b39      	ldr	r3, [pc, #228]	@ (8005fa0 <xPortStartScheduler+0x130>)
 8005ebc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	22ff      	movs	r2, #255	@ 0xff
 8005eca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005ed4:	78fb      	ldrb	r3, [r7, #3]
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005edc:	b2da      	uxtb	r2, r3
 8005ede:	4b31      	ldr	r3, [pc, #196]	@ (8005fa4 <xPortStartScheduler+0x134>)
 8005ee0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005ee2:	4b31      	ldr	r3, [pc, #196]	@ (8005fa8 <xPortStartScheduler+0x138>)
 8005ee4:	2207      	movs	r2, #7
 8005ee6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ee8:	e009      	b.n	8005efe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005eea:	4b2f      	ldr	r3, [pc, #188]	@ (8005fa8 <xPortStartScheduler+0x138>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	4a2d      	ldr	r2, [pc, #180]	@ (8005fa8 <xPortStartScheduler+0x138>)
 8005ef2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005ef4:	78fb      	ldrb	r3, [r7, #3]
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	005b      	lsls	r3, r3, #1
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005efe:	78fb      	ldrb	r3, [r7, #3]
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f06:	2b80      	cmp	r3, #128	@ 0x80
 8005f08:	d0ef      	beq.n	8005eea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005f0a:	4b27      	ldr	r3, [pc, #156]	@ (8005fa8 <xPortStartScheduler+0x138>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f1c3 0307 	rsb	r3, r3, #7
 8005f12:	2b04      	cmp	r3, #4
 8005f14:	d00b      	beq.n	8005f2e <xPortStartScheduler+0xbe>
	__asm volatile
 8005f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f1a:	f383 8811 	msr	BASEPRI, r3
 8005f1e:	f3bf 8f6f 	isb	sy
 8005f22:	f3bf 8f4f 	dsb	sy
 8005f26:	60bb      	str	r3, [r7, #8]
}
 8005f28:	bf00      	nop
 8005f2a:	bf00      	nop
 8005f2c:	e7fd      	b.n	8005f2a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005f2e:	4b1e      	ldr	r3, [pc, #120]	@ (8005fa8 <xPortStartScheduler+0x138>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	021b      	lsls	r3, r3, #8
 8005f34:	4a1c      	ldr	r2, [pc, #112]	@ (8005fa8 <xPortStartScheduler+0x138>)
 8005f36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005f38:	4b1b      	ldr	r3, [pc, #108]	@ (8005fa8 <xPortStartScheduler+0x138>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005f40:	4a19      	ldr	r2, [pc, #100]	@ (8005fa8 <xPortStartScheduler+0x138>)
 8005f42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	b2da      	uxtb	r2, r3
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005f4c:	4b17      	ldr	r3, [pc, #92]	@ (8005fac <xPortStartScheduler+0x13c>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a16      	ldr	r2, [pc, #88]	@ (8005fac <xPortStartScheduler+0x13c>)
 8005f52:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005f56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005f58:	4b14      	ldr	r3, [pc, #80]	@ (8005fac <xPortStartScheduler+0x13c>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a13      	ldr	r2, [pc, #76]	@ (8005fac <xPortStartScheduler+0x13c>)
 8005f5e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005f62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005f64:	f000 f8da 	bl	800611c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005f68:	4b11      	ldr	r3, [pc, #68]	@ (8005fb0 <xPortStartScheduler+0x140>)
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005f6e:	f000 f8f9 	bl	8006164 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005f72:	4b10      	ldr	r3, [pc, #64]	@ (8005fb4 <xPortStartScheduler+0x144>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a0f      	ldr	r2, [pc, #60]	@ (8005fb4 <xPortStartScheduler+0x144>)
 8005f78:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005f7c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005f7e:	f7ff ff63 	bl	8005e48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005f82:	f7ff fd45 	bl	8005a10 <vTaskSwitchContext>
	prvTaskExitError();
 8005f86:	f7ff ff1d 	bl	8005dc4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3718      	adds	r7, #24
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	e000ed00 	.word	0xe000ed00
 8005f98:	410fc271 	.word	0x410fc271
 8005f9c:	410fc270 	.word	0x410fc270
 8005fa0:	e000e400 	.word	0xe000e400
 8005fa4:	20000838 	.word	0x20000838
 8005fa8:	2000083c 	.word	0x2000083c
 8005fac:	e000ed20 	.word	0xe000ed20
 8005fb0:	20000014 	.word	0x20000014
 8005fb4:	e000ef34 	.word	0xe000ef34

08005fb8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
	__asm volatile
 8005fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fc2:	f383 8811 	msr	BASEPRI, r3
 8005fc6:	f3bf 8f6f 	isb	sy
 8005fca:	f3bf 8f4f 	dsb	sy
 8005fce:	607b      	str	r3, [r7, #4]
}
 8005fd0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005fd2:	4b10      	ldr	r3, [pc, #64]	@ (8006014 <vPortEnterCritical+0x5c>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	4a0e      	ldr	r2, [pc, #56]	@ (8006014 <vPortEnterCritical+0x5c>)
 8005fda:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005fdc:	4b0d      	ldr	r3, [pc, #52]	@ (8006014 <vPortEnterCritical+0x5c>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d110      	bne.n	8006006 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005fe4:	4b0c      	ldr	r3, [pc, #48]	@ (8006018 <vPortEnterCritical+0x60>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00b      	beq.n	8006006 <vPortEnterCritical+0x4e>
	__asm volatile
 8005fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ff2:	f383 8811 	msr	BASEPRI, r3
 8005ff6:	f3bf 8f6f 	isb	sy
 8005ffa:	f3bf 8f4f 	dsb	sy
 8005ffe:	603b      	str	r3, [r7, #0]
}
 8006000:	bf00      	nop
 8006002:	bf00      	nop
 8006004:	e7fd      	b.n	8006002 <vPortEnterCritical+0x4a>
	}
}
 8006006:	bf00      	nop
 8006008:	370c      	adds	r7, #12
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr
 8006012:	bf00      	nop
 8006014:	20000014 	.word	0x20000014
 8006018:	e000ed04 	.word	0xe000ed04

0800601c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006022:	4b12      	ldr	r3, [pc, #72]	@ (800606c <vPortExitCritical+0x50>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d10b      	bne.n	8006042 <vPortExitCritical+0x26>
	__asm volatile
 800602a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800602e:	f383 8811 	msr	BASEPRI, r3
 8006032:	f3bf 8f6f 	isb	sy
 8006036:	f3bf 8f4f 	dsb	sy
 800603a:	607b      	str	r3, [r7, #4]
}
 800603c:	bf00      	nop
 800603e:	bf00      	nop
 8006040:	e7fd      	b.n	800603e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006042:	4b0a      	ldr	r3, [pc, #40]	@ (800606c <vPortExitCritical+0x50>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	3b01      	subs	r3, #1
 8006048:	4a08      	ldr	r2, [pc, #32]	@ (800606c <vPortExitCritical+0x50>)
 800604a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800604c:	4b07      	ldr	r3, [pc, #28]	@ (800606c <vPortExitCritical+0x50>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d105      	bne.n	8006060 <vPortExitCritical+0x44>
 8006054:	2300      	movs	r3, #0
 8006056:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800605e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006060:	bf00      	nop
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr
 800606c:	20000014 	.word	0x20000014

08006070 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006070:	f3ef 8009 	mrs	r0, PSP
 8006074:	f3bf 8f6f 	isb	sy
 8006078:	4b15      	ldr	r3, [pc, #84]	@ (80060d0 <pxCurrentTCBConst>)
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	f01e 0f10 	tst.w	lr, #16
 8006080:	bf08      	it	eq
 8006082:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006086:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800608a:	6010      	str	r0, [r2, #0]
 800608c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006090:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006094:	f380 8811 	msr	BASEPRI, r0
 8006098:	f3bf 8f4f 	dsb	sy
 800609c:	f3bf 8f6f 	isb	sy
 80060a0:	f7ff fcb6 	bl	8005a10 <vTaskSwitchContext>
 80060a4:	f04f 0000 	mov.w	r0, #0
 80060a8:	f380 8811 	msr	BASEPRI, r0
 80060ac:	bc09      	pop	{r0, r3}
 80060ae:	6819      	ldr	r1, [r3, #0]
 80060b0:	6808      	ldr	r0, [r1, #0]
 80060b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060b6:	f01e 0f10 	tst.w	lr, #16
 80060ba:	bf08      	it	eq
 80060bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80060c0:	f380 8809 	msr	PSP, r0
 80060c4:	f3bf 8f6f 	isb	sy
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop
 80060cc:	f3af 8000 	nop.w

080060d0 <pxCurrentTCBConst>:
 80060d0:	2000070c 	.word	0x2000070c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80060d4:	bf00      	nop
 80060d6:	bf00      	nop

080060d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b082      	sub	sp, #8
 80060dc:	af00      	add	r7, sp, #0
	__asm volatile
 80060de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060e2:	f383 8811 	msr	BASEPRI, r3
 80060e6:	f3bf 8f6f 	isb	sy
 80060ea:	f3bf 8f4f 	dsb	sy
 80060ee:	607b      	str	r3, [r7, #4]
}
 80060f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80060f2:	f7ff fbd3 	bl	800589c <xTaskIncrementTick>
 80060f6:	4603      	mov	r3, r0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d003      	beq.n	8006104 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80060fc:	4b06      	ldr	r3, [pc, #24]	@ (8006118 <SysTick_Handler+0x40>)
 80060fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006102:	601a      	str	r2, [r3, #0]
 8006104:	2300      	movs	r3, #0
 8006106:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	f383 8811 	msr	BASEPRI, r3
}
 800610e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006110:	bf00      	nop
 8006112:	3708      	adds	r7, #8
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}
 8006118:	e000ed04 	.word	0xe000ed04

0800611c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800611c:	b480      	push	{r7}
 800611e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006120:	4b0b      	ldr	r3, [pc, #44]	@ (8006150 <vPortSetupTimerInterrupt+0x34>)
 8006122:	2200      	movs	r2, #0
 8006124:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006126:	4b0b      	ldr	r3, [pc, #44]	@ (8006154 <vPortSetupTimerInterrupt+0x38>)
 8006128:	2200      	movs	r2, #0
 800612a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800612c:	4b0a      	ldr	r3, [pc, #40]	@ (8006158 <vPortSetupTimerInterrupt+0x3c>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a0a      	ldr	r2, [pc, #40]	@ (800615c <vPortSetupTimerInterrupt+0x40>)
 8006132:	fba2 2303 	umull	r2, r3, r2, r3
 8006136:	099b      	lsrs	r3, r3, #6
 8006138:	4a09      	ldr	r2, [pc, #36]	@ (8006160 <vPortSetupTimerInterrupt+0x44>)
 800613a:	3b01      	subs	r3, #1
 800613c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800613e:	4b04      	ldr	r3, [pc, #16]	@ (8006150 <vPortSetupTimerInterrupt+0x34>)
 8006140:	2207      	movs	r2, #7
 8006142:	601a      	str	r2, [r3, #0]
}
 8006144:	bf00      	nop
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop
 8006150:	e000e010 	.word	0xe000e010
 8006154:	e000e018 	.word	0xe000e018
 8006158:	20000008 	.word	0x20000008
 800615c:	10624dd3 	.word	0x10624dd3
 8006160:	e000e014 	.word	0xe000e014

08006164 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006164:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006174 <vPortEnableVFP+0x10>
 8006168:	6801      	ldr	r1, [r0, #0]
 800616a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800616e:	6001      	str	r1, [r0, #0]
 8006170:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006172:	bf00      	nop
 8006174:	e000ed88 	.word	0xe000ed88

08006178 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b08a      	sub	sp, #40	@ 0x28
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006180:	2300      	movs	r3, #0
 8006182:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006184:	f7ff fade 	bl	8005744 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006188:	4b5c      	ldr	r3, [pc, #368]	@ (80062fc <pvPortMalloc+0x184>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d101      	bne.n	8006194 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006190:	f000 f924 	bl	80063dc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006194:	4b5a      	ldr	r3, [pc, #360]	@ (8006300 <pvPortMalloc+0x188>)
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4013      	ands	r3, r2
 800619c:	2b00      	cmp	r3, #0
 800619e:	f040 8095 	bne.w	80062cc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d01e      	beq.n	80061e6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80061a8:	2208      	movs	r2, #8
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4413      	add	r3, r2
 80061ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f003 0307 	and.w	r3, r3, #7
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d015      	beq.n	80061e6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f023 0307 	bic.w	r3, r3, #7
 80061c0:	3308      	adds	r3, #8
 80061c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f003 0307 	and.w	r3, r3, #7
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d00b      	beq.n	80061e6 <pvPortMalloc+0x6e>
	__asm volatile
 80061ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061d2:	f383 8811 	msr	BASEPRI, r3
 80061d6:	f3bf 8f6f 	isb	sy
 80061da:	f3bf 8f4f 	dsb	sy
 80061de:	617b      	str	r3, [r7, #20]
}
 80061e0:	bf00      	nop
 80061e2:	bf00      	nop
 80061e4:	e7fd      	b.n	80061e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d06f      	beq.n	80062cc <pvPortMalloc+0x154>
 80061ec:	4b45      	ldr	r3, [pc, #276]	@ (8006304 <pvPortMalloc+0x18c>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d86a      	bhi.n	80062cc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80061f6:	4b44      	ldr	r3, [pc, #272]	@ (8006308 <pvPortMalloc+0x190>)
 80061f8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80061fa:	4b43      	ldr	r3, [pc, #268]	@ (8006308 <pvPortMalloc+0x190>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006200:	e004      	b.n	800620c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006204:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800620c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	429a      	cmp	r2, r3
 8006214:	d903      	bls.n	800621e <pvPortMalloc+0xa6>
 8006216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d1f1      	bne.n	8006202 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800621e:	4b37      	ldr	r3, [pc, #220]	@ (80062fc <pvPortMalloc+0x184>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006224:	429a      	cmp	r2, r3
 8006226:	d051      	beq.n	80062cc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006228:	6a3b      	ldr	r3, [r7, #32]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2208      	movs	r2, #8
 800622e:	4413      	add	r3, r2
 8006230:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	6a3b      	ldr	r3, [r7, #32]
 8006238:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800623a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800623c:	685a      	ldr	r2, [r3, #4]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	1ad2      	subs	r2, r2, r3
 8006242:	2308      	movs	r3, #8
 8006244:	005b      	lsls	r3, r3, #1
 8006246:	429a      	cmp	r2, r3
 8006248:	d920      	bls.n	800628c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800624a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4413      	add	r3, r2
 8006250:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	f003 0307 	and.w	r3, r3, #7
 8006258:	2b00      	cmp	r3, #0
 800625a:	d00b      	beq.n	8006274 <pvPortMalloc+0xfc>
	__asm volatile
 800625c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006260:	f383 8811 	msr	BASEPRI, r3
 8006264:	f3bf 8f6f 	isb	sy
 8006268:	f3bf 8f4f 	dsb	sy
 800626c:	613b      	str	r3, [r7, #16]
}
 800626e:	bf00      	nop
 8006270:	bf00      	nop
 8006272:	e7fd      	b.n	8006270 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006276:	685a      	ldr	r2, [r3, #4]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	1ad2      	subs	r2, r2, r3
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006286:	69b8      	ldr	r0, [r7, #24]
 8006288:	f000 f90a 	bl	80064a0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800628c:	4b1d      	ldr	r3, [pc, #116]	@ (8006304 <pvPortMalloc+0x18c>)
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	1ad3      	subs	r3, r2, r3
 8006296:	4a1b      	ldr	r2, [pc, #108]	@ (8006304 <pvPortMalloc+0x18c>)
 8006298:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800629a:	4b1a      	ldr	r3, [pc, #104]	@ (8006304 <pvPortMalloc+0x18c>)
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	4b1b      	ldr	r3, [pc, #108]	@ (800630c <pvPortMalloc+0x194>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d203      	bcs.n	80062ae <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80062a6:	4b17      	ldr	r3, [pc, #92]	@ (8006304 <pvPortMalloc+0x18c>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a18      	ldr	r2, [pc, #96]	@ (800630c <pvPortMalloc+0x194>)
 80062ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80062ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b0:	685a      	ldr	r2, [r3, #4]
 80062b2:	4b13      	ldr	r3, [pc, #76]	@ (8006300 <pvPortMalloc+0x188>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	431a      	orrs	r2, r3
 80062b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80062bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062be:	2200      	movs	r2, #0
 80062c0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80062c2:	4b13      	ldr	r3, [pc, #76]	@ (8006310 <pvPortMalloc+0x198>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	3301      	adds	r3, #1
 80062c8:	4a11      	ldr	r2, [pc, #68]	@ (8006310 <pvPortMalloc+0x198>)
 80062ca:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80062cc:	f7ff fa48 	bl	8005760 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80062d0:	69fb      	ldr	r3, [r7, #28]
 80062d2:	f003 0307 	and.w	r3, r3, #7
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d00b      	beq.n	80062f2 <pvPortMalloc+0x17a>
	__asm volatile
 80062da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062de:	f383 8811 	msr	BASEPRI, r3
 80062e2:	f3bf 8f6f 	isb	sy
 80062e6:	f3bf 8f4f 	dsb	sy
 80062ea:	60fb      	str	r3, [r7, #12]
}
 80062ec:	bf00      	nop
 80062ee:	bf00      	nop
 80062f0:	e7fd      	b.n	80062ee <pvPortMalloc+0x176>
	return pvReturn;
 80062f2:	69fb      	ldr	r3, [r7, #28]
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3728      	adds	r7, #40	@ 0x28
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}
 80062fc:	20004448 	.word	0x20004448
 8006300:	2000445c 	.word	0x2000445c
 8006304:	2000444c 	.word	0x2000444c
 8006308:	20004440 	.word	0x20004440
 800630c:	20004450 	.word	0x20004450
 8006310:	20004454 	.word	0x20004454

08006314 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b086      	sub	sp, #24
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d04f      	beq.n	80063c6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006326:	2308      	movs	r3, #8
 8006328:	425b      	negs	r3, r3
 800632a:	697a      	ldr	r2, [r7, #20]
 800632c:	4413      	add	r3, r2
 800632e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	685a      	ldr	r2, [r3, #4]
 8006338:	4b25      	ldr	r3, [pc, #148]	@ (80063d0 <vPortFree+0xbc>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4013      	ands	r3, r2
 800633e:	2b00      	cmp	r3, #0
 8006340:	d10b      	bne.n	800635a <vPortFree+0x46>
	__asm volatile
 8006342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006346:	f383 8811 	msr	BASEPRI, r3
 800634a:	f3bf 8f6f 	isb	sy
 800634e:	f3bf 8f4f 	dsb	sy
 8006352:	60fb      	str	r3, [r7, #12]
}
 8006354:	bf00      	nop
 8006356:	bf00      	nop
 8006358:	e7fd      	b.n	8006356 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d00b      	beq.n	800637a <vPortFree+0x66>
	__asm volatile
 8006362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006366:	f383 8811 	msr	BASEPRI, r3
 800636a:	f3bf 8f6f 	isb	sy
 800636e:	f3bf 8f4f 	dsb	sy
 8006372:	60bb      	str	r3, [r7, #8]
}
 8006374:	bf00      	nop
 8006376:	bf00      	nop
 8006378:	e7fd      	b.n	8006376 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	685a      	ldr	r2, [r3, #4]
 800637e:	4b14      	ldr	r3, [pc, #80]	@ (80063d0 <vPortFree+0xbc>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4013      	ands	r3, r2
 8006384:	2b00      	cmp	r3, #0
 8006386:	d01e      	beq.n	80063c6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d11a      	bne.n	80063c6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	685a      	ldr	r2, [r3, #4]
 8006394:	4b0e      	ldr	r3, [pc, #56]	@ (80063d0 <vPortFree+0xbc>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	43db      	mvns	r3, r3
 800639a:	401a      	ands	r2, r3
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80063a0:	f7ff f9d0 	bl	8005744 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	685a      	ldr	r2, [r3, #4]
 80063a8:	4b0a      	ldr	r3, [pc, #40]	@ (80063d4 <vPortFree+0xc0>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4413      	add	r3, r2
 80063ae:	4a09      	ldr	r2, [pc, #36]	@ (80063d4 <vPortFree+0xc0>)
 80063b0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80063b2:	6938      	ldr	r0, [r7, #16]
 80063b4:	f000 f874 	bl	80064a0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80063b8:	4b07      	ldr	r3, [pc, #28]	@ (80063d8 <vPortFree+0xc4>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	3301      	adds	r3, #1
 80063be:	4a06      	ldr	r2, [pc, #24]	@ (80063d8 <vPortFree+0xc4>)
 80063c0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80063c2:	f7ff f9cd 	bl	8005760 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80063c6:	bf00      	nop
 80063c8:	3718      	adds	r7, #24
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	2000445c 	.word	0x2000445c
 80063d4:	2000444c 	.word	0x2000444c
 80063d8:	20004458 	.word	0x20004458

080063dc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80063dc:	b480      	push	{r7}
 80063de:	b085      	sub	sp, #20
 80063e0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80063e2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80063e6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80063e8:	4b27      	ldr	r3, [pc, #156]	@ (8006488 <prvHeapInit+0xac>)
 80063ea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f003 0307 	and.w	r3, r3, #7
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d00c      	beq.n	8006410 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	3307      	adds	r3, #7
 80063fa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f023 0307 	bic.w	r3, r3, #7
 8006402:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006404:	68ba      	ldr	r2, [r7, #8]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	4a1f      	ldr	r2, [pc, #124]	@ (8006488 <prvHeapInit+0xac>)
 800640c:	4413      	add	r3, r2
 800640e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006414:	4a1d      	ldr	r2, [pc, #116]	@ (800648c <prvHeapInit+0xb0>)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800641a:	4b1c      	ldr	r3, [pc, #112]	@ (800648c <prvHeapInit+0xb0>)
 800641c:	2200      	movs	r2, #0
 800641e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	68ba      	ldr	r2, [r7, #8]
 8006424:	4413      	add	r3, r2
 8006426:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006428:	2208      	movs	r2, #8
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	1a9b      	subs	r3, r3, r2
 800642e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f023 0307 	bic.w	r3, r3, #7
 8006436:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	4a15      	ldr	r2, [pc, #84]	@ (8006490 <prvHeapInit+0xb4>)
 800643c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800643e:	4b14      	ldr	r3, [pc, #80]	@ (8006490 <prvHeapInit+0xb4>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	2200      	movs	r2, #0
 8006444:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006446:	4b12      	ldr	r3, [pc, #72]	@ (8006490 <prvHeapInit+0xb4>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2200      	movs	r2, #0
 800644c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	68fa      	ldr	r2, [r7, #12]
 8006456:	1ad2      	subs	r2, r2, r3
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800645c:	4b0c      	ldr	r3, [pc, #48]	@ (8006490 <prvHeapInit+0xb4>)
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	4a0a      	ldr	r2, [pc, #40]	@ (8006494 <prvHeapInit+0xb8>)
 800646a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	4a09      	ldr	r2, [pc, #36]	@ (8006498 <prvHeapInit+0xbc>)
 8006472:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006474:	4b09      	ldr	r3, [pc, #36]	@ (800649c <prvHeapInit+0xc0>)
 8006476:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800647a:	601a      	str	r2, [r3, #0]
}
 800647c:	bf00      	nop
 800647e:	3714      	adds	r7, #20
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr
 8006488:	20000840 	.word	0x20000840
 800648c:	20004440 	.word	0x20004440
 8006490:	20004448 	.word	0x20004448
 8006494:	20004450 	.word	0x20004450
 8006498:	2000444c 	.word	0x2000444c
 800649c:	2000445c 	.word	0x2000445c

080064a0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80064a0:	b480      	push	{r7}
 80064a2:	b085      	sub	sp, #20
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80064a8:	4b28      	ldr	r3, [pc, #160]	@ (800654c <prvInsertBlockIntoFreeList+0xac>)
 80064aa:	60fb      	str	r3, [r7, #12]
 80064ac:	e002      	b.n	80064b4 <prvInsertBlockIntoFreeList+0x14>
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	60fb      	str	r3, [r7, #12]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d8f7      	bhi.n	80064ae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	68ba      	ldr	r2, [r7, #8]
 80064c8:	4413      	add	r3, r2
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d108      	bne.n	80064e2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	685a      	ldr	r2, [r3, #4]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	441a      	add	r2, r3
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	68ba      	ldr	r2, [r7, #8]
 80064ec:	441a      	add	r2, r3
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d118      	bne.n	8006528 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	4b15      	ldr	r3, [pc, #84]	@ (8006550 <prvInsertBlockIntoFreeList+0xb0>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	429a      	cmp	r2, r3
 8006500:	d00d      	beq.n	800651e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	685a      	ldr	r2, [r3, #4]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	441a      	add	r2, r3
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	601a      	str	r2, [r3, #0]
 800651c:	e008      	b.n	8006530 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800651e:	4b0c      	ldr	r3, [pc, #48]	@ (8006550 <prvInsertBlockIntoFreeList+0xb0>)
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	601a      	str	r2, [r3, #0]
 8006526:	e003      	b.n	8006530 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006530:	68fa      	ldr	r2, [r7, #12]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	429a      	cmp	r2, r3
 8006536:	d002      	beq.n	800653e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800653e:	bf00      	nop
 8006540:	3714      	adds	r7, #20
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop
 800654c:	20004440 	.word	0x20004440
 8006550:	20004448 	.word	0x20004448

08006554 <__cvt>:
 8006554:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006558:	ec57 6b10 	vmov	r6, r7, d0
 800655c:	2f00      	cmp	r7, #0
 800655e:	460c      	mov	r4, r1
 8006560:	4619      	mov	r1, r3
 8006562:	463b      	mov	r3, r7
 8006564:	bfbb      	ittet	lt
 8006566:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800656a:	461f      	movlt	r7, r3
 800656c:	2300      	movge	r3, #0
 800656e:	232d      	movlt	r3, #45	@ 0x2d
 8006570:	700b      	strb	r3, [r1, #0]
 8006572:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006574:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006578:	4691      	mov	r9, r2
 800657a:	f023 0820 	bic.w	r8, r3, #32
 800657e:	bfbc      	itt	lt
 8006580:	4632      	movlt	r2, r6
 8006582:	4616      	movlt	r6, r2
 8006584:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006588:	d005      	beq.n	8006596 <__cvt+0x42>
 800658a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800658e:	d100      	bne.n	8006592 <__cvt+0x3e>
 8006590:	3401      	adds	r4, #1
 8006592:	2102      	movs	r1, #2
 8006594:	e000      	b.n	8006598 <__cvt+0x44>
 8006596:	2103      	movs	r1, #3
 8006598:	ab03      	add	r3, sp, #12
 800659a:	9301      	str	r3, [sp, #4]
 800659c:	ab02      	add	r3, sp, #8
 800659e:	9300      	str	r3, [sp, #0]
 80065a0:	ec47 6b10 	vmov	d0, r6, r7
 80065a4:	4653      	mov	r3, sl
 80065a6:	4622      	mov	r2, r4
 80065a8:	f000 fed2 	bl	8007350 <_dtoa_r>
 80065ac:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80065b0:	4605      	mov	r5, r0
 80065b2:	d119      	bne.n	80065e8 <__cvt+0x94>
 80065b4:	f019 0f01 	tst.w	r9, #1
 80065b8:	d00e      	beq.n	80065d8 <__cvt+0x84>
 80065ba:	eb00 0904 	add.w	r9, r0, r4
 80065be:	2200      	movs	r2, #0
 80065c0:	2300      	movs	r3, #0
 80065c2:	4630      	mov	r0, r6
 80065c4:	4639      	mov	r1, r7
 80065c6:	f7fa fa7f 	bl	8000ac8 <__aeabi_dcmpeq>
 80065ca:	b108      	cbz	r0, 80065d0 <__cvt+0x7c>
 80065cc:	f8cd 900c 	str.w	r9, [sp, #12]
 80065d0:	2230      	movs	r2, #48	@ 0x30
 80065d2:	9b03      	ldr	r3, [sp, #12]
 80065d4:	454b      	cmp	r3, r9
 80065d6:	d31e      	bcc.n	8006616 <__cvt+0xc2>
 80065d8:	9b03      	ldr	r3, [sp, #12]
 80065da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80065dc:	1b5b      	subs	r3, r3, r5
 80065de:	4628      	mov	r0, r5
 80065e0:	6013      	str	r3, [r2, #0]
 80065e2:	b004      	add	sp, #16
 80065e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065e8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80065ec:	eb00 0904 	add.w	r9, r0, r4
 80065f0:	d1e5      	bne.n	80065be <__cvt+0x6a>
 80065f2:	7803      	ldrb	r3, [r0, #0]
 80065f4:	2b30      	cmp	r3, #48	@ 0x30
 80065f6:	d10a      	bne.n	800660e <__cvt+0xba>
 80065f8:	2200      	movs	r2, #0
 80065fa:	2300      	movs	r3, #0
 80065fc:	4630      	mov	r0, r6
 80065fe:	4639      	mov	r1, r7
 8006600:	f7fa fa62 	bl	8000ac8 <__aeabi_dcmpeq>
 8006604:	b918      	cbnz	r0, 800660e <__cvt+0xba>
 8006606:	f1c4 0401 	rsb	r4, r4, #1
 800660a:	f8ca 4000 	str.w	r4, [sl]
 800660e:	f8da 3000 	ldr.w	r3, [sl]
 8006612:	4499      	add	r9, r3
 8006614:	e7d3      	b.n	80065be <__cvt+0x6a>
 8006616:	1c59      	adds	r1, r3, #1
 8006618:	9103      	str	r1, [sp, #12]
 800661a:	701a      	strb	r2, [r3, #0]
 800661c:	e7d9      	b.n	80065d2 <__cvt+0x7e>

0800661e <__exponent>:
 800661e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006620:	2900      	cmp	r1, #0
 8006622:	bfba      	itte	lt
 8006624:	4249      	neglt	r1, r1
 8006626:	232d      	movlt	r3, #45	@ 0x2d
 8006628:	232b      	movge	r3, #43	@ 0x2b
 800662a:	2909      	cmp	r1, #9
 800662c:	7002      	strb	r2, [r0, #0]
 800662e:	7043      	strb	r3, [r0, #1]
 8006630:	dd29      	ble.n	8006686 <__exponent+0x68>
 8006632:	f10d 0307 	add.w	r3, sp, #7
 8006636:	461d      	mov	r5, r3
 8006638:	270a      	movs	r7, #10
 800663a:	461a      	mov	r2, r3
 800663c:	fbb1 f6f7 	udiv	r6, r1, r7
 8006640:	fb07 1416 	mls	r4, r7, r6, r1
 8006644:	3430      	adds	r4, #48	@ 0x30
 8006646:	f802 4c01 	strb.w	r4, [r2, #-1]
 800664a:	460c      	mov	r4, r1
 800664c:	2c63      	cmp	r4, #99	@ 0x63
 800664e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006652:	4631      	mov	r1, r6
 8006654:	dcf1      	bgt.n	800663a <__exponent+0x1c>
 8006656:	3130      	adds	r1, #48	@ 0x30
 8006658:	1e94      	subs	r4, r2, #2
 800665a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800665e:	1c41      	adds	r1, r0, #1
 8006660:	4623      	mov	r3, r4
 8006662:	42ab      	cmp	r3, r5
 8006664:	d30a      	bcc.n	800667c <__exponent+0x5e>
 8006666:	f10d 0309 	add.w	r3, sp, #9
 800666a:	1a9b      	subs	r3, r3, r2
 800666c:	42ac      	cmp	r4, r5
 800666e:	bf88      	it	hi
 8006670:	2300      	movhi	r3, #0
 8006672:	3302      	adds	r3, #2
 8006674:	4403      	add	r3, r0
 8006676:	1a18      	subs	r0, r3, r0
 8006678:	b003      	add	sp, #12
 800667a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800667c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006680:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006684:	e7ed      	b.n	8006662 <__exponent+0x44>
 8006686:	2330      	movs	r3, #48	@ 0x30
 8006688:	3130      	adds	r1, #48	@ 0x30
 800668a:	7083      	strb	r3, [r0, #2]
 800668c:	70c1      	strb	r1, [r0, #3]
 800668e:	1d03      	adds	r3, r0, #4
 8006690:	e7f1      	b.n	8006676 <__exponent+0x58>
	...

08006694 <_printf_float>:
 8006694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006698:	b08d      	sub	sp, #52	@ 0x34
 800669a:	460c      	mov	r4, r1
 800669c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80066a0:	4616      	mov	r6, r2
 80066a2:	461f      	mov	r7, r3
 80066a4:	4605      	mov	r5, r0
 80066a6:	f000 fced 	bl	8007084 <_localeconv_r>
 80066aa:	6803      	ldr	r3, [r0, #0]
 80066ac:	9304      	str	r3, [sp, #16]
 80066ae:	4618      	mov	r0, r3
 80066b0:	f7f9 fdde 	bl	8000270 <strlen>
 80066b4:	2300      	movs	r3, #0
 80066b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80066b8:	f8d8 3000 	ldr.w	r3, [r8]
 80066bc:	9005      	str	r0, [sp, #20]
 80066be:	3307      	adds	r3, #7
 80066c0:	f023 0307 	bic.w	r3, r3, #7
 80066c4:	f103 0208 	add.w	r2, r3, #8
 80066c8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80066cc:	f8d4 b000 	ldr.w	fp, [r4]
 80066d0:	f8c8 2000 	str.w	r2, [r8]
 80066d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80066d8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80066dc:	9307      	str	r3, [sp, #28]
 80066de:	f8cd 8018 	str.w	r8, [sp, #24]
 80066e2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80066e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066ea:	4b9c      	ldr	r3, [pc, #624]	@ (800695c <_printf_float+0x2c8>)
 80066ec:	f04f 32ff 	mov.w	r2, #4294967295
 80066f0:	f7fa fa1c 	bl	8000b2c <__aeabi_dcmpun>
 80066f4:	bb70      	cbnz	r0, 8006754 <_printf_float+0xc0>
 80066f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066fa:	4b98      	ldr	r3, [pc, #608]	@ (800695c <_printf_float+0x2c8>)
 80066fc:	f04f 32ff 	mov.w	r2, #4294967295
 8006700:	f7fa f9f6 	bl	8000af0 <__aeabi_dcmple>
 8006704:	bb30      	cbnz	r0, 8006754 <_printf_float+0xc0>
 8006706:	2200      	movs	r2, #0
 8006708:	2300      	movs	r3, #0
 800670a:	4640      	mov	r0, r8
 800670c:	4649      	mov	r1, r9
 800670e:	f7fa f9e5 	bl	8000adc <__aeabi_dcmplt>
 8006712:	b110      	cbz	r0, 800671a <_printf_float+0x86>
 8006714:	232d      	movs	r3, #45	@ 0x2d
 8006716:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800671a:	4a91      	ldr	r2, [pc, #580]	@ (8006960 <_printf_float+0x2cc>)
 800671c:	4b91      	ldr	r3, [pc, #580]	@ (8006964 <_printf_float+0x2d0>)
 800671e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006722:	bf94      	ite	ls
 8006724:	4690      	movls	r8, r2
 8006726:	4698      	movhi	r8, r3
 8006728:	2303      	movs	r3, #3
 800672a:	6123      	str	r3, [r4, #16]
 800672c:	f02b 0304 	bic.w	r3, fp, #4
 8006730:	6023      	str	r3, [r4, #0]
 8006732:	f04f 0900 	mov.w	r9, #0
 8006736:	9700      	str	r7, [sp, #0]
 8006738:	4633      	mov	r3, r6
 800673a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800673c:	4621      	mov	r1, r4
 800673e:	4628      	mov	r0, r5
 8006740:	f000 f9d2 	bl	8006ae8 <_printf_common>
 8006744:	3001      	adds	r0, #1
 8006746:	f040 808d 	bne.w	8006864 <_printf_float+0x1d0>
 800674a:	f04f 30ff 	mov.w	r0, #4294967295
 800674e:	b00d      	add	sp, #52	@ 0x34
 8006750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006754:	4642      	mov	r2, r8
 8006756:	464b      	mov	r3, r9
 8006758:	4640      	mov	r0, r8
 800675a:	4649      	mov	r1, r9
 800675c:	f7fa f9e6 	bl	8000b2c <__aeabi_dcmpun>
 8006760:	b140      	cbz	r0, 8006774 <_printf_float+0xe0>
 8006762:	464b      	mov	r3, r9
 8006764:	2b00      	cmp	r3, #0
 8006766:	bfbc      	itt	lt
 8006768:	232d      	movlt	r3, #45	@ 0x2d
 800676a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800676e:	4a7e      	ldr	r2, [pc, #504]	@ (8006968 <_printf_float+0x2d4>)
 8006770:	4b7e      	ldr	r3, [pc, #504]	@ (800696c <_printf_float+0x2d8>)
 8006772:	e7d4      	b.n	800671e <_printf_float+0x8a>
 8006774:	6863      	ldr	r3, [r4, #4]
 8006776:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800677a:	9206      	str	r2, [sp, #24]
 800677c:	1c5a      	adds	r2, r3, #1
 800677e:	d13b      	bne.n	80067f8 <_printf_float+0x164>
 8006780:	2306      	movs	r3, #6
 8006782:	6063      	str	r3, [r4, #4]
 8006784:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006788:	2300      	movs	r3, #0
 800678a:	6022      	str	r2, [r4, #0]
 800678c:	9303      	str	r3, [sp, #12]
 800678e:	ab0a      	add	r3, sp, #40	@ 0x28
 8006790:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006794:	ab09      	add	r3, sp, #36	@ 0x24
 8006796:	9300      	str	r3, [sp, #0]
 8006798:	6861      	ldr	r1, [r4, #4]
 800679a:	ec49 8b10 	vmov	d0, r8, r9
 800679e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80067a2:	4628      	mov	r0, r5
 80067a4:	f7ff fed6 	bl	8006554 <__cvt>
 80067a8:	9b06      	ldr	r3, [sp, #24]
 80067aa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80067ac:	2b47      	cmp	r3, #71	@ 0x47
 80067ae:	4680      	mov	r8, r0
 80067b0:	d129      	bne.n	8006806 <_printf_float+0x172>
 80067b2:	1cc8      	adds	r0, r1, #3
 80067b4:	db02      	blt.n	80067bc <_printf_float+0x128>
 80067b6:	6863      	ldr	r3, [r4, #4]
 80067b8:	4299      	cmp	r1, r3
 80067ba:	dd41      	ble.n	8006840 <_printf_float+0x1ac>
 80067bc:	f1aa 0a02 	sub.w	sl, sl, #2
 80067c0:	fa5f fa8a 	uxtb.w	sl, sl
 80067c4:	3901      	subs	r1, #1
 80067c6:	4652      	mov	r2, sl
 80067c8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80067cc:	9109      	str	r1, [sp, #36]	@ 0x24
 80067ce:	f7ff ff26 	bl	800661e <__exponent>
 80067d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80067d4:	1813      	adds	r3, r2, r0
 80067d6:	2a01      	cmp	r2, #1
 80067d8:	4681      	mov	r9, r0
 80067da:	6123      	str	r3, [r4, #16]
 80067dc:	dc02      	bgt.n	80067e4 <_printf_float+0x150>
 80067de:	6822      	ldr	r2, [r4, #0]
 80067e0:	07d2      	lsls	r2, r2, #31
 80067e2:	d501      	bpl.n	80067e8 <_printf_float+0x154>
 80067e4:	3301      	adds	r3, #1
 80067e6:	6123      	str	r3, [r4, #16]
 80067e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d0a2      	beq.n	8006736 <_printf_float+0xa2>
 80067f0:	232d      	movs	r3, #45	@ 0x2d
 80067f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067f6:	e79e      	b.n	8006736 <_printf_float+0xa2>
 80067f8:	9a06      	ldr	r2, [sp, #24]
 80067fa:	2a47      	cmp	r2, #71	@ 0x47
 80067fc:	d1c2      	bne.n	8006784 <_printf_float+0xf0>
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d1c0      	bne.n	8006784 <_printf_float+0xf0>
 8006802:	2301      	movs	r3, #1
 8006804:	e7bd      	b.n	8006782 <_printf_float+0xee>
 8006806:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800680a:	d9db      	bls.n	80067c4 <_printf_float+0x130>
 800680c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006810:	d118      	bne.n	8006844 <_printf_float+0x1b0>
 8006812:	2900      	cmp	r1, #0
 8006814:	6863      	ldr	r3, [r4, #4]
 8006816:	dd0b      	ble.n	8006830 <_printf_float+0x19c>
 8006818:	6121      	str	r1, [r4, #16]
 800681a:	b913      	cbnz	r3, 8006822 <_printf_float+0x18e>
 800681c:	6822      	ldr	r2, [r4, #0]
 800681e:	07d0      	lsls	r0, r2, #31
 8006820:	d502      	bpl.n	8006828 <_printf_float+0x194>
 8006822:	3301      	adds	r3, #1
 8006824:	440b      	add	r3, r1
 8006826:	6123      	str	r3, [r4, #16]
 8006828:	65a1      	str	r1, [r4, #88]	@ 0x58
 800682a:	f04f 0900 	mov.w	r9, #0
 800682e:	e7db      	b.n	80067e8 <_printf_float+0x154>
 8006830:	b913      	cbnz	r3, 8006838 <_printf_float+0x1a4>
 8006832:	6822      	ldr	r2, [r4, #0]
 8006834:	07d2      	lsls	r2, r2, #31
 8006836:	d501      	bpl.n	800683c <_printf_float+0x1a8>
 8006838:	3302      	adds	r3, #2
 800683a:	e7f4      	b.n	8006826 <_printf_float+0x192>
 800683c:	2301      	movs	r3, #1
 800683e:	e7f2      	b.n	8006826 <_printf_float+0x192>
 8006840:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006844:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006846:	4299      	cmp	r1, r3
 8006848:	db05      	blt.n	8006856 <_printf_float+0x1c2>
 800684a:	6823      	ldr	r3, [r4, #0]
 800684c:	6121      	str	r1, [r4, #16]
 800684e:	07d8      	lsls	r0, r3, #31
 8006850:	d5ea      	bpl.n	8006828 <_printf_float+0x194>
 8006852:	1c4b      	adds	r3, r1, #1
 8006854:	e7e7      	b.n	8006826 <_printf_float+0x192>
 8006856:	2900      	cmp	r1, #0
 8006858:	bfd4      	ite	le
 800685a:	f1c1 0202 	rsble	r2, r1, #2
 800685e:	2201      	movgt	r2, #1
 8006860:	4413      	add	r3, r2
 8006862:	e7e0      	b.n	8006826 <_printf_float+0x192>
 8006864:	6823      	ldr	r3, [r4, #0]
 8006866:	055a      	lsls	r2, r3, #21
 8006868:	d407      	bmi.n	800687a <_printf_float+0x1e6>
 800686a:	6923      	ldr	r3, [r4, #16]
 800686c:	4642      	mov	r2, r8
 800686e:	4631      	mov	r1, r6
 8006870:	4628      	mov	r0, r5
 8006872:	47b8      	blx	r7
 8006874:	3001      	adds	r0, #1
 8006876:	d12b      	bne.n	80068d0 <_printf_float+0x23c>
 8006878:	e767      	b.n	800674a <_printf_float+0xb6>
 800687a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800687e:	f240 80dd 	bls.w	8006a3c <_printf_float+0x3a8>
 8006882:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006886:	2200      	movs	r2, #0
 8006888:	2300      	movs	r3, #0
 800688a:	f7fa f91d 	bl	8000ac8 <__aeabi_dcmpeq>
 800688e:	2800      	cmp	r0, #0
 8006890:	d033      	beq.n	80068fa <_printf_float+0x266>
 8006892:	4a37      	ldr	r2, [pc, #220]	@ (8006970 <_printf_float+0x2dc>)
 8006894:	2301      	movs	r3, #1
 8006896:	4631      	mov	r1, r6
 8006898:	4628      	mov	r0, r5
 800689a:	47b8      	blx	r7
 800689c:	3001      	adds	r0, #1
 800689e:	f43f af54 	beq.w	800674a <_printf_float+0xb6>
 80068a2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80068a6:	4543      	cmp	r3, r8
 80068a8:	db02      	blt.n	80068b0 <_printf_float+0x21c>
 80068aa:	6823      	ldr	r3, [r4, #0]
 80068ac:	07d8      	lsls	r0, r3, #31
 80068ae:	d50f      	bpl.n	80068d0 <_printf_float+0x23c>
 80068b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068b4:	4631      	mov	r1, r6
 80068b6:	4628      	mov	r0, r5
 80068b8:	47b8      	blx	r7
 80068ba:	3001      	adds	r0, #1
 80068bc:	f43f af45 	beq.w	800674a <_printf_float+0xb6>
 80068c0:	f04f 0900 	mov.w	r9, #0
 80068c4:	f108 38ff 	add.w	r8, r8, #4294967295
 80068c8:	f104 0a1a 	add.w	sl, r4, #26
 80068cc:	45c8      	cmp	r8, r9
 80068ce:	dc09      	bgt.n	80068e4 <_printf_float+0x250>
 80068d0:	6823      	ldr	r3, [r4, #0]
 80068d2:	079b      	lsls	r3, r3, #30
 80068d4:	f100 8103 	bmi.w	8006ade <_printf_float+0x44a>
 80068d8:	68e0      	ldr	r0, [r4, #12]
 80068da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80068dc:	4298      	cmp	r0, r3
 80068de:	bfb8      	it	lt
 80068e0:	4618      	movlt	r0, r3
 80068e2:	e734      	b.n	800674e <_printf_float+0xba>
 80068e4:	2301      	movs	r3, #1
 80068e6:	4652      	mov	r2, sl
 80068e8:	4631      	mov	r1, r6
 80068ea:	4628      	mov	r0, r5
 80068ec:	47b8      	blx	r7
 80068ee:	3001      	adds	r0, #1
 80068f0:	f43f af2b 	beq.w	800674a <_printf_float+0xb6>
 80068f4:	f109 0901 	add.w	r9, r9, #1
 80068f8:	e7e8      	b.n	80068cc <_printf_float+0x238>
 80068fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	dc39      	bgt.n	8006974 <_printf_float+0x2e0>
 8006900:	4a1b      	ldr	r2, [pc, #108]	@ (8006970 <_printf_float+0x2dc>)
 8006902:	2301      	movs	r3, #1
 8006904:	4631      	mov	r1, r6
 8006906:	4628      	mov	r0, r5
 8006908:	47b8      	blx	r7
 800690a:	3001      	adds	r0, #1
 800690c:	f43f af1d 	beq.w	800674a <_printf_float+0xb6>
 8006910:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006914:	ea59 0303 	orrs.w	r3, r9, r3
 8006918:	d102      	bne.n	8006920 <_printf_float+0x28c>
 800691a:	6823      	ldr	r3, [r4, #0]
 800691c:	07d9      	lsls	r1, r3, #31
 800691e:	d5d7      	bpl.n	80068d0 <_printf_float+0x23c>
 8006920:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006924:	4631      	mov	r1, r6
 8006926:	4628      	mov	r0, r5
 8006928:	47b8      	blx	r7
 800692a:	3001      	adds	r0, #1
 800692c:	f43f af0d 	beq.w	800674a <_printf_float+0xb6>
 8006930:	f04f 0a00 	mov.w	sl, #0
 8006934:	f104 0b1a 	add.w	fp, r4, #26
 8006938:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800693a:	425b      	negs	r3, r3
 800693c:	4553      	cmp	r3, sl
 800693e:	dc01      	bgt.n	8006944 <_printf_float+0x2b0>
 8006940:	464b      	mov	r3, r9
 8006942:	e793      	b.n	800686c <_printf_float+0x1d8>
 8006944:	2301      	movs	r3, #1
 8006946:	465a      	mov	r2, fp
 8006948:	4631      	mov	r1, r6
 800694a:	4628      	mov	r0, r5
 800694c:	47b8      	blx	r7
 800694e:	3001      	adds	r0, #1
 8006950:	f43f aefb 	beq.w	800674a <_printf_float+0xb6>
 8006954:	f10a 0a01 	add.w	sl, sl, #1
 8006958:	e7ee      	b.n	8006938 <_printf_float+0x2a4>
 800695a:	bf00      	nop
 800695c:	7fefffff 	.word	0x7fefffff
 8006960:	08009af8 	.word	0x08009af8
 8006964:	08009afc 	.word	0x08009afc
 8006968:	08009b00 	.word	0x08009b00
 800696c:	08009b04 	.word	0x08009b04
 8006970:	08009b08 	.word	0x08009b08
 8006974:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006976:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800697a:	4553      	cmp	r3, sl
 800697c:	bfa8      	it	ge
 800697e:	4653      	movge	r3, sl
 8006980:	2b00      	cmp	r3, #0
 8006982:	4699      	mov	r9, r3
 8006984:	dc36      	bgt.n	80069f4 <_printf_float+0x360>
 8006986:	f04f 0b00 	mov.w	fp, #0
 800698a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800698e:	f104 021a 	add.w	r2, r4, #26
 8006992:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006994:	9306      	str	r3, [sp, #24]
 8006996:	eba3 0309 	sub.w	r3, r3, r9
 800699a:	455b      	cmp	r3, fp
 800699c:	dc31      	bgt.n	8006a02 <_printf_float+0x36e>
 800699e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069a0:	459a      	cmp	sl, r3
 80069a2:	dc3a      	bgt.n	8006a1a <_printf_float+0x386>
 80069a4:	6823      	ldr	r3, [r4, #0]
 80069a6:	07da      	lsls	r2, r3, #31
 80069a8:	d437      	bmi.n	8006a1a <_printf_float+0x386>
 80069aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069ac:	ebaa 0903 	sub.w	r9, sl, r3
 80069b0:	9b06      	ldr	r3, [sp, #24]
 80069b2:	ebaa 0303 	sub.w	r3, sl, r3
 80069b6:	4599      	cmp	r9, r3
 80069b8:	bfa8      	it	ge
 80069ba:	4699      	movge	r9, r3
 80069bc:	f1b9 0f00 	cmp.w	r9, #0
 80069c0:	dc33      	bgt.n	8006a2a <_printf_float+0x396>
 80069c2:	f04f 0800 	mov.w	r8, #0
 80069c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069ca:	f104 0b1a 	add.w	fp, r4, #26
 80069ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069d0:	ebaa 0303 	sub.w	r3, sl, r3
 80069d4:	eba3 0309 	sub.w	r3, r3, r9
 80069d8:	4543      	cmp	r3, r8
 80069da:	f77f af79 	ble.w	80068d0 <_printf_float+0x23c>
 80069de:	2301      	movs	r3, #1
 80069e0:	465a      	mov	r2, fp
 80069e2:	4631      	mov	r1, r6
 80069e4:	4628      	mov	r0, r5
 80069e6:	47b8      	blx	r7
 80069e8:	3001      	adds	r0, #1
 80069ea:	f43f aeae 	beq.w	800674a <_printf_float+0xb6>
 80069ee:	f108 0801 	add.w	r8, r8, #1
 80069f2:	e7ec      	b.n	80069ce <_printf_float+0x33a>
 80069f4:	4642      	mov	r2, r8
 80069f6:	4631      	mov	r1, r6
 80069f8:	4628      	mov	r0, r5
 80069fa:	47b8      	blx	r7
 80069fc:	3001      	adds	r0, #1
 80069fe:	d1c2      	bne.n	8006986 <_printf_float+0x2f2>
 8006a00:	e6a3      	b.n	800674a <_printf_float+0xb6>
 8006a02:	2301      	movs	r3, #1
 8006a04:	4631      	mov	r1, r6
 8006a06:	4628      	mov	r0, r5
 8006a08:	9206      	str	r2, [sp, #24]
 8006a0a:	47b8      	blx	r7
 8006a0c:	3001      	adds	r0, #1
 8006a0e:	f43f ae9c 	beq.w	800674a <_printf_float+0xb6>
 8006a12:	9a06      	ldr	r2, [sp, #24]
 8006a14:	f10b 0b01 	add.w	fp, fp, #1
 8006a18:	e7bb      	b.n	8006992 <_printf_float+0x2fe>
 8006a1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a1e:	4631      	mov	r1, r6
 8006a20:	4628      	mov	r0, r5
 8006a22:	47b8      	blx	r7
 8006a24:	3001      	adds	r0, #1
 8006a26:	d1c0      	bne.n	80069aa <_printf_float+0x316>
 8006a28:	e68f      	b.n	800674a <_printf_float+0xb6>
 8006a2a:	9a06      	ldr	r2, [sp, #24]
 8006a2c:	464b      	mov	r3, r9
 8006a2e:	4442      	add	r2, r8
 8006a30:	4631      	mov	r1, r6
 8006a32:	4628      	mov	r0, r5
 8006a34:	47b8      	blx	r7
 8006a36:	3001      	adds	r0, #1
 8006a38:	d1c3      	bne.n	80069c2 <_printf_float+0x32e>
 8006a3a:	e686      	b.n	800674a <_printf_float+0xb6>
 8006a3c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006a40:	f1ba 0f01 	cmp.w	sl, #1
 8006a44:	dc01      	bgt.n	8006a4a <_printf_float+0x3b6>
 8006a46:	07db      	lsls	r3, r3, #31
 8006a48:	d536      	bpl.n	8006ab8 <_printf_float+0x424>
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	4642      	mov	r2, r8
 8006a4e:	4631      	mov	r1, r6
 8006a50:	4628      	mov	r0, r5
 8006a52:	47b8      	blx	r7
 8006a54:	3001      	adds	r0, #1
 8006a56:	f43f ae78 	beq.w	800674a <_printf_float+0xb6>
 8006a5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a5e:	4631      	mov	r1, r6
 8006a60:	4628      	mov	r0, r5
 8006a62:	47b8      	blx	r7
 8006a64:	3001      	adds	r0, #1
 8006a66:	f43f ae70 	beq.w	800674a <_printf_float+0xb6>
 8006a6a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006a6e:	2200      	movs	r2, #0
 8006a70:	2300      	movs	r3, #0
 8006a72:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a76:	f7fa f827 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a7a:	b9c0      	cbnz	r0, 8006aae <_printf_float+0x41a>
 8006a7c:	4653      	mov	r3, sl
 8006a7e:	f108 0201 	add.w	r2, r8, #1
 8006a82:	4631      	mov	r1, r6
 8006a84:	4628      	mov	r0, r5
 8006a86:	47b8      	blx	r7
 8006a88:	3001      	adds	r0, #1
 8006a8a:	d10c      	bne.n	8006aa6 <_printf_float+0x412>
 8006a8c:	e65d      	b.n	800674a <_printf_float+0xb6>
 8006a8e:	2301      	movs	r3, #1
 8006a90:	465a      	mov	r2, fp
 8006a92:	4631      	mov	r1, r6
 8006a94:	4628      	mov	r0, r5
 8006a96:	47b8      	blx	r7
 8006a98:	3001      	adds	r0, #1
 8006a9a:	f43f ae56 	beq.w	800674a <_printf_float+0xb6>
 8006a9e:	f108 0801 	add.w	r8, r8, #1
 8006aa2:	45d0      	cmp	r8, sl
 8006aa4:	dbf3      	blt.n	8006a8e <_printf_float+0x3fa>
 8006aa6:	464b      	mov	r3, r9
 8006aa8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006aac:	e6df      	b.n	800686e <_printf_float+0x1da>
 8006aae:	f04f 0800 	mov.w	r8, #0
 8006ab2:	f104 0b1a 	add.w	fp, r4, #26
 8006ab6:	e7f4      	b.n	8006aa2 <_printf_float+0x40e>
 8006ab8:	2301      	movs	r3, #1
 8006aba:	4642      	mov	r2, r8
 8006abc:	e7e1      	b.n	8006a82 <_printf_float+0x3ee>
 8006abe:	2301      	movs	r3, #1
 8006ac0:	464a      	mov	r2, r9
 8006ac2:	4631      	mov	r1, r6
 8006ac4:	4628      	mov	r0, r5
 8006ac6:	47b8      	blx	r7
 8006ac8:	3001      	adds	r0, #1
 8006aca:	f43f ae3e 	beq.w	800674a <_printf_float+0xb6>
 8006ace:	f108 0801 	add.w	r8, r8, #1
 8006ad2:	68e3      	ldr	r3, [r4, #12]
 8006ad4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006ad6:	1a5b      	subs	r3, r3, r1
 8006ad8:	4543      	cmp	r3, r8
 8006ada:	dcf0      	bgt.n	8006abe <_printf_float+0x42a>
 8006adc:	e6fc      	b.n	80068d8 <_printf_float+0x244>
 8006ade:	f04f 0800 	mov.w	r8, #0
 8006ae2:	f104 0919 	add.w	r9, r4, #25
 8006ae6:	e7f4      	b.n	8006ad2 <_printf_float+0x43e>

08006ae8 <_printf_common>:
 8006ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006aec:	4616      	mov	r6, r2
 8006aee:	4698      	mov	r8, r3
 8006af0:	688a      	ldr	r2, [r1, #8]
 8006af2:	690b      	ldr	r3, [r1, #16]
 8006af4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006af8:	4293      	cmp	r3, r2
 8006afa:	bfb8      	it	lt
 8006afc:	4613      	movlt	r3, r2
 8006afe:	6033      	str	r3, [r6, #0]
 8006b00:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006b04:	4607      	mov	r7, r0
 8006b06:	460c      	mov	r4, r1
 8006b08:	b10a      	cbz	r2, 8006b0e <_printf_common+0x26>
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	6033      	str	r3, [r6, #0]
 8006b0e:	6823      	ldr	r3, [r4, #0]
 8006b10:	0699      	lsls	r1, r3, #26
 8006b12:	bf42      	ittt	mi
 8006b14:	6833      	ldrmi	r3, [r6, #0]
 8006b16:	3302      	addmi	r3, #2
 8006b18:	6033      	strmi	r3, [r6, #0]
 8006b1a:	6825      	ldr	r5, [r4, #0]
 8006b1c:	f015 0506 	ands.w	r5, r5, #6
 8006b20:	d106      	bne.n	8006b30 <_printf_common+0x48>
 8006b22:	f104 0a19 	add.w	sl, r4, #25
 8006b26:	68e3      	ldr	r3, [r4, #12]
 8006b28:	6832      	ldr	r2, [r6, #0]
 8006b2a:	1a9b      	subs	r3, r3, r2
 8006b2c:	42ab      	cmp	r3, r5
 8006b2e:	dc26      	bgt.n	8006b7e <_printf_common+0x96>
 8006b30:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006b34:	6822      	ldr	r2, [r4, #0]
 8006b36:	3b00      	subs	r3, #0
 8006b38:	bf18      	it	ne
 8006b3a:	2301      	movne	r3, #1
 8006b3c:	0692      	lsls	r2, r2, #26
 8006b3e:	d42b      	bmi.n	8006b98 <_printf_common+0xb0>
 8006b40:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006b44:	4641      	mov	r1, r8
 8006b46:	4638      	mov	r0, r7
 8006b48:	47c8      	blx	r9
 8006b4a:	3001      	adds	r0, #1
 8006b4c:	d01e      	beq.n	8006b8c <_printf_common+0xa4>
 8006b4e:	6823      	ldr	r3, [r4, #0]
 8006b50:	6922      	ldr	r2, [r4, #16]
 8006b52:	f003 0306 	and.w	r3, r3, #6
 8006b56:	2b04      	cmp	r3, #4
 8006b58:	bf02      	ittt	eq
 8006b5a:	68e5      	ldreq	r5, [r4, #12]
 8006b5c:	6833      	ldreq	r3, [r6, #0]
 8006b5e:	1aed      	subeq	r5, r5, r3
 8006b60:	68a3      	ldr	r3, [r4, #8]
 8006b62:	bf0c      	ite	eq
 8006b64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b68:	2500      	movne	r5, #0
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	bfc4      	itt	gt
 8006b6e:	1a9b      	subgt	r3, r3, r2
 8006b70:	18ed      	addgt	r5, r5, r3
 8006b72:	2600      	movs	r6, #0
 8006b74:	341a      	adds	r4, #26
 8006b76:	42b5      	cmp	r5, r6
 8006b78:	d11a      	bne.n	8006bb0 <_printf_common+0xc8>
 8006b7a:	2000      	movs	r0, #0
 8006b7c:	e008      	b.n	8006b90 <_printf_common+0xa8>
 8006b7e:	2301      	movs	r3, #1
 8006b80:	4652      	mov	r2, sl
 8006b82:	4641      	mov	r1, r8
 8006b84:	4638      	mov	r0, r7
 8006b86:	47c8      	blx	r9
 8006b88:	3001      	adds	r0, #1
 8006b8a:	d103      	bne.n	8006b94 <_printf_common+0xac>
 8006b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b94:	3501      	adds	r5, #1
 8006b96:	e7c6      	b.n	8006b26 <_printf_common+0x3e>
 8006b98:	18e1      	adds	r1, r4, r3
 8006b9a:	1c5a      	adds	r2, r3, #1
 8006b9c:	2030      	movs	r0, #48	@ 0x30
 8006b9e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006ba2:	4422      	add	r2, r4
 8006ba4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006ba8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006bac:	3302      	adds	r3, #2
 8006bae:	e7c7      	b.n	8006b40 <_printf_common+0x58>
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	4622      	mov	r2, r4
 8006bb4:	4641      	mov	r1, r8
 8006bb6:	4638      	mov	r0, r7
 8006bb8:	47c8      	blx	r9
 8006bba:	3001      	adds	r0, #1
 8006bbc:	d0e6      	beq.n	8006b8c <_printf_common+0xa4>
 8006bbe:	3601      	adds	r6, #1
 8006bc0:	e7d9      	b.n	8006b76 <_printf_common+0x8e>
	...

08006bc4 <_printf_i>:
 8006bc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006bc8:	7e0f      	ldrb	r7, [r1, #24]
 8006bca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006bcc:	2f78      	cmp	r7, #120	@ 0x78
 8006bce:	4691      	mov	r9, r2
 8006bd0:	4680      	mov	r8, r0
 8006bd2:	460c      	mov	r4, r1
 8006bd4:	469a      	mov	sl, r3
 8006bd6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006bda:	d807      	bhi.n	8006bec <_printf_i+0x28>
 8006bdc:	2f62      	cmp	r7, #98	@ 0x62
 8006bde:	d80a      	bhi.n	8006bf6 <_printf_i+0x32>
 8006be0:	2f00      	cmp	r7, #0
 8006be2:	f000 80d2 	beq.w	8006d8a <_printf_i+0x1c6>
 8006be6:	2f58      	cmp	r7, #88	@ 0x58
 8006be8:	f000 80b9 	beq.w	8006d5e <_printf_i+0x19a>
 8006bec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006bf0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006bf4:	e03a      	b.n	8006c6c <_printf_i+0xa8>
 8006bf6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006bfa:	2b15      	cmp	r3, #21
 8006bfc:	d8f6      	bhi.n	8006bec <_printf_i+0x28>
 8006bfe:	a101      	add	r1, pc, #4	@ (adr r1, 8006c04 <_printf_i+0x40>)
 8006c00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c04:	08006c5d 	.word	0x08006c5d
 8006c08:	08006c71 	.word	0x08006c71
 8006c0c:	08006bed 	.word	0x08006bed
 8006c10:	08006bed 	.word	0x08006bed
 8006c14:	08006bed 	.word	0x08006bed
 8006c18:	08006bed 	.word	0x08006bed
 8006c1c:	08006c71 	.word	0x08006c71
 8006c20:	08006bed 	.word	0x08006bed
 8006c24:	08006bed 	.word	0x08006bed
 8006c28:	08006bed 	.word	0x08006bed
 8006c2c:	08006bed 	.word	0x08006bed
 8006c30:	08006d71 	.word	0x08006d71
 8006c34:	08006c9b 	.word	0x08006c9b
 8006c38:	08006d2b 	.word	0x08006d2b
 8006c3c:	08006bed 	.word	0x08006bed
 8006c40:	08006bed 	.word	0x08006bed
 8006c44:	08006d93 	.word	0x08006d93
 8006c48:	08006bed 	.word	0x08006bed
 8006c4c:	08006c9b 	.word	0x08006c9b
 8006c50:	08006bed 	.word	0x08006bed
 8006c54:	08006bed 	.word	0x08006bed
 8006c58:	08006d33 	.word	0x08006d33
 8006c5c:	6833      	ldr	r3, [r6, #0]
 8006c5e:	1d1a      	adds	r2, r3, #4
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	6032      	str	r2, [r6, #0]
 8006c64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006c68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	e09d      	b.n	8006dac <_printf_i+0x1e8>
 8006c70:	6833      	ldr	r3, [r6, #0]
 8006c72:	6820      	ldr	r0, [r4, #0]
 8006c74:	1d19      	adds	r1, r3, #4
 8006c76:	6031      	str	r1, [r6, #0]
 8006c78:	0606      	lsls	r6, r0, #24
 8006c7a:	d501      	bpl.n	8006c80 <_printf_i+0xbc>
 8006c7c:	681d      	ldr	r5, [r3, #0]
 8006c7e:	e003      	b.n	8006c88 <_printf_i+0xc4>
 8006c80:	0645      	lsls	r5, r0, #25
 8006c82:	d5fb      	bpl.n	8006c7c <_printf_i+0xb8>
 8006c84:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006c88:	2d00      	cmp	r5, #0
 8006c8a:	da03      	bge.n	8006c94 <_printf_i+0xd0>
 8006c8c:	232d      	movs	r3, #45	@ 0x2d
 8006c8e:	426d      	negs	r5, r5
 8006c90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c94:	4859      	ldr	r0, [pc, #356]	@ (8006dfc <_printf_i+0x238>)
 8006c96:	230a      	movs	r3, #10
 8006c98:	e011      	b.n	8006cbe <_printf_i+0xfa>
 8006c9a:	6821      	ldr	r1, [r4, #0]
 8006c9c:	6833      	ldr	r3, [r6, #0]
 8006c9e:	0608      	lsls	r0, r1, #24
 8006ca0:	f853 5b04 	ldr.w	r5, [r3], #4
 8006ca4:	d402      	bmi.n	8006cac <_printf_i+0xe8>
 8006ca6:	0649      	lsls	r1, r1, #25
 8006ca8:	bf48      	it	mi
 8006caa:	b2ad      	uxthmi	r5, r5
 8006cac:	2f6f      	cmp	r7, #111	@ 0x6f
 8006cae:	4853      	ldr	r0, [pc, #332]	@ (8006dfc <_printf_i+0x238>)
 8006cb0:	6033      	str	r3, [r6, #0]
 8006cb2:	bf14      	ite	ne
 8006cb4:	230a      	movne	r3, #10
 8006cb6:	2308      	moveq	r3, #8
 8006cb8:	2100      	movs	r1, #0
 8006cba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006cbe:	6866      	ldr	r6, [r4, #4]
 8006cc0:	60a6      	str	r6, [r4, #8]
 8006cc2:	2e00      	cmp	r6, #0
 8006cc4:	bfa2      	ittt	ge
 8006cc6:	6821      	ldrge	r1, [r4, #0]
 8006cc8:	f021 0104 	bicge.w	r1, r1, #4
 8006ccc:	6021      	strge	r1, [r4, #0]
 8006cce:	b90d      	cbnz	r5, 8006cd4 <_printf_i+0x110>
 8006cd0:	2e00      	cmp	r6, #0
 8006cd2:	d04b      	beq.n	8006d6c <_printf_i+0x1a8>
 8006cd4:	4616      	mov	r6, r2
 8006cd6:	fbb5 f1f3 	udiv	r1, r5, r3
 8006cda:	fb03 5711 	mls	r7, r3, r1, r5
 8006cde:	5dc7      	ldrb	r7, [r0, r7]
 8006ce0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006ce4:	462f      	mov	r7, r5
 8006ce6:	42bb      	cmp	r3, r7
 8006ce8:	460d      	mov	r5, r1
 8006cea:	d9f4      	bls.n	8006cd6 <_printf_i+0x112>
 8006cec:	2b08      	cmp	r3, #8
 8006cee:	d10b      	bne.n	8006d08 <_printf_i+0x144>
 8006cf0:	6823      	ldr	r3, [r4, #0]
 8006cf2:	07df      	lsls	r7, r3, #31
 8006cf4:	d508      	bpl.n	8006d08 <_printf_i+0x144>
 8006cf6:	6923      	ldr	r3, [r4, #16]
 8006cf8:	6861      	ldr	r1, [r4, #4]
 8006cfa:	4299      	cmp	r1, r3
 8006cfc:	bfde      	ittt	le
 8006cfe:	2330      	movle	r3, #48	@ 0x30
 8006d00:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006d04:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006d08:	1b92      	subs	r2, r2, r6
 8006d0a:	6122      	str	r2, [r4, #16]
 8006d0c:	f8cd a000 	str.w	sl, [sp]
 8006d10:	464b      	mov	r3, r9
 8006d12:	aa03      	add	r2, sp, #12
 8006d14:	4621      	mov	r1, r4
 8006d16:	4640      	mov	r0, r8
 8006d18:	f7ff fee6 	bl	8006ae8 <_printf_common>
 8006d1c:	3001      	adds	r0, #1
 8006d1e:	d14a      	bne.n	8006db6 <_printf_i+0x1f2>
 8006d20:	f04f 30ff 	mov.w	r0, #4294967295
 8006d24:	b004      	add	sp, #16
 8006d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d2a:	6823      	ldr	r3, [r4, #0]
 8006d2c:	f043 0320 	orr.w	r3, r3, #32
 8006d30:	6023      	str	r3, [r4, #0]
 8006d32:	4833      	ldr	r0, [pc, #204]	@ (8006e00 <_printf_i+0x23c>)
 8006d34:	2778      	movs	r7, #120	@ 0x78
 8006d36:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006d3a:	6823      	ldr	r3, [r4, #0]
 8006d3c:	6831      	ldr	r1, [r6, #0]
 8006d3e:	061f      	lsls	r7, r3, #24
 8006d40:	f851 5b04 	ldr.w	r5, [r1], #4
 8006d44:	d402      	bmi.n	8006d4c <_printf_i+0x188>
 8006d46:	065f      	lsls	r7, r3, #25
 8006d48:	bf48      	it	mi
 8006d4a:	b2ad      	uxthmi	r5, r5
 8006d4c:	6031      	str	r1, [r6, #0]
 8006d4e:	07d9      	lsls	r1, r3, #31
 8006d50:	bf44      	itt	mi
 8006d52:	f043 0320 	orrmi.w	r3, r3, #32
 8006d56:	6023      	strmi	r3, [r4, #0]
 8006d58:	b11d      	cbz	r5, 8006d62 <_printf_i+0x19e>
 8006d5a:	2310      	movs	r3, #16
 8006d5c:	e7ac      	b.n	8006cb8 <_printf_i+0xf4>
 8006d5e:	4827      	ldr	r0, [pc, #156]	@ (8006dfc <_printf_i+0x238>)
 8006d60:	e7e9      	b.n	8006d36 <_printf_i+0x172>
 8006d62:	6823      	ldr	r3, [r4, #0]
 8006d64:	f023 0320 	bic.w	r3, r3, #32
 8006d68:	6023      	str	r3, [r4, #0]
 8006d6a:	e7f6      	b.n	8006d5a <_printf_i+0x196>
 8006d6c:	4616      	mov	r6, r2
 8006d6e:	e7bd      	b.n	8006cec <_printf_i+0x128>
 8006d70:	6833      	ldr	r3, [r6, #0]
 8006d72:	6825      	ldr	r5, [r4, #0]
 8006d74:	6961      	ldr	r1, [r4, #20]
 8006d76:	1d18      	adds	r0, r3, #4
 8006d78:	6030      	str	r0, [r6, #0]
 8006d7a:	062e      	lsls	r6, r5, #24
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	d501      	bpl.n	8006d84 <_printf_i+0x1c0>
 8006d80:	6019      	str	r1, [r3, #0]
 8006d82:	e002      	b.n	8006d8a <_printf_i+0x1c6>
 8006d84:	0668      	lsls	r0, r5, #25
 8006d86:	d5fb      	bpl.n	8006d80 <_printf_i+0x1bc>
 8006d88:	8019      	strh	r1, [r3, #0]
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	6123      	str	r3, [r4, #16]
 8006d8e:	4616      	mov	r6, r2
 8006d90:	e7bc      	b.n	8006d0c <_printf_i+0x148>
 8006d92:	6833      	ldr	r3, [r6, #0]
 8006d94:	1d1a      	adds	r2, r3, #4
 8006d96:	6032      	str	r2, [r6, #0]
 8006d98:	681e      	ldr	r6, [r3, #0]
 8006d9a:	6862      	ldr	r2, [r4, #4]
 8006d9c:	2100      	movs	r1, #0
 8006d9e:	4630      	mov	r0, r6
 8006da0:	f7f9 fa16 	bl	80001d0 <memchr>
 8006da4:	b108      	cbz	r0, 8006daa <_printf_i+0x1e6>
 8006da6:	1b80      	subs	r0, r0, r6
 8006da8:	6060      	str	r0, [r4, #4]
 8006daa:	6863      	ldr	r3, [r4, #4]
 8006dac:	6123      	str	r3, [r4, #16]
 8006dae:	2300      	movs	r3, #0
 8006db0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006db4:	e7aa      	b.n	8006d0c <_printf_i+0x148>
 8006db6:	6923      	ldr	r3, [r4, #16]
 8006db8:	4632      	mov	r2, r6
 8006dba:	4649      	mov	r1, r9
 8006dbc:	4640      	mov	r0, r8
 8006dbe:	47d0      	blx	sl
 8006dc0:	3001      	adds	r0, #1
 8006dc2:	d0ad      	beq.n	8006d20 <_printf_i+0x15c>
 8006dc4:	6823      	ldr	r3, [r4, #0]
 8006dc6:	079b      	lsls	r3, r3, #30
 8006dc8:	d413      	bmi.n	8006df2 <_printf_i+0x22e>
 8006dca:	68e0      	ldr	r0, [r4, #12]
 8006dcc:	9b03      	ldr	r3, [sp, #12]
 8006dce:	4298      	cmp	r0, r3
 8006dd0:	bfb8      	it	lt
 8006dd2:	4618      	movlt	r0, r3
 8006dd4:	e7a6      	b.n	8006d24 <_printf_i+0x160>
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	4632      	mov	r2, r6
 8006dda:	4649      	mov	r1, r9
 8006ddc:	4640      	mov	r0, r8
 8006dde:	47d0      	blx	sl
 8006de0:	3001      	adds	r0, #1
 8006de2:	d09d      	beq.n	8006d20 <_printf_i+0x15c>
 8006de4:	3501      	adds	r5, #1
 8006de6:	68e3      	ldr	r3, [r4, #12]
 8006de8:	9903      	ldr	r1, [sp, #12]
 8006dea:	1a5b      	subs	r3, r3, r1
 8006dec:	42ab      	cmp	r3, r5
 8006dee:	dcf2      	bgt.n	8006dd6 <_printf_i+0x212>
 8006df0:	e7eb      	b.n	8006dca <_printf_i+0x206>
 8006df2:	2500      	movs	r5, #0
 8006df4:	f104 0619 	add.w	r6, r4, #25
 8006df8:	e7f5      	b.n	8006de6 <_printf_i+0x222>
 8006dfa:	bf00      	nop
 8006dfc:	08009b0a 	.word	0x08009b0a
 8006e00:	08009b1b 	.word	0x08009b1b

08006e04 <std>:
 8006e04:	2300      	movs	r3, #0
 8006e06:	b510      	push	{r4, lr}
 8006e08:	4604      	mov	r4, r0
 8006e0a:	e9c0 3300 	strd	r3, r3, [r0]
 8006e0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e12:	6083      	str	r3, [r0, #8]
 8006e14:	8181      	strh	r1, [r0, #12]
 8006e16:	6643      	str	r3, [r0, #100]	@ 0x64
 8006e18:	81c2      	strh	r2, [r0, #14]
 8006e1a:	6183      	str	r3, [r0, #24]
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	2208      	movs	r2, #8
 8006e20:	305c      	adds	r0, #92	@ 0x5c
 8006e22:	f000 f926 	bl	8007072 <memset>
 8006e26:	4b0d      	ldr	r3, [pc, #52]	@ (8006e5c <std+0x58>)
 8006e28:	6263      	str	r3, [r4, #36]	@ 0x24
 8006e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8006e60 <std+0x5c>)
 8006e2c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8006e64 <std+0x60>)
 8006e30:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006e32:	4b0d      	ldr	r3, [pc, #52]	@ (8006e68 <std+0x64>)
 8006e34:	6323      	str	r3, [r4, #48]	@ 0x30
 8006e36:	4b0d      	ldr	r3, [pc, #52]	@ (8006e6c <std+0x68>)
 8006e38:	6224      	str	r4, [r4, #32]
 8006e3a:	429c      	cmp	r4, r3
 8006e3c:	d006      	beq.n	8006e4c <std+0x48>
 8006e3e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006e42:	4294      	cmp	r4, r2
 8006e44:	d002      	beq.n	8006e4c <std+0x48>
 8006e46:	33d0      	adds	r3, #208	@ 0xd0
 8006e48:	429c      	cmp	r4, r3
 8006e4a:	d105      	bne.n	8006e58 <std+0x54>
 8006e4c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006e50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e54:	f000 b9e0 	b.w	8007218 <__retarget_lock_init_recursive>
 8006e58:	bd10      	pop	{r4, pc}
 8006e5a:	bf00      	nop
 8006e5c:	08006fed 	.word	0x08006fed
 8006e60:	0800700f 	.word	0x0800700f
 8006e64:	08007047 	.word	0x08007047
 8006e68:	0800706b 	.word	0x0800706b
 8006e6c:	20004460 	.word	0x20004460

08006e70 <stdio_exit_handler>:
 8006e70:	4a02      	ldr	r2, [pc, #8]	@ (8006e7c <stdio_exit_handler+0xc>)
 8006e72:	4903      	ldr	r1, [pc, #12]	@ (8006e80 <stdio_exit_handler+0x10>)
 8006e74:	4803      	ldr	r0, [pc, #12]	@ (8006e84 <stdio_exit_handler+0x14>)
 8006e76:	f000 b869 	b.w	8006f4c <_fwalk_sglue>
 8006e7a:	bf00      	nop
 8006e7c:	20000018 	.word	0x20000018
 8006e80:	08008e19 	.word	0x08008e19
 8006e84:	20000028 	.word	0x20000028

08006e88 <cleanup_stdio>:
 8006e88:	6841      	ldr	r1, [r0, #4]
 8006e8a:	4b0c      	ldr	r3, [pc, #48]	@ (8006ebc <cleanup_stdio+0x34>)
 8006e8c:	4299      	cmp	r1, r3
 8006e8e:	b510      	push	{r4, lr}
 8006e90:	4604      	mov	r4, r0
 8006e92:	d001      	beq.n	8006e98 <cleanup_stdio+0x10>
 8006e94:	f001 ffc0 	bl	8008e18 <_fflush_r>
 8006e98:	68a1      	ldr	r1, [r4, #8]
 8006e9a:	4b09      	ldr	r3, [pc, #36]	@ (8006ec0 <cleanup_stdio+0x38>)
 8006e9c:	4299      	cmp	r1, r3
 8006e9e:	d002      	beq.n	8006ea6 <cleanup_stdio+0x1e>
 8006ea0:	4620      	mov	r0, r4
 8006ea2:	f001 ffb9 	bl	8008e18 <_fflush_r>
 8006ea6:	68e1      	ldr	r1, [r4, #12]
 8006ea8:	4b06      	ldr	r3, [pc, #24]	@ (8006ec4 <cleanup_stdio+0x3c>)
 8006eaa:	4299      	cmp	r1, r3
 8006eac:	d004      	beq.n	8006eb8 <cleanup_stdio+0x30>
 8006eae:	4620      	mov	r0, r4
 8006eb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006eb4:	f001 bfb0 	b.w	8008e18 <_fflush_r>
 8006eb8:	bd10      	pop	{r4, pc}
 8006eba:	bf00      	nop
 8006ebc:	20004460 	.word	0x20004460
 8006ec0:	200044c8 	.word	0x200044c8
 8006ec4:	20004530 	.word	0x20004530

08006ec8 <global_stdio_init.part.0>:
 8006ec8:	b510      	push	{r4, lr}
 8006eca:	4b0b      	ldr	r3, [pc, #44]	@ (8006ef8 <global_stdio_init.part.0+0x30>)
 8006ecc:	4c0b      	ldr	r4, [pc, #44]	@ (8006efc <global_stdio_init.part.0+0x34>)
 8006ece:	4a0c      	ldr	r2, [pc, #48]	@ (8006f00 <global_stdio_init.part.0+0x38>)
 8006ed0:	601a      	str	r2, [r3, #0]
 8006ed2:	4620      	mov	r0, r4
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	2104      	movs	r1, #4
 8006ed8:	f7ff ff94 	bl	8006e04 <std>
 8006edc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	2109      	movs	r1, #9
 8006ee4:	f7ff ff8e 	bl	8006e04 <std>
 8006ee8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006eec:	2202      	movs	r2, #2
 8006eee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ef2:	2112      	movs	r1, #18
 8006ef4:	f7ff bf86 	b.w	8006e04 <std>
 8006ef8:	20004598 	.word	0x20004598
 8006efc:	20004460 	.word	0x20004460
 8006f00:	08006e71 	.word	0x08006e71

08006f04 <__sfp_lock_acquire>:
 8006f04:	4801      	ldr	r0, [pc, #4]	@ (8006f0c <__sfp_lock_acquire+0x8>)
 8006f06:	f000 b988 	b.w	800721a <__retarget_lock_acquire_recursive>
 8006f0a:	bf00      	nop
 8006f0c:	200045a1 	.word	0x200045a1

08006f10 <__sfp_lock_release>:
 8006f10:	4801      	ldr	r0, [pc, #4]	@ (8006f18 <__sfp_lock_release+0x8>)
 8006f12:	f000 b983 	b.w	800721c <__retarget_lock_release_recursive>
 8006f16:	bf00      	nop
 8006f18:	200045a1 	.word	0x200045a1

08006f1c <__sinit>:
 8006f1c:	b510      	push	{r4, lr}
 8006f1e:	4604      	mov	r4, r0
 8006f20:	f7ff fff0 	bl	8006f04 <__sfp_lock_acquire>
 8006f24:	6a23      	ldr	r3, [r4, #32]
 8006f26:	b11b      	cbz	r3, 8006f30 <__sinit+0x14>
 8006f28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f2c:	f7ff bff0 	b.w	8006f10 <__sfp_lock_release>
 8006f30:	4b04      	ldr	r3, [pc, #16]	@ (8006f44 <__sinit+0x28>)
 8006f32:	6223      	str	r3, [r4, #32]
 8006f34:	4b04      	ldr	r3, [pc, #16]	@ (8006f48 <__sinit+0x2c>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d1f5      	bne.n	8006f28 <__sinit+0xc>
 8006f3c:	f7ff ffc4 	bl	8006ec8 <global_stdio_init.part.0>
 8006f40:	e7f2      	b.n	8006f28 <__sinit+0xc>
 8006f42:	bf00      	nop
 8006f44:	08006e89 	.word	0x08006e89
 8006f48:	20004598 	.word	0x20004598

08006f4c <_fwalk_sglue>:
 8006f4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f50:	4607      	mov	r7, r0
 8006f52:	4688      	mov	r8, r1
 8006f54:	4614      	mov	r4, r2
 8006f56:	2600      	movs	r6, #0
 8006f58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f5c:	f1b9 0901 	subs.w	r9, r9, #1
 8006f60:	d505      	bpl.n	8006f6e <_fwalk_sglue+0x22>
 8006f62:	6824      	ldr	r4, [r4, #0]
 8006f64:	2c00      	cmp	r4, #0
 8006f66:	d1f7      	bne.n	8006f58 <_fwalk_sglue+0xc>
 8006f68:	4630      	mov	r0, r6
 8006f6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f6e:	89ab      	ldrh	r3, [r5, #12]
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d907      	bls.n	8006f84 <_fwalk_sglue+0x38>
 8006f74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f78:	3301      	adds	r3, #1
 8006f7a:	d003      	beq.n	8006f84 <_fwalk_sglue+0x38>
 8006f7c:	4629      	mov	r1, r5
 8006f7e:	4638      	mov	r0, r7
 8006f80:	47c0      	blx	r8
 8006f82:	4306      	orrs	r6, r0
 8006f84:	3568      	adds	r5, #104	@ 0x68
 8006f86:	e7e9      	b.n	8006f5c <_fwalk_sglue+0x10>

08006f88 <iprintf>:
 8006f88:	b40f      	push	{r0, r1, r2, r3}
 8006f8a:	b507      	push	{r0, r1, r2, lr}
 8006f8c:	4906      	ldr	r1, [pc, #24]	@ (8006fa8 <iprintf+0x20>)
 8006f8e:	ab04      	add	r3, sp, #16
 8006f90:	6808      	ldr	r0, [r1, #0]
 8006f92:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f96:	6881      	ldr	r1, [r0, #8]
 8006f98:	9301      	str	r3, [sp, #4]
 8006f9a:	f001 fda1 	bl	8008ae0 <_vfiprintf_r>
 8006f9e:	b003      	add	sp, #12
 8006fa0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006fa4:	b004      	add	sp, #16
 8006fa6:	4770      	bx	lr
 8006fa8:	20000024 	.word	0x20000024

08006fac <siprintf>:
 8006fac:	b40e      	push	{r1, r2, r3}
 8006fae:	b500      	push	{lr}
 8006fb0:	b09c      	sub	sp, #112	@ 0x70
 8006fb2:	ab1d      	add	r3, sp, #116	@ 0x74
 8006fb4:	9002      	str	r0, [sp, #8]
 8006fb6:	9006      	str	r0, [sp, #24]
 8006fb8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006fbc:	4809      	ldr	r0, [pc, #36]	@ (8006fe4 <siprintf+0x38>)
 8006fbe:	9107      	str	r1, [sp, #28]
 8006fc0:	9104      	str	r1, [sp, #16]
 8006fc2:	4909      	ldr	r1, [pc, #36]	@ (8006fe8 <siprintf+0x3c>)
 8006fc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fc8:	9105      	str	r1, [sp, #20]
 8006fca:	6800      	ldr	r0, [r0, #0]
 8006fcc:	9301      	str	r3, [sp, #4]
 8006fce:	a902      	add	r1, sp, #8
 8006fd0:	f001 fc60 	bl	8008894 <_svfiprintf_r>
 8006fd4:	9b02      	ldr	r3, [sp, #8]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	701a      	strb	r2, [r3, #0]
 8006fda:	b01c      	add	sp, #112	@ 0x70
 8006fdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006fe0:	b003      	add	sp, #12
 8006fe2:	4770      	bx	lr
 8006fe4:	20000024 	.word	0x20000024
 8006fe8:	ffff0208 	.word	0xffff0208

08006fec <__sread>:
 8006fec:	b510      	push	{r4, lr}
 8006fee:	460c      	mov	r4, r1
 8006ff0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ff4:	f000 f8c2 	bl	800717c <_read_r>
 8006ff8:	2800      	cmp	r0, #0
 8006ffa:	bfab      	itete	ge
 8006ffc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006ffe:	89a3      	ldrhlt	r3, [r4, #12]
 8007000:	181b      	addge	r3, r3, r0
 8007002:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007006:	bfac      	ite	ge
 8007008:	6563      	strge	r3, [r4, #84]	@ 0x54
 800700a:	81a3      	strhlt	r3, [r4, #12]
 800700c:	bd10      	pop	{r4, pc}

0800700e <__swrite>:
 800700e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007012:	461f      	mov	r7, r3
 8007014:	898b      	ldrh	r3, [r1, #12]
 8007016:	05db      	lsls	r3, r3, #23
 8007018:	4605      	mov	r5, r0
 800701a:	460c      	mov	r4, r1
 800701c:	4616      	mov	r6, r2
 800701e:	d505      	bpl.n	800702c <__swrite+0x1e>
 8007020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007024:	2302      	movs	r3, #2
 8007026:	2200      	movs	r2, #0
 8007028:	f000 f896 	bl	8007158 <_lseek_r>
 800702c:	89a3      	ldrh	r3, [r4, #12]
 800702e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007032:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007036:	81a3      	strh	r3, [r4, #12]
 8007038:	4632      	mov	r2, r6
 800703a:	463b      	mov	r3, r7
 800703c:	4628      	mov	r0, r5
 800703e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007042:	f000 b8ad 	b.w	80071a0 <_write_r>

08007046 <__sseek>:
 8007046:	b510      	push	{r4, lr}
 8007048:	460c      	mov	r4, r1
 800704a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800704e:	f000 f883 	bl	8007158 <_lseek_r>
 8007052:	1c43      	adds	r3, r0, #1
 8007054:	89a3      	ldrh	r3, [r4, #12]
 8007056:	bf15      	itete	ne
 8007058:	6560      	strne	r0, [r4, #84]	@ 0x54
 800705a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800705e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007062:	81a3      	strheq	r3, [r4, #12]
 8007064:	bf18      	it	ne
 8007066:	81a3      	strhne	r3, [r4, #12]
 8007068:	bd10      	pop	{r4, pc}

0800706a <__sclose>:
 800706a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800706e:	f000 b80d 	b.w	800708c <_close_r>

08007072 <memset>:
 8007072:	4402      	add	r2, r0
 8007074:	4603      	mov	r3, r0
 8007076:	4293      	cmp	r3, r2
 8007078:	d100      	bne.n	800707c <memset+0xa>
 800707a:	4770      	bx	lr
 800707c:	f803 1b01 	strb.w	r1, [r3], #1
 8007080:	e7f9      	b.n	8007076 <memset+0x4>
	...

08007084 <_localeconv_r>:
 8007084:	4800      	ldr	r0, [pc, #0]	@ (8007088 <_localeconv_r+0x4>)
 8007086:	4770      	bx	lr
 8007088:	20000164 	.word	0x20000164

0800708c <_close_r>:
 800708c:	b538      	push	{r3, r4, r5, lr}
 800708e:	4d06      	ldr	r5, [pc, #24]	@ (80070a8 <_close_r+0x1c>)
 8007090:	2300      	movs	r3, #0
 8007092:	4604      	mov	r4, r0
 8007094:	4608      	mov	r0, r1
 8007096:	602b      	str	r3, [r5, #0]
 8007098:	f7fa feb2 	bl	8001e00 <_close>
 800709c:	1c43      	adds	r3, r0, #1
 800709e:	d102      	bne.n	80070a6 <_close_r+0x1a>
 80070a0:	682b      	ldr	r3, [r5, #0]
 80070a2:	b103      	cbz	r3, 80070a6 <_close_r+0x1a>
 80070a4:	6023      	str	r3, [r4, #0]
 80070a6:	bd38      	pop	{r3, r4, r5, pc}
 80070a8:	2000459c 	.word	0x2000459c

080070ac <_reclaim_reent>:
 80070ac:	4b29      	ldr	r3, [pc, #164]	@ (8007154 <_reclaim_reent+0xa8>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4283      	cmp	r3, r0
 80070b2:	b570      	push	{r4, r5, r6, lr}
 80070b4:	4604      	mov	r4, r0
 80070b6:	d04b      	beq.n	8007150 <_reclaim_reent+0xa4>
 80070b8:	69c3      	ldr	r3, [r0, #28]
 80070ba:	b1ab      	cbz	r3, 80070e8 <_reclaim_reent+0x3c>
 80070bc:	68db      	ldr	r3, [r3, #12]
 80070be:	b16b      	cbz	r3, 80070dc <_reclaim_reent+0x30>
 80070c0:	2500      	movs	r5, #0
 80070c2:	69e3      	ldr	r3, [r4, #28]
 80070c4:	68db      	ldr	r3, [r3, #12]
 80070c6:	5959      	ldr	r1, [r3, r5]
 80070c8:	2900      	cmp	r1, #0
 80070ca:	d13b      	bne.n	8007144 <_reclaim_reent+0x98>
 80070cc:	3504      	adds	r5, #4
 80070ce:	2d80      	cmp	r5, #128	@ 0x80
 80070d0:	d1f7      	bne.n	80070c2 <_reclaim_reent+0x16>
 80070d2:	69e3      	ldr	r3, [r4, #28]
 80070d4:	4620      	mov	r0, r4
 80070d6:	68d9      	ldr	r1, [r3, #12]
 80070d8:	f000 fefe 	bl	8007ed8 <_free_r>
 80070dc:	69e3      	ldr	r3, [r4, #28]
 80070de:	6819      	ldr	r1, [r3, #0]
 80070e0:	b111      	cbz	r1, 80070e8 <_reclaim_reent+0x3c>
 80070e2:	4620      	mov	r0, r4
 80070e4:	f000 fef8 	bl	8007ed8 <_free_r>
 80070e8:	6961      	ldr	r1, [r4, #20]
 80070ea:	b111      	cbz	r1, 80070f2 <_reclaim_reent+0x46>
 80070ec:	4620      	mov	r0, r4
 80070ee:	f000 fef3 	bl	8007ed8 <_free_r>
 80070f2:	69e1      	ldr	r1, [r4, #28]
 80070f4:	b111      	cbz	r1, 80070fc <_reclaim_reent+0x50>
 80070f6:	4620      	mov	r0, r4
 80070f8:	f000 feee 	bl	8007ed8 <_free_r>
 80070fc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80070fe:	b111      	cbz	r1, 8007106 <_reclaim_reent+0x5a>
 8007100:	4620      	mov	r0, r4
 8007102:	f000 fee9 	bl	8007ed8 <_free_r>
 8007106:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007108:	b111      	cbz	r1, 8007110 <_reclaim_reent+0x64>
 800710a:	4620      	mov	r0, r4
 800710c:	f000 fee4 	bl	8007ed8 <_free_r>
 8007110:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007112:	b111      	cbz	r1, 800711a <_reclaim_reent+0x6e>
 8007114:	4620      	mov	r0, r4
 8007116:	f000 fedf 	bl	8007ed8 <_free_r>
 800711a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800711c:	b111      	cbz	r1, 8007124 <_reclaim_reent+0x78>
 800711e:	4620      	mov	r0, r4
 8007120:	f000 feda 	bl	8007ed8 <_free_r>
 8007124:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007126:	b111      	cbz	r1, 800712e <_reclaim_reent+0x82>
 8007128:	4620      	mov	r0, r4
 800712a:	f000 fed5 	bl	8007ed8 <_free_r>
 800712e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007130:	b111      	cbz	r1, 8007138 <_reclaim_reent+0x8c>
 8007132:	4620      	mov	r0, r4
 8007134:	f000 fed0 	bl	8007ed8 <_free_r>
 8007138:	6a23      	ldr	r3, [r4, #32]
 800713a:	b14b      	cbz	r3, 8007150 <_reclaim_reent+0xa4>
 800713c:	4620      	mov	r0, r4
 800713e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007142:	4718      	bx	r3
 8007144:	680e      	ldr	r6, [r1, #0]
 8007146:	4620      	mov	r0, r4
 8007148:	f000 fec6 	bl	8007ed8 <_free_r>
 800714c:	4631      	mov	r1, r6
 800714e:	e7bb      	b.n	80070c8 <_reclaim_reent+0x1c>
 8007150:	bd70      	pop	{r4, r5, r6, pc}
 8007152:	bf00      	nop
 8007154:	20000024 	.word	0x20000024

08007158 <_lseek_r>:
 8007158:	b538      	push	{r3, r4, r5, lr}
 800715a:	4d07      	ldr	r5, [pc, #28]	@ (8007178 <_lseek_r+0x20>)
 800715c:	4604      	mov	r4, r0
 800715e:	4608      	mov	r0, r1
 8007160:	4611      	mov	r1, r2
 8007162:	2200      	movs	r2, #0
 8007164:	602a      	str	r2, [r5, #0]
 8007166:	461a      	mov	r2, r3
 8007168:	f7fa fe71 	bl	8001e4e <_lseek>
 800716c:	1c43      	adds	r3, r0, #1
 800716e:	d102      	bne.n	8007176 <_lseek_r+0x1e>
 8007170:	682b      	ldr	r3, [r5, #0]
 8007172:	b103      	cbz	r3, 8007176 <_lseek_r+0x1e>
 8007174:	6023      	str	r3, [r4, #0]
 8007176:	bd38      	pop	{r3, r4, r5, pc}
 8007178:	2000459c 	.word	0x2000459c

0800717c <_read_r>:
 800717c:	b538      	push	{r3, r4, r5, lr}
 800717e:	4d07      	ldr	r5, [pc, #28]	@ (800719c <_read_r+0x20>)
 8007180:	4604      	mov	r4, r0
 8007182:	4608      	mov	r0, r1
 8007184:	4611      	mov	r1, r2
 8007186:	2200      	movs	r2, #0
 8007188:	602a      	str	r2, [r5, #0]
 800718a:	461a      	mov	r2, r3
 800718c:	f7fa fdff 	bl	8001d8e <_read>
 8007190:	1c43      	adds	r3, r0, #1
 8007192:	d102      	bne.n	800719a <_read_r+0x1e>
 8007194:	682b      	ldr	r3, [r5, #0]
 8007196:	b103      	cbz	r3, 800719a <_read_r+0x1e>
 8007198:	6023      	str	r3, [r4, #0]
 800719a:	bd38      	pop	{r3, r4, r5, pc}
 800719c:	2000459c 	.word	0x2000459c

080071a0 <_write_r>:
 80071a0:	b538      	push	{r3, r4, r5, lr}
 80071a2:	4d07      	ldr	r5, [pc, #28]	@ (80071c0 <_write_r+0x20>)
 80071a4:	4604      	mov	r4, r0
 80071a6:	4608      	mov	r0, r1
 80071a8:	4611      	mov	r1, r2
 80071aa:	2200      	movs	r2, #0
 80071ac:	602a      	str	r2, [r5, #0]
 80071ae:	461a      	mov	r2, r3
 80071b0:	f7fa fe0a 	bl	8001dc8 <_write>
 80071b4:	1c43      	adds	r3, r0, #1
 80071b6:	d102      	bne.n	80071be <_write_r+0x1e>
 80071b8:	682b      	ldr	r3, [r5, #0]
 80071ba:	b103      	cbz	r3, 80071be <_write_r+0x1e>
 80071bc:	6023      	str	r3, [r4, #0]
 80071be:	bd38      	pop	{r3, r4, r5, pc}
 80071c0:	2000459c 	.word	0x2000459c

080071c4 <__errno>:
 80071c4:	4b01      	ldr	r3, [pc, #4]	@ (80071cc <__errno+0x8>)
 80071c6:	6818      	ldr	r0, [r3, #0]
 80071c8:	4770      	bx	lr
 80071ca:	bf00      	nop
 80071cc:	20000024 	.word	0x20000024

080071d0 <__libc_init_array>:
 80071d0:	b570      	push	{r4, r5, r6, lr}
 80071d2:	4d0d      	ldr	r5, [pc, #52]	@ (8007208 <__libc_init_array+0x38>)
 80071d4:	4c0d      	ldr	r4, [pc, #52]	@ (800720c <__libc_init_array+0x3c>)
 80071d6:	1b64      	subs	r4, r4, r5
 80071d8:	10a4      	asrs	r4, r4, #2
 80071da:	2600      	movs	r6, #0
 80071dc:	42a6      	cmp	r6, r4
 80071de:	d109      	bne.n	80071f4 <__libc_init_array+0x24>
 80071e0:	4d0b      	ldr	r5, [pc, #44]	@ (8007210 <__libc_init_array+0x40>)
 80071e2:	4c0c      	ldr	r4, [pc, #48]	@ (8007214 <__libc_init_array+0x44>)
 80071e4:	f002 f868 	bl	80092b8 <_init>
 80071e8:	1b64      	subs	r4, r4, r5
 80071ea:	10a4      	asrs	r4, r4, #2
 80071ec:	2600      	movs	r6, #0
 80071ee:	42a6      	cmp	r6, r4
 80071f0:	d105      	bne.n	80071fe <__libc_init_array+0x2e>
 80071f2:	bd70      	pop	{r4, r5, r6, pc}
 80071f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80071f8:	4798      	blx	r3
 80071fa:	3601      	adds	r6, #1
 80071fc:	e7ee      	b.n	80071dc <__libc_init_array+0xc>
 80071fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007202:	4798      	blx	r3
 8007204:	3601      	adds	r6, #1
 8007206:	e7f2      	b.n	80071ee <__libc_init_array+0x1e>
 8007208:	08009e70 	.word	0x08009e70
 800720c:	08009e70 	.word	0x08009e70
 8007210:	08009e70 	.word	0x08009e70
 8007214:	08009e74 	.word	0x08009e74

08007218 <__retarget_lock_init_recursive>:
 8007218:	4770      	bx	lr

0800721a <__retarget_lock_acquire_recursive>:
 800721a:	4770      	bx	lr

0800721c <__retarget_lock_release_recursive>:
 800721c:	4770      	bx	lr

0800721e <memcpy>:
 800721e:	440a      	add	r2, r1
 8007220:	4291      	cmp	r1, r2
 8007222:	f100 33ff 	add.w	r3, r0, #4294967295
 8007226:	d100      	bne.n	800722a <memcpy+0xc>
 8007228:	4770      	bx	lr
 800722a:	b510      	push	{r4, lr}
 800722c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007230:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007234:	4291      	cmp	r1, r2
 8007236:	d1f9      	bne.n	800722c <memcpy+0xe>
 8007238:	bd10      	pop	{r4, pc}

0800723a <quorem>:
 800723a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800723e:	6903      	ldr	r3, [r0, #16]
 8007240:	690c      	ldr	r4, [r1, #16]
 8007242:	42a3      	cmp	r3, r4
 8007244:	4607      	mov	r7, r0
 8007246:	db7e      	blt.n	8007346 <quorem+0x10c>
 8007248:	3c01      	subs	r4, #1
 800724a:	f101 0814 	add.w	r8, r1, #20
 800724e:	00a3      	lsls	r3, r4, #2
 8007250:	f100 0514 	add.w	r5, r0, #20
 8007254:	9300      	str	r3, [sp, #0]
 8007256:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800725a:	9301      	str	r3, [sp, #4]
 800725c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007260:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007264:	3301      	adds	r3, #1
 8007266:	429a      	cmp	r2, r3
 8007268:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800726c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007270:	d32e      	bcc.n	80072d0 <quorem+0x96>
 8007272:	f04f 0a00 	mov.w	sl, #0
 8007276:	46c4      	mov	ip, r8
 8007278:	46ae      	mov	lr, r5
 800727a:	46d3      	mov	fp, sl
 800727c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007280:	b298      	uxth	r0, r3
 8007282:	fb06 a000 	mla	r0, r6, r0, sl
 8007286:	0c02      	lsrs	r2, r0, #16
 8007288:	0c1b      	lsrs	r3, r3, #16
 800728a:	fb06 2303 	mla	r3, r6, r3, r2
 800728e:	f8de 2000 	ldr.w	r2, [lr]
 8007292:	b280      	uxth	r0, r0
 8007294:	b292      	uxth	r2, r2
 8007296:	1a12      	subs	r2, r2, r0
 8007298:	445a      	add	r2, fp
 800729a:	f8de 0000 	ldr.w	r0, [lr]
 800729e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80072a8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80072ac:	b292      	uxth	r2, r2
 80072ae:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80072b2:	45e1      	cmp	r9, ip
 80072b4:	f84e 2b04 	str.w	r2, [lr], #4
 80072b8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80072bc:	d2de      	bcs.n	800727c <quorem+0x42>
 80072be:	9b00      	ldr	r3, [sp, #0]
 80072c0:	58eb      	ldr	r3, [r5, r3]
 80072c2:	b92b      	cbnz	r3, 80072d0 <quorem+0x96>
 80072c4:	9b01      	ldr	r3, [sp, #4]
 80072c6:	3b04      	subs	r3, #4
 80072c8:	429d      	cmp	r5, r3
 80072ca:	461a      	mov	r2, r3
 80072cc:	d32f      	bcc.n	800732e <quorem+0xf4>
 80072ce:	613c      	str	r4, [r7, #16]
 80072d0:	4638      	mov	r0, r7
 80072d2:	f001 f97b 	bl	80085cc <__mcmp>
 80072d6:	2800      	cmp	r0, #0
 80072d8:	db25      	blt.n	8007326 <quorem+0xec>
 80072da:	4629      	mov	r1, r5
 80072dc:	2000      	movs	r0, #0
 80072de:	f858 2b04 	ldr.w	r2, [r8], #4
 80072e2:	f8d1 c000 	ldr.w	ip, [r1]
 80072e6:	fa1f fe82 	uxth.w	lr, r2
 80072ea:	fa1f f38c 	uxth.w	r3, ip
 80072ee:	eba3 030e 	sub.w	r3, r3, lr
 80072f2:	4403      	add	r3, r0
 80072f4:	0c12      	lsrs	r2, r2, #16
 80072f6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80072fa:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80072fe:	b29b      	uxth	r3, r3
 8007300:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007304:	45c1      	cmp	r9, r8
 8007306:	f841 3b04 	str.w	r3, [r1], #4
 800730a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800730e:	d2e6      	bcs.n	80072de <quorem+0xa4>
 8007310:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007314:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007318:	b922      	cbnz	r2, 8007324 <quorem+0xea>
 800731a:	3b04      	subs	r3, #4
 800731c:	429d      	cmp	r5, r3
 800731e:	461a      	mov	r2, r3
 8007320:	d30b      	bcc.n	800733a <quorem+0x100>
 8007322:	613c      	str	r4, [r7, #16]
 8007324:	3601      	adds	r6, #1
 8007326:	4630      	mov	r0, r6
 8007328:	b003      	add	sp, #12
 800732a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800732e:	6812      	ldr	r2, [r2, #0]
 8007330:	3b04      	subs	r3, #4
 8007332:	2a00      	cmp	r2, #0
 8007334:	d1cb      	bne.n	80072ce <quorem+0x94>
 8007336:	3c01      	subs	r4, #1
 8007338:	e7c6      	b.n	80072c8 <quorem+0x8e>
 800733a:	6812      	ldr	r2, [r2, #0]
 800733c:	3b04      	subs	r3, #4
 800733e:	2a00      	cmp	r2, #0
 8007340:	d1ef      	bne.n	8007322 <quorem+0xe8>
 8007342:	3c01      	subs	r4, #1
 8007344:	e7ea      	b.n	800731c <quorem+0xe2>
 8007346:	2000      	movs	r0, #0
 8007348:	e7ee      	b.n	8007328 <quorem+0xee>
 800734a:	0000      	movs	r0, r0
 800734c:	0000      	movs	r0, r0
	...

08007350 <_dtoa_r>:
 8007350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007354:	69c7      	ldr	r7, [r0, #28]
 8007356:	b099      	sub	sp, #100	@ 0x64
 8007358:	ed8d 0b02 	vstr	d0, [sp, #8]
 800735c:	ec55 4b10 	vmov	r4, r5, d0
 8007360:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007362:	9109      	str	r1, [sp, #36]	@ 0x24
 8007364:	4683      	mov	fp, r0
 8007366:	920e      	str	r2, [sp, #56]	@ 0x38
 8007368:	9313      	str	r3, [sp, #76]	@ 0x4c
 800736a:	b97f      	cbnz	r7, 800738c <_dtoa_r+0x3c>
 800736c:	2010      	movs	r0, #16
 800736e:	f000 fdfd 	bl	8007f6c <malloc>
 8007372:	4602      	mov	r2, r0
 8007374:	f8cb 001c 	str.w	r0, [fp, #28]
 8007378:	b920      	cbnz	r0, 8007384 <_dtoa_r+0x34>
 800737a:	4ba7      	ldr	r3, [pc, #668]	@ (8007618 <_dtoa_r+0x2c8>)
 800737c:	21ef      	movs	r1, #239	@ 0xef
 800737e:	48a7      	ldr	r0, [pc, #668]	@ (800761c <_dtoa_r+0x2cc>)
 8007380:	f001 fe30 	bl	8008fe4 <__assert_func>
 8007384:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007388:	6007      	str	r7, [r0, #0]
 800738a:	60c7      	str	r7, [r0, #12]
 800738c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007390:	6819      	ldr	r1, [r3, #0]
 8007392:	b159      	cbz	r1, 80073ac <_dtoa_r+0x5c>
 8007394:	685a      	ldr	r2, [r3, #4]
 8007396:	604a      	str	r2, [r1, #4]
 8007398:	2301      	movs	r3, #1
 800739a:	4093      	lsls	r3, r2
 800739c:	608b      	str	r3, [r1, #8]
 800739e:	4658      	mov	r0, fp
 80073a0:	f000 feda 	bl	8008158 <_Bfree>
 80073a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80073a8:	2200      	movs	r2, #0
 80073aa:	601a      	str	r2, [r3, #0]
 80073ac:	1e2b      	subs	r3, r5, #0
 80073ae:	bfb9      	ittee	lt
 80073b0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80073b4:	9303      	strlt	r3, [sp, #12]
 80073b6:	2300      	movge	r3, #0
 80073b8:	6033      	strge	r3, [r6, #0]
 80073ba:	9f03      	ldr	r7, [sp, #12]
 80073bc:	4b98      	ldr	r3, [pc, #608]	@ (8007620 <_dtoa_r+0x2d0>)
 80073be:	bfbc      	itt	lt
 80073c0:	2201      	movlt	r2, #1
 80073c2:	6032      	strlt	r2, [r6, #0]
 80073c4:	43bb      	bics	r3, r7
 80073c6:	d112      	bne.n	80073ee <_dtoa_r+0x9e>
 80073c8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80073ca:	f242 730f 	movw	r3, #9999	@ 0x270f
 80073ce:	6013      	str	r3, [r2, #0]
 80073d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80073d4:	4323      	orrs	r3, r4
 80073d6:	f000 854d 	beq.w	8007e74 <_dtoa_r+0xb24>
 80073da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80073dc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007634 <_dtoa_r+0x2e4>
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	f000 854f 	beq.w	8007e84 <_dtoa_r+0xb34>
 80073e6:	f10a 0303 	add.w	r3, sl, #3
 80073ea:	f000 bd49 	b.w	8007e80 <_dtoa_r+0xb30>
 80073ee:	ed9d 7b02 	vldr	d7, [sp, #8]
 80073f2:	2200      	movs	r2, #0
 80073f4:	ec51 0b17 	vmov	r0, r1, d7
 80073f8:	2300      	movs	r3, #0
 80073fa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80073fe:	f7f9 fb63 	bl	8000ac8 <__aeabi_dcmpeq>
 8007402:	4680      	mov	r8, r0
 8007404:	b158      	cbz	r0, 800741e <_dtoa_r+0xce>
 8007406:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007408:	2301      	movs	r3, #1
 800740a:	6013      	str	r3, [r2, #0]
 800740c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800740e:	b113      	cbz	r3, 8007416 <_dtoa_r+0xc6>
 8007410:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007412:	4b84      	ldr	r3, [pc, #528]	@ (8007624 <_dtoa_r+0x2d4>)
 8007414:	6013      	str	r3, [r2, #0]
 8007416:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007638 <_dtoa_r+0x2e8>
 800741a:	f000 bd33 	b.w	8007e84 <_dtoa_r+0xb34>
 800741e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007422:	aa16      	add	r2, sp, #88	@ 0x58
 8007424:	a917      	add	r1, sp, #92	@ 0x5c
 8007426:	4658      	mov	r0, fp
 8007428:	f001 f980 	bl	800872c <__d2b>
 800742c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007430:	4681      	mov	r9, r0
 8007432:	2e00      	cmp	r6, #0
 8007434:	d077      	beq.n	8007526 <_dtoa_r+0x1d6>
 8007436:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007438:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800743c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007440:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007444:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007448:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800744c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007450:	4619      	mov	r1, r3
 8007452:	2200      	movs	r2, #0
 8007454:	4b74      	ldr	r3, [pc, #464]	@ (8007628 <_dtoa_r+0x2d8>)
 8007456:	f7f8 ff17 	bl	8000288 <__aeabi_dsub>
 800745a:	a369      	add	r3, pc, #420	@ (adr r3, 8007600 <_dtoa_r+0x2b0>)
 800745c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007460:	f7f9 f8ca 	bl	80005f8 <__aeabi_dmul>
 8007464:	a368      	add	r3, pc, #416	@ (adr r3, 8007608 <_dtoa_r+0x2b8>)
 8007466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800746a:	f7f8 ff0f 	bl	800028c <__adddf3>
 800746e:	4604      	mov	r4, r0
 8007470:	4630      	mov	r0, r6
 8007472:	460d      	mov	r5, r1
 8007474:	f7f9 f856 	bl	8000524 <__aeabi_i2d>
 8007478:	a365      	add	r3, pc, #404	@ (adr r3, 8007610 <_dtoa_r+0x2c0>)
 800747a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800747e:	f7f9 f8bb 	bl	80005f8 <__aeabi_dmul>
 8007482:	4602      	mov	r2, r0
 8007484:	460b      	mov	r3, r1
 8007486:	4620      	mov	r0, r4
 8007488:	4629      	mov	r1, r5
 800748a:	f7f8 feff 	bl	800028c <__adddf3>
 800748e:	4604      	mov	r4, r0
 8007490:	460d      	mov	r5, r1
 8007492:	f7f9 fb61 	bl	8000b58 <__aeabi_d2iz>
 8007496:	2200      	movs	r2, #0
 8007498:	4607      	mov	r7, r0
 800749a:	2300      	movs	r3, #0
 800749c:	4620      	mov	r0, r4
 800749e:	4629      	mov	r1, r5
 80074a0:	f7f9 fb1c 	bl	8000adc <__aeabi_dcmplt>
 80074a4:	b140      	cbz	r0, 80074b8 <_dtoa_r+0x168>
 80074a6:	4638      	mov	r0, r7
 80074a8:	f7f9 f83c 	bl	8000524 <__aeabi_i2d>
 80074ac:	4622      	mov	r2, r4
 80074ae:	462b      	mov	r3, r5
 80074b0:	f7f9 fb0a 	bl	8000ac8 <__aeabi_dcmpeq>
 80074b4:	b900      	cbnz	r0, 80074b8 <_dtoa_r+0x168>
 80074b6:	3f01      	subs	r7, #1
 80074b8:	2f16      	cmp	r7, #22
 80074ba:	d851      	bhi.n	8007560 <_dtoa_r+0x210>
 80074bc:	4b5b      	ldr	r3, [pc, #364]	@ (800762c <_dtoa_r+0x2dc>)
 80074be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80074c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80074ca:	f7f9 fb07 	bl	8000adc <__aeabi_dcmplt>
 80074ce:	2800      	cmp	r0, #0
 80074d0:	d048      	beq.n	8007564 <_dtoa_r+0x214>
 80074d2:	3f01      	subs	r7, #1
 80074d4:	2300      	movs	r3, #0
 80074d6:	9312      	str	r3, [sp, #72]	@ 0x48
 80074d8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80074da:	1b9b      	subs	r3, r3, r6
 80074dc:	1e5a      	subs	r2, r3, #1
 80074de:	bf44      	itt	mi
 80074e0:	f1c3 0801 	rsbmi	r8, r3, #1
 80074e4:	2300      	movmi	r3, #0
 80074e6:	9208      	str	r2, [sp, #32]
 80074e8:	bf54      	ite	pl
 80074ea:	f04f 0800 	movpl.w	r8, #0
 80074ee:	9308      	strmi	r3, [sp, #32]
 80074f0:	2f00      	cmp	r7, #0
 80074f2:	db39      	blt.n	8007568 <_dtoa_r+0x218>
 80074f4:	9b08      	ldr	r3, [sp, #32]
 80074f6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80074f8:	443b      	add	r3, r7
 80074fa:	9308      	str	r3, [sp, #32]
 80074fc:	2300      	movs	r3, #0
 80074fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8007500:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007502:	2b09      	cmp	r3, #9
 8007504:	d864      	bhi.n	80075d0 <_dtoa_r+0x280>
 8007506:	2b05      	cmp	r3, #5
 8007508:	bfc4      	itt	gt
 800750a:	3b04      	subgt	r3, #4
 800750c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800750e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007510:	f1a3 0302 	sub.w	r3, r3, #2
 8007514:	bfcc      	ite	gt
 8007516:	2400      	movgt	r4, #0
 8007518:	2401      	movle	r4, #1
 800751a:	2b03      	cmp	r3, #3
 800751c:	d863      	bhi.n	80075e6 <_dtoa_r+0x296>
 800751e:	e8df f003 	tbb	[pc, r3]
 8007522:	372a      	.short	0x372a
 8007524:	5535      	.short	0x5535
 8007526:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800752a:	441e      	add	r6, r3
 800752c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007530:	2b20      	cmp	r3, #32
 8007532:	bfc1      	itttt	gt
 8007534:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007538:	409f      	lslgt	r7, r3
 800753a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800753e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007542:	bfd6      	itet	le
 8007544:	f1c3 0320 	rsble	r3, r3, #32
 8007548:	ea47 0003 	orrgt.w	r0, r7, r3
 800754c:	fa04 f003 	lslle.w	r0, r4, r3
 8007550:	f7f8 ffd8 	bl	8000504 <__aeabi_ui2d>
 8007554:	2201      	movs	r2, #1
 8007556:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800755a:	3e01      	subs	r6, #1
 800755c:	9214      	str	r2, [sp, #80]	@ 0x50
 800755e:	e777      	b.n	8007450 <_dtoa_r+0x100>
 8007560:	2301      	movs	r3, #1
 8007562:	e7b8      	b.n	80074d6 <_dtoa_r+0x186>
 8007564:	9012      	str	r0, [sp, #72]	@ 0x48
 8007566:	e7b7      	b.n	80074d8 <_dtoa_r+0x188>
 8007568:	427b      	negs	r3, r7
 800756a:	930a      	str	r3, [sp, #40]	@ 0x28
 800756c:	2300      	movs	r3, #0
 800756e:	eba8 0807 	sub.w	r8, r8, r7
 8007572:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007574:	e7c4      	b.n	8007500 <_dtoa_r+0x1b0>
 8007576:	2300      	movs	r3, #0
 8007578:	930b      	str	r3, [sp, #44]	@ 0x2c
 800757a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800757c:	2b00      	cmp	r3, #0
 800757e:	dc35      	bgt.n	80075ec <_dtoa_r+0x29c>
 8007580:	2301      	movs	r3, #1
 8007582:	9300      	str	r3, [sp, #0]
 8007584:	9307      	str	r3, [sp, #28]
 8007586:	461a      	mov	r2, r3
 8007588:	920e      	str	r2, [sp, #56]	@ 0x38
 800758a:	e00b      	b.n	80075a4 <_dtoa_r+0x254>
 800758c:	2301      	movs	r3, #1
 800758e:	e7f3      	b.n	8007578 <_dtoa_r+0x228>
 8007590:	2300      	movs	r3, #0
 8007592:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007594:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007596:	18fb      	adds	r3, r7, r3
 8007598:	9300      	str	r3, [sp, #0]
 800759a:	3301      	adds	r3, #1
 800759c:	2b01      	cmp	r3, #1
 800759e:	9307      	str	r3, [sp, #28]
 80075a0:	bfb8      	it	lt
 80075a2:	2301      	movlt	r3, #1
 80075a4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80075a8:	2100      	movs	r1, #0
 80075aa:	2204      	movs	r2, #4
 80075ac:	f102 0514 	add.w	r5, r2, #20
 80075b0:	429d      	cmp	r5, r3
 80075b2:	d91f      	bls.n	80075f4 <_dtoa_r+0x2a4>
 80075b4:	6041      	str	r1, [r0, #4]
 80075b6:	4658      	mov	r0, fp
 80075b8:	f000 fd8e 	bl	80080d8 <_Balloc>
 80075bc:	4682      	mov	sl, r0
 80075be:	2800      	cmp	r0, #0
 80075c0:	d13c      	bne.n	800763c <_dtoa_r+0x2ec>
 80075c2:	4b1b      	ldr	r3, [pc, #108]	@ (8007630 <_dtoa_r+0x2e0>)
 80075c4:	4602      	mov	r2, r0
 80075c6:	f240 11af 	movw	r1, #431	@ 0x1af
 80075ca:	e6d8      	b.n	800737e <_dtoa_r+0x2e>
 80075cc:	2301      	movs	r3, #1
 80075ce:	e7e0      	b.n	8007592 <_dtoa_r+0x242>
 80075d0:	2401      	movs	r4, #1
 80075d2:	2300      	movs	r3, #0
 80075d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80075d6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80075d8:	f04f 33ff 	mov.w	r3, #4294967295
 80075dc:	9300      	str	r3, [sp, #0]
 80075de:	9307      	str	r3, [sp, #28]
 80075e0:	2200      	movs	r2, #0
 80075e2:	2312      	movs	r3, #18
 80075e4:	e7d0      	b.n	8007588 <_dtoa_r+0x238>
 80075e6:	2301      	movs	r3, #1
 80075e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80075ea:	e7f5      	b.n	80075d8 <_dtoa_r+0x288>
 80075ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80075ee:	9300      	str	r3, [sp, #0]
 80075f0:	9307      	str	r3, [sp, #28]
 80075f2:	e7d7      	b.n	80075a4 <_dtoa_r+0x254>
 80075f4:	3101      	adds	r1, #1
 80075f6:	0052      	lsls	r2, r2, #1
 80075f8:	e7d8      	b.n	80075ac <_dtoa_r+0x25c>
 80075fa:	bf00      	nop
 80075fc:	f3af 8000 	nop.w
 8007600:	636f4361 	.word	0x636f4361
 8007604:	3fd287a7 	.word	0x3fd287a7
 8007608:	8b60c8b3 	.word	0x8b60c8b3
 800760c:	3fc68a28 	.word	0x3fc68a28
 8007610:	509f79fb 	.word	0x509f79fb
 8007614:	3fd34413 	.word	0x3fd34413
 8007618:	08009b39 	.word	0x08009b39
 800761c:	08009b50 	.word	0x08009b50
 8007620:	7ff00000 	.word	0x7ff00000
 8007624:	08009b09 	.word	0x08009b09
 8007628:	3ff80000 	.word	0x3ff80000
 800762c:	08009c48 	.word	0x08009c48
 8007630:	08009ba8 	.word	0x08009ba8
 8007634:	08009b35 	.word	0x08009b35
 8007638:	08009b08 	.word	0x08009b08
 800763c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007640:	6018      	str	r0, [r3, #0]
 8007642:	9b07      	ldr	r3, [sp, #28]
 8007644:	2b0e      	cmp	r3, #14
 8007646:	f200 80a4 	bhi.w	8007792 <_dtoa_r+0x442>
 800764a:	2c00      	cmp	r4, #0
 800764c:	f000 80a1 	beq.w	8007792 <_dtoa_r+0x442>
 8007650:	2f00      	cmp	r7, #0
 8007652:	dd33      	ble.n	80076bc <_dtoa_r+0x36c>
 8007654:	4bad      	ldr	r3, [pc, #692]	@ (800790c <_dtoa_r+0x5bc>)
 8007656:	f007 020f 	and.w	r2, r7, #15
 800765a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800765e:	ed93 7b00 	vldr	d7, [r3]
 8007662:	05f8      	lsls	r0, r7, #23
 8007664:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007668:	ea4f 1427 	mov.w	r4, r7, asr #4
 800766c:	d516      	bpl.n	800769c <_dtoa_r+0x34c>
 800766e:	4ba8      	ldr	r3, [pc, #672]	@ (8007910 <_dtoa_r+0x5c0>)
 8007670:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007674:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007678:	f7f9 f8e8 	bl	800084c <__aeabi_ddiv>
 800767c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007680:	f004 040f 	and.w	r4, r4, #15
 8007684:	2603      	movs	r6, #3
 8007686:	4da2      	ldr	r5, [pc, #648]	@ (8007910 <_dtoa_r+0x5c0>)
 8007688:	b954      	cbnz	r4, 80076a0 <_dtoa_r+0x350>
 800768a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800768e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007692:	f7f9 f8db 	bl	800084c <__aeabi_ddiv>
 8007696:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800769a:	e028      	b.n	80076ee <_dtoa_r+0x39e>
 800769c:	2602      	movs	r6, #2
 800769e:	e7f2      	b.n	8007686 <_dtoa_r+0x336>
 80076a0:	07e1      	lsls	r1, r4, #31
 80076a2:	d508      	bpl.n	80076b6 <_dtoa_r+0x366>
 80076a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80076ac:	f7f8 ffa4 	bl	80005f8 <__aeabi_dmul>
 80076b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80076b4:	3601      	adds	r6, #1
 80076b6:	1064      	asrs	r4, r4, #1
 80076b8:	3508      	adds	r5, #8
 80076ba:	e7e5      	b.n	8007688 <_dtoa_r+0x338>
 80076bc:	f000 80d2 	beq.w	8007864 <_dtoa_r+0x514>
 80076c0:	427c      	negs	r4, r7
 80076c2:	4b92      	ldr	r3, [pc, #584]	@ (800790c <_dtoa_r+0x5bc>)
 80076c4:	4d92      	ldr	r5, [pc, #584]	@ (8007910 <_dtoa_r+0x5c0>)
 80076c6:	f004 020f 	and.w	r2, r4, #15
 80076ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80076ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80076d6:	f7f8 ff8f 	bl	80005f8 <__aeabi_dmul>
 80076da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076de:	1124      	asrs	r4, r4, #4
 80076e0:	2300      	movs	r3, #0
 80076e2:	2602      	movs	r6, #2
 80076e4:	2c00      	cmp	r4, #0
 80076e6:	f040 80b2 	bne.w	800784e <_dtoa_r+0x4fe>
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d1d3      	bne.n	8007696 <_dtoa_r+0x346>
 80076ee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80076f0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	f000 80b7 	beq.w	8007868 <_dtoa_r+0x518>
 80076fa:	4b86      	ldr	r3, [pc, #536]	@ (8007914 <_dtoa_r+0x5c4>)
 80076fc:	2200      	movs	r2, #0
 80076fe:	4620      	mov	r0, r4
 8007700:	4629      	mov	r1, r5
 8007702:	f7f9 f9eb 	bl	8000adc <__aeabi_dcmplt>
 8007706:	2800      	cmp	r0, #0
 8007708:	f000 80ae 	beq.w	8007868 <_dtoa_r+0x518>
 800770c:	9b07      	ldr	r3, [sp, #28]
 800770e:	2b00      	cmp	r3, #0
 8007710:	f000 80aa 	beq.w	8007868 <_dtoa_r+0x518>
 8007714:	9b00      	ldr	r3, [sp, #0]
 8007716:	2b00      	cmp	r3, #0
 8007718:	dd37      	ble.n	800778a <_dtoa_r+0x43a>
 800771a:	1e7b      	subs	r3, r7, #1
 800771c:	9304      	str	r3, [sp, #16]
 800771e:	4620      	mov	r0, r4
 8007720:	4b7d      	ldr	r3, [pc, #500]	@ (8007918 <_dtoa_r+0x5c8>)
 8007722:	2200      	movs	r2, #0
 8007724:	4629      	mov	r1, r5
 8007726:	f7f8 ff67 	bl	80005f8 <__aeabi_dmul>
 800772a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800772e:	9c00      	ldr	r4, [sp, #0]
 8007730:	3601      	adds	r6, #1
 8007732:	4630      	mov	r0, r6
 8007734:	f7f8 fef6 	bl	8000524 <__aeabi_i2d>
 8007738:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800773c:	f7f8 ff5c 	bl	80005f8 <__aeabi_dmul>
 8007740:	4b76      	ldr	r3, [pc, #472]	@ (800791c <_dtoa_r+0x5cc>)
 8007742:	2200      	movs	r2, #0
 8007744:	f7f8 fda2 	bl	800028c <__adddf3>
 8007748:	4605      	mov	r5, r0
 800774a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800774e:	2c00      	cmp	r4, #0
 8007750:	f040 808d 	bne.w	800786e <_dtoa_r+0x51e>
 8007754:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007758:	4b71      	ldr	r3, [pc, #452]	@ (8007920 <_dtoa_r+0x5d0>)
 800775a:	2200      	movs	r2, #0
 800775c:	f7f8 fd94 	bl	8000288 <__aeabi_dsub>
 8007760:	4602      	mov	r2, r0
 8007762:	460b      	mov	r3, r1
 8007764:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007768:	462a      	mov	r2, r5
 800776a:	4633      	mov	r3, r6
 800776c:	f7f9 f9d4 	bl	8000b18 <__aeabi_dcmpgt>
 8007770:	2800      	cmp	r0, #0
 8007772:	f040 828b 	bne.w	8007c8c <_dtoa_r+0x93c>
 8007776:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800777a:	462a      	mov	r2, r5
 800777c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007780:	f7f9 f9ac 	bl	8000adc <__aeabi_dcmplt>
 8007784:	2800      	cmp	r0, #0
 8007786:	f040 8128 	bne.w	80079da <_dtoa_r+0x68a>
 800778a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800778e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007792:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007794:	2b00      	cmp	r3, #0
 8007796:	f2c0 815a 	blt.w	8007a4e <_dtoa_r+0x6fe>
 800779a:	2f0e      	cmp	r7, #14
 800779c:	f300 8157 	bgt.w	8007a4e <_dtoa_r+0x6fe>
 80077a0:	4b5a      	ldr	r3, [pc, #360]	@ (800790c <_dtoa_r+0x5bc>)
 80077a2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80077a6:	ed93 7b00 	vldr	d7, [r3]
 80077aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	ed8d 7b00 	vstr	d7, [sp]
 80077b2:	da03      	bge.n	80077bc <_dtoa_r+0x46c>
 80077b4:	9b07      	ldr	r3, [sp, #28]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	f340 8101 	ble.w	80079be <_dtoa_r+0x66e>
 80077bc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80077c0:	4656      	mov	r6, sl
 80077c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80077c6:	4620      	mov	r0, r4
 80077c8:	4629      	mov	r1, r5
 80077ca:	f7f9 f83f 	bl	800084c <__aeabi_ddiv>
 80077ce:	f7f9 f9c3 	bl	8000b58 <__aeabi_d2iz>
 80077d2:	4680      	mov	r8, r0
 80077d4:	f7f8 fea6 	bl	8000524 <__aeabi_i2d>
 80077d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80077dc:	f7f8 ff0c 	bl	80005f8 <__aeabi_dmul>
 80077e0:	4602      	mov	r2, r0
 80077e2:	460b      	mov	r3, r1
 80077e4:	4620      	mov	r0, r4
 80077e6:	4629      	mov	r1, r5
 80077e8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80077ec:	f7f8 fd4c 	bl	8000288 <__aeabi_dsub>
 80077f0:	f806 4b01 	strb.w	r4, [r6], #1
 80077f4:	9d07      	ldr	r5, [sp, #28]
 80077f6:	eba6 040a 	sub.w	r4, r6, sl
 80077fa:	42a5      	cmp	r5, r4
 80077fc:	4602      	mov	r2, r0
 80077fe:	460b      	mov	r3, r1
 8007800:	f040 8117 	bne.w	8007a32 <_dtoa_r+0x6e2>
 8007804:	f7f8 fd42 	bl	800028c <__adddf3>
 8007808:	e9dd 2300 	ldrd	r2, r3, [sp]
 800780c:	4604      	mov	r4, r0
 800780e:	460d      	mov	r5, r1
 8007810:	f7f9 f982 	bl	8000b18 <__aeabi_dcmpgt>
 8007814:	2800      	cmp	r0, #0
 8007816:	f040 80f9 	bne.w	8007a0c <_dtoa_r+0x6bc>
 800781a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800781e:	4620      	mov	r0, r4
 8007820:	4629      	mov	r1, r5
 8007822:	f7f9 f951 	bl	8000ac8 <__aeabi_dcmpeq>
 8007826:	b118      	cbz	r0, 8007830 <_dtoa_r+0x4e0>
 8007828:	f018 0f01 	tst.w	r8, #1
 800782c:	f040 80ee 	bne.w	8007a0c <_dtoa_r+0x6bc>
 8007830:	4649      	mov	r1, r9
 8007832:	4658      	mov	r0, fp
 8007834:	f000 fc90 	bl	8008158 <_Bfree>
 8007838:	2300      	movs	r3, #0
 800783a:	7033      	strb	r3, [r6, #0]
 800783c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800783e:	3701      	adds	r7, #1
 8007840:	601f      	str	r7, [r3, #0]
 8007842:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007844:	2b00      	cmp	r3, #0
 8007846:	f000 831d 	beq.w	8007e84 <_dtoa_r+0xb34>
 800784a:	601e      	str	r6, [r3, #0]
 800784c:	e31a      	b.n	8007e84 <_dtoa_r+0xb34>
 800784e:	07e2      	lsls	r2, r4, #31
 8007850:	d505      	bpl.n	800785e <_dtoa_r+0x50e>
 8007852:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007856:	f7f8 fecf 	bl	80005f8 <__aeabi_dmul>
 800785a:	3601      	adds	r6, #1
 800785c:	2301      	movs	r3, #1
 800785e:	1064      	asrs	r4, r4, #1
 8007860:	3508      	adds	r5, #8
 8007862:	e73f      	b.n	80076e4 <_dtoa_r+0x394>
 8007864:	2602      	movs	r6, #2
 8007866:	e742      	b.n	80076ee <_dtoa_r+0x39e>
 8007868:	9c07      	ldr	r4, [sp, #28]
 800786a:	9704      	str	r7, [sp, #16]
 800786c:	e761      	b.n	8007732 <_dtoa_r+0x3e2>
 800786e:	4b27      	ldr	r3, [pc, #156]	@ (800790c <_dtoa_r+0x5bc>)
 8007870:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007872:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007876:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800787a:	4454      	add	r4, sl
 800787c:	2900      	cmp	r1, #0
 800787e:	d053      	beq.n	8007928 <_dtoa_r+0x5d8>
 8007880:	4928      	ldr	r1, [pc, #160]	@ (8007924 <_dtoa_r+0x5d4>)
 8007882:	2000      	movs	r0, #0
 8007884:	f7f8 ffe2 	bl	800084c <__aeabi_ddiv>
 8007888:	4633      	mov	r3, r6
 800788a:	462a      	mov	r2, r5
 800788c:	f7f8 fcfc 	bl	8000288 <__aeabi_dsub>
 8007890:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007894:	4656      	mov	r6, sl
 8007896:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800789a:	f7f9 f95d 	bl	8000b58 <__aeabi_d2iz>
 800789e:	4605      	mov	r5, r0
 80078a0:	f7f8 fe40 	bl	8000524 <__aeabi_i2d>
 80078a4:	4602      	mov	r2, r0
 80078a6:	460b      	mov	r3, r1
 80078a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078ac:	f7f8 fcec 	bl	8000288 <__aeabi_dsub>
 80078b0:	3530      	adds	r5, #48	@ 0x30
 80078b2:	4602      	mov	r2, r0
 80078b4:	460b      	mov	r3, r1
 80078b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80078ba:	f806 5b01 	strb.w	r5, [r6], #1
 80078be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80078c2:	f7f9 f90b 	bl	8000adc <__aeabi_dcmplt>
 80078c6:	2800      	cmp	r0, #0
 80078c8:	d171      	bne.n	80079ae <_dtoa_r+0x65e>
 80078ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80078ce:	4911      	ldr	r1, [pc, #68]	@ (8007914 <_dtoa_r+0x5c4>)
 80078d0:	2000      	movs	r0, #0
 80078d2:	f7f8 fcd9 	bl	8000288 <__aeabi_dsub>
 80078d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80078da:	f7f9 f8ff 	bl	8000adc <__aeabi_dcmplt>
 80078de:	2800      	cmp	r0, #0
 80078e0:	f040 8095 	bne.w	8007a0e <_dtoa_r+0x6be>
 80078e4:	42a6      	cmp	r6, r4
 80078e6:	f43f af50 	beq.w	800778a <_dtoa_r+0x43a>
 80078ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80078ee:	4b0a      	ldr	r3, [pc, #40]	@ (8007918 <_dtoa_r+0x5c8>)
 80078f0:	2200      	movs	r2, #0
 80078f2:	f7f8 fe81 	bl	80005f8 <__aeabi_dmul>
 80078f6:	4b08      	ldr	r3, [pc, #32]	@ (8007918 <_dtoa_r+0x5c8>)
 80078f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80078fc:	2200      	movs	r2, #0
 80078fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007902:	f7f8 fe79 	bl	80005f8 <__aeabi_dmul>
 8007906:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800790a:	e7c4      	b.n	8007896 <_dtoa_r+0x546>
 800790c:	08009c48 	.word	0x08009c48
 8007910:	08009c20 	.word	0x08009c20
 8007914:	3ff00000 	.word	0x3ff00000
 8007918:	40240000 	.word	0x40240000
 800791c:	401c0000 	.word	0x401c0000
 8007920:	40140000 	.word	0x40140000
 8007924:	3fe00000 	.word	0x3fe00000
 8007928:	4631      	mov	r1, r6
 800792a:	4628      	mov	r0, r5
 800792c:	f7f8 fe64 	bl	80005f8 <__aeabi_dmul>
 8007930:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007934:	9415      	str	r4, [sp, #84]	@ 0x54
 8007936:	4656      	mov	r6, sl
 8007938:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800793c:	f7f9 f90c 	bl	8000b58 <__aeabi_d2iz>
 8007940:	4605      	mov	r5, r0
 8007942:	f7f8 fdef 	bl	8000524 <__aeabi_i2d>
 8007946:	4602      	mov	r2, r0
 8007948:	460b      	mov	r3, r1
 800794a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800794e:	f7f8 fc9b 	bl	8000288 <__aeabi_dsub>
 8007952:	3530      	adds	r5, #48	@ 0x30
 8007954:	f806 5b01 	strb.w	r5, [r6], #1
 8007958:	4602      	mov	r2, r0
 800795a:	460b      	mov	r3, r1
 800795c:	42a6      	cmp	r6, r4
 800795e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007962:	f04f 0200 	mov.w	r2, #0
 8007966:	d124      	bne.n	80079b2 <_dtoa_r+0x662>
 8007968:	4bac      	ldr	r3, [pc, #688]	@ (8007c1c <_dtoa_r+0x8cc>)
 800796a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800796e:	f7f8 fc8d 	bl	800028c <__adddf3>
 8007972:	4602      	mov	r2, r0
 8007974:	460b      	mov	r3, r1
 8007976:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800797a:	f7f9 f8cd 	bl	8000b18 <__aeabi_dcmpgt>
 800797e:	2800      	cmp	r0, #0
 8007980:	d145      	bne.n	8007a0e <_dtoa_r+0x6be>
 8007982:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007986:	49a5      	ldr	r1, [pc, #660]	@ (8007c1c <_dtoa_r+0x8cc>)
 8007988:	2000      	movs	r0, #0
 800798a:	f7f8 fc7d 	bl	8000288 <__aeabi_dsub>
 800798e:	4602      	mov	r2, r0
 8007990:	460b      	mov	r3, r1
 8007992:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007996:	f7f9 f8a1 	bl	8000adc <__aeabi_dcmplt>
 800799a:	2800      	cmp	r0, #0
 800799c:	f43f aef5 	beq.w	800778a <_dtoa_r+0x43a>
 80079a0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80079a2:	1e73      	subs	r3, r6, #1
 80079a4:	9315      	str	r3, [sp, #84]	@ 0x54
 80079a6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80079aa:	2b30      	cmp	r3, #48	@ 0x30
 80079ac:	d0f8      	beq.n	80079a0 <_dtoa_r+0x650>
 80079ae:	9f04      	ldr	r7, [sp, #16]
 80079b0:	e73e      	b.n	8007830 <_dtoa_r+0x4e0>
 80079b2:	4b9b      	ldr	r3, [pc, #620]	@ (8007c20 <_dtoa_r+0x8d0>)
 80079b4:	f7f8 fe20 	bl	80005f8 <__aeabi_dmul>
 80079b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80079bc:	e7bc      	b.n	8007938 <_dtoa_r+0x5e8>
 80079be:	d10c      	bne.n	80079da <_dtoa_r+0x68a>
 80079c0:	4b98      	ldr	r3, [pc, #608]	@ (8007c24 <_dtoa_r+0x8d4>)
 80079c2:	2200      	movs	r2, #0
 80079c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80079c8:	f7f8 fe16 	bl	80005f8 <__aeabi_dmul>
 80079cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80079d0:	f7f9 f898 	bl	8000b04 <__aeabi_dcmpge>
 80079d4:	2800      	cmp	r0, #0
 80079d6:	f000 8157 	beq.w	8007c88 <_dtoa_r+0x938>
 80079da:	2400      	movs	r4, #0
 80079dc:	4625      	mov	r5, r4
 80079de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80079e0:	43db      	mvns	r3, r3
 80079e2:	9304      	str	r3, [sp, #16]
 80079e4:	4656      	mov	r6, sl
 80079e6:	2700      	movs	r7, #0
 80079e8:	4621      	mov	r1, r4
 80079ea:	4658      	mov	r0, fp
 80079ec:	f000 fbb4 	bl	8008158 <_Bfree>
 80079f0:	2d00      	cmp	r5, #0
 80079f2:	d0dc      	beq.n	80079ae <_dtoa_r+0x65e>
 80079f4:	b12f      	cbz	r7, 8007a02 <_dtoa_r+0x6b2>
 80079f6:	42af      	cmp	r7, r5
 80079f8:	d003      	beq.n	8007a02 <_dtoa_r+0x6b2>
 80079fa:	4639      	mov	r1, r7
 80079fc:	4658      	mov	r0, fp
 80079fe:	f000 fbab 	bl	8008158 <_Bfree>
 8007a02:	4629      	mov	r1, r5
 8007a04:	4658      	mov	r0, fp
 8007a06:	f000 fba7 	bl	8008158 <_Bfree>
 8007a0a:	e7d0      	b.n	80079ae <_dtoa_r+0x65e>
 8007a0c:	9704      	str	r7, [sp, #16]
 8007a0e:	4633      	mov	r3, r6
 8007a10:	461e      	mov	r6, r3
 8007a12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a16:	2a39      	cmp	r2, #57	@ 0x39
 8007a18:	d107      	bne.n	8007a2a <_dtoa_r+0x6da>
 8007a1a:	459a      	cmp	sl, r3
 8007a1c:	d1f8      	bne.n	8007a10 <_dtoa_r+0x6c0>
 8007a1e:	9a04      	ldr	r2, [sp, #16]
 8007a20:	3201      	adds	r2, #1
 8007a22:	9204      	str	r2, [sp, #16]
 8007a24:	2230      	movs	r2, #48	@ 0x30
 8007a26:	f88a 2000 	strb.w	r2, [sl]
 8007a2a:	781a      	ldrb	r2, [r3, #0]
 8007a2c:	3201      	adds	r2, #1
 8007a2e:	701a      	strb	r2, [r3, #0]
 8007a30:	e7bd      	b.n	80079ae <_dtoa_r+0x65e>
 8007a32:	4b7b      	ldr	r3, [pc, #492]	@ (8007c20 <_dtoa_r+0x8d0>)
 8007a34:	2200      	movs	r2, #0
 8007a36:	f7f8 fddf 	bl	80005f8 <__aeabi_dmul>
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	4604      	mov	r4, r0
 8007a40:	460d      	mov	r5, r1
 8007a42:	f7f9 f841 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a46:	2800      	cmp	r0, #0
 8007a48:	f43f aebb 	beq.w	80077c2 <_dtoa_r+0x472>
 8007a4c:	e6f0      	b.n	8007830 <_dtoa_r+0x4e0>
 8007a4e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007a50:	2a00      	cmp	r2, #0
 8007a52:	f000 80db 	beq.w	8007c0c <_dtoa_r+0x8bc>
 8007a56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a58:	2a01      	cmp	r2, #1
 8007a5a:	f300 80bf 	bgt.w	8007bdc <_dtoa_r+0x88c>
 8007a5e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007a60:	2a00      	cmp	r2, #0
 8007a62:	f000 80b7 	beq.w	8007bd4 <_dtoa_r+0x884>
 8007a66:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007a6a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007a6c:	4646      	mov	r6, r8
 8007a6e:	9a08      	ldr	r2, [sp, #32]
 8007a70:	2101      	movs	r1, #1
 8007a72:	441a      	add	r2, r3
 8007a74:	4658      	mov	r0, fp
 8007a76:	4498      	add	r8, r3
 8007a78:	9208      	str	r2, [sp, #32]
 8007a7a:	f000 fc21 	bl	80082c0 <__i2b>
 8007a7e:	4605      	mov	r5, r0
 8007a80:	b15e      	cbz	r6, 8007a9a <_dtoa_r+0x74a>
 8007a82:	9b08      	ldr	r3, [sp, #32]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	dd08      	ble.n	8007a9a <_dtoa_r+0x74a>
 8007a88:	42b3      	cmp	r3, r6
 8007a8a:	9a08      	ldr	r2, [sp, #32]
 8007a8c:	bfa8      	it	ge
 8007a8e:	4633      	movge	r3, r6
 8007a90:	eba8 0803 	sub.w	r8, r8, r3
 8007a94:	1af6      	subs	r6, r6, r3
 8007a96:	1ad3      	subs	r3, r2, r3
 8007a98:	9308      	str	r3, [sp, #32]
 8007a9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a9c:	b1f3      	cbz	r3, 8007adc <_dtoa_r+0x78c>
 8007a9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	f000 80b7 	beq.w	8007c14 <_dtoa_r+0x8c4>
 8007aa6:	b18c      	cbz	r4, 8007acc <_dtoa_r+0x77c>
 8007aa8:	4629      	mov	r1, r5
 8007aaa:	4622      	mov	r2, r4
 8007aac:	4658      	mov	r0, fp
 8007aae:	f000 fcc7 	bl	8008440 <__pow5mult>
 8007ab2:	464a      	mov	r2, r9
 8007ab4:	4601      	mov	r1, r0
 8007ab6:	4605      	mov	r5, r0
 8007ab8:	4658      	mov	r0, fp
 8007aba:	f000 fc17 	bl	80082ec <__multiply>
 8007abe:	4649      	mov	r1, r9
 8007ac0:	9004      	str	r0, [sp, #16]
 8007ac2:	4658      	mov	r0, fp
 8007ac4:	f000 fb48 	bl	8008158 <_Bfree>
 8007ac8:	9b04      	ldr	r3, [sp, #16]
 8007aca:	4699      	mov	r9, r3
 8007acc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ace:	1b1a      	subs	r2, r3, r4
 8007ad0:	d004      	beq.n	8007adc <_dtoa_r+0x78c>
 8007ad2:	4649      	mov	r1, r9
 8007ad4:	4658      	mov	r0, fp
 8007ad6:	f000 fcb3 	bl	8008440 <__pow5mult>
 8007ada:	4681      	mov	r9, r0
 8007adc:	2101      	movs	r1, #1
 8007ade:	4658      	mov	r0, fp
 8007ae0:	f000 fbee 	bl	80082c0 <__i2b>
 8007ae4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ae6:	4604      	mov	r4, r0
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	f000 81cf 	beq.w	8007e8c <_dtoa_r+0xb3c>
 8007aee:	461a      	mov	r2, r3
 8007af0:	4601      	mov	r1, r0
 8007af2:	4658      	mov	r0, fp
 8007af4:	f000 fca4 	bl	8008440 <__pow5mult>
 8007af8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007afa:	2b01      	cmp	r3, #1
 8007afc:	4604      	mov	r4, r0
 8007afe:	f300 8095 	bgt.w	8007c2c <_dtoa_r+0x8dc>
 8007b02:	9b02      	ldr	r3, [sp, #8]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	f040 8087 	bne.w	8007c18 <_dtoa_r+0x8c8>
 8007b0a:	9b03      	ldr	r3, [sp, #12]
 8007b0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	f040 8089 	bne.w	8007c28 <_dtoa_r+0x8d8>
 8007b16:	9b03      	ldr	r3, [sp, #12]
 8007b18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007b1c:	0d1b      	lsrs	r3, r3, #20
 8007b1e:	051b      	lsls	r3, r3, #20
 8007b20:	b12b      	cbz	r3, 8007b2e <_dtoa_r+0x7de>
 8007b22:	9b08      	ldr	r3, [sp, #32]
 8007b24:	3301      	adds	r3, #1
 8007b26:	9308      	str	r3, [sp, #32]
 8007b28:	f108 0801 	add.w	r8, r8, #1
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	f000 81b0 	beq.w	8007e98 <_dtoa_r+0xb48>
 8007b38:	6923      	ldr	r3, [r4, #16]
 8007b3a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007b3e:	6918      	ldr	r0, [r3, #16]
 8007b40:	f000 fb72 	bl	8008228 <__hi0bits>
 8007b44:	f1c0 0020 	rsb	r0, r0, #32
 8007b48:	9b08      	ldr	r3, [sp, #32]
 8007b4a:	4418      	add	r0, r3
 8007b4c:	f010 001f 	ands.w	r0, r0, #31
 8007b50:	d077      	beq.n	8007c42 <_dtoa_r+0x8f2>
 8007b52:	f1c0 0320 	rsb	r3, r0, #32
 8007b56:	2b04      	cmp	r3, #4
 8007b58:	dd6b      	ble.n	8007c32 <_dtoa_r+0x8e2>
 8007b5a:	9b08      	ldr	r3, [sp, #32]
 8007b5c:	f1c0 001c 	rsb	r0, r0, #28
 8007b60:	4403      	add	r3, r0
 8007b62:	4480      	add	r8, r0
 8007b64:	4406      	add	r6, r0
 8007b66:	9308      	str	r3, [sp, #32]
 8007b68:	f1b8 0f00 	cmp.w	r8, #0
 8007b6c:	dd05      	ble.n	8007b7a <_dtoa_r+0x82a>
 8007b6e:	4649      	mov	r1, r9
 8007b70:	4642      	mov	r2, r8
 8007b72:	4658      	mov	r0, fp
 8007b74:	f000 fcbe 	bl	80084f4 <__lshift>
 8007b78:	4681      	mov	r9, r0
 8007b7a:	9b08      	ldr	r3, [sp, #32]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	dd05      	ble.n	8007b8c <_dtoa_r+0x83c>
 8007b80:	4621      	mov	r1, r4
 8007b82:	461a      	mov	r2, r3
 8007b84:	4658      	mov	r0, fp
 8007b86:	f000 fcb5 	bl	80084f4 <__lshift>
 8007b8a:	4604      	mov	r4, r0
 8007b8c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d059      	beq.n	8007c46 <_dtoa_r+0x8f6>
 8007b92:	4621      	mov	r1, r4
 8007b94:	4648      	mov	r0, r9
 8007b96:	f000 fd19 	bl	80085cc <__mcmp>
 8007b9a:	2800      	cmp	r0, #0
 8007b9c:	da53      	bge.n	8007c46 <_dtoa_r+0x8f6>
 8007b9e:	1e7b      	subs	r3, r7, #1
 8007ba0:	9304      	str	r3, [sp, #16]
 8007ba2:	4649      	mov	r1, r9
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	220a      	movs	r2, #10
 8007ba8:	4658      	mov	r0, fp
 8007baa:	f000 faf7 	bl	800819c <__multadd>
 8007bae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007bb0:	4681      	mov	r9, r0
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	f000 8172 	beq.w	8007e9c <_dtoa_r+0xb4c>
 8007bb8:	2300      	movs	r3, #0
 8007bba:	4629      	mov	r1, r5
 8007bbc:	220a      	movs	r2, #10
 8007bbe:	4658      	mov	r0, fp
 8007bc0:	f000 faec 	bl	800819c <__multadd>
 8007bc4:	9b00      	ldr	r3, [sp, #0]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	4605      	mov	r5, r0
 8007bca:	dc67      	bgt.n	8007c9c <_dtoa_r+0x94c>
 8007bcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bce:	2b02      	cmp	r3, #2
 8007bd0:	dc41      	bgt.n	8007c56 <_dtoa_r+0x906>
 8007bd2:	e063      	b.n	8007c9c <_dtoa_r+0x94c>
 8007bd4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007bd6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007bda:	e746      	b.n	8007a6a <_dtoa_r+0x71a>
 8007bdc:	9b07      	ldr	r3, [sp, #28]
 8007bde:	1e5c      	subs	r4, r3, #1
 8007be0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007be2:	42a3      	cmp	r3, r4
 8007be4:	bfbf      	itttt	lt
 8007be6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007be8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007bea:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007bec:	1ae3      	sublt	r3, r4, r3
 8007bee:	bfb4      	ite	lt
 8007bf0:	18d2      	addlt	r2, r2, r3
 8007bf2:	1b1c      	subge	r4, r3, r4
 8007bf4:	9b07      	ldr	r3, [sp, #28]
 8007bf6:	bfbc      	itt	lt
 8007bf8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007bfa:	2400      	movlt	r4, #0
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	bfb5      	itete	lt
 8007c00:	eba8 0603 	sublt.w	r6, r8, r3
 8007c04:	9b07      	ldrge	r3, [sp, #28]
 8007c06:	2300      	movlt	r3, #0
 8007c08:	4646      	movge	r6, r8
 8007c0a:	e730      	b.n	8007a6e <_dtoa_r+0x71e>
 8007c0c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007c0e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007c10:	4646      	mov	r6, r8
 8007c12:	e735      	b.n	8007a80 <_dtoa_r+0x730>
 8007c14:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007c16:	e75c      	b.n	8007ad2 <_dtoa_r+0x782>
 8007c18:	2300      	movs	r3, #0
 8007c1a:	e788      	b.n	8007b2e <_dtoa_r+0x7de>
 8007c1c:	3fe00000 	.word	0x3fe00000
 8007c20:	40240000 	.word	0x40240000
 8007c24:	40140000 	.word	0x40140000
 8007c28:	9b02      	ldr	r3, [sp, #8]
 8007c2a:	e780      	b.n	8007b2e <_dtoa_r+0x7de>
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c30:	e782      	b.n	8007b38 <_dtoa_r+0x7e8>
 8007c32:	d099      	beq.n	8007b68 <_dtoa_r+0x818>
 8007c34:	9a08      	ldr	r2, [sp, #32]
 8007c36:	331c      	adds	r3, #28
 8007c38:	441a      	add	r2, r3
 8007c3a:	4498      	add	r8, r3
 8007c3c:	441e      	add	r6, r3
 8007c3e:	9208      	str	r2, [sp, #32]
 8007c40:	e792      	b.n	8007b68 <_dtoa_r+0x818>
 8007c42:	4603      	mov	r3, r0
 8007c44:	e7f6      	b.n	8007c34 <_dtoa_r+0x8e4>
 8007c46:	9b07      	ldr	r3, [sp, #28]
 8007c48:	9704      	str	r7, [sp, #16]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	dc20      	bgt.n	8007c90 <_dtoa_r+0x940>
 8007c4e:	9300      	str	r3, [sp, #0]
 8007c50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c52:	2b02      	cmp	r3, #2
 8007c54:	dd1e      	ble.n	8007c94 <_dtoa_r+0x944>
 8007c56:	9b00      	ldr	r3, [sp, #0]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	f47f aec0 	bne.w	80079de <_dtoa_r+0x68e>
 8007c5e:	4621      	mov	r1, r4
 8007c60:	2205      	movs	r2, #5
 8007c62:	4658      	mov	r0, fp
 8007c64:	f000 fa9a 	bl	800819c <__multadd>
 8007c68:	4601      	mov	r1, r0
 8007c6a:	4604      	mov	r4, r0
 8007c6c:	4648      	mov	r0, r9
 8007c6e:	f000 fcad 	bl	80085cc <__mcmp>
 8007c72:	2800      	cmp	r0, #0
 8007c74:	f77f aeb3 	ble.w	80079de <_dtoa_r+0x68e>
 8007c78:	4656      	mov	r6, sl
 8007c7a:	2331      	movs	r3, #49	@ 0x31
 8007c7c:	f806 3b01 	strb.w	r3, [r6], #1
 8007c80:	9b04      	ldr	r3, [sp, #16]
 8007c82:	3301      	adds	r3, #1
 8007c84:	9304      	str	r3, [sp, #16]
 8007c86:	e6ae      	b.n	80079e6 <_dtoa_r+0x696>
 8007c88:	9c07      	ldr	r4, [sp, #28]
 8007c8a:	9704      	str	r7, [sp, #16]
 8007c8c:	4625      	mov	r5, r4
 8007c8e:	e7f3      	b.n	8007c78 <_dtoa_r+0x928>
 8007c90:	9b07      	ldr	r3, [sp, #28]
 8007c92:	9300      	str	r3, [sp, #0]
 8007c94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	f000 8104 	beq.w	8007ea4 <_dtoa_r+0xb54>
 8007c9c:	2e00      	cmp	r6, #0
 8007c9e:	dd05      	ble.n	8007cac <_dtoa_r+0x95c>
 8007ca0:	4629      	mov	r1, r5
 8007ca2:	4632      	mov	r2, r6
 8007ca4:	4658      	mov	r0, fp
 8007ca6:	f000 fc25 	bl	80084f4 <__lshift>
 8007caa:	4605      	mov	r5, r0
 8007cac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d05a      	beq.n	8007d68 <_dtoa_r+0xa18>
 8007cb2:	6869      	ldr	r1, [r5, #4]
 8007cb4:	4658      	mov	r0, fp
 8007cb6:	f000 fa0f 	bl	80080d8 <_Balloc>
 8007cba:	4606      	mov	r6, r0
 8007cbc:	b928      	cbnz	r0, 8007cca <_dtoa_r+0x97a>
 8007cbe:	4b84      	ldr	r3, [pc, #528]	@ (8007ed0 <_dtoa_r+0xb80>)
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007cc6:	f7ff bb5a 	b.w	800737e <_dtoa_r+0x2e>
 8007cca:	692a      	ldr	r2, [r5, #16]
 8007ccc:	3202      	adds	r2, #2
 8007cce:	0092      	lsls	r2, r2, #2
 8007cd0:	f105 010c 	add.w	r1, r5, #12
 8007cd4:	300c      	adds	r0, #12
 8007cd6:	f7ff faa2 	bl	800721e <memcpy>
 8007cda:	2201      	movs	r2, #1
 8007cdc:	4631      	mov	r1, r6
 8007cde:	4658      	mov	r0, fp
 8007ce0:	f000 fc08 	bl	80084f4 <__lshift>
 8007ce4:	f10a 0301 	add.w	r3, sl, #1
 8007ce8:	9307      	str	r3, [sp, #28]
 8007cea:	9b00      	ldr	r3, [sp, #0]
 8007cec:	4453      	add	r3, sl
 8007cee:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007cf0:	9b02      	ldr	r3, [sp, #8]
 8007cf2:	f003 0301 	and.w	r3, r3, #1
 8007cf6:	462f      	mov	r7, r5
 8007cf8:	930a      	str	r3, [sp, #40]	@ 0x28
 8007cfa:	4605      	mov	r5, r0
 8007cfc:	9b07      	ldr	r3, [sp, #28]
 8007cfe:	4621      	mov	r1, r4
 8007d00:	3b01      	subs	r3, #1
 8007d02:	4648      	mov	r0, r9
 8007d04:	9300      	str	r3, [sp, #0]
 8007d06:	f7ff fa98 	bl	800723a <quorem>
 8007d0a:	4639      	mov	r1, r7
 8007d0c:	9002      	str	r0, [sp, #8]
 8007d0e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007d12:	4648      	mov	r0, r9
 8007d14:	f000 fc5a 	bl	80085cc <__mcmp>
 8007d18:	462a      	mov	r2, r5
 8007d1a:	9008      	str	r0, [sp, #32]
 8007d1c:	4621      	mov	r1, r4
 8007d1e:	4658      	mov	r0, fp
 8007d20:	f000 fc70 	bl	8008604 <__mdiff>
 8007d24:	68c2      	ldr	r2, [r0, #12]
 8007d26:	4606      	mov	r6, r0
 8007d28:	bb02      	cbnz	r2, 8007d6c <_dtoa_r+0xa1c>
 8007d2a:	4601      	mov	r1, r0
 8007d2c:	4648      	mov	r0, r9
 8007d2e:	f000 fc4d 	bl	80085cc <__mcmp>
 8007d32:	4602      	mov	r2, r0
 8007d34:	4631      	mov	r1, r6
 8007d36:	4658      	mov	r0, fp
 8007d38:	920e      	str	r2, [sp, #56]	@ 0x38
 8007d3a:	f000 fa0d 	bl	8008158 <_Bfree>
 8007d3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d40:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007d42:	9e07      	ldr	r6, [sp, #28]
 8007d44:	ea43 0102 	orr.w	r1, r3, r2
 8007d48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d4a:	4319      	orrs	r1, r3
 8007d4c:	d110      	bne.n	8007d70 <_dtoa_r+0xa20>
 8007d4e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007d52:	d029      	beq.n	8007da8 <_dtoa_r+0xa58>
 8007d54:	9b08      	ldr	r3, [sp, #32]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	dd02      	ble.n	8007d60 <_dtoa_r+0xa10>
 8007d5a:	9b02      	ldr	r3, [sp, #8]
 8007d5c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007d60:	9b00      	ldr	r3, [sp, #0]
 8007d62:	f883 8000 	strb.w	r8, [r3]
 8007d66:	e63f      	b.n	80079e8 <_dtoa_r+0x698>
 8007d68:	4628      	mov	r0, r5
 8007d6a:	e7bb      	b.n	8007ce4 <_dtoa_r+0x994>
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	e7e1      	b.n	8007d34 <_dtoa_r+0x9e4>
 8007d70:	9b08      	ldr	r3, [sp, #32]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	db04      	blt.n	8007d80 <_dtoa_r+0xa30>
 8007d76:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007d78:	430b      	orrs	r3, r1
 8007d7a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007d7c:	430b      	orrs	r3, r1
 8007d7e:	d120      	bne.n	8007dc2 <_dtoa_r+0xa72>
 8007d80:	2a00      	cmp	r2, #0
 8007d82:	dded      	ble.n	8007d60 <_dtoa_r+0xa10>
 8007d84:	4649      	mov	r1, r9
 8007d86:	2201      	movs	r2, #1
 8007d88:	4658      	mov	r0, fp
 8007d8a:	f000 fbb3 	bl	80084f4 <__lshift>
 8007d8e:	4621      	mov	r1, r4
 8007d90:	4681      	mov	r9, r0
 8007d92:	f000 fc1b 	bl	80085cc <__mcmp>
 8007d96:	2800      	cmp	r0, #0
 8007d98:	dc03      	bgt.n	8007da2 <_dtoa_r+0xa52>
 8007d9a:	d1e1      	bne.n	8007d60 <_dtoa_r+0xa10>
 8007d9c:	f018 0f01 	tst.w	r8, #1
 8007da0:	d0de      	beq.n	8007d60 <_dtoa_r+0xa10>
 8007da2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007da6:	d1d8      	bne.n	8007d5a <_dtoa_r+0xa0a>
 8007da8:	9a00      	ldr	r2, [sp, #0]
 8007daa:	2339      	movs	r3, #57	@ 0x39
 8007dac:	7013      	strb	r3, [r2, #0]
 8007dae:	4633      	mov	r3, r6
 8007db0:	461e      	mov	r6, r3
 8007db2:	3b01      	subs	r3, #1
 8007db4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007db8:	2a39      	cmp	r2, #57	@ 0x39
 8007dba:	d052      	beq.n	8007e62 <_dtoa_r+0xb12>
 8007dbc:	3201      	adds	r2, #1
 8007dbe:	701a      	strb	r2, [r3, #0]
 8007dc0:	e612      	b.n	80079e8 <_dtoa_r+0x698>
 8007dc2:	2a00      	cmp	r2, #0
 8007dc4:	dd07      	ble.n	8007dd6 <_dtoa_r+0xa86>
 8007dc6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007dca:	d0ed      	beq.n	8007da8 <_dtoa_r+0xa58>
 8007dcc:	9a00      	ldr	r2, [sp, #0]
 8007dce:	f108 0301 	add.w	r3, r8, #1
 8007dd2:	7013      	strb	r3, [r2, #0]
 8007dd4:	e608      	b.n	80079e8 <_dtoa_r+0x698>
 8007dd6:	9b07      	ldr	r3, [sp, #28]
 8007dd8:	9a07      	ldr	r2, [sp, #28]
 8007dda:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007dde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d028      	beq.n	8007e36 <_dtoa_r+0xae6>
 8007de4:	4649      	mov	r1, r9
 8007de6:	2300      	movs	r3, #0
 8007de8:	220a      	movs	r2, #10
 8007dea:	4658      	mov	r0, fp
 8007dec:	f000 f9d6 	bl	800819c <__multadd>
 8007df0:	42af      	cmp	r7, r5
 8007df2:	4681      	mov	r9, r0
 8007df4:	f04f 0300 	mov.w	r3, #0
 8007df8:	f04f 020a 	mov.w	r2, #10
 8007dfc:	4639      	mov	r1, r7
 8007dfe:	4658      	mov	r0, fp
 8007e00:	d107      	bne.n	8007e12 <_dtoa_r+0xac2>
 8007e02:	f000 f9cb 	bl	800819c <__multadd>
 8007e06:	4607      	mov	r7, r0
 8007e08:	4605      	mov	r5, r0
 8007e0a:	9b07      	ldr	r3, [sp, #28]
 8007e0c:	3301      	adds	r3, #1
 8007e0e:	9307      	str	r3, [sp, #28]
 8007e10:	e774      	b.n	8007cfc <_dtoa_r+0x9ac>
 8007e12:	f000 f9c3 	bl	800819c <__multadd>
 8007e16:	4629      	mov	r1, r5
 8007e18:	4607      	mov	r7, r0
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	220a      	movs	r2, #10
 8007e1e:	4658      	mov	r0, fp
 8007e20:	f000 f9bc 	bl	800819c <__multadd>
 8007e24:	4605      	mov	r5, r0
 8007e26:	e7f0      	b.n	8007e0a <_dtoa_r+0xaba>
 8007e28:	9b00      	ldr	r3, [sp, #0]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	bfcc      	ite	gt
 8007e2e:	461e      	movgt	r6, r3
 8007e30:	2601      	movle	r6, #1
 8007e32:	4456      	add	r6, sl
 8007e34:	2700      	movs	r7, #0
 8007e36:	4649      	mov	r1, r9
 8007e38:	2201      	movs	r2, #1
 8007e3a:	4658      	mov	r0, fp
 8007e3c:	f000 fb5a 	bl	80084f4 <__lshift>
 8007e40:	4621      	mov	r1, r4
 8007e42:	4681      	mov	r9, r0
 8007e44:	f000 fbc2 	bl	80085cc <__mcmp>
 8007e48:	2800      	cmp	r0, #0
 8007e4a:	dcb0      	bgt.n	8007dae <_dtoa_r+0xa5e>
 8007e4c:	d102      	bne.n	8007e54 <_dtoa_r+0xb04>
 8007e4e:	f018 0f01 	tst.w	r8, #1
 8007e52:	d1ac      	bne.n	8007dae <_dtoa_r+0xa5e>
 8007e54:	4633      	mov	r3, r6
 8007e56:	461e      	mov	r6, r3
 8007e58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e5c:	2a30      	cmp	r2, #48	@ 0x30
 8007e5e:	d0fa      	beq.n	8007e56 <_dtoa_r+0xb06>
 8007e60:	e5c2      	b.n	80079e8 <_dtoa_r+0x698>
 8007e62:	459a      	cmp	sl, r3
 8007e64:	d1a4      	bne.n	8007db0 <_dtoa_r+0xa60>
 8007e66:	9b04      	ldr	r3, [sp, #16]
 8007e68:	3301      	adds	r3, #1
 8007e6a:	9304      	str	r3, [sp, #16]
 8007e6c:	2331      	movs	r3, #49	@ 0x31
 8007e6e:	f88a 3000 	strb.w	r3, [sl]
 8007e72:	e5b9      	b.n	80079e8 <_dtoa_r+0x698>
 8007e74:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007e76:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007ed4 <_dtoa_r+0xb84>
 8007e7a:	b11b      	cbz	r3, 8007e84 <_dtoa_r+0xb34>
 8007e7c:	f10a 0308 	add.w	r3, sl, #8
 8007e80:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007e82:	6013      	str	r3, [r2, #0]
 8007e84:	4650      	mov	r0, sl
 8007e86:	b019      	add	sp, #100	@ 0x64
 8007e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	f77f ae37 	ble.w	8007b02 <_dtoa_r+0x7b2>
 8007e94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e96:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e98:	2001      	movs	r0, #1
 8007e9a:	e655      	b.n	8007b48 <_dtoa_r+0x7f8>
 8007e9c:	9b00      	ldr	r3, [sp, #0]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	f77f aed6 	ble.w	8007c50 <_dtoa_r+0x900>
 8007ea4:	4656      	mov	r6, sl
 8007ea6:	4621      	mov	r1, r4
 8007ea8:	4648      	mov	r0, r9
 8007eaa:	f7ff f9c6 	bl	800723a <quorem>
 8007eae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007eb2:	f806 8b01 	strb.w	r8, [r6], #1
 8007eb6:	9b00      	ldr	r3, [sp, #0]
 8007eb8:	eba6 020a 	sub.w	r2, r6, sl
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	ddb3      	ble.n	8007e28 <_dtoa_r+0xad8>
 8007ec0:	4649      	mov	r1, r9
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	220a      	movs	r2, #10
 8007ec6:	4658      	mov	r0, fp
 8007ec8:	f000 f968 	bl	800819c <__multadd>
 8007ecc:	4681      	mov	r9, r0
 8007ece:	e7ea      	b.n	8007ea6 <_dtoa_r+0xb56>
 8007ed0:	08009ba8 	.word	0x08009ba8
 8007ed4:	08009b2c 	.word	0x08009b2c

08007ed8 <_free_r>:
 8007ed8:	b538      	push	{r3, r4, r5, lr}
 8007eda:	4605      	mov	r5, r0
 8007edc:	2900      	cmp	r1, #0
 8007ede:	d041      	beq.n	8007f64 <_free_r+0x8c>
 8007ee0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ee4:	1f0c      	subs	r4, r1, #4
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	bfb8      	it	lt
 8007eea:	18e4      	addlt	r4, r4, r3
 8007eec:	f000 f8e8 	bl	80080c0 <__malloc_lock>
 8007ef0:	4a1d      	ldr	r2, [pc, #116]	@ (8007f68 <_free_r+0x90>)
 8007ef2:	6813      	ldr	r3, [r2, #0]
 8007ef4:	b933      	cbnz	r3, 8007f04 <_free_r+0x2c>
 8007ef6:	6063      	str	r3, [r4, #4]
 8007ef8:	6014      	str	r4, [r2, #0]
 8007efa:	4628      	mov	r0, r5
 8007efc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f00:	f000 b8e4 	b.w	80080cc <__malloc_unlock>
 8007f04:	42a3      	cmp	r3, r4
 8007f06:	d908      	bls.n	8007f1a <_free_r+0x42>
 8007f08:	6820      	ldr	r0, [r4, #0]
 8007f0a:	1821      	adds	r1, r4, r0
 8007f0c:	428b      	cmp	r3, r1
 8007f0e:	bf01      	itttt	eq
 8007f10:	6819      	ldreq	r1, [r3, #0]
 8007f12:	685b      	ldreq	r3, [r3, #4]
 8007f14:	1809      	addeq	r1, r1, r0
 8007f16:	6021      	streq	r1, [r4, #0]
 8007f18:	e7ed      	b.n	8007ef6 <_free_r+0x1e>
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	b10b      	cbz	r3, 8007f24 <_free_r+0x4c>
 8007f20:	42a3      	cmp	r3, r4
 8007f22:	d9fa      	bls.n	8007f1a <_free_r+0x42>
 8007f24:	6811      	ldr	r1, [r2, #0]
 8007f26:	1850      	adds	r0, r2, r1
 8007f28:	42a0      	cmp	r0, r4
 8007f2a:	d10b      	bne.n	8007f44 <_free_r+0x6c>
 8007f2c:	6820      	ldr	r0, [r4, #0]
 8007f2e:	4401      	add	r1, r0
 8007f30:	1850      	adds	r0, r2, r1
 8007f32:	4283      	cmp	r3, r0
 8007f34:	6011      	str	r1, [r2, #0]
 8007f36:	d1e0      	bne.n	8007efa <_free_r+0x22>
 8007f38:	6818      	ldr	r0, [r3, #0]
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	6053      	str	r3, [r2, #4]
 8007f3e:	4408      	add	r0, r1
 8007f40:	6010      	str	r0, [r2, #0]
 8007f42:	e7da      	b.n	8007efa <_free_r+0x22>
 8007f44:	d902      	bls.n	8007f4c <_free_r+0x74>
 8007f46:	230c      	movs	r3, #12
 8007f48:	602b      	str	r3, [r5, #0]
 8007f4a:	e7d6      	b.n	8007efa <_free_r+0x22>
 8007f4c:	6820      	ldr	r0, [r4, #0]
 8007f4e:	1821      	adds	r1, r4, r0
 8007f50:	428b      	cmp	r3, r1
 8007f52:	bf04      	itt	eq
 8007f54:	6819      	ldreq	r1, [r3, #0]
 8007f56:	685b      	ldreq	r3, [r3, #4]
 8007f58:	6063      	str	r3, [r4, #4]
 8007f5a:	bf04      	itt	eq
 8007f5c:	1809      	addeq	r1, r1, r0
 8007f5e:	6021      	streq	r1, [r4, #0]
 8007f60:	6054      	str	r4, [r2, #4]
 8007f62:	e7ca      	b.n	8007efa <_free_r+0x22>
 8007f64:	bd38      	pop	{r3, r4, r5, pc}
 8007f66:	bf00      	nop
 8007f68:	200045a8 	.word	0x200045a8

08007f6c <malloc>:
 8007f6c:	4b02      	ldr	r3, [pc, #8]	@ (8007f78 <malloc+0xc>)
 8007f6e:	4601      	mov	r1, r0
 8007f70:	6818      	ldr	r0, [r3, #0]
 8007f72:	f000 b825 	b.w	8007fc0 <_malloc_r>
 8007f76:	bf00      	nop
 8007f78:	20000024 	.word	0x20000024

08007f7c <sbrk_aligned>:
 8007f7c:	b570      	push	{r4, r5, r6, lr}
 8007f7e:	4e0f      	ldr	r6, [pc, #60]	@ (8007fbc <sbrk_aligned+0x40>)
 8007f80:	460c      	mov	r4, r1
 8007f82:	6831      	ldr	r1, [r6, #0]
 8007f84:	4605      	mov	r5, r0
 8007f86:	b911      	cbnz	r1, 8007f8e <sbrk_aligned+0x12>
 8007f88:	f001 f81c 	bl	8008fc4 <_sbrk_r>
 8007f8c:	6030      	str	r0, [r6, #0]
 8007f8e:	4621      	mov	r1, r4
 8007f90:	4628      	mov	r0, r5
 8007f92:	f001 f817 	bl	8008fc4 <_sbrk_r>
 8007f96:	1c43      	adds	r3, r0, #1
 8007f98:	d103      	bne.n	8007fa2 <sbrk_aligned+0x26>
 8007f9a:	f04f 34ff 	mov.w	r4, #4294967295
 8007f9e:	4620      	mov	r0, r4
 8007fa0:	bd70      	pop	{r4, r5, r6, pc}
 8007fa2:	1cc4      	adds	r4, r0, #3
 8007fa4:	f024 0403 	bic.w	r4, r4, #3
 8007fa8:	42a0      	cmp	r0, r4
 8007faa:	d0f8      	beq.n	8007f9e <sbrk_aligned+0x22>
 8007fac:	1a21      	subs	r1, r4, r0
 8007fae:	4628      	mov	r0, r5
 8007fb0:	f001 f808 	bl	8008fc4 <_sbrk_r>
 8007fb4:	3001      	adds	r0, #1
 8007fb6:	d1f2      	bne.n	8007f9e <sbrk_aligned+0x22>
 8007fb8:	e7ef      	b.n	8007f9a <sbrk_aligned+0x1e>
 8007fba:	bf00      	nop
 8007fbc:	200045a4 	.word	0x200045a4

08007fc0 <_malloc_r>:
 8007fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fc4:	1ccd      	adds	r5, r1, #3
 8007fc6:	f025 0503 	bic.w	r5, r5, #3
 8007fca:	3508      	adds	r5, #8
 8007fcc:	2d0c      	cmp	r5, #12
 8007fce:	bf38      	it	cc
 8007fd0:	250c      	movcc	r5, #12
 8007fd2:	2d00      	cmp	r5, #0
 8007fd4:	4606      	mov	r6, r0
 8007fd6:	db01      	blt.n	8007fdc <_malloc_r+0x1c>
 8007fd8:	42a9      	cmp	r1, r5
 8007fda:	d904      	bls.n	8007fe6 <_malloc_r+0x26>
 8007fdc:	230c      	movs	r3, #12
 8007fde:	6033      	str	r3, [r6, #0]
 8007fe0:	2000      	movs	r0, #0
 8007fe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fe6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80080bc <_malloc_r+0xfc>
 8007fea:	f000 f869 	bl	80080c0 <__malloc_lock>
 8007fee:	f8d8 3000 	ldr.w	r3, [r8]
 8007ff2:	461c      	mov	r4, r3
 8007ff4:	bb44      	cbnz	r4, 8008048 <_malloc_r+0x88>
 8007ff6:	4629      	mov	r1, r5
 8007ff8:	4630      	mov	r0, r6
 8007ffa:	f7ff ffbf 	bl	8007f7c <sbrk_aligned>
 8007ffe:	1c43      	adds	r3, r0, #1
 8008000:	4604      	mov	r4, r0
 8008002:	d158      	bne.n	80080b6 <_malloc_r+0xf6>
 8008004:	f8d8 4000 	ldr.w	r4, [r8]
 8008008:	4627      	mov	r7, r4
 800800a:	2f00      	cmp	r7, #0
 800800c:	d143      	bne.n	8008096 <_malloc_r+0xd6>
 800800e:	2c00      	cmp	r4, #0
 8008010:	d04b      	beq.n	80080aa <_malloc_r+0xea>
 8008012:	6823      	ldr	r3, [r4, #0]
 8008014:	4639      	mov	r1, r7
 8008016:	4630      	mov	r0, r6
 8008018:	eb04 0903 	add.w	r9, r4, r3
 800801c:	f000 ffd2 	bl	8008fc4 <_sbrk_r>
 8008020:	4581      	cmp	r9, r0
 8008022:	d142      	bne.n	80080aa <_malloc_r+0xea>
 8008024:	6821      	ldr	r1, [r4, #0]
 8008026:	1a6d      	subs	r5, r5, r1
 8008028:	4629      	mov	r1, r5
 800802a:	4630      	mov	r0, r6
 800802c:	f7ff ffa6 	bl	8007f7c <sbrk_aligned>
 8008030:	3001      	adds	r0, #1
 8008032:	d03a      	beq.n	80080aa <_malloc_r+0xea>
 8008034:	6823      	ldr	r3, [r4, #0]
 8008036:	442b      	add	r3, r5
 8008038:	6023      	str	r3, [r4, #0]
 800803a:	f8d8 3000 	ldr.w	r3, [r8]
 800803e:	685a      	ldr	r2, [r3, #4]
 8008040:	bb62      	cbnz	r2, 800809c <_malloc_r+0xdc>
 8008042:	f8c8 7000 	str.w	r7, [r8]
 8008046:	e00f      	b.n	8008068 <_malloc_r+0xa8>
 8008048:	6822      	ldr	r2, [r4, #0]
 800804a:	1b52      	subs	r2, r2, r5
 800804c:	d420      	bmi.n	8008090 <_malloc_r+0xd0>
 800804e:	2a0b      	cmp	r2, #11
 8008050:	d917      	bls.n	8008082 <_malloc_r+0xc2>
 8008052:	1961      	adds	r1, r4, r5
 8008054:	42a3      	cmp	r3, r4
 8008056:	6025      	str	r5, [r4, #0]
 8008058:	bf18      	it	ne
 800805a:	6059      	strne	r1, [r3, #4]
 800805c:	6863      	ldr	r3, [r4, #4]
 800805e:	bf08      	it	eq
 8008060:	f8c8 1000 	streq.w	r1, [r8]
 8008064:	5162      	str	r2, [r4, r5]
 8008066:	604b      	str	r3, [r1, #4]
 8008068:	4630      	mov	r0, r6
 800806a:	f000 f82f 	bl	80080cc <__malloc_unlock>
 800806e:	f104 000b 	add.w	r0, r4, #11
 8008072:	1d23      	adds	r3, r4, #4
 8008074:	f020 0007 	bic.w	r0, r0, #7
 8008078:	1ac2      	subs	r2, r0, r3
 800807a:	bf1c      	itt	ne
 800807c:	1a1b      	subne	r3, r3, r0
 800807e:	50a3      	strne	r3, [r4, r2]
 8008080:	e7af      	b.n	8007fe2 <_malloc_r+0x22>
 8008082:	6862      	ldr	r2, [r4, #4]
 8008084:	42a3      	cmp	r3, r4
 8008086:	bf0c      	ite	eq
 8008088:	f8c8 2000 	streq.w	r2, [r8]
 800808c:	605a      	strne	r2, [r3, #4]
 800808e:	e7eb      	b.n	8008068 <_malloc_r+0xa8>
 8008090:	4623      	mov	r3, r4
 8008092:	6864      	ldr	r4, [r4, #4]
 8008094:	e7ae      	b.n	8007ff4 <_malloc_r+0x34>
 8008096:	463c      	mov	r4, r7
 8008098:	687f      	ldr	r7, [r7, #4]
 800809a:	e7b6      	b.n	800800a <_malloc_r+0x4a>
 800809c:	461a      	mov	r2, r3
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	42a3      	cmp	r3, r4
 80080a2:	d1fb      	bne.n	800809c <_malloc_r+0xdc>
 80080a4:	2300      	movs	r3, #0
 80080a6:	6053      	str	r3, [r2, #4]
 80080a8:	e7de      	b.n	8008068 <_malloc_r+0xa8>
 80080aa:	230c      	movs	r3, #12
 80080ac:	6033      	str	r3, [r6, #0]
 80080ae:	4630      	mov	r0, r6
 80080b0:	f000 f80c 	bl	80080cc <__malloc_unlock>
 80080b4:	e794      	b.n	8007fe0 <_malloc_r+0x20>
 80080b6:	6005      	str	r5, [r0, #0]
 80080b8:	e7d6      	b.n	8008068 <_malloc_r+0xa8>
 80080ba:	bf00      	nop
 80080bc:	200045a8 	.word	0x200045a8

080080c0 <__malloc_lock>:
 80080c0:	4801      	ldr	r0, [pc, #4]	@ (80080c8 <__malloc_lock+0x8>)
 80080c2:	f7ff b8aa 	b.w	800721a <__retarget_lock_acquire_recursive>
 80080c6:	bf00      	nop
 80080c8:	200045a0 	.word	0x200045a0

080080cc <__malloc_unlock>:
 80080cc:	4801      	ldr	r0, [pc, #4]	@ (80080d4 <__malloc_unlock+0x8>)
 80080ce:	f7ff b8a5 	b.w	800721c <__retarget_lock_release_recursive>
 80080d2:	bf00      	nop
 80080d4:	200045a0 	.word	0x200045a0

080080d8 <_Balloc>:
 80080d8:	b570      	push	{r4, r5, r6, lr}
 80080da:	69c6      	ldr	r6, [r0, #28]
 80080dc:	4604      	mov	r4, r0
 80080de:	460d      	mov	r5, r1
 80080e0:	b976      	cbnz	r6, 8008100 <_Balloc+0x28>
 80080e2:	2010      	movs	r0, #16
 80080e4:	f7ff ff42 	bl	8007f6c <malloc>
 80080e8:	4602      	mov	r2, r0
 80080ea:	61e0      	str	r0, [r4, #28]
 80080ec:	b920      	cbnz	r0, 80080f8 <_Balloc+0x20>
 80080ee:	4b18      	ldr	r3, [pc, #96]	@ (8008150 <_Balloc+0x78>)
 80080f0:	4818      	ldr	r0, [pc, #96]	@ (8008154 <_Balloc+0x7c>)
 80080f2:	216b      	movs	r1, #107	@ 0x6b
 80080f4:	f000 ff76 	bl	8008fe4 <__assert_func>
 80080f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80080fc:	6006      	str	r6, [r0, #0]
 80080fe:	60c6      	str	r6, [r0, #12]
 8008100:	69e6      	ldr	r6, [r4, #28]
 8008102:	68f3      	ldr	r3, [r6, #12]
 8008104:	b183      	cbz	r3, 8008128 <_Balloc+0x50>
 8008106:	69e3      	ldr	r3, [r4, #28]
 8008108:	68db      	ldr	r3, [r3, #12]
 800810a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800810e:	b9b8      	cbnz	r0, 8008140 <_Balloc+0x68>
 8008110:	2101      	movs	r1, #1
 8008112:	fa01 f605 	lsl.w	r6, r1, r5
 8008116:	1d72      	adds	r2, r6, #5
 8008118:	0092      	lsls	r2, r2, #2
 800811a:	4620      	mov	r0, r4
 800811c:	f000 ff80 	bl	8009020 <_calloc_r>
 8008120:	b160      	cbz	r0, 800813c <_Balloc+0x64>
 8008122:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008126:	e00e      	b.n	8008146 <_Balloc+0x6e>
 8008128:	2221      	movs	r2, #33	@ 0x21
 800812a:	2104      	movs	r1, #4
 800812c:	4620      	mov	r0, r4
 800812e:	f000 ff77 	bl	8009020 <_calloc_r>
 8008132:	69e3      	ldr	r3, [r4, #28]
 8008134:	60f0      	str	r0, [r6, #12]
 8008136:	68db      	ldr	r3, [r3, #12]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d1e4      	bne.n	8008106 <_Balloc+0x2e>
 800813c:	2000      	movs	r0, #0
 800813e:	bd70      	pop	{r4, r5, r6, pc}
 8008140:	6802      	ldr	r2, [r0, #0]
 8008142:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008146:	2300      	movs	r3, #0
 8008148:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800814c:	e7f7      	b.n	800813e <_Balloc+0x66>
 800814e:	bf00      	nop
 8008150:	08009b39 	.word	0x08009b39
 8008154:	08009bb9 	.word	0x08009bb9

08008158 <_Bfree>:
 8008158:	b570      	push	{r4, r5, r6, lr}
 800815a:	69c6      	ldr	r6, [r0, #28]
 800815c:	4605      	mov	r5, r0
 800815e:	460c      	mov	r4, r1
 8008160:	b976      	cbnz	r6, 8008180 <_Bfree+0x28>
 8008162:	2010      	movs	r0, #16
 8008164:	f7ff ff02 	bl	8007f6c <malloc>
 8008168:	4602      	mov	r2, r0
 800816a:	61e8      	str	r0, [r5, #28]
 800816c:	b920      	cbnz	r0, 8008178 <_Bfree+0x20>
 800816e:	4b09      	ldr	r3, [pc, #36]	@ (8008194 <_Bfree+0x3c>)
 8008170:	4809      	ldr	r0, [pc, #36]	@ (8008198 <_Bfree+0x40>)
 8008172:	218f      	movs	r1, #143	@ 0x8f
 8008174:	f000 ff36 	bl	8008fe4 <__assert_func>
 8008178:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800817c:	6006      	str	r6, [r0, #0]
 800817e:	60c6      	str	r6, [r0, #12]
 8008180:	b13c      	cbz	r4, 8008192 <_Bfree+0x3a>
 8008182:	69eb      	ldr	r3, [r5, #28]
 8008184:	6862      	ldr	r2, [r4, #4]
 8008186:	68db      	ldr	r3, [r3, #12]
 8008188:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800818c:	6021      	str	r1, [r4, #0]
 800818e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008192:	bd70      	pop	{r4, r5, r6, pc}
 8008194:	08009b39 	.word	0x08009b39
 8008198:	08009bb9 	.word	0x08009bb9

0800819c <__multadd>:
 800819c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081a0:	690d      	ldr	r5, [r1, #16]
 80081a2:	4607      	mov	r7, r0
 80081a4:	460c      	mov	r4, r1
 80081a6:	461e      	mov	r6, r3
 80081a8:	f101 0c14 	add.w	ip, r1, #20
 80081ac:	2000      	movs	r0, #0
 80081ae:	f8dc 3000 	ldr.w	r3, [ip]
 80081b2:	b299      	uxth	r1, r3
 80081b4:	fb02 6101 	mla	r1, r2, r1, r6
 80081b8:	0c1e      	lsrs	r6, r3, #16
 80081ba:	0c0b      	lsrs	r3, r1, #16
 80081bc:	fb02 3306 	mla	r3, r2, r6, r3
 80081c0:	b289      	uxth	r1, r1
 80081c2:	3001      	adds	r0, #1
 80081c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80081c8:	4285      	cmp	r5, r0
 80081ca:	f84c 1b04 	str.w	r1, [ip], #4
 80081ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80081d2:	dcec      	bgt.n	80081ae <__multadd+0x12>
 80081d4:	b30e      	cbz	r6, 800821a <__multadd+0x7e>
 80081d6:	68a3      	ldr	r3, [r4, #8]
 80081d8:	42ab      	cmp	r3, r5
 80081da:	dc19      	bgt.n	8008210 <__multadd+0x74>
 80081dc:	6861      	ldr	r1, [r4, #4]
 80081de:	4638      	mov	r0, r7
 80081e0:	3101      	adds	r1, #1
 80081e2:	f7ff ff79 	bl	80080d8 <_Balloc>
 80081e6:	4680      	mov	r8, r0
 80081e8:	b928      	cbnz	r0, 80081f6 <__multadd+0x5a>
 80081ea:	4602      	mov	r2, r0
 80081ec:	4b0c      	ldr	r3, [pc, #48]	@ (8008220 <__multadd+0x84>)
 80081ee:	480d      	ldr	r0, [pc, #52]	@ (8008224 <__multadd+0x88>)
 80081f0:	21ba      	movs	r1, #186	@ 0xba
 80081f2:	f000 fef7 	bl	8008fe4 <__assert_func>
 80081f6:	6922      	ldr	r2, [r4, #16]
 80081f8:	3202      	adds	r2, #2
 80081fa:	f104 010c 	add.w	r1, r4, #12
 80081fe:	0092      	lsls	r2, r2, #2
 8008200:	300c      	adds	r0, #12
 8008202:	f7ff f80c 	bl	800721e <memcpy>
 8008206:	4621      	mov	r1, r4
 8008208:	4638      	mov	r0, r7
 800820a:	f7ff ffa5 	bl	8008158 <_Bfree>
 800820e:	4644      	mov	r4, r8
 8008210:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008214:	3501      	adds	r5, #1
 8008216:	615e      	str	r6, [r3, #20]
 8008218:	6125      	str	r5, [r4, #16]
 800821a:	4620      	mov	r0, r4
 800821c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008220:	08009ba8 	.word	0x08009ba8
 8008224:	08009bb9 	.word	0x08009bb9

08008228 <__hi0bits>:
 8008228:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800822c:	4603      	mov	r3, r0
 800822e:	bf36      	itet	cc
 8008230:	0403      	lslcc	r3, r0, #16
 8008232:	2000      	movcs	r0, #0
 8008234:	2010      	movcc	r0, #16
 8008236:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800823a:	bf3c      	itt	cc
 800823c:	021b      	lslcc	r3, r3, #8
 800823e:	3008      	addcc	r0, #8
 8008240:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008244:	bf3c      	itt	cc
 8008246:	011b      	lslcc	r3, r3, #4
 8008248:	3004      	addcc	r0, #4
 800824a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800824e:	bf3c      	itt	cc
 8008250:	009b      	lslcc	r3, r3, #2
 8008252:	3002      	addcc	r0, #2
 8008254:	2b00      	cmp	r3, #0
 8008256:	db05      	blt.n	8008264 <__hi0bits+0x3c>
 8008258:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800825c:	f100 0001 	add.w	r0, r0, #1
 8008260:	bf08      	it	eq
 8008262:	2020      	moveq	r0, #32
 8008264:	4770      	bx	lr

08008266 <__lo0bits>:
 8008266:	6803      	ldr	r3, [r0, #0]
 8008268:	4602      	mov	r2, r0
 800826a:	f013 0007 	ands.w	r0, r3, #7
 800826e:	d00b      	beq.n	8008288 <__lo0bits+0x22>
 8008270:	07d9      	lsls	r1, r3, #31
 8008272:	d421      	bmi.n	80082b8 <__lo0bits+0x52>
 8008274:	0798      	lsls	r0, r3, #30
 8008276:	bf49      	itett	mi
 8008278:	085b      	lsrmi	r3, r3, #1
 800827a:	089b      	lsrpl	r3, r3, #2
 800827c:	2001      	movmi	r0, #1
 800827e:	6013      	strmi	r3, [r2, #0]
 8008280:	bf5c      	itt	pl
 8008282:	6013      	strpl	r3, [r2, #0]
 8008284:	2002      	movpl	r0, #2
 8008286:	4770      	bx	lr
 8008288:	b299      	uxth	r1, r3
 800828a:	b909      	cbnz	r1, 8008290 <__lo0bits+0x2a>
 800828c:	0c1b      	lsrs	r3, r3, #16
 800828e:	2010      	movs	r0, #16
 8008290:	b2d9      	uxtb	r1, r3
 8008292:	b909      	cbnz	r1, 8008298 <__lo0bits+0x32>
 8008294:	3008      	adds	r0, #8
 8008296:	0a1b      	lsrs	r3, r3, #8
 8008298:	0719      	lsls	r1, r3, #28
 800829a:	bf04      	itt	eq
 800829c:	091b      	lsreq	r3, r3, #4
 800829e:	3004      	addeq	r0, #4
 80082a0:	0799      	lsls	r1, r3, #30
 80082a2:	bf04      	itt	eq
 80082a4:	089b      	lsreq	r3, r3, #2
 80082a6:	3002      	addeq	r0, #2
 80082a8:	07d9      	lsls	r1, r3, #31
 80082aa:	d403      	bmi.n	80082b4 <__lo0bits+0x4e>
 80082ac:	085b      	lsrs	r3, r3, #1
 80082ae:	f100 0001 	add.w	r0, r0, #1
 80082b2:	d003      	beq.n	80082bc <__lo0bits+0x56>
 80082b4:	6013      	str	r3, [r2, #0]
 80082b6:	4770      	bx	lr
 80082b8:	2000      	movs	r0, #0
 80082ba:	4770      	bx	lr
 80082bc:	2020      	movs	r0, #32
 80082be:	4770      	bx	lr

080082c0 <__i2b>:
 80082c0:	b510      	push	{r4, lr}
 80082c2:	460c      	mov	r4, r1
 80082c4:	2101      	movs	r1, #1
 80082c6:	f7ff ff07 	bl	80080d8 <_Balloc>
 80082ca:	4602      	mov	r2, r0
 80082cc:	b928      	cbnz	r0, 80082da <__i2b+0x1a>
 80082ce:	4b05      	ldr	r3, [pc, #20]	@ (80082e4 <__i2b+0x24>)
 80082d0:	4805      	ldr	r0, [pc, #20]	@ (80082e8 <__i2b+0x28>)
 80082d2:	f240 1145 	movw	r1, #325	@ 0x145
 80082d6:	f000 fe85 	bl	8008fe4 <__assert_func>
 80082da:	2301      	movs	r3, #1
 80082dc:	6144      	str	r4, [r0, #20]
 80082de:	6103      	str	r3, [r0, #16]
 80082e0:	bd10      	pop	{r4, pc}
 80082e2:	bf00      	nop
 80082e4:	08009ba8 	.word	0x08009ba8
 80082e8:	08009bb9 	.word	0x08009bb9

080082ec <__multiply>:
 80082ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082f0:	4614      	mov	r4, r2
 80082f2:	690a      	ldr	r2, [r1, #16]
 80082f4:	6923      	ldr	r3, [r4, #16]
 80082f6:	429a      	cmp	r2, r3
 80082f8:	bfa8      	it	ge
 80082fa:	4623      	movge	r3, r4
 80082fc:	460f      	mov	r7, r1
 80082fe:	bfa4      	itt	ge
 8008300:	460c      	movge	r4, r1
 8008302:	461f      	movge	r7, r3
 8008304:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008308:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800830c:	68a3      	ldr	r3, [r4, #8]
 800830e:	6861      	ldr	r1, [r4, #4]
 8008310:	eb0a 0609 	add.w	r6, sl, r9
 8008314:	42b3      	cmp	r3, r6
 8008316:	b085      	sub	sp, #20
 8008318:	bfb8      	it	lt
 800831a:	3101      	addlt	r1, #1
 800831c:	f7ff fedc 	bl	80080d8 <_Balloc>
 8008320:	b930      	cbnz	r0, 8008330 <__multiply+0x44>
 8008322:	4602      	mov	r2, r0
 8008324:	4b44      	ldr	r3, [pc, #272]	@ (8008438 <__multiply+0x14c>)
 8008326:	4845      	ldr	r0, [pc, #276]	@ (800843c <__multiply+0x150>)
 8008328:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800832c:	f000 fe5a 	bl	8008fe4 <__assert_func>
 8008330:	f100 0514 	add.w	r5, r0, #20
 8008334:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008338:	462b      	mov	r3, r5
 800833a:	2200      	movs	r2, #0
 800833c:	4543      	cmp	r3, r8
 800833e:	d321      	bcc.n	8008384 <__multiply+0x98>
 8008340:	f107 0114 	add.w	r1, r7, #20
 8008344:	f104 0214 	add.w	r2, r4, #20
 8008348:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800834c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008350:	9302      	str	r3, [sp, #8]
 8008352:	1b13      	subs	r3, r2, r4
 8008354:	3b15      	subs	r3, #21
 8008356:	f023 0303 	bic.w	r3, r3, #3
 800835a:	3304      	adds	r3, #4
 800835c:	f104 0715 	add.w	r7, r4, #21
 8008360:	42ba      	cmp	r2, r7
 8008362:	bf38      	it	cc
 8008364:	2304      	movcc	r3, #4
 8008366:	9301      	str	r3, [sp, #4]
 8008368:	9b02      	ldr	r3, [sp, #8]
 800836a:	9103      	str	r1, [sp, #12]
 800836c:	428b      	cmp	r3, r1
 800836e:	d80c      	bhi.n	800838a <__multiply+0x9e>
 8008370:	2e00      	cmp	r6, #0
 8008372:	dd03      	ble.n	800837c <__multiply+0x90>
 8008374:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008378:	2b00      	cmp	r3, #0
 800837a:	d05b      	beq.n	8008434 <__multiply+0x148>
 800837c:	6106      	str	r6, [r0, #16]
 800837e:	b005      	add	sp, #20
 8008380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008384:	f843 2b04 	str.w	r2, [r3], #4
 8008388:	e7d8      	b.n	800833c <__multiply+0x50>
 800838a:	f8b1 a000 	ldrh.w	sl, [r1]
 800838e:	f1ba 0f00 	cmp.w	sl, #0
 8008392:	d024      	beq.n	80083de <__multiply+0xf2>
 8008394:	f104 0e14 	add.w	lr, r4, #20
 8008398:	46a9      	mov	r9, r5
 800839a:	f04f 0c00 	mov.w	ip, #0
 800839e:	f85e 7b04 	ldr.w	r7, [lr], #4
 80083a2:	f8d9 3000 	ldr.w	r3, [r9]
 80083a6:	fa1f fb87 	uxth.w	fp, r7
 80083aa:	b29b      	uxth	r3, r3
 80083ac:	fb0a 330b 	mla	r3, sl, fp, r3
 80083b0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80083b4:	f8d9 7000 	ldr.w	r7, [r9]
 80083b8:	4463      	add	r3, ip
 80083ba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80083be:	fb0a c70b 	mla	r7, sl, fp, ip
 80083c2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80083c6:	b29b      	uxth	r3, r3
 80083c8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80083cc:	4572      	cmp	r2, lr
 80083ce:	f849 3b04 	str.w	r3, [r9], #4
 80083d2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80083d6:	d8e2      	bhi.n	800839e <__multiply+0xb2>
 80083d8:	9b01      	ldr	r3, [sp, #4]
 80083da:	f845 c003 	str.w	ip, [r5, r3]
 80083de:	9b03      	ldr	r3, [sp, #12]
 80083e0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80083e4:	3104      	adds	r1, #4
 80083e6:	f1b9 0f00 	cmp.w	r9, #0
 80083ea:	d021      	beq.n	8008430 <__multiply+0x144>
 80083ec:	682b      	ldr	r3, [r5, #0]
 80083ee:	f104 0c14 	add.w	ip, r4, #20
 80083f2:	46ae      	mov	lr, r5
 80083f4:	f04f 0a00 	mov.w	sl, #0
 80083f8:	f8bc b000 	ldrh.w	fp, [ip]
 80083fc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008400:	fb09 770b 	mla	r7, r9, fp, r7
 8008404:	4457      	add	r7, sl
 8008406:	b29b      	uxth	r3, r3
 8008408:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800840c:	f84e 3b04 	str.w	r3, [lr], #4
 8008410:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008414:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008418:	f8be 3000 	ldrh.w	r3, [lr]
 800841c:	fb09 330a 	mla	r3, r9, sl, r3
 8008420:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008424:	4562      	cmp	r2, ip
 8008426:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800842a:	d8e5      	bhi.n	80083f8 <__multiply+0x10c>
 800842c:	9f01      	ldr	r7, [sp, #4]
 800842e:	51eb      	str	r3, [r5, r7]
 8008430:	3504      	adds	r5, #4
 8008432:	e799      	b.n	8008368 <__multiply+0x7c>
 8008434:	3e01      	subs	r6, #1
 8008436:	e79b      	b.n	8008370 <__multiply+0x84>
 8008438:	08009ba8 	.word	0x08009ba8
 800843c:	08009bb9 	.word	0x08009bb9

08008440 <__pow5mult>:
 8008440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008444:	4615      	mov	r5, r2
 8008446:	f012 0203 	ands.w	r2, r2, #3
 800844a:	4607      	mov	r7, r0
 800844c:	460e      	mov	r6, r1
 800844e:	d007      	beq.n	8008460 <__pow5mult+0x20>
 8008450:	4c25      	ldr	r4, [pc, #148]	@ (80084e8 <__pow5mult+0xa8>)
 8008452:	3a01      	subs	r2, #1
 8008454:	2300      	movs	r3, #0
 8008456:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800845a:	f7ff fe9f 	bl	800819c <__multadd>
 800845e:	4606      	mov	r6, r0
 8008460:	10ad      	asrs	r5, r5, #2
 8008462:	d03d      	beq.n	80084e0 <__pow5mult+0xa0>
 8008464:	69fc      	ldr	r4, [r7, #28]
 8008466:	b97c      	cbnz	r4, 8008488 <__pow5mult+0x48>
 8008468:	2010      	movs	r0, #16
 800846a:	f7ff fd7f 	bl	8007f6c <malloc>
 800846e:	4602      	mov	r2, r0
 8008470:	61f8      	str	r0, [r7, #28]
 8008472:	b928      	cbnz	r0, 8008480 <__pow5mult+0x40>
 8008474:	4b1d      	ldr	r3, [pc, #116]	@ (80084ec <__pow5mult+0xac>)
 8008476:	481e      	ldr	r0, [pc, #120]	@ (80084f0 <__pow5mult+0xb0>)
 8008478:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800847c:	f000 fdb2 	bl	8008fe4 <__assert_func>
 8008480:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008484:	6004      	str	r4, [r0, #0]
 8008486:	60c4      	str	r4, [r0, #12]
 8008488:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800848c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008490:	b94c      	cbnz	r4, 80084a6 <__pow5mult+0x66>
 8008492:	f240 2171 	movw	r1, #625	@ 0x271
 8008496:	4638      	mov	r0, r7
 8008498:	f7ff ff12 	bl	80082c0 <__i2b>
 800849c:	2300      	movs	r3, #0
 800849e:	f8c8 0008 	str.w	r0, [r8, #8]
 80084a2:	4604      	mov	r4, r0
 80084a4:	6003      	str	r3, [r0, #0]
 80084a6:	f04f 0900 	mov.w	r9, #0
 80084aa:	07eb      	lsls	r3, r5, #31
 80084ac:	d50a      	bpl.n	80084c4 <__pow5mult+0x84>
 80084ae:	4631      	mov	r1, r6
 80084b0:	4622      	mov	r2, r4
 80084b2:	4638      	mov	r0, r7
 80084b4:	f7ff ff1a 	bl	80082ec <__multiply>
 80084b8:	4631      	mov	r1, r6
 80084ba:	4680      	mov	r8, r0
 80084bc:	4638      	mov	r0, r7
 80084be:	f7ff fe4b 	bl	8008158 <_Bfree>
 80084c2:	4646      	mov	r6, r8
 80084c4:	106d      	asrs	r5, r5, #1
 80084c6:	d00b      	beq.n	80084e0 <__pow5mult+0xa0>
 80084c8:	6820      	ldr	r0, [r4, #0]
 80084ca:	b938      	cbnz	r0, 80084dc <__pow5mult+0x9c>
 80084cc:	4622      	mov	r2, r4
 80084ce:	4621      	mov	r1, r4
 80084d0:	4638      	mov	r0, r7
 80084d2:	f7ff ff0b 	bl	80082ec <__multiply>
 80084d6:	6020      	str	r0, [r4, #0]
 80084d8:	f8c0 9000 	str.w	r9, [r0]
 80084dc:	4604      	mov	r4, r0
 80084de:	e7e4      	b.n	80084aa <__pow5mult+0x6a>
 80084e0:	4630      	mov	r0, r6
 80084e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084e6:	bf00      	nop
 80084e8:	08009c14 	.word	0x08009c14
 80084ec:	08009b39 	.word	0x08009b39
 80084f0:	08009bb9 	.word	0x08009bb9

080084f4 <__lshift>:
 80084f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084f8:	460c      	mov	r4, r1
 80084fa:	6849      	ldr	r1, [r1, #4]
 80084fc:	6923      	ldr	r3, [r4, #16]
 80084fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008502:	68a3      	ldr	r3, [r4, #8]
 8008504:	4607      	mov	r7, r0
 8008506:	4691      	mov	r9, r2
 8008508:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800850c:	f108 0601 	add.w	r6, r8, #1
 8008510:	42b3      	cmp	r3, r6
 8008512:	db0b      	blt.n	800852c <__lshift+0x38>
 8008514:	4638      	mov	r0, r7
 8008516:	f7ff fddf 	bl	80080d8 <_Balloc>
 800851a:	4605      	mov	r5, r0
 800851c:	b948      	cbnz	r0, 8008532 <__lshift+0x3e>
 800851e:	4602      	mov	r2, r0
 8008520:	4b28      	ldr	r3, [pc, #160]	@ (80085c4 <__lshift+0xd0>)
 8008522:	4829      	ldr	r0, [pc, #164]	@ (80085c8 <__lshift+0xd4>)
 8008524:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008528:	f000 fd5c 	bl	8008fe4 <__assert_func>
 800852c:	3101      	adds	r1, #1
 800852e:	005b      	lsls	r3, r3, #1
 8008530:	e7ee      	b.n	8008510 <__lshift+0x1c>
 8008532:	2300      	movs	r3, #0
 8008534:	f100 0114 	add.w	r1, r0, #20
 8008538:	f100 0210 	add.w	r2, r0, #16
 800853c:	4618      	mov	r0, r3
 800853e:	4553      	cmp	r3, sl
 8008540:	db33      	blt.n	80085aa <__lshift+0xb6>
 8008542:	6920      	ldr	r0, [r4, #16]
 8008544:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008548:	f104 0314 	add.w	r3, r4, #20
 800854c:	f019 091f 	ands.w	r9, r9, #31
 8008550:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008554:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008558:	d02b      	beq.n	80085b2 <__lshift+0xbe>
 800855a:	f1c9 0e20 	rsb	lr, r9, #32
 800855e:	468a      	mov	sl, r1
 8008560:	2200      	movs	r2, #0
 8008562:	6818      	ldr	r0, [r3, #0]
 8008564:	fa00 f009 	lsl.w	r0, r0, r9
 8008568:	4310      	orrs	r0, r2
 800856a:	f84a 0b04 	str.w	r0, [sl], #4
 800856e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008572:	459c      	cmp	ip, r3
 8008574:	fa22 f20e 	lsr.w	r2, r2, lr
 8008578:	d8f3      	bhi.n	8008562 <__lshift+0x6e>
 800857a:	ebac 0304 	sub.w	r3, ip, r4
 800857e:	3b15      	subs	r3, #21
 8008580:	f023 0303 	bic.w	r3, r3, #3
 8008584:	3304      	adds	r3, #4
 8008586:	f104 0015 	add.w	r0, r4, #21
 800858a:	4584      	cmp	ip, r0
 800858c:	bf38      	it	cc
 800858e:	2304      	movcc	r3, #4
 8008590:	50ca      	str	r2, [r1, r3]
 8008592:	b10a      	cbz	r2, 8008598 <__lshift+0xa4>
 8008594:	f108 0602 	add.w	r6, r8, #2
 8008598:	3e01      	subs	r6, #1
 800859a:	4638      	mov	r0, r7
 800859c:	612e      	str	r6, [r5, #16]
 800859e:	4621      	mov	r1, r4
 80085a0:	f7ff fdda 	bl	8008158 <_Bfree>
 80085a4:	4628      	mov	r0, r5
 80085a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80085ae:	3301      	adds	r3, #1
 80085b0:	e7c5      	b.n	800853e <__lshift+0x4a>
 80085b2:	3904      	subs	r1, #4
 80085b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80085b8:	f841 2f04 	str.w	r2, [r1, #4]!
 80085bc:	459c      	cmp	ip, r3
 80085be:	d8f9      	bhi.n	80085b4 <__lshift+0xc0>
 80085c0:	e7ea      	b.n	8008598 <__lshift+0xa4>
 80085c2:	bf00      	nop
 80085c4:	08009ba8 	.word	0x08009ba8
 80085c8:	08009bb9 	.word	0x08009bb9

080085cc <__mcmp>:
 80085cc:	690a      	ldr	r2, [r1, #16]
 80085ce:	4603      	mov	r3, r0
 80085d0:	6900      	ldr	r0, [r0, #16]
 80085d2:	1a80      	subs	r0, r0, r2
 80085d4:	b530      	push	{r4, r5, lr}
 80085d6:	d10e      	bne.n	80085f6 <__mcmp+0x2a>
 80085d8:	3314      	adds	r3, #20
 80085da:	3114      	adds	r1, #20
 80085dc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80085e0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80085e4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80085e8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80085ec:	4295      	cmp	r5, r2
 80085ee:	d003      	beq.n	80085f8 <__mcmp+0x2c>
 80085f0:	d205      	bcs.n	80085fe <__mcmp+0x32>
 80085f2:	f04f 30ff 	mov.w	r0, #4294967295
 80085f6:	bd30      	pop	{r4, r5, pc}
 80085f8:	42a3      	cmp	r3, r4
 80085fa:	d3f3      	bcc.n	80085e4 <__mcmp+0x18>
 80085fc:	e7fb      	b.n	80085f6 <__mcmp+0x2a>
 80085fe:	2001      	movs	r0, #1
 8008600:	e7f9      	b.n	80085f6 <__mcmp+0x2a>
	...

08008604 <__mdiff>:
 8008604:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008608:	4689      	mov	r9, r1
 800860a:	4606      	mov	r6, r0
 800860c:	4611      	mov	r1, r2
 800860e:	4648      	mov	r0, r9
 8008610:	4614      	mov	r4, r2
 8008612:	f7ff ffdb 	bl	80085cc <__mcmp>
 8008616:	1e05      	subs	r5, r0, #0
 8008618:	d112      	bne.n	8008640 <__mdiff+0x3c>
 800861a:	4629      	mov	r1, r5
 800861c:	4630      	mov	r0, r6
 800861e:	f7ff fd5b 	bl	80080d8 <_Balloc>
 8008622:	4602      	mov	r2, r0
 8008624:	b928      	cbnz	r0, 8008632 <__mdiff+0x2e>
 8008626:	4b3f      	ldr	r3, [pc, #252]	@ (8008724 <__mdiff+0x120>)
 8008628:	f240 2137 	movw	r1, #567	@ 0x237
 800862c:	483e      	ldr	r0, [pc, #248]	@ (8008728 <__mdiff+0x124>)
 800862e:	f000 fcd9 	bl	8008fe4 <__assert_func>
 8008632:	2301      	movs	r3, #1
 8008634:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008638:	4610      	mov	r0, r2
 800863a:	b003      	add	sp, #12
 800863c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008640:	bfbc      	itt	lt
 8008642:	464b      	movlt	r3, r9
 8008644:	46a1      	movlt	r9, r4
 8008646:	4630      	mov	r0, r6
 8008648:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800864c:	bfba      	itte	lt
 800864e:	461c      	movlt	r4, r3
 8008650:	2501      	movlt	r5, #1
 8008652:	2500      	movge	r5, #0
 8008654:	f7ff fd40 	bl	80080d8 <_Balloc>
 8008658:	4602      	mov	r2, r0
 800865a:	b918      	cbnz	r0, 8008664 <__mdiff+0x60>
 800865c:	4b31      	ldr	r3, [pc, #196]	@ (8008724 <__mdiff+0x120>)
 800865e:	f240 2145 	movw	r1, #581	@ 0x245
 8008662:	e7e3      	b.n	800862c <__mdiff+0x28>
 8008664:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008668:	6926      	ldr	r6, [r4, #16]
 800866a:	60c5      	str	r5, [r0, #12]
 800866c:	f109 0310 	add.w	r3, r9, #16
 8008670:	f109 0514 	add.w	r5, r9, #20
 8008674:	f104 0e14 	add.w	lr, r4, #20
 8008678:	f100 0b14 	add.w	fp, r0, #20
 800867c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008680:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008684:	9301      	str	r3, [sp, #4]
 8008686:	46d9      	mov	r9, fp
 8008688:	f04f 0c00 	mov.w	ip, #0
 800868c:	9b01      	ldr	r3, [sp, #4]
 800868e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008692:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008696:	9301      	str	r3, [sp, #4]
 8008698:	fa1f f38a 	uxth.w	r3, sl
 800869c:	4619      	mov	r1, r3
 800869e:	b283      	uxth	r3, r0
 80086a0:	1acb      	subs	r3, r1, r3
 80086a2:	0c00      	lsrs	r0, r0, #16
 80086a4:	4463      	add	r3, ip
 80086a6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80086aa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80086ae:	b29b      	uxth	r3, r3
 80086b0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80086b4:	4576      	cmp	r6, lr
 80086b6:	f849 3b04 	str.w	r3, [r9], #4
 80086ba:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80086be:	d8e5      	bhi.n	800868c <__mdiff+0x88>
 80086c0:	1b33      	subs	r3, r6, r4
 80086c2:	3b15      	subs	r3, #21
 80086c4:	f023 0303 	bic.w	r3, r3, #3
 80086c8:	3415      	adds	r4, #21
 80086ca:	3304      	adds	r3, #4
 80086cc:	42a6      	cmp	r6, r4
 80086ce:	bf38      	it	cc
 80086d0:	2304      	movcc	r3, #4
 80086d2:	441d      	add	r5, r3
 80086d4:	445b      	add	r3, fp
 80086d6:	461e      	mov	r6, r3
 80086d8:	462c      	mov	r4, r5
 80086da:	4544      	cmp	r4, r8
 80086dc:	d30e      	bcc.n	80086fc <__mdiff+0xf8>
 80086de:	f108 0103 	add.w	r1, r8, #3
 80086e2:	1b49      	subs	r1, r1, r5
 80086e4:	f021 0103 	bic.w	r1, r1, #3
 80086e8:	3d03      	subs	r5, #3
 80086ea:	45a8      	cmp	r8, r5
 80086ec:	bf38      	it	cc
 80086ee:	2100      	movcc	r1, #0
 80086f0:	440b      	add	r3, r1
 80086f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80086f6:	b191      	cbz	r1, 800871e <__mdiff+0x11a>
 80086f8:	6117      	str	r7, [r2, #16]
 80086fa:	e79d      	b.n	8008638 <__mdiff+0x34>
 80086fc:	f854 1b04 	ldr.w	r1, [r4], #4
 8008700:	46e6      	mov	lr, ip
 8008702:	0c08      	lsrs	r0, r1, #16
 8008704:	fa1c fc81 	uxtah	ip, ip, r1
 8008708:	4471      	add	r1, lr
 800870a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800870e:	b289      	uxth	r1, r1
 8008710:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008714:	f846 1b04 	str.w	r1, [r6], #4
 8008718:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800871c:	e7dd      	b.n	80086da <__mdiff+0xd6>
 800871e:	3f01      	subs	r7, #1
 8008720:	e7e7      	b.n	80086f2 <__mdiff+0xee>
 8008722:	bf00      	nop
 8008724:	08009ba8 	.word	0x08009ba8
 8008728:	08009bb9 	.word	0x08009bb9

0800872c <__d2b>:
 800872c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008730:	460f      	mov	r7, r1
 8008732:	2101      	movs	r1, #1
 8008734:	ec59 8b10 	vmov	r8, r9, d0
 8008738:	4616      	mov	r6, r2
 800873a:	f7ff fccd 	bl	80080d8 <_Balloc>
 800873e:	4604      	mov	r4, r0
 8008740:	b930      	cbnz	r0, 8008750 <__d2b+0x24>
 8008742:	4602      	mov	r2, r0
 8008744:	4b23      	ldr	r3, [pc, #140]	@ (80087d4 <__d2b+0xa8>)
 8008746:	4824      	ldr	r0, [pc, #144]	@ (80087d8 <__d2b+0xac>)
 8008748:	f240 310f 	movw	r1, #783	@ 0x30f
 800874c:	f000 fc4a 	bl	8008fe4 <__assert_func>
 8008750:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008754:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008758:	b10d      	cbz	r5, 800875e <__d2b+0x32>
 800875a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800875e:	9301      	str	r3, [sp, #4]
 8008760:	f1b8 0300 	subs.w	r3, r8, #0
 8008764:	d023      	beq.n	80087ae <__d2b+0x82>
 8008766:	4668      	mov	r0, sp
 8008768:	9300      	str	r3, [sp, #0]
 800876a:	f7ff fd7c 	bl	8008266 <__lo0bits>
 800876e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008772:	b1d0      	cbz	r0, 80087aa <__d2b+0x7e>
 8008774:	f1c0 0320 	rsb	r3, r0, #32
 8008778:	fa02 f303 	lsl.w	r3, r2, r3
 800877c:	430b      	orrs	r3, r1
 800877e:	40c2      	lsrs	r2, r0
 8008780:	6163      	str	r3, [r4, #20]
 8008782:	9201      	str	r2, [sp, #4]
 8008784:	9b01      	ldr	r3, [sp, #4]
 8008786:	61a3      	str	r3, [r4, #24]
 8008788:	2b00      	cmp	r3, #0
 800878a:	bf0c      	ite	eq
 800878c:	2201      	moveq	r2, #1
 800878e:	2202      	movne	r2, #2
 8008790:	6122      	str	r2, [r4, #16]
 8008792:	b1a5      	cbz	r5, 80087be <__d2b+0x92>
 8008794:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008798:	4405      	add	r5, r0
 800879a:	603d      	str	r5, [r7, #0]
 800879c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80087a0:	6030      	str	r0, [r6, #0]
 80087a2:	4620      	mov	r0, r4
 80087a4:	b003      	add	sp, #12
 80087a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80087aa:	6161      	str	r1, [r4, #20]
 80087ac:	e7ea      	b.n	8008784 <__d2b+0x58>
 80087ae:	a801      	add	r0, sp, #4
 80087b0:	f7ff fd59 	bl	8008266 <__lo0bits>
 80087b4:	9b01      	ldr	r3, [sp, #4]
 80087b6:	6163      	str	r3, [r4, #20]
 80087b8:	3020      	adds	r0, #32
 80087ba:	2201      	movs	r2, #1
 80087bc:	e7e8      	b.n	8008790 <__d2b+0x64>
 80087be:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80087c2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80087c6:	6038      	str	r0, [r7, #0]
 80087c8:	6918      	ldr	r0, [r3, #16]
 80087ca:	f7ff fd2d 	bl	8008228 <__hi0bits>
 80087ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80087d2:	e7e5      	b.n	80087a0 <__d2b+0x74>
 80087d4:	08009ba8 	.word	0x08009ba8
 80087d8:	08009bb9 	.word	0x08009bb9

080087dc <__ssputs_r>:
 80087dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087e0:	688e      	ldr	r6, [r1, #8]
 80087e2:	461f      	mov	r7, r3
 80087e4:	42be      	cmp	r6, r7
 80087e6:	680b      	ldr	r3, [r1, #0]
 80087e8:	4682      	mov	sl, r0
 80087ea:	460c      	mov	r4, r1
 80087ec:	4690      	mov	r8, r2
 80087ee:	d82d      	bhi.n	800884c <__ssputs_r+0x70>
 80087f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80087f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80087f8:	d026      	beq.n	8008848 <__ssputs_r+0x6c>
 80087fa:	6965      	ldr	r5, [r4, #20]
 80087fc:	6909      	ldr	r1, [r1, #16]
 80087fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008802:	eba3 0901 	sub.w	r9, r3, r1
 8008806:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800880a:	1c7b      	adds	r3, r7, #1
 800880c:	444b      	add	r3, r9
 800880e:	106d      	asrs	r5, r5, #1
 8008810:	429d      	cmp	r5, r3
 8008812:	bf38      	it	cc
 8008814:	461d      	movcc	r5, r3
 8008816:	0553      	lsls	r3, r2, #21
 8008818:	d527      	bpl.n	800886a <__ssputs_r+0x8e>
 800881a:	4629      	mov	r1, r5
 800881c:	f7ff fbd0 	bl	8007fc0 <_malloc_r>
 8008820:	4606      	mov	r6, r0
 8008822:	b360      	cbz	r0, 800887e <__ssputs_r+0xa2>
 8008824:	6921      	ldr	r1, [r4, #16]
 8008826:	464a      	mov	r2, r9
 8008828:	f7fe fcf9 	bl	800721e <memcpy>
 800882c:	89a3      	ldrh	r3, [r4, #12]
 800882e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008832:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008836:	81a3      	strh	r3, [r4, #12]
 8008838:	6126      	str	r6, [r4, #16]
 800883a:	6165      	str	r5, [r4, #20]
 800883c:	444e      	add	r6, r9
 800883e:	eba5 0509 	sub.w	r5, r5, r9
 8008842:	6026      	str	r6, [r4, #0]
 8008844:	60a5      	str	r5, [r4, #8]
 8008846:	463e      	mov	r6, r7
 8008848:	42be      	cmp	r6, r7
 800884a:	d900      	bls.n	800884e <__ssputs_r+0x72>
 800884c:	463e      	mov	r6, r7
 800884e:	6820      	ldr	r0, [r4, #0]
 8008850:	4632      	mov	r2, r6
 8008852:	4641      	mov	r1, r8
 8008854:	f000 fb9c 	bl	8008f90 <memmove>
 8008858:	68a3      	ldr	r3, [r4, #8]
 800885a:	1b9b      	subs	r3, r3, r6
 800885c:	60a3      	str	r3, [r4, #8]
 800885e:	6823      	ldr	r3, [r4, #0]
 8008860:	4433      	add	r3, r6
 8008862:	6023      	str	r3, [r4, #0]
 8008864:	2000      	movs	r0, #0
 8008866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800886a:	462a      	mov	r2, r5
 800886c:	f000 fbfe 	bl	800906c <_realloc_r>
 8008870:	4606      	mov	r6, r0
 8008872:	2800      	cmp	r0, #0
 8008874:	d1e0      	bne.n	8008838 <__ssputs_r+0x5c>
 8008876:	6921      	ldr	r1, [r4, #16]
 8008878:	4650      	mov	r0, sl
 800887a:	f7ff fb2d 	bl	8007ed8 <_free_r>
 800887e:	230c      	movs	r3, #12
 8008880:	f8ca 3000 	str.w	r3, [sl]
 8008884:	89a3      	ldrh	r3, [r4, #12]
 8008886:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800888a:	81a3      	strh	r3, [r4, #12]
 800888c:	f04f 30ff 	mov.w	r0, #4294967295
 8008890:	e7e9      	b.n	8008866 <__ssputs_r+0x8a>
	...

08008894 <_svfiprintf_r>:
 8008894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008898:	4698      	mov	r8, r3
 800889a:	898b      	ldrh	r3, [r1, #12]
 800889c:	061b      	lsls	r3, r3, #24
 800889e:	b09d      	sub	sp, #116	@ 0x74
 80088a0:	4607      	mov	r7, r0
 80088a2:	460d      	mov	r5, r1
 80088a4:	4614      	mov	r4, r2
 80088a6:	d510      	bpl.n	80088ca <_svfiprintf_r+0x36>
 80088a8:	690b      	ldr	r3, [r1, #16]
 80088aa:	b973      	cbnz	r3, 80088ca <_svfiprintf_r+0x36>
 80088ac:	2140      	movs	r1, #64	@ 0x40
 80088ae:	f7ff fb87 	bl	8007fc0 <_malloc_r>
 80088b2:	6028      	str	r0, [r5, #0]
 80088b4:	6128      	str	r0, [r5, #16]
 80088b6:	b930      	cbnz	r0, 80088c6 <_svfiprintf_r+0x32>
 80088b8:	230c      	movs	r3, #12
 80088ba:	603b      	str	r3, [r7, #0]
 80088bc:	f04f 30ff 	mov.w	r0, #4294967295
 80088c0:	b01d      	add	sp, #116	@ 0x74
 80088c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088c6:	2340      	movs	r3, #64	@ 0x40
 80088c8:	616b      	str	r3, [r5, #20]
 80088ca:	2300      	movs	r3, #0
 80088cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80088ce:	2320      	movs	r3, #32
 80088d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80088d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80088d8:	2330      	movs	r3, #48	@ 0x30
 80088da:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008a78 <_svfiprintf_r+0x1e4>
 80088de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80088e2:	f04f 0901 	mov.w	r9, #1
 80088e6:	4623      	mov	r3, r4
 80088e8:	469a      	mov	sl, r3
 80088ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088ee:	b10a      	cbz	r2, 80088f4 <_svfiprintf_r+0x60>
 80088f0:	2a25      	cmp	r2, #37	@ 0x25
 80088f2:	d1f9      	bne.n	80088e8 <_svfiprintf_r+0x54>
 80088f4:	ebba 0b04 	subs.w	fp, sl, r4
 80088f8:	d00b      	beq.n	8008912 <_svfiprintf_r+0x7e>
 80088fa:	465b      	mov	r3, fp
 80088fc:	4622      	mov	r2, r4
 80088fe:	4629      	mov	r1, r5
 8008900:	4638      	mov	r0, r7
 8008902:	f7ff ff6b 	bl	80087dc <__ssputs_r>
 8008906:	3001      	adds	r0, #1
 8008908:	f000 80a7 	beq.w	8008a5a <_svfiprintf_r+0x1c6>
 800890c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800890e:	445a      	add	r2, fp
 8008910:	9209      	str	r2, [sp, #36]	@ 0x24
 8008912:	f89a 3000 	ldrb.w	r3, [sl]
 8008916:	2b00      	cmp	r3, #0
 8008918:	f000 809f 	beq.w	8008a5a <_svfiprintf_r+0x1c6>
 800891c:	2300      	movs	r3, #0
 800891e:	f04f 32ff 	mov.w	r2, #4294967295
 8008922:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008926:	f10a 0a01 	add.w	sl, sl, #1
 800892a:	9304      	str	r3, [sp, #16]
 800892c:	9307      	str	r3, [sp, #28]
 800892e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008932:	931a      	str	r3, [sp, #104]	@ 0x68
 8008934:	4654      	mov	r4, sl
 8008936:	2205      	movs	r2, #5
 8008938:	f814 1b01 	ldrb.w	r1, [r4], #1
 800893c:	484e      	ldr	r0, [pc, #312]	@ (8008a78 <_svfiprintf_r+0x1e4>)
 800893e:	f7f7 fc47 	bl	80001d0 <memchr>
 8008942:	9a04      	ldr	r2, [sp, #16]
 8008944:	b9d8      	cbnz	r0, 800897e <_svfiprintf_r+0xea>
 8008946:	06d0      	lsls	r0, r2, #27
 8008948:	bf44      	itt	mi
 800894a:	2320      	movmi	r3, #32
 800894c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008950:	0711      	lsls	r1, r2, #28
 8008952:	bf44      	itt	mi
 8008954:	232b      	movmi	r3, #43	@ 0x2b
 8008956:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800895a:	f89a 3000 	ldrb.w	r3, [sl]
 800895e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008960:	d015      	beq.n	800898e <_svfiprintf_r+0xfa>
 8008962:	9a07      	ldr	r2, [sp, #28]
 8008964:	4654      	mov	r4, sl
 8008966:	2000      	movs	r0, #0
 8008968:	f04f 0c0a 	mov.w	ip, #10
 800896c:	4621      	mov	r1, r4
 800896e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008972:	3b30      	subs	r3, #48	@ 0x30
 8008974:	2b09      	cmp	r3, #9
 8008976:	d94b      	bls.n	8008a10 <_svfiprintf_r+0x17c>
 8008978:	b1b0      	cbz	r0, 80089a8 <_svfiprintf_r+0x114>
 800897a:	9207      	str	r2, [sp, #28]
 800897c:	e014      	b.n	80089a8 <_svfiprintf_r+0x114>
 800897e:	eba0 0308 	sub.w	r3, r0, r8
 8008982:	fa09 f303 	lsl.w	r3, r9, r3
 8008986:	4313      	orrs	r3, r2
 8008988:	9304      	str	r3, [sp, #16]
 800898a:	46a2      	mov	sl, r4
 800898c:	e7d2      	b.n	8008934 <_svfiprintf_r+0xa0>
 800898e:	9b03      	ldr	r3, [sp, #12]
 8008990:	1d19      	adds	r1, r3, #4
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	9103      	str	r1, [sp, #12]
 8008996:	2b00      	cmp	r3, #0
 8008998:	bfbb      	ittet	lt
 800899a:	425b      	neglt	r3, r3
 800899c:	f042 0202 	orrlt.w	r2, r2, #2
 80089a0:	9307      	strge	r3, [sp, #28]
 80089a2:	9307      	strlt	r3, [sp, #28]
 80089a4:	bfb8      	it	lt
 80089a6:	9204      	strlt	r2, [sp, #16]
 80089a8:	7823      	ldrb	r3, [r4, #0]
 80089aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80089ac:	d10a      	bne.n	80089c4 <_svfiprintf_r+0x130>
 80089ae:	7863      	ldrb	r3, [r4, #1]
 80089b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80089b2:	d132      	bne.n	8008a1a <_svfiprintf_r+0x186>
 80089b4:	9b03      	ldr	r3, [sp, #12]
 80089b6:	1d1a      	adds	r2, r3, #4
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	9203      	str	r2, [sp, #12]
 80089bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80089c0:	3402      	adds	r4, #2
 80089c2:	9305      	str	r3, [sp, #20]
 80089c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008a88 <_svfiprintf_r+0x1f4>
 80089c8:	7821      	ldrb	r1, [r4, #0]
 80089ca:	2203      	movs	r2, #3
 80089cc:	4650      	mov	r0, sl
 80089ce:	f7f7 fbff 	bl	80001d0 <memchr>
 80089d2:	b138      	cbz	r0, 80089e4 <_svfiprintf_r+0x150>
 80089d4:	9b04      	ldr	r3, [sp, #16]
 80089d6:	eba0 000a 	sub.w	r0, r0, sl
 80089da:	2240      	movs	r2, #64	@ 0x40
 80089dc:	4082      	lsls	r2, r0
 80089de:	4313      	orrs	r3, r2
 80089e0:	3401      	adds	r4, #1
 80089e2:	9304      	str	r3, [sp, #16]
 80089e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089e8:	4824      	ldr	r0, [pc, #144]	@ (8008a7c <_svfiprintf_r+0x1e8>)
 80089ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80089ee:	2206      	movs	r2, #6
 80089f0:	f7f7 fbee 	bl	80001d0 <memchr>
 80089f4:	2800      	cmp	r0, #0
 80089f6:	d036      	beq.n	8008a66 <_svfiprintf_r+0x1d2>
 80089f8:	4b21      	ldr	r3, [pc, #132]	@ (8008a80 <_svfiprintf_r+0x1ec>)
 80089fa:	bb1b      	cbnz	r3, 8008a44 <_svfiprintf_r+0x1b0>
 80089fc:	9b03      	ldr	r3, [sp, #12]
 80089fe:	3307      	adds	r3, #7
 8008a00:	f023 0307 	bic.w	r3, r3, #7
 8008a04:	3308      	adds	r3, #8
 8008a06:	9303      	str	r3, [sp, #12]
 8008a08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a0a:	4433      	add	r3, r6
 8008a0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a0e:	e76a      	b.n	80088e6 <_svfiprintf_r+0x52>
 8008a10:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a14:	460c      	mov	r4, r1
 8008a16:	2001      	movs	r0, #1
 8008a18:	e7a8      	b.n	800896c <_svfiprintf_r+0xd8>
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	3401      	adds	r4, #1
 8008a1e:	9305      	str	r3, [sp, #20]
 8008a20:	4619      	mov	r1, r3
 8008a22:	f04f 0c0a 	mov.w	ip, #10
 8008a26:	4620      	mov	r0, r4
 8008a28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a2c:	3a30      	subs	r2, #48	@ 0x30
 8008a2e:	2a09      	cmp	r2, #9
 8008a30:	d903      	bls.n	8008a3a <_svfiprintf_r+0x1a6>
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d0c6      	beq.n	80089c4 <_svfiprintf_r+0x130>
 8008a36:	9105      	str	r1, [sp, #20]
 8008a38:	e7c4      	b.n	80089c4 <_svfiprintf_r+0x130>
 8008a3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a3e:	4604      	mov	r4, r0
 8008a40:	2301      	movs	r3, #1
 8008a42:	e7f0      	b.n	8008a26 <_svfiprintf_r+0x192>
 8008a44:	ab03      	add	r3, sp, #12
 8008a46:	9300      	str	r3, [sp, #0]
 8008a48:	462a      	mov	r2, r5
 8008a4a:	4b0e      	ldr	r3, [pc, #56]	@ (8008a84 <_svfiprintf_r+0x1f0>)
 8008a4c:	a904      	add	r1, sp, #16
 8008a4e:	4638      	mov	r0, r7
 8008a50:	f7fd fe20 	bl	8006694 <_printf_float>
 8008a54:	1c42      	adds	r2, r0, #1
 8008a56:	4606      	mov	r6, r0
 8008a58:	d1d6      	bne.n	8008a08 <_svfiprintf_r+0x174>
 8008a5a:	89ab      	ldrh	r3, [r5, #12]
 8008a5c:	065b      	lsls	r3, r3, #25
 8008a5e:	f53f af2d 	bmi.w	80088bc <_svfiprintf_r+0x28>
 8008a62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008a64:	e72c      	b.n	80088c0 <_svfiprintf_r+0x2c>
 8008a66:	ab03      	add	r3, sp, #12
 8008a68:	9300      	str	r3, [sp, #0]
 8008a6a:	462a      	mov	r2, r5
 8008a6c:	4b05      	ldr	r3, [pc, #20]	@ (8008a84 <_svfiprintf_r+0x1f0>)
 8008a6e:	a904      	add	r1, sp, #16
 8008a70:	4638      	mov	r0, r7
 8008a72:	f7fe f8a7 	bl	8006bc4 <_printf_i>
 8008a76:	e7ed      	b.n	8008a54 <_svfiprintf_r+0x1c0>
 8008a78:	08009d10 	.word	0x08009d10
 8008a7c:	08009d1a 	.word	0x08009d1a
 8008a80:	08006695 	.word	0x08006695
 8008a84:	080087dd 	.word	0x080087dd
 8008a88:	08009d16 	.word	0x08009d16

08008a8c <__sfputc_r>:
 8008a8c:	6893      	ldr	r3, [r2, #8]
 8008a8e:	3b01      	subs	r3, #1
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	b410      	push	{r4}
 8008a94:	6093      	str	r3, [r2, #8]
 8008a96:	da08      	bge.n	8008aaa <__sfputc_r+0x1e>
 8008a98:	6994      	ldr	r4, [r2, #24]
 8008a9a:	42a3      	cmp	r3, r4
 8008a9c:	db01      	blt.n	8008aa2 <__sfputc_r+0x16>
 8008a9e:	290a      	cmp	r1, #10
 8008aa0:	d103      	bne.n	8008aaa <__sfputc_r+0x1e>
 8008aa2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008aa6:	f000 b9df 	b.w	8008e68 <__swbuf_r>
 8008aaa:	6813      	ldr	r3, [r2, #0]
 8008aac:	1c58      	adds	r0, r3, #1
 8008aae:	6010      	str	r0, [r2, #0]
 8008ab0:	7019      	strb	r1, [r3, #0]
 8008ab2:	4608      	mov	r0, r1
 8008ab4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ab8:	4770      	bx	lr

08008aba <__sfputs_r>:
 8008aba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008abc:	4606      	mov	r6, r0
 8008abe:	460f      	mov	r7, r1
 8008ac0:	4614      	mov	r4, r2
 8008ac2:	18d5      	adds	r5, r2, r3
 8008ac4:	42ac      	cmp	r4, r5
 8008ac6:	d101      	bne.n	8008acc <__sfputs_r+0x12>
 8008ac8:	2000      	movs	r0, #0
 8008aca:	e007      	b.n	8008adc <__sfputs_r+0x22>
 8008acc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ad0:	463a      	mov	r2, r7
 8008ad2:	4630      	mov	r0, r6
 8008ad4:	f7ff ffda 	bl	8008a8c <__sfputc_r>
 8008ad8:	1c43      	adds	r3, r0, #1
 8008ada:	d1f3      	bne.n	8008ac4 <__sfputs_r+0xa>
 8008adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008ae0 <_vfiprintf_r>:
 8008ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ae4:	460d      	mov	r5, r1
 8008ae6:	b09d      	sub	sp, #116	@ 0x74
 8008ae8:	4614      	mov	r4, r2
 8008aea:	4698      	mov	r8, r3
 8008aec:	4606      	mov	r6, r0
 8008aee:	b118      	cbz	r0, 8008af8 <_vfiprintf_r+0x18>
 8008af0:	6a03      	ldr	r3, [r0, #32]
 8008af2:	b90b      	cbnz	r3, 8008af8 <_vfiprintf_r+0x18>
 8008af4:	f7fe fa12 	bl	8006f1c <__sinit>
 8008af8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008afa:	07d9      	lsls	r1, r3, #31
 8008afc:	d405      	bmi.n	8008b0a <_vfiprintf_r+0x2a>
 8008afe:	89ab      	ldrh	r3, [r5, #12]
 8008b00:	059a      	lsls	r2, r3, #22
 8008b02:	d402      	bmi.n	8008b0a <_vfiprintf_r+0x2a>
 8008b04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008b06:	f7fe fb88 	bl	800721a <__retarget_lock_acquire_recursive>
 8008b0a:	89ab      	ldrh	r3, [r5, #12]
 8008b0c:	071b      	lsls	r3, r3, #28
 8008b0e:	d501      	bpl.n	8008b14 <_vfiprintf_r+0x34>
 8008b10:	692b      	ldr	r3, [r5, #16]
 8008b12:	b99b      	cbnz	r3, 8008b3c <_vfiprintf_r+0x5c>
 8008b14:	4629      	mov	r1, r5
 8008b16:	4630      	mov	r0, r6
 8008b18:	f000 f9e4 	bl	8008ee4 <__swsetup_r>
 8008b1c:	b170      	cbz	r0, 8008b3c <_vfiprintf_r+0x5c>
 8008b1e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008b20:	07dc      	lsls	r4, r3, #31
 8008b22:	d504      	bpl.n	8008b2e <_vfiprintf_r+0x4e>
 8008b24:	f04f 30ff 	mov.w	r0, #4294967295
 8008b28:	b01d      	add	sp, #116	@ 0x74
 8008b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b2e:	89ab      	ldrh	r3, [r5, #12]
 8008b30:	0598      	lsls	r0, r3, #22
 8008b32:	d4f7      	bmi.n	8008b24 <_vfiprintf_r+0x44>
 8008b34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008b36:	f7fe fb71 	bl	800721c <__retarget_lock_release_recursive>
 8008b3a:	e7f3      	b.n	8008b24 <_vfiprintf_r+0x44>
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b40:	2320      	movs	r3, #32
 8008b42:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008b46:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b4a:	2330      	movs	r3, #48	@ 0x30
 8008b4c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008cfc <_vfiprintf_r+0x21c>
 8008b50:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008b54:	f04f 0901 	mov.w	r9, #1
 8008b58:	4623      	mov	r3, r4
 8008b5a:	469a      	mov	sl, r3
 8008b5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b60:	b10a      	cbz	r2, 8008b66 <_vfiprintf_r+0x86>
 8008b62:	2a25      	cmp	r2, #37	@ 0x25
 8008b64:	d1f9      	bne.n	8008b5a <_vfiprintf_r+0x7a>
 8008b66:	ebba 0b04 	subs.w	fp, sl, r4
 8008b6a:	d00b      	beq.n	8008b84 <_vfiprintf_r+0xa4>
 8008b6c:	465b      	mov	r3, fp
 8008b6e:	4622      	mov	r2, r4
 8008b70:	4629      	mov	r1, r5
 8008b72:	4630      	mov	r0, r6
 8008b74:	f7ff ffa1 	bl	8008aba <__sfputs_r>
 8008b78:	3001      	adds	r0, #1
 8008b7a:	f000 80a7 	beq.w	8008ccc <_vfiprintf_r+0x1ec>
 8008b7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008b80:	445a      	add	r2, fp
 8008b82:	9209      	str	r2, [sp, #36]	@ 0x24
 8008b84:	f89a 3000 	ldrb.w	r3, [sl]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	f000 809f 	beq.w	8008ccc <_vfiprintf_r+0x1ec>
 8008b8e:	2300      	movs	r3, #0
 8008b90:	f04f 32ff 	mov.w	r2, #4294967295
 8008b94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b98:	f10a 0a01 	add.w	sl, sl, #1
 8008b9c:	9304      	str	r3, [sp, #16]
 8008b9e:	9307      	str	r3, [sp, #28]
 8008ba0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008ba4:	931a      	str	r3, [sp, #104]	@ 0x68
 8008ba6:	4654      	mov	r4, sl
 8008ba8:	2205      	movs	r2, #5
 8008baa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bae:	4853      	ldr	r0, [pc, #332]	@ (8008cfc <_vfiprintf_r+0x21c>)
 8008bb0:	f7f7 fb0e 	bl	80001d0 <memchr>
 8008bb4:	9a04      	ldr	r2, [sp, #16]
 8008bb6:	b9d8      	cbnz	r0, 8008bf0 <_vfiprintf_r+0x110>
 8008bb8:	06d1      	lsls	r1, r2, #27
 8008bba:	bf44      	itt	mi
 8008bbc:	2320      	movmi	r3, #32
 8008bbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008bc2:	0713      	lsls	r3, r2, #28
 8008bc4:	bf44      	itt	mi
 8008bc6:	232b      	movmi	r3, #43	@ 0x2b
 8008bc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008bcc:	f89a 3000 	ldrb.w	r3, [sl]
 8008bd0:	2b2a      	cmp	r3, #42	@ 0x2a
 8008bd2:	d015      	beq.n	8008c00 <_vfiprintf_r+0x120>
 8008bd4:	9a07      	ldr	r2, [sp, #28]
 8008bd6:	4654      	mov	r4, sl
 8008bd8:	2000      	movs	r0, #0
 8008bda:	f04f 0c0a 	mov.w	ip, #10
 8008bde:	4621      	mov	r1, r4
 8008be0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008be4:	3b30      	subs	r3, #48	@ 0x30
 8008be6:	2b09      	cmp	r3, #9
 8008be8:	d94b      	bls.n	8008c82 <_vfiprintf_r+0x1a2>
 8008bea:	b1b0      	cbz	r0, 8008c1a <_vfiprintf_r+0x13a>
 8008bec:	9207      	str	r2, [sp, #28]
 8008bee:	e014      	b.n	8008c1a <_vfiprintf_r+0x13a>
 8008bf0:	eba0 0308 	sub.w	r3, r0, r8
 8008bf4:	fa09 f303 	lsl.w	r3, r9, r3
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	9304      	str	r3, [sp, #16]
 8008bfc:	46a2      	mov	sl, r4
 8008bfe:	e7d2      	b.n	8008ba6 <_vfiprintf_r+0xc6>
 8008c00:	9b03      	ldr	r3, [sp, #12]
 8008c02:	1d19      	adds	r1, r3, #4
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	9103      	str	r1, [sp, #12]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	bfbb      	ittet	lt
 8008c0c:	425b      	neglt	r3, r3
 8008c0e:	f042 0202 	orrlt.w	r2, r2, #2
 8008c12:	9307      	strge	r3, [sp, #28]
 8008c14:	9307      	strlt	r3, [sp, #28]
 8008c16:	bfb8      	it	lt
 8008c18:	9204      	strlt	r2, [sp, #16]
 8008c1a:	7823      	ldrb	r3, [r4, #0]
 8008c1c:	2b2e      	cmp	r3, #46	@ 0x2e
 8008c1e:	d10a      	bne.n	8008c36 <_vfiprintf_r+0x156>
 8008c20:	7863      	ldrb	r3, [r4, #1]
 8008c22:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c24:	d132      	bne.n	8008c8c <_vfiprintf_r+0x1ac>
 8008c26:	9b03      	ldr	r3, [sp, #12]
 8008c28:	1d1a      	adds	r2, r3, #4
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	9203      	str	r2, [sp, #12]
 8008c2e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008c32:	3402      	adds	r4, #2
 8008c34:	9305      	str	r3, [sp, #20]
 8008c36:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008d0c <_vfiprintf_r+0x22c>
 8008c3a:	7821      	ldrb	r1, [r4, #0]
 8008c3c:	2203      	movs	r2, #3
 8008c3e:	4650      	mov	r0, sl
 8008c40:	f7f7 fac6 	bl	80001d0 <memchr>
 8008c44:	b138      	cbz	r0, 8008c56 <_vfiprintf_r+0x176>
 8008c46:	9b04      	ldr	r3, [sp, #16]
 8008c48:	eba0 000a 	sub.w	r0, r0, sl
 8008c4c:	2240      	movs	r2, #64	@ 0x40
 8008c4e:	4082      	lsls	r2, r0
 8008c50:	4313      	orrs	r3, r2
 8008c52:	3401      	adds	r4, #1
 8008c54:	9304      	str	r3, [sp, #16]
 8008c56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c5a:	4829      	ldr	r0, [pc, #164]	@ (8008d00 <_vfiprintf_r+0x220>)
 8008c5c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008c60:	2206      	movs	r2, #6
 8008c62:	f7f7 fab5 	bl	80001d0 <memchr>
 8008c66:	2800      	cmp	r0, #0
 8008c68:	d03f      	beq.n	8008cea <_vfiprintf_r+0x20a>
 8008c6a:	4b26      	ldr	r3, [pc, #152]	@ (8008d04 <_vfiprintf_r+0x224>)
 8008c6c:	bb1b      	cbnz	r3, 8008cb6 <_vfiprintf_r+0x1d6>
 8008c6e:	9b03      	ldr	r3, [sp, #12]
 8008c70:	3307      	adds	r3, #7
 8008c72:	f023 0307 	bic.w	r3, r3, #7
 8008c76:	3308      	adds	r3, #8
 8008c78:	9303      	str	r3, [sp, #12]
 8008c7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c7c:	443b      	add	r3, r7
 8008c7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c80:	e76a      	b.n	8008b58 <_vfiprintf_r+0x78>
 8008c82:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c86:	460c      	mov	r4, r1
 8008c88:	2001      	movs	r0, #1
 8008c8a:	e7a8      	b.n	8008bde <_vfiprintf_r+0xfe>
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	3401      	adds	r4, #1
 8008c90:	9305      	str	r3, [sp, #20]
 8008c92:	4619      	mov	r1, r3
 8008c94:	f04f 0c0a 	mov.w	ip, #10
 8008c98:	4620      	mov	r0, r4
 8008c9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c9e:	3a30      	subs	r2, #48	@ 0x30
 8008ca0:	2a09      	cmp	r2, #9
 8008ca2:	d903      	bls.n	8008cac <_vfiprintf_r+0x1cc>
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d0c6      	beq.n	8008c36 <_vfiprintf_r+0x156>
 8008ca8:	9105      	str	r1, [sp, #20]
 8008caa:	e7c4      	b.n	8008c36 <_vfiprintf_r+0x156>
 8008cac:	fb0c 2101 	mla	r1, ip, r1, r2
 8008cb0:	4604      	mov	r4, r0
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	e7f0      	b.n	8008c98 <_vfiprintf_r+0x1b8>
 8008cb6:	ab03      	add	r3, sp, #12
 8008cb8:	9300      	str	r3, [sp, #0]
 8008cba:	462a      	mov	r2, r5
 8008cbc:	4b12      	ldr	r3, [pc, #72]	@ (8008d08 <_vfiprintf_r+0x228>)
 8008cbe:	a904      	add	r1, sp, #16
 8008cc0:	4630      	mov	r0, r6
 8008cc2:	f7fd fce7 	bl	8006694 <_printf_float>
 8008cc6:	4607      	mov	r7, r0
 8008cc8:	1c78      	adds	r0, r7, #1
 8008cca:	d1d6      	bne.n	8008c7a <_vfiprintf_r+0x19a>
 8008ccc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008cce:	07d9      	lsls	r1, r3, #31
 8008cd0:	d405      	bmi.n	8008cde <_vfiprintf_r+0x1fe>
 8008cd2:	89ab      	ldrh	r3, [r5, #12]
 8008cd4:	059a      	lsls	r2, r3, #22
 8008cd6:	d402      	bmi.n	8008cde <_vfiprintf_r+0x1fe>
 8008cd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008cda:	f7fe fa9f 	bl	800721c <__retarget_lock_release_recursive>
 8008cde:	89ab      	ldrh	r3, [r5, #12]
 8008ce0:	065b      	lsls	r3, r3, #25
 8008ce2:	f53f af1f 	bmi.w	8008b24 <_vfiprintf_r+0x44>
 8008ce6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008ce8:	e71e      	b.n	8008b28 <_vfiprintf_r+0x48>
 8008cea:	ab03      	add	r3, sp, #12
 8008cec:	9300      	str	r3, [sp, #0]
 8008cee:	462a      	mov	r2, r5
 8008cf0:	4b05      	ldr	r3, [pc, #20]	@ (8008d08 <_vfiprintf_r+0x228>)
 8008cf2:	a904      	add	r1, sp, #16
 8008cf4:	4630      	mov	r0, r6
 8008cf6:	f7fd ff65 	bl	8006bc4 <_printf_i>
 8008cfa:	e7e4      	b.n	8008cc6 <_vfiprintf_r+0x1e6>
 8008cfc:	08009d10 	.word	0x08009d10
 8008d00:	08009d1a 	.word	0x08009d1a
 8008d04:	08006695 	.word	0x08006695
 8008d08:	08008abb 	.word	0x08008abb
 8008d0c:	08009d16 	.word	0x08009d16

08008d10 <__sflush_r>:
 8008d10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d18:	0716      	lsls	r6, r2, #28
 8008d1a:	4605      	mov	r5, r0
 8008d1c:	460c      	mov	r4, r1
 8008d1e:	d454      	bmi.n	8008dca <__sflush_r+0xba>
 8008d20:	684b      	ldr	r3, [r1, #4]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	dc02      	bgt.n	8008d2c <__sflush_r+0x1c>
 8008d26:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	dd48      	ble.n	8008dbe <__sflush_r+0xae>
 8008d2c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008d2e:	2e00      	cmp	r6, #0
 8008d30:	d045      	beq.n	8008dbe <__sflush_r+0xae>
 8008d32:	2300      	movs	r3, #0
 8008d34:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008d38:	682f      	ldr	r7, [r5, #0]
 8008d3a:	6a21      	ldr	r1, [r4, #32]
 8008d3c:	602b      	str	r3, [r5, #0]
 8008d3e:	d030      	beq.n	8008da2 <__sflush_r+0x92>
 8008d40:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008d42:	89a3      	ldrh	r3, [r4, #12]
 8008d44:	0759      	lsls	r1, r3, #29
 8008d46:	d505      	bpl.n	8008d54 <__sflush_r+0x44>
 8008d48:	6863      	ldr	r3, [r4, #4]
 8008d4a:	1ad2      	subs	r2, r2, r3
 8008d4c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008d4e:	b10b      	cbz	r3, 8008d54 <__sflush_r+0x44>
 8008d50:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008d52:	1ad2      	subs	r2, r2, r3
 8008d54:	2300      	movs	r3, #0
 8008d56:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008d58:	6a21      	ldr	r1, [r4, #32]
 8008d5a:	4628      	mov	r0, r5
 8008d5c:	47b0      	blx	r6
 8008d5e:	1c43      	adds	r3, r0, #1
 8008d60:	89a3      	ldrh	r3, [r4, #12]
 8008d62:	d106      	bne.n	8008d72 <__sflush_r+0x62>
 8008d64:	6829      	ldr	r1, [r5, #0]
 8008d66:	291d      	cmp	r1, #29
 8008d68:	d82b      	bhi.n	8008dc2 <__sflush_r+0xb2>
 8008d6a:	4a2a      	ldr	r2, [pc, #168]	@ (8008e14 <__sflush_r+0x104>)
 8008d6c:	410a      	asrs	r2, r1
 8008d6e:	07d6      	lsls	r6, r2, #31
 8008d70:	d427      	bmi.n	8008dc2 <__sflush_r+0xb2>
 8008d72:	2200      	movs	r2, #0
 8008d74:	6062      	str	r2, [r4, #4]
 8008d76:	04d9      	lsls	r1, r3, #19
 8008d78:	6922      	ldr	r2, [r4, #16]
 8008d7a:	6022      	str	r2, [r4, #0]
 8008d7c:	d504      	bpl.n	8008d88 <__sflush_r+0x78>
 8008d7e:	1c42      	adds	r2, r0, #1
 8008d80:	d101      	bne.n	8008d86 <__sflush_r+0x76>
 8008d82:	682b      	ldr	r3, [r5, #0]
 8008d84:	b903      	cbnz	r3, 8008d88 <__sflush_r+0x78>
 8008d86:	6560      	str	r0, [r4, #84]	@ 0x54
 8008d88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008d8a:	602f      	str	r7, [r5, #0]
 8008d8c:	b1b9      	cbz	r1, 8008dbe <__sflush_r+0xae>
 8008d8e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008d92:	4299      	cmp	r1, r3
 8008d94:	d002      	beq.n	8008d9c <__sflush_r+0x8c>
 8008d96:	4628      	mov	r0, r5
 8008d98:	f7ff f89e 	bl	8007ed8 <_free_r>
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	6363      	str	r3, [r4, #52]	@ 0x34
 8008da0:	e00d      	b.n	8008dbe <__sflush_r+0xae>
 8008da2:	2301      	movs	r3, #1
 8008da4:	4628      	mov	r0, r5
 8008da6:	47b0      	blx	r6
 8008da8:	4602      	mov	r2, r0
 8008daa:	1c50      	adds	r0, r2, #1
 8008dac:	d1c9      	bne.n	8008d42 <__sflush_r+0x32>
 8008dae:	682b      	ldr	r3, [r5, #0]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d0c6      	beq.n	8008d42 <__sflush_r+0x32>
 8008db4:	2b1d      	cmp	r3, #29
 8008db6:	d001      	beq.n	8008dbc <__sflush_r+0xac>
 8008db8:	2b16      	cmp	r3, #22
 8008dba:	d11e      	bne.n	8008dfa <__sflush_r+0xea>
 8008dbc:	602f      	str	r7, [r5, #0]
 8008dbe:	2000      	movs	r0, #0
 8008dc0:	e022      	b.n	8008e08 <__sflush_r+0xf8>
 8008dc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008dc6:	b21b      	sxth	r3, r3
 8008dc8:	e01b      	b.n	8008e02 <__sflush_r+0xf2>
 8008dca:	690f      	ldr	r7, [r1, #16]
 8008dcc:	2f00      	cmp	r7, #0
 8008dce:	d0f6      	beq.n	8008dbe <__sflush_r+0xae>
 8008dd0:	0793      	lsls	r3, r2, #30
 8008dd2:	680e      	ldr	r6, [r1, #0]
 8008dd4:	bf08      	it	eq
 8008dd6:	694b      	ldreq	r3, [r1, #20]
 8008dd8:	600f      	str	r7, [r1, #0]
 8008dda:	bf18      	it	ne
 8008ddc:	2300      	movne	r3, #0
 8008dde:	eba6 0807 	sub.w	r8, r6, r7
 8008de2:	608b      	str	r3, [r1, #8]
 8008de4:	f1b8 0f00 	cmp.w	r8, #0
 8008de8:	dde9      	ble.n	8008dbe <__sflush_r+0xae>
 8008dea:	6a21      	ldr	r1, [r4, #32]
 8008dec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008dee:	4643      	mov	r3, r8
 8008df0:	463a      	mov	r2, r7
 8008df2:	4628      	mov	r0, r5
 8008df4:	47b0      	blx	r6
 8008df6:	2800      	cmp	r0, #0
 8008df8:	dc08      	bgt.n	8008e0c <__sflush_r+0xfc>
 8008dfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008dfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e02:	81a3      	strh	r3, [r4, #12]
 8008e04:	f04f 30ff 	mov.w	r0, #4294967295
 8008e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e0c:	4407      	add	r7, r0
 8008e0e:	eba8 0800 	sub.w	r8, r8, r0
 8008e12:	e7e7      	b.n	8008de4 <__sflush_r+0xd4>
 8008e14:	dfbffffe 	.word	0xdfbffffe

08008e18 <_fflush_r>:
 8008e18:	b538      	push	{r3, r4, r5, lr}
 8008e1a:	690b      	ldr	r3, [r1, #16]
 8008e1c:	4605      	mov	r5, r0
 8008e1e:	460c      	mov	r4, r1
 8008e20:	b913      	cbnz	r3, 8008e28 <_fflush_r+0x10>
 8008e22:	2500      	movs	r5, #0
 8008e24:	4628      	mov	r0, r5
 8008e26:	bd38      	pop	{r3, r4, r5, pc}
 8008e28:	b118      	cbz	r0, 8008e32 <_fflush_r+0x1a>
 8008e2a:	6a03      	ldr	r3, [r0, #32]
 8008e2c:	b90b      	cbnz	r3, 8008e32 <_fflush_r+0x1a>
 8008e2e:	f7fe f875 	bl	8006f1c <__sinit>
 8008e32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d0f3      	beq.n	8008e22 <_fflush_r+0xa>
 8008e3a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008e3c:	07d0      	lsls	r0, r2, #31
 8008e3e:	d404      	bmi.n	8008e4a <_fflush_r+0x32>
 8008e40:	0599      	lsls	r1, r3, #22
 8008e42:	d402      	bmi.n	8008e4a <_fflush_r+0x32>
 8008e44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008e46:	f7fe f9e8 	bl	800721a <__retarget_lock_acquire_recursive>
 8008e4a:	4628      	mov	r0, r5
 8008e4c:	4621      	mov	r1, r4
 8008e4e:	f7ff ff5f 	bl	8008d10 <__sflush_r>
 8008e52:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008e54:	07da      	lsls	r2, r3, #31
 8008e56:	4605      	mov	r5, r0
 8008e58:	d4e4      	bmi.n	8008e24 <_fflush_r+0xc>
 8008e5a:	89a3      	ldrh	r3, [r4, #12]
 8008e5c:	059b      	lsls	r3, r3, #22
 8008e5e:	d4e1      	bmi.n	8008e24 <_fflush_r+0xc>
 8008e60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008e62:	f7fe f9db 	bl	800721c <__retarget_lock_release_recursive>
 8008e66:	e7dd      	b.n	8008e24 <_fflush_r+0xc>

08008e68 <__swbuf_r>:
 8008e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e6a:	460e      	mov	r6, r1
 8008e6c:	4614      	mov	r4, r2
 8008e6e:	4605      	mov	r5, r0
 8008e70:	b118      	cbz	r0, 8008e7a <__swbuf_r+0x12>
 8008e72:	6a03      	ldr	r3, [r0, #32]
 8008e74:	b90b      	cbnz	r3, 8008e7a <__swbuf_r+0x12>
 8008e76:	f7fe f851 	bl	8006f1c <__sinit>
 8008e7a:	69a3      	ldr	r3, [r4, #24]
 8008e7c:	60a3      	str	r3, [r4, #8]
 8008e7e:	89a3      	ldrh	r3, [r4, #12]
 8008e80:	071a      	lsls	r2, r3, #28
 8008e82:	d501      	bpl.n	8008e88 <__swbuf_r+0x20>
 8008e84:	6923      	ldr	r3, [r4, #16]
 8008e86:	b943      	cbnz	r3, 8008e9a <__swbuf_r+0x32>
 8008e88:	4621      	mov	r1, r4
 8008e8a:	4628      	mov	r0, r5
 8008e8c:	f000 f82a 	bl	8008ee4 <__swsetup_r>
 8008e90:	b118      	cbz	r0, 8008e9a <__swbuf_r+0x32>
 8008e92:	f04f 37ff 	mov.w	r7, #4294967295
 8008e96:	4638      	mov	r0, r7
 8008e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e9a:	6823      	ldr	r3, [r4, #0]
 8008e9c:	6922      	ldr	r2, [r4, #16]
 8008e9e:	1a98      	subs	r0, r3, r2
 8008ea0:	6963      	ldr	r3, [r4, #20]
 8008ea2:	b2f6      	uxtb	r6, r6
 8008ea4:	4283      	cmp	r3, r0
 8008ea6:	4637      	mov	r7, r6
 8008ea8:	dc05      	bgt.n	8008eb6 <__swbuf_r+0x4e>
 8008eaa:	4621      	mov	r1, r4
 8008eac:	4628      	mov	r0, r5
 8008eae:	f7ff ffb3 	bl	8008e18 <_fflush_r>
 8008eb2:	2800      	cmp	r0, #0
 8008eb4:	d1ed      	bne.n	8008e92 <__swbuf_r+0x2a>
 8008eb6:	68a3      	ldr	r3, [r4, #8]
 8008eb8:	3b01      	subs	r3, #1
 8008eba:	60a3      	str	r3, [r4, #8]
 8008ebc:	6823      	ldr	r3, [r4, #0]
 8008ebe:	1c5a      	adds	r2, r3, #1
 8008ec0:	6022      	str	r2, [r4, #0]
 8008ec2:	701e      	strb	r6, [r3, #0]
 8008ec4:	6962      	ldr	r2, [r4, #20]
 8008ec6:	1c43      	adds	r3, r0, #1
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	d004      	beq.n	8008ed6 <__swbuf_r+0x6e>
 8008ecc:	89a3      	ldrh	r3, [r4, #12]
 8008ece:	07db      	lsls	r3, r3, #31
 8008ed0:	d5e1      	bpl.n	8008e96 <__swbuf_r+0x2e>
 8008ed2:	2e0a      	cmp	r6, #10
 8008ed4:	d1df      	bne.n	8008e96 <__swbuf_r+0x2e>
 8008ed6:	4621      	mov	r1, r4
 8008ed8:	4628      	mov	r0, r5
 8008eda:	f7ff ff9d 	bl	8008e18 <_fflush_r>
 8008ede:	2800      	cmp	r0, #0
 8008ee0:	d0d9      	beq.n	8008e96 <__swbuf_r+0x2e>
 8008ee2:	e7d6      	b.n	8008e92 <__swbuf_r+0x2a>

08008ee4 <__swsetup_r>:
 8008ee4:	b538      	push	{r3, r4, r5, lr}
 8008ee6:	4b29      	ldr	r3, [pc, #164]	@ (8008f8c <__swsetup_r+0xa8>)
 8008ee8:	4605      	mov	r5, r0
 8008eea:	6818      	ldr	r0, [r3, #0]
 8008eec:	460c      	mov	r4, r1
 8008eee:	b118      	cbz	r0, 8008ef8 <__swsetup_r+0x14>
 8008ef0:	6a03      	ldr	r3, [r0, #32]
 8008ef2:	b90b      	cbnz	r3, 8008ef8 <__swsetup_r+0x14>
 8008ef4:	f7fe f812 	bl	8006f1c <__sinit>
 8008ef8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008efc:	0719      	lsls	r1, r3, #28
 8008efe:	d422      	bmi.n	8008f46 <__swsetup_r+0x62>
 8008f00:	06da      	lsls	r2, r3, #27
 8008f02:	d407      	bmi.n	8008f14 <__swsetup_r+0x30>
 8008f04:	2209      	movs	r2, #9
 8008f06:	602a      	str	r2, [r5, #0]
 8008f08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f0c:	81a3      	strh	r3, [r4, #12]
 8008f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8008f12:	e033      	b.n	8008f7c <__swsetup_r+0x98>
 8008f14:	0758      	lsls	r0, r3, #29
 8008f16:	d512      	bpl.n	8008f3e <__swsetup_r+0x5a>
 8008f18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008f1a:	b141      	cbz	r1, 8008f2e <__swsetup_r+0x4a>
 8008f1c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008f20:	4299      	cmp	r1, r3
 8008f22:	d002      	beq.n	8008f2a <__swsetup_r+0x46>
 8008f24:	4628      	mov	r0, r5
 8008f26:	f7fe ffd7 	bl	8007ed8 <_free_r>
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	6363      	str	r3, [r4, #52]	@ 0x34
 8008f2e:	89a3      	ldrh	r3, [r4, #12]
 8008f30:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008f34:	81a3      	strh	r3, [r4, #12]
 8008f36:	2300      	movs	r3, #0
 8008f38:	6063      	str	r3, [r4, #4]
 8008f3a:	6923      	ldr	r3, [r4, #16]
 8008f3c:	6023      	str	r3, [r4, #0]
 8008f3e:	89a3      	ldrh	r3, [r4, #12]
 8008f40:	f043 0308 	orr.w	r3, r3, #8
 8008f44:	81a3      	strh	r3, [r4, #12]
 8008f46:	6923      	ldr	r3, [r4, #16]
 8008f48:	b94b      	cbnz	r3, 8008f5e <__swsetup_r+0x7a>
 8008f4a:	89a3      	ldrh	r3, [r4, #12]
 8008f4c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008f50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f54:	d003      	beq.n	8008f5e <__swsetup_r+0x7a>
 8008f56:	4621      	mov	r1, r4
 8008f58:	4628      	mov	r0, r5
 8008f5a:	f000 f8fb 	bl	8009154 <__smakebuf_r>
 8008f5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f62:	f013 0201 	ands.w	r2, r3, #1
 8008f66:	d00a      	beq.n	8008f7e <__swsetup_r+0x9a>
 8008f68:	2200      	movs	r2, #0
 8008f6a:	60a2      	str	r2, [r4, #8]
 8008f6c:	6962      	ldr	r2, [r4, #20]
 8008f6e:	4252      	negs	r2, r2
 8008f70:	61a2      	str	r2, [r4, #24]
 8008f72:	6922      	ldr	r2, [r4, #16]
 8008f74:	b942      	cbnz	r2, 8008f88 <__swsetup_r+0xa4>
 8008f76:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008f7a:	d1c5      	bne.n	8008f08 <__swsetup_r+0x24>
 8008f7c:	bd38      	pop	{r3, r4, r5, pc}
 8008f7e:	0799      	lsls	r1, r3, #30
 8008f80:	bf58      	it	pl
 8008f82:	6962      	ldrpl	r2, [r4, #20]
 8008f84:	60a2      	str	r2, [r4, #8]
 8008f86:	e7f4      	b.n	8008f72 <__swsetup_r+0x8e>
 8008f88:	2000      	movs	r0, #0
 8008f8a:	e7f7      	b.n	8008f7c <__swsetup_r+0x98>
 8008f8c:	20000024 	.word	0x20000024

08008f90 <memmove>:
 8008f90:	4288      	cmp	r0, r1
 8008f92:	b510      	push	{r4, lr}
 8008f94:	eb01 0402 	add.w	r4, r1, r2
 8008f98:	d902      	bls.n	8008fa0 <memmove+0x10>
 8008f9a:	4284      	cmp	r4, r0
 8008f9c:	4623      	mov	r3, r4
 8008f9e:	d807      	bhi.n	8008fb0 <memmove+0x20>
 8008fa0:	1e43      	subs	r3, r0, #1
 8008fa2:	42a1      	cmp	r1, r4
 8008fa4:	d008      	beq.n	8008fb8 <memmove+0x28>
 8008fa6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008faa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008fae:	e7f8      	b.n	8008fa2 <memmove+0x12>
 8008fb0:	4402      	add	r2, r0
 8008fb2:	4601      	mov	r1, r0
 8008fb4:	428a      	cmp	r2, r1
 8008fb6:	d100      	bne.n	8008fba <memmove+0x2a>
 8008fb8:	bd10      	pop	{r4, pc}
 8008fba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008fbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008fc2:	e7f7      	b.n	8008fb4 <memmove+0x24>

08008fc4 <_sbrk_r>:
 8008fc4:	b538      	push	{r3, r4, r5, lr}
 8008fc6:	4d06      	ldr	r5, [pc, #24]	@ (8008fe0 <_sbrk_r+0x1c>)
 8008fc8:	2300      	movs	r3, #0
 8008fca:	4604      	mov	r4, r0
 8008fcc:	4608      	mov	r0, r1
 8008fce:	602b      	str	r3, [r5, #0]
 8008fd0:	f7f8 ff4a 	bl	8001e68 <_sbrk>
 8008fd4:	1c43      	adds	r3, r0, #1
 8008fd6:	d102      	bne.n	8008fde <_sbrk_r+0x1a>
 8008fd8:	682b      	ldr	r3, [r5, #0]
 8008fda:	b103      	cbz	r3, 8008fde <_sbrk_r+0x1a>
 8008fdc:	6023      	str	r3, [r4, #0]
 8008fde:	bd38      	pop	{r3, r4, r5, pc}
 8008fe0:	2000459c 	.word	0x2000459c

08008fe4 <__assert_func>:
 8008fe4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008fe6:	4614      	mov	r4, r2
 8008fe8:	461a      	mov	r2, r3
 8008fea:	4b09      	ldr	r3, [pc, #36]	@ (8009010 <__assert_func+0x2c>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	4605      	mov	r5, r0
 8008ff0:	68d8      	ldr	r0, [r3, #12]
 8008ff2:	b954      	cbnz	r4, 800900a <__assert_func+0x26>
 8008ff4:	4b07      	ldr	r3, [pc, #28]	@ (8009014 <__assert_func+0x30>)
 8008ff6:	461c      	mov	r4, r3
 8008ff8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008ffc:	9100      	str	r1, [sp, #0]
 8008ffe:	462b      	mov	r3, r5
 8009000:	4905      	ldr	r1, [pc, #20]	@ (8009018 <__assert_func+0x34>)
 8009002:	f000 f86f 	bl	80090e4 <fiprintf>
 8009006:	f000 f903 	bl	8009210 <abort>
 800900a:	4b04      	ldr	r3, [pc, #16]	@ (800901c <__assert_func+0x38>)
 800900c:	e7f4      	b.n	8008ff8 <__assert_func+0x14>
 800900e:	bf00      	nop
 8009010:	20000024 	.word	0x20000024
 8009014:	08009d66 	.word	0x08009d66
 8009018:	08009d38 	.word	0x08009d38
 800901c:	08009d2b 	.word	0x08009d2b

08009020 <_calloc_r>:
 8009020:	b570      	push	{r4, r5, r6, lr}
 8009022:	fba1 5402 	umull	r5, r4, r1, r2
 8009026:	b93c      	cbnz	r4, 8009038 <_calloc_r+0x18>
 8009028:	4629      	mov	r1, r5
 800902a:	f7fe ffc9 	bl	8007fc0 <_malloc_r>
 800902e:	4606      	mov	r6, r0
 8009030:	b928      	cbnz	r0, 800903e <_calloc_r+0x1e>
 8009032:	2600      	movs	r6, #0
 8009034:	4630      	mov	r0, r6
 8009036:	bd70      	pop	{r4, r5, r6, pc}
 8009038:	220c      	movs	r2, #12
 800903a:	6002      	str	r2, [r0, #0]
 800903c:	e7f9      	b.n	8009032 <_calloc_r+0x12>
 800903e:	462a      	mov	r2, r5
 8009040:	4621      	mov	r1, r4
 8009042:	f7fe f816 	bl	8007072 <memset>
 8009046:	e7f5      	b.n	8009034 <_calloc_r+0x14>

08009048 <__ascii_mbtowc>:
 8009048:	b082      	sub	sp, #8
 800904a:	b901      	cbnz	r1, 800904e <__ascii_mbtowc+0x6>
 800904c:	a901      	add	r1, sp, #4
 800904e:	b142      	cbz	r2, 8009062 <__ascii_mbtowc+0x1a>
 8009050:	b14b      	cbz	r3, 8009066 <__ascii_mbtowc+0x1e>
 8009052:	7813      	ldrb	r3, [r2, #0]
 8009054:	600b      	str	r3, [r1, #0]
 8009056:	7812      	ldrb	r2, [r2, #0]
 8009058:	1e10      	subs	r0, r2, #0
 800905a:	bf18      	it	ne
 800905c:	2001      	movne	r0, #1
 800905e:	b002      	add	sp, #8
 8009060:	4770      	bx	lr
 8009062:	4610      	mov	r0, r2
 8009064:	e7fb      	b.n	800905e <__ascii_mbtowc+0x16>
 8009066:	f06f 0001 	mvn.w	r0, #1
 800906a:	e7f8      	b.n	800905e <__ascii_mbtowc+0x16>

0800906c <_realloc_r>:
 800906c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009070:	4680      	mov	r8, r0
 8009072:	4615      	mov	r5, r2
 8009074:	460c      	mov	r4, r1
 8009076:	b921      	cbnz	r1, 8009082 <_realloc_r+0x16>
 8009078:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800907c:	4611      	mov	r1, r2
 800907e:	f7fe bf9f 	b.w	8007fc0 <_malloc_r>
 8009082:	b92a      	cbnz	r2, 8009090 <_realloc_r+0x24>
 8009084:	f7fe ff28 	bl	8007ed8 <_free_r>
 8009088:	2400      	movs	r4, #0
 800908a:	4620      	mov	r0, r4
 800908c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009090:	f000 f8c5 	bl	800921e <_malloc_usable_size_r>
 8009094:	4285      	cmp	r5, r0
 8009096:	4606      	mov	r6, r0
 8009098:	d802      	bhi.n	80090a0 <_realloc_r+0x34>
 800909a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800909e:	d8f4      	bhi.n	800908a <_realloc_r+0x1e>
 80090a0:	4629      	mov	r1, r5
 80090a2:	4640      	mov	r0, r8
 80090a4:	f7fe ff8c 	bl	8007fc0 <_malloc_r>
 80090a8:	4607      	mov	r7, r0
 80090aa:	2800      	cmp	r0, #0
 80090ac:	d0ec      	beq.n	8009088 <_realloc_r+0x1c>
 80090ae:	42b5      	cmp	r5, r6
 80090b0:	462a      	mov	r2, r5
 80090b2:	4621      	mov	r1, r4
 80090b4:	bf28      	it	cs
 80090b6:	4632      	movcs	r2, r6
 80090b8:	f7fe f8b1 	bl	800721e <memcpy>
 80090bc:	4621      	mov	r1, r4
 80090be:	4640      	mov	r0, r8
 80090c0:	f7fe ff0a 	bl	8007ed8 <_free_r>
 80090c4:	463c      	mov	r4, r7
 80090c6:	e7e0      	b.n	800908a <_realloc_r+0x1e>

080090c8 <__ascii_wctomb>:
 80090c8:	4603      	mov	r3, r0
 80090ca:	4608      	mov	r0, r1
 80090cc:	b141      	cbz	r1, 80090e0 <__ascii_wctomb+0x18>
 80090ce:	2aff      	cmp	r2, #255	@ 0xff
 80090d0:	d904      	bls.n	80090dc <__ascii_wctomb+0x14>
 80090d2:	228a      	movs	r2, #138	@ 0x8a
 80090d4:	601a      	str	r2, [r3, #0]
 80090d6:	f04f 30ff 	mov.w	r0, #4294967295
 80090da:	4770      	bx	lr
 80090dc:	700a      	strb	r2, [r1, #0]
 80090de:	2001      	movs	r0, #1
 80090e0:	4770      	bx	lr
	...

080090e4 <fiprintf>:
 80090e4:	b40e      	push	{r1, r2, r3}
 80090e6:	b503      	push	{r0, r1, lr}
 80090e8:	4601      	mov	r1, r0
 80090ea:	ab03      	add	r3, sp, #12
 80090ec:	4805      	ldr	r0, [pc, #20]	@ (8009104 <fiprintf+0x20>)
 80090ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80090f2:	6800      	ldr	r0, [r0, #0]
 80090f4:	9301      	str	r3, [sp, #4]
 80090f6:	f7ff fcf3 	bl	8008ae0 <_vfiprintf_r>
 80090fa:	b002      	add	sp, #8
 80090fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009100:	b003      	add	sp, #12
 8009102:	4770      	bx	lr
 8009104:	20000024 	.word	0x20000024

08009108 <__swhatbuf_r>:
 8009108:	b570      	push	{r4, r5, r6, lr}
 800910a:	460c      	mov	r4, r1
 800910c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009110:	2900      	cmp	r1, #0
 8009112:	b096      	sub	sp, #88	@ 0x58
 8009114:	4615      	mov	r5, r2
 8009116:	461e      	mov	r6, r3
 8009118:	da0d      	bge.n	8009136 <__swhatbuf_r+0x2e>
 800911a:	89a3      	ldrh	r3, [r4, #12]
 800911c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009120:	f04f 0100 	mov.w	r1, #0
 8009124:	bf14      	ite	ne
 8009126:	2340      	movne	r3, #64	@ 0x40
 8009128:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800912c:	2000      	movs	r0, #0
 800912e:	6031      	str	r1, [r6, #0]
 8009130:	602b      	str	r3, [r5, #0]
 8009132:	b016      	add	sp, #88	@ 0x58
 8009134:	bd70      	pop	{r4, r5, r6, pc}
 8009136:	466a      	mov	r2, sp
 8009138:	f000 f848 	bl	80091cc <_fstat_r>
 800913c:	2800      	cmp	r0, #0
 800913e:	dbec      	blt.n	800911a <__swhatbuf_r+0x12>
 8009140:	9901      	ldr	r1, [sp, #4]
 8009142:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009146:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800914a:	4259      	negs	r1, r3
 800914c:	4159      	adcs	r1, r3
 800914e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009152:	e7eb      	b.n	800912c <__swhatbuf_r+0x24>

08009154 <__smakebuf_r>:
 8009154:	898b      	ldrh	r3, [r1, #12]
 8009156:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009158:	079d      	lsls	r5, r3, #30
 800915a:	4606      	mov	r6, r0
 800915c:	460c      	mov	r4, r1
 800915e:	d507      	bpl.n	8009170 <__smakebuf_r+0x1c>
 8009160:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009164:	6023      	str	r3, [r4, #0]
 8009166:	6123      	str	r3, [r4, #16]
 8009168:	2301      	movs	r3, #1
 800916a:	6163      	str	r3, [r4, #20]
 800916c:	b003      	add	sp, #12
 800916e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009170:	ab01      	add	r3, sp, #4
 8009172:	466a      	mov	r2, sp
 8009174:	f7ff ffc8 	bl	8009108 <__swhatbuf_r>
 8009178:	9f00      	ldr	r7, [sp, #0]
 800917a:	4605      	mov	r5, r0
 800917c:	4639      	mov	r1, r7
 800917e:	4630      	mov	r0, r6
 8009180:	f7fe ff1e 	bl	8007fc0 <_malloc_r>
 8009184:	b948      	cbnz	r0, 800919a <__smakebuf_r+0x46>
 8009186:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800918a:	059a      	lsls	r2, r3, #22
 800918c:	d4ee      	bmi.n	800916c <__smakebuf_r+0x18>
 800918e:	f023 0303 	bic.w	r3, r3, #3
 8009192:	f043 0302 	orr.w	r3, r3, #2
 8009196:	81a3      	strh	r3, [r4, #12]
 8009198:	e7e2      	b.n	8009160 <__smakebuf_r+0xc>
 800919a:	89a3      	ldrh	r3, [r4, #12]
 800919c:	6020      	str	r0, [r4, #0]
 800919e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091a2:	81a3      	strh	r3, [r4, #12]
 80091a4:	9b01      	ldr	r3, [sp, #4]
 80091a6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80091aa:	b15b      	cbz	r3, 80091c4 <__smakebuf_r+0x70>
 80091ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091b0:	4630      	mov	r0, r6
 80091b2:	f000 f81d 	bl	80091f0 <_isatty_r>
 80091b6:	b128      	cbz	r0, 80091c4 <__smakebuf_r+0x70>
 80091b8:	89a3      	ldrh	r3, [r4, #12]
 80091ba:	f023 0303 	bic.w	r3, r3, #3
 80091be:	f043 0301 	orr.w	r3, r3, #1
 80091c2:	81a3      	strh	r3, [r4, #12]
 80091c4:	89a3      	ldrh	r3, [r4, #12]
 80091c6:	431d      	orrs	r5, r3
 80091c8:	81a5      	strh	r5, [r4, #12]
 80091ca:	e7cf      	b.n	800916c <__smakebuf_r+0x18>

080091cc <_fstat_r>:
 80091cc:	b538      	push	{r3, r4, r5, lr}
 80091ce:	4d07      	ldr	r5, [pc, #28]	@ (80091ec <_fstat_r+0x20>)
 80091d0:	2300      	movs	r3, #0
 80091d2:	4604      	mov	r4, r0
 80091d4:	4608      	mov	r0, r1
 80091d6:	4611      	mov	r1, r2
 80091d8:	602b      	str	r3, [r5, #0]
 80091da:	f7f8 fe1d 	bl	8001e18 <_fstat>
 80091de:	1c43      	adds	r3, r0, #1
 80091e0:	d102      	bne.n	80091e8 <_fstat_r+0x1c>
 80091e2:	682b      	ldr	r3, [r5, #0]
 80091e4:	b103      	cbz	r3, 80091e8 <_fstat_r+0x1c>
 80091e6:	6023      	str	r3, [r4, #0]
 80091e8:	bd38      	pop	{r3, r4, r5, pc}
 80091ea:	bf00      	nop
 80091ec:	2000459c 	.word	0x2000459c

080091f0 <_isatty_r>:
 80091f0:	b538      	push	{r3, r4, r5, lr}
 80091f2:	4d06      	ldr	r5, [pc, #24]	@ (800920c <_isatty_r+0x1c>)
 80091f4:	2300      	movs	r3, #0
 80091f6:	4604      	mov	r4, r0
 80091f8:	4608      	mov	r0, r1
 80091fa:	602b      	str	r3, [r5, #0]
 80091fc:	f7f8 fe1c 	bl	8001e38 <_isatty>
 8009200:	1c43      	adds	r3, r0, #1
 8009202:	d102      	bne.n	800920a <_isatty_r+0x1a>
 8009204:	682b      	ldr	r3, [r5, #0]
 8009206:	b103      	cbz	r3, 800920a <_isatty_r+0x1a>
 8009208:	6023      	str	r3, [r4, #0]
 800920a:	bd38      	pop	{r3, r4, r5, pc}
 800920c:	2000459c 	.word	0x2000459c

08009210 <abort>:
 8009210:	b508      	push	{r3, lr}
 8009212:	2006      	movs	r0, #6
 8009214:	f000 f834 	bl	8009280 <raise>
 8009218:	2001      	movs	r0, #1
 800921a:	f7f8 fdad 	bl	8001d78 <_exit>

0800921e <_malloc_usable_size_r>:
 800921e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009222:	1f18      	subs	r0, r3, #4
 8009224:	2b00      	cmp	r3, #0
 8009226:	bfbc      	itt	lt
 8009228:	580b      	ldrlt	r3, [r1, r0]
 800922a:	18c0      	addlt	r0, r0, r3
 800922c:	4770      	bx	lr

0800922e <_raise_r>:
 800922e:	291f      	cmp	r1, #31
 8009230:	b538      	push	{r3, r4, r5, lr}
 8009232:	4605      	mov	r5, r0
 8009234:	460c      	mov	r4, r1
 8009236:	d904      	bls.n	8009242 <_raise_r+0x14>
 8009238:	2316      	movs	r3, #22
 800923a:	6003      	str	r3, [r0, #0]
 800923c:	f04f 30ff 	mov.w	r0, #4294967295
 8009240:	bd38      	pop	{r3, r4, r5, pc}
 8009242:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009244:	b112      	cbz	r2, 800924c <_raise_r+0x1e>
 8009246:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800924a:	b94b      	cbnz	r3, 8009260 <_raise_r+0x32>
 800924c:	4628      	mov	r0, r5
 800924e:	f000 f831 	bl	80092b4 <_getpid_r>
 8009252:	4622      	mov	r2, r4
 8009254:	4601      	mov	r1, r0
 8009256:	4628      	mov	r0, r5
 8009258:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800925c:	f000 b818 	b.w	8009290 <_kill_r>
 8009260:	2b01      	cmp	r3, #1
 8009262:	d00a      	beq.n	800927a <_raise_r+0x4c>
 8009264:	1c59      	adds	r1, r3, #1
 8009266:	d103      	bne.n	8009270 <_raise_r+0x42>
 8009268:	2316      	movs	r3, #22
 800926a:	6003      	str	r3, [r0, #0]
 800926c:	2001      	movs	r0, #1
 800926e:	e7e7      	b.n	8009240 <_raise_r+0x12>
 8009270:	2100      	movs	r1, #0
 8009272:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009276:	4620      	mov	r0, r4
 8009278:	4798      	blx	r3
 800927a:	2000      	movs	r0, #0
 800927c:	e7e0      	b.n	8009240 <_raise_r+0x12>
	...

08009280 <raise>:
 8009280:	4b02      	ldr	r3, [pc, #8]	@ (800928c <raise+0xc>)
 8009282:	4601      	mov	r1, r0
 8009284:	6818      	ldr	r0, [r3, #0]
 8009286:	f7ff bfd2 	b.w	800922e <_raise_r>
 800928a:	bf00      	nop
 800928c:	20000024 	.word	0x20000024

08009290 <_kill_r>:
 8009290:	b538      	push	{r3, r4, r5, lr}
 8009292:	4d07      	ldr	r5, [pc, #28]	@ (80092b0 <_kill_r+0x20>)
 8009294:	2300      	movs	r3, #0
 8009296:	4604      	mov	r4, r0
 8009298:	4608      	mov	r0, r1
 800929a:	4611      	mov	r1, r2
 800929c:	602b      	str	r3, [r5, #0]
 800929e:	f7f8 fd5b 	bl	8001d58 <_kill>
 80092a2:	1c43      	adds	r3, r0, #1
 80092a4:	d102      	bne.n	80092ac <_kill_r+0x1c>
 80092a6:	682b      	ldr	r3, [r5, #0]
 80092a8:	b103      	cbz	r3, 80092ac <_kill_r+0x1c>
 80092aa:	6023      	str	r3, [r4, #0]
 80092ac:	bd38      	pop	{r3, r4, r5, pc}
 80092ae:	bf00      	nop
 80092b0:	2000459c 	.word	0x2000459c

080092b4 <_getpid_r>:
 80092b4:	f7f8 bd48 	b.w	8001d48 <_getpid>

080092b8 <_init>:
 80092b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ba:	bf00      	nop
 80092bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092be:	bc08      	pop	{r3}
 80092c0:	469e      	mov	lr, r3
 80092c2:	4770      	bx	lr

080092c4 <_fini>:
 80092c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092c6:	bf00      	nop
 80092c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092ca:	bc08      	pop	{r3}
 80092cc:	469e      	mov	lr, r3
 80092ce:	4770      	bx	lr
